step(normalization).
step(features).
step(mitigation).
step(rebalancing).

step(classification).

operator(normalization, power_transformer).
operator(normalization, robust_scaler).
operator(normalization, standard).
operator(normalization, minmax).
operator(features, select_k_best).
operator(features, pca).
operator(mitigation, corr_remover).
operator(mitigation, lfr).
operator(rebalancing, near_miss).
operator(rebalancing, smote).

operator(classification, knn).
operator(classification, nn).
operator(classification, rf).

hyperparameter(robust_scaler, with_centering, choice).
hyperparameter(robust_scaler, with_scaling, choice).
hyperparameter(standard, with_mean, choice).
hyperparameter(standard, with_std, choice).
hyperparameter(select_k_best, k, randint).
hyperparameter(pca, n_components, randint).
hyperparameter(corr_remover, alpha, choice).
hyperparameter(lfr, n_prototypes, choice).
hyperparameter(lfr, reconstruct_weight, choice).
hyperparameter(lfr, fairness_weight, choice).
hyperparameter(near_miss, n_neighbors, randint).
hyperparameter(smote, k_neighbors, randint).

hyperparameter(knn, n_neighbors, randint).
hyperparameter(knn, weights, choice).
hyperparameter(knn, metric, choice).
hyperparameter(nn, n_hidden_layers, choice).
hyperparameter(nn, n_neurons, choice).
hyperparameter(nn, activation, choice).
hyperparameter(nn, solver, choice).
hyperparameter(nn, alpha, choice).
hyperparameter(nn, learning_rate, choice).
hyperparameter(rf, n_estimators, choice).
hyperparameter(rf, max_depth, randint).
hyperparameter(rf, max_features, randint).
hyperparameter(rf, min_samples_split, randint).
hyperparameter(rf, max_leaf_nodes, randint).
hyperparameter(rf, bootstrap, choice).
hyperparameter(rf, criterion, choice).

domain(robust_scaler, with_centering, [true, false]).
domain(robust_scaler, with_scaling, [true, false]).
domain(standard, with_mean, [true, false]).
domain(standard, with_std, [true, false]).
domain(select_k_best, k, [1, 10]).
domain(pca, n_components, [1, 8]).
domain(corr_remover, alpha,  [0.25, 0.5, 0.75, 1.0]).
domain(lfr, n_prototypes,  [10, 50, 100, 200]).
domain(lfr, reconstruct_weight,  [0.1, 0.5, 1.0, 2.0]).
domain(lfr, fairness_weight,  [0.1, 0.5, 1.0, 2.0]).
domain(near_miss, n_neighbors,  [1, 4]).
domain(smote, k_neighbors,  [5, 8]).

domain(knn, n_neighbors, [3, 20]).
domain(knn, weights, ["uniform", "distance"]).
domain(knn, metric, ["minkowski", "euclidean", "manhattan"]).
domain(nn, n_hidden_layers, [1, 5, 10, 20]).
domain(nn, n_neurons, [5, 10, 25, 50]).
domain(nn, activation, ["logistic", "tanh", "relu"]).
domain(nn, solver, ["lbfgs", "sgd", "adam"]).
domain(nn, alpha, [0.0001, 0.001, 0.01, 0.00001]).
domain(nn, learning_rate, ["constant", "invscaling", "adaptive"]).
domain(rf, n_estimators, [10, 25, 50, 75, 100]).
domain(rf, max_depth, [1, 5]).
domain(rf, max_features, [1, 4]).
domain(rf, min_samples_split, [2, 6]).
domain(rf, max_leaf_nodes, [2, 6]).
domain(rf, bootstrap, [true, false]).
domain(rf, criterion, ["gini", "entropy"]).