Sensitive groups ready!
Theory ready!
Theory:
step(normalization) :- true.
step(features) :- true.
step(mitigation) :- true.
step(rebalancing) :- true.
step(classification) :- true.
operator(normalization, power_transformer) :- true.
operator(normalization, robust_scaler) :- true.
operator(normalization, standard) :- true.
operator(normalization, minmax) :- true.
operator(features, select_k_best) :- true.
operator(features, pca) :- true.
operator(mitigation, corr_remover) :- true.
operator(mitigation, lfr) :- true.
operator(rebalancing, near_miss) :- true.
operator(rebalancing, smote) :- true.
operator(classification, knn) :- true.
operator(classification, nn) :- true.
operator(classification, rf) :- true.
hyperparameter(robust_scaler, with_centering, choice) :- true.
hyperparameter(robust_scaler, with_scaling, choice) :- true.
hyperparameter(standard, with_mean, choice) :- true.
hyperparameter(standard, with_std, choice) :- true.
hyperparameter(select_k_best, k, randint) :- true.
hyperparameter(pca, n_components, randint) :- true.
hyperparameter(corr_remover, alpha, choice) :- true.
hyperparameter(lfr, n_prototypes, choice) :- true.
hyperparameter(lfr, reconstruct_weight, choice) :- true.
hyperparameter(lfr, fairness_weight, choice) :- true.
hyperparameter(near_miss, n_neighbors, randint) :- true.
hyperparameter(smote, k_neighbors, randint) :- true.
hyperparameter(knn, n_neighbors, randint) :- true.
hyperparameter(knn, weights, choice) :- true.
hyperparameter(knn, metric, choice) :- true.
hyperparameter(nn, n_hidden_layers, choice) :- true.
hyperparameter(nn, n_neurons, choice) :- true.
hyperparameter(nn, activation, choice) :- true.
hyperparameter(nn, solver, choice) :- true.
hyperparameter(nn, alpha, choice) :- true.
hyperparameter(nn, learning_rate, choice) :- true.
hyperparameter(rf, n_estimators, choice) :- true.
hyperparameter(rf, max_depth, randint) :- true.
hyperparameter(rf, max_features, randint) :- true.
hyperparameter(rf, min_samples_split, randint) :- true.
hyperparameter(rf, max_leaf_nodes, randint) :- true.
hyperparameter(rf, bootstrap, choice) :- true.
hyperparameter(rf, criterion, choice) :- true.
domain(robust_scaler, with_centering, [true, false]) :- true.
domain(robust_scaler, with_scaling, [true, false]) :- true.
domain(standard, with_mean, [true, false]) :- true.
domain(standard, with_std, [true, false]) :- true.
domain(select_k_best, k, [1, 10]) :- true.
domain(pca, n_components, [1, 8]) :- true.
domain(corr_remover, alpha, [0.25, 0.5, 0.75, 1.0]) :- true.
domain(lfr, n_prototypes, [10, 50, 100, 200]) :- true.
domain(lfr, reconstruct_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(lfr, fairness_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(near_miss, n_neighbors, [1, 4]) :- true.
domain(smote, k_neighbors, [5, 8]) :- true.
domain(knn, n_neighbors, [3, 20]) :- true.
domain(knn, weights, [uniform, distance]) :- true.
domain(knn, metric, [minkowski, euclidean, manhattan]) :- true.
domain(nn, n_hidden_layers, [1, 5, 10, 20]) :- true.
domain(nn, n_neurons, [5, 10, 25, 50]) :- true.
domain(nn, activation, [logistic, tanh, relu]) :- true.
domain(nn, solver, [lbfgs, sgd, adam]) :- true.
domain(nn, alpha, [0.0001, 0.001, 0.01, 0.00001]) :- true.
domain(nn, learning_rate, [constant, invscaling, adaptive]) :- true.
domain(rf, n_estimators, [10, 25, 50, 75, 100]) :- true.
domain(rf, max_depth, [1, 5]) :- true.
domain(rf, max_features, [1, 4]) :- true.
domain(rf, min_samples_split, [2, 6]) :- true.
domain(rf, max_leaf_nodes, [2, 6]) :- true.
domain(rf, bootstrap, [true, false]) :- true.
domain(rf, criterion, [gini, entropy]) :- true.
dataset(adult) :- true.
metric(balanced_accuracy) :- true.
fairness_metric(demographic_parity_ratio) :- true.
sensitive_feature(sex, ['Male', 'Female']) :- true.
sensitive_feature(race, ['Amer-Indian-Eskimo', 'Asian-Pac-Islander', 'Black', 'Other', 'White']) :- true.
':=>'(mc0, unbalanced_dataset) :- true.
pipeline([Step_1_0], ZZ_0) :- (step(Step_1_0), '\\='(Step_1_0, classification), operator(classification, ZZ_0)).
pipeline([Step_1_1, Step_2_0], ZZ_1) :- (step(Step_1_1), step(Step_2_0), '\\='(Step_1_1, classification), '\\='(Step_2_0, classification), '\\='(Step_1_1, Step_2_0), operator(classification, ZZ_1)).
pipeline([Step_1_2, Step_2_1, Step_3_0], ZZ_2) :- (step(Step_1_2), step(Step_2_1), step(Step_3_0), '\\='(Step_1_2, classification), '\\='(Step_2_1, classification), '\\='(Step_3_0, classification), '\\='(Step_1_2, Step_2_1), '\\='(Step_1_2, Step_3_0), '\\='(Step_2_1, Step_3_0), operator(classification, ZZ_2)).
pipeline([Step_1_3, Step_2_2, Step_3_1, Step_4_0], ZZ_3) :- (step(Step_1_3), step(Step_2_2), step(Step_3_1), step(Step_4_0), '\\='(Step_1_3, classification), '\\='(Step_2_2, classification), '\\='(Step_3_1, classification), '\\='(Step_4_0, classification), '\\='(Step_1_3, Step_2_2), '\\='(Step_1_3, Step_3_1), '\\='(Step_1_3, Step_4_0), '\\='(Step_2_2, Step_3_1), '\\='(Step_2_2, Step_4_0), '\\='(Step_3_1, Step_4_0), operator(classification, ZZ_3)).
':=>'(p176889, sensitive_group(['Male'])) :- true.
':=>'(p416034, sensitive_group(['Female'])) :- true.
':=>'(p674539, sensitive_group(['Amer-Indian-Eskimo'])) :- true.
':=>'(p70328, sensitive_group(['Asian-Pac-Islander'])) :- true.
':=>'(p839637, sensitive_group(['Black'])) :- true.
':=>'(p867328, sensitive_group(['Other'])) :- true.
':=>'(p646185, sensitive_group(['White'])) :- true.
':=>'(p478101, sensitive_group(['Male', 'Amer-Indian-Eskimo'])) :- true.
':=>'(p358304, sensitive_group(['Male', 'Asian-Pac-Islander'])) :- true.
':=>'(p744070, sensitive_group(['Male', 'Black'])) :- true.
':=>'(p293699, sensitive_group(['Male', 'Other'])) :- true.
':=>'(p473138, sensitive_group(['Male', 'White'])) :- true.
':=>'(p441434, sensitive_group(['Female', 'Amer-Indian-Eskimo'])) :- true.
':=>'(p993912, sensitive_group(['Female', 'Asian-Pac-Islander'])) :- true.
':=>'(p309903, sensitive_group(['Female', 'Black'])) :- true.
':=>'(p284172, sensitive_group(['Female', 'Other'])) :- true.
':=>'(p717918, sensitive_group(['Female', 'White'])) :- true.

Checking Config
Exporting Config
Saving Graph
Exporting AutoML input
Exporting Space
Exporting Constraints
Input created for iteration Config(iteration=2, dataset=adult, metric=balanced_accuracy, fairnessMetric=demographic_parity_ratio, sensitiveFeatures=[sex, race], mode=max, batchSize=999999, timeBudget=900, seed=42)
Here is the standard output/error of the command:

d40fea429480caec5e508f4c041092d420000a4b26591673dee5bb5ed17f1f48
Here is the standard output/error of the command:

Here is the standard output/error of the command:

WARNING:root:No module named 'rpy2': FairAdapt will be unavailable. To install, run:
pip install 'aif360[FairAdapt]'
INFO:flaml.tune.searcher.blendsearch:No low-cost partial config given to the search algorithm. For cost-frugal search, consider providing low-cost values for cost-related hps via 'low_cost_partial_config'. More info can be found at https://microsoft.github.io/FLAML/docs/FAQ#about-low_cost_partial_config-in-tune
AutoML: starting optimization.
22
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(10), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.37099053303679674), 'balanced_accuracy': np.float64(0.5033117864272565), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.81), 'Asian-Pac-Islander_Male': np.float64(0.78), 'Black_Female': np.float64(0.55), 'Black_Male': np.float64(0.42), 'White_Female': np.float64(0.79), 'White_Male': np.float64(0.76)}, 'status': 'success', 'total_time': 21.912041902542114, 'fit_time': np.float64(4.101560974121094), 'score_time': np.float64(0.08890886306762695), 'absolute_time': 1746701485.6440196, 'flatten_demographic_parity_ratio': '0.14_0.31_0.64_0.23_0.54', 'flatten_balanced_accuracy': '0.49_0.5_0.52_0.5_0.5'}
23
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.0), 'balanced_accuracy': np.float64(0.7257019268131429), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.21), 'Asian-Pac-Islander_Male': np.float64(0.61), 'Black_Female': np.float64(0.25), 'Black_Male': np.float64(0.53), 'White_Female': np.float64(0.0), 'White_Male': np.float64(1.0)}, 'status': 'success', 'total_time': 4.882326126098633, 'fit_time': np.float64(0.8991691112518311), 'score_time': np.float64(0.012392997741699219), 'absolute_time': 1746701490.591644, 'flatten_demographic_parity_ratio': '0.0_0.0_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.72_0.72_0.72_0.73_0.73'}
The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')} was NaN

24
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.4996246833985724), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.33), 'Asian-Pac-Islander_Male': np.float64(0.28), 'Black_Female': np.float64(0.09), 'Black_Male': np.float64(0.02), 'White_Female': np.float64(0.22), 'White_Male': np.float64(0.82)}, 'status': 'fail', 'total_time': 96.75724458694458, 'fit_time': np.float64(17.31317777633667), 'score_time': np.float64(0.9899529933929443), 'absolute_time': 1746701587.4128814, 'flatten_demographic_parity_ratio': '0.0_0.07_nan_nan_0.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')} was NaN

25
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.504189343300977), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.5), 'Asian-Pac-Islander_Male': np.float64(0.16), 'Black_Female': np.float64(0.16), 'Black_Male': np.float64(0.13), 'White_Female': np.float64(0.37), 'White_Male': np.float64(0.67)}, 'status': 'fail', 'total_time': 68.08998203277588, 'fit_time': np.float64(6.3020120620727536), 'score_time': np.float64(3.619212293624878), 'absolute_time': 1746701655.5694776, 'flatten_demographic_parity_ratio': '0.0_nan_0.0_0.54_0.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.52_0.5'}
26
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 3, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('SelectKBest'), 'k': 1}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.02429381112303568), 'balanced_accuracy': np.float64(0.6615853346748451), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.65), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.21), 'Black_Male': np.float64(0.25), 'White_Female': np.float64(0.02), 'White_Male': np.float64(0.38)}, 'status': 'success', 'total_time': 1.057128667831421, 'fit_time': np.float64(0.12255373001098632), 'score_time': np.float64(0.01131596565246582), 'absolute_time': 1746701656.6931205, 'flatten_demographic_parity_ratio': '0.02_0.03_0.03_0.03_0.02', 'flatten_balanced_accuracy': '0.66_0.66_0.67_0.66_0.66'}
27
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.7616311844463894), 'balanced_accuracy': np.float64(0.5058530452729025), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.85), 'Asian-Pac-Islander_Male': np.float64(0.91), 'Black_Female': np.float64(0.93), 'Black_Male': np.float64(0.83), 'White_Female': np.float64(0.89), 'White_Male': np.float64(0.89)}, 'status': 'success', 'total_time': 83.7129328250885, 'fit_time': np.float64(3.853888416290283), 'score_time': np.float64(0.023741483688354492), 'absolute_time': 1746701740.4777534, 'flatten_demographic_parity_ratio': '0.63_1.0_0.69_0.75_0.74', 'flatten_balanced_accuracy': '0.51_0.5_0.5_0.51_0.51'}
28
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 6, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.518831375181778), 'balanced_accuracy': np.float64(0.5864318488605061), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.86), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.7), 'Black_Male': np.float64(0.76), 'White_Female': np.float64(0.55), 'White_Male': np.float64(0.82)}, 'status': 'success', 'total_time': 2.4024767875671387, 'fit_time': np.float64(0.4102803707122803), 'score_time': np.float64(0.008692789077758788), 'absolute_time': 1746701742.950958, 'flatten_demographic_parity_ratio': '0.72_0.28_0.27_0.63_0.7', 'flatten_balanced_accuracy': '0.57_0.61_0.6_0.58_0.57'}
29
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.3503986585811093), 'balanced_accuracy': np.float64(0.49241031396298984), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.36), 'Asian-Pac-Islander_Male': np.float64(0.48), 'Black_Female': np.float64(0.86), 'Black_Male': np.float64(1.0), 'White_Female': np.float64(0.7), 'White_Male': np.float64(0.74)}, 'status': 'success', 'total_time': 11.52557897567749, 'fit_time': np.float64(1.9677793502807617), 'score_time': np.float64(0.12391862869262696), 'absolute_time': 1746701754.5470612, 'flatten_demographic_parity_ratio': '0.32_0.32_0.39_0.31_0.4', 'flatten_balanced_accuracy': '0.49_0.5_0.49_0.49_0.5'}
The result for {'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

30
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5074406315350215), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.3), 'Asian-Pac-Islander_Male': np.float64(0.0), 'Black_Female': np.float64(0.07), 'Black_Male': np.float64(0.34), 'White_Female': np.float64(0.36), 'White_Male': np.float64(1.0)}, 'status': 'fail', 'total_time': 1.9874978065490723, 'fit_time': np.float64(0.3264028549194336), 'score_time': np.float64(0.009354877471923827), 'absolute_time': 1746701757.5680807, 'flatten_demographic_parity_ratio': 'nan_0.0_0.0_nan_nan', 'flatten_balanced_accuracy': '0.5_0.52_0.52_0.5_0.5'}
31
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 2, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.016388903888419494), 'balanced_accuracy': np.float64(0.752224952546168), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.03), 'Asian-Pac-Islander_Male': np.float64(0.98), 'Black_Female': np.float64(0.02), 'Black_Male': np.float64(0.69), 'White_Female': np.float64(0.03), 'White_Male': np.float64(1.0)}, 'status': 'success', 'total_time': 2.4666898250579834, 'fit_time': np.float64(0.35880537033081056), 'score_time': np.float64(0.022690725326538087), 'absolute_time': 1746701760.1069508, 'flatten_demographic_parity_ratio': '0.01_0.02_0.03_0.01_0.02', 'flatten_balanced_accuracy': '0.75_0.75_0.75_0.75_0.75'}
The result for {'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

32
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5), 'by_group': {'Asian-Pac-Islander_Female': -inf, 'Asian-Pac-Islander_Male': -inf, 'Black_Female': -inf, 'Black_Male': -inf, 'White_Female': -inf, 'White_Male': -inf}, 'status': 'fail', 'total_time': 2.0987844467163086, 'fit_time': np.float64(0.3451193332672119), 'score_time': np.float64(0.010659027099609374), 'absolute_time': 1746701762.2800524, 'flatten_demographic_parity_ratio': 'nan_nan_nan_nan_nan', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

33
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5), 'by_group': {'Asian-Pac-Islander_Female': -inf, 'Asian-Pac-Islander_Male': -inf, 'Black_Female': -inf, 'Black_Male': -inf, 'White_Female': -inf, 'White_Male': -inf}, 'status': 'fail', 'total_time': 4.513772010803223, 'fit_time': np.float64(0.8263294696807861), 'score_time': np.float64(0.011857700347900391), 'absolute_time': 1746701766.869126, 'flatten_demographic_parity_ratio': 'nan_nan_nan_nan_nan', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
34
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 9, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.013488372093023258), 'balanced_accuracy': np.float64(0.5004337250044022), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.2), 'Asian-Pac-Islander_Male': np.float64(0.27), 'Black_Female': np.float64(0.03), 'Black_Male': np.float64(0.21), 'White_Female': np.float64(0.1), 'White_Male': np.float64(0.54)}, 'status': 'success', 'total_time': 26.166693687438965, 'fit_time': np.float64(4.322996711730957), 'score_time': np.float64(0.430141544342041), 'absolute_time': 1746701793.1095042, 'flatten_demographic_parity_ratio': '0.0_0.0_0.0_0.07_0.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
35
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(50), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.16885169259007132), 'balanced_accuracy': np.float64(0.8138867206877867), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.46), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.17), 'Black_Male': np.float64(0.59), 'White_Female': np.float64(0.29), 'White_Male': np.float64(0.93)}, 'status': 'success', 'total_time': 396.52243185043335, 'fit_time': np.float64(79.08806147575379), 'score_time': np.float64(0.08110952377319336), 'absolute_time': 1746702189.711248, 'flatten_demographic_parity_ratio': '0.21_0.16_0.15_0.15_0.17', 'flatten_balanced_accuracy': '0.82_0.81_0.81_0.82_0.81'}
36
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.013618837502716316), 'balanced_accuracy': np.float64(0.7278775510305835), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.03), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.02), 'Black_Male': np.float64(0.42), 'White_Female': np.float64(0.05), 'White_Male': np.float64(0.72)}, 'status': 'success', 'total_time': 18.915907382965088, 'fit_time': np.float64(3.7109275341033934), 'score_time': np.float64(0.00952320098876953), 'absolute_time': 1746702208.7095592, 'flatten_demographic_parity_ratio': '0.01_0.04_0.0_0.0_0.03', 'flatten_balanced_accuracy': '0.71_0.73_0.72_0.75_0.73'}
37
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.19229301392377182), 'balanced_accuracy': np.float64(0.7589537869555485), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.5), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.19), 'Black_Male': np.float64(0.67), 'White_Female': np.float64(0.3), 'White_Male': np.float64(0.94)}, 'status': 'success', 'total_time': 1.557291030883789, 'fit_time': np.float64(0.224503755569458), 'score_time': np.float64(0.011621522903442382), 'absolute_time': 1746702210.3505588, 'flatten_demographic_parity_ratio': '0.18_0.15_0.18_0.24_0.21', 'flatten_balanced_accuracy': '0.76_0.76_0.75_0.76_0.76'}
38
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 2, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.47678511218281194), 'balanced_accuracy': np.float64(0.6116129465350355), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.92), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.56), 'Black_Male': np.float64(0.49), 'White_Female': np.float64(0.52), 'White_Male': np.float64(0.64)}, 'status': 'success', 'total_time': 7.63173770904541, 'fit_time': np.float64(1.4484355449676514), 'score_time': np.float64(0.012499332427978516), 'absolute_time': 1746702219.0907156, 'flatten_demographic_parity_ratio': '0.46_0.51_0.5_0.5_0.42', 'flatten_balanced_accuracy': '0.64_0.6_0.61_0.6_0.61'}
39
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_split': 6, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.4157720324130274), 'balanced_accuracy': np.float64(0.6995925331743575), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.69), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.42), 'Black_Male': np.float64(0.54), 'White_Female': np.float64(0.52), 'White_Male': np.float64(0.83)}, 'status': 'success', 'total_time': 6.806086540222168, 'fit_time': np.float64(1.2736963272094726), 'score_time': np.float64(0.017272472381591797), 'absolute_time': 1746702225.987217, 'flatten_demographic_parity_ratio': '0.46_0.41_0.36_0.45_0.39', 'flatten_balanced_accuracy': '0.7_0.69_0.71_0.68_0.71'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

40
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 4, 'min_samples_split': 5, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'Asian-Pac-Islander_Female': -inf, 'Asian-Pac-Islander_Male': -inf, 'Black_Female': -inf, 'Black_Male': -inf, 'White_Female': -inf, 'White_Male': -inf}, 'status': 'fail', 'total_time': 0.00045800209045410156, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746702226.081557}
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')} was NaN

41
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5), 'by_group': {'Asian-Pac-Islander_Female': np.float64(1.0), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(1.0), 'Black_Male': np.float64(1.0), 'White_Female': np.float64(1.0), 'White_Male': np.float64(1.0)}, 'status': 'fail', 'total_time': 46.165475845336914, 'fit_time': np.float64(9.112970924377441), 'score_time': np.float64(0.021576786041259767), 'absolute_time': 1746702272.3377264, 'flatten_demographic_parity_ratio': 'nan_1.0_1.0_nan_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
42
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 6, 'n_estimators': np.int64(100)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.6468771318427395), 'balanced_accuracy': np.float64(0.5088314101428075), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.82), 'Asian-Pac-Islander_Male': np.float64(0.81), 'Black_Female': np.float64(0.93), 'Black_Male': np.float64(0.79), 'White_Female': np.float64(0.89), 'White_Male': np.float64(0.88)}, 'status': 'success', 'total_time': 17.999504327774048, 'fit_time': np.float64(3.450672960281372), 'score_time': np.float64(0.04830751419067383), 'absolute_time': 1746702290.4417336, 'flatten_demographic_parity_ratio': '0.6_0.57_0.69_0.6_0.77', 'flatten_balanced_accuracy': '0.53_0.51_0.5_0.5_0.51'}
43
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.474975762109612), 'balanced_accuracy': np.float64(0.701101154435791), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.86), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.6), 'Black_Male': np.float64(0.47), 'White_Female': np.float64(0.7), 'White_Male': np.float64(0.71)}, 'status': 'success', 'total_time': 19.5666925907135, 'fit_time': np.float64(3.8344905853271483), 'score_time': np.float64(0.012668418884277343), 'absolute_time': 1746702310.108696, 'flatten_demographic_parity_ratio': '0.39_0.52_0.45_0.61_0.4', 'flatten_balanced_accuracy': '0.68_0.72_0.71_0.7_0.69'}
The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 14, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 14, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')} was NaN

44
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 14, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5001200142573928), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.0), 'Asian-Pac-Islander_Male': np.float64(0.0), 'Black_Female': np.float64(0.25), 'Black_Male': np.float64(0.0), 'White_Female': np.float64(0.11), 'White_Male': np.float64(0.75)}, 'status': 'fail', 'total_time': 55.109212160110474, 'fit_time': np.float64(6.816754770278931), 'score_time': np.float64(2.0682811737060547), 'absolute_time': 1746702365.3194623, 'flatten_demographic_parity_ratio': '0.0_nan_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
AutoML: optimization done.
AutoML: miner done.
AutoML: export done.
Here is the standard output/error of the command:

Here is the standard output/error of the command:

Here is the standard output/error of the command:

hamlet_165520176
AutoML execution ended
