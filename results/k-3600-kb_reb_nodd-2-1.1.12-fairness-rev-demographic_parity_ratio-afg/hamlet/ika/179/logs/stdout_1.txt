Sensitive groups ready!
Theory ready!
Theory:
step(normalization) :- true.
step(features) :- true.
step(mitigation) :- true.
step(rebalancing) :- true.
step(classification) :- true.
operator(normalization, power_transformer) :- true.
operator(normalization, robust_scaler) :- true.
operator(normalization, standard) :- true.
operator(normalization, minmax) :- true.
operator(features, select_k_best) :- true.
operator(features, pca) :- true.
operator(mitigation, corr_remover) :- true.
operator(mitigation, lfr) :- true.
operator(rebalancing, near_miss) :- true.
operator(rebalancing, smote) :- true.
operator(classification, knn) :- true.
operator(classification, nn) :- true.
operator(classification, rf) :- true.
hyperparameter(robust_scaler, with_centering, choice) :- true.
hyperparameter(robust_scaler, with_scaling, choice) :- true.
hyperparameter(standard, with_mean, choice) :- true.
hyperparameter(standard, with_std, choice) :- true.
hyperparameter(select_k_best, k, randint) :- true.
hyperparameter(pca, n_components, randint) :- true.
hyperparameter(corr_remover, alpha, choice) :- true.
hyperparameter(lfr, n_prototypes, choice) :- true.
hyperparameter(lfr, reconstruct_weight, choice) :- true.
hyperparameter(lfr, fairness_weight, choice) :- true.
hyperparameter(near_miss, n_neighbors, randint) :- true.
hyperparameter(smote, k_neighbors, randint) :- true.
hyperparameter(knn, n_neighbors, randint) :- true.
hyperparameter(knn, weights, choice) :- true.
hyperparameter(knn, metric, choice) :- true.
hyperparameter(nn, n_hidden_layers, choice) :- true.
hyperparameter(nn, n_neurons, choice) :- true.
hyperparameter(nn, activation, choice) :- true.
hyperparameter(nn, solver, choice) :- true.
hyperparameter(nn, alpha, choice) :- true.
hyperparameter(nn, learning_rate, choice) :- true.
hyperparameter(rf, n_estimators, choice) :- true.
hyperparameter(rf, max_depth, randint) :- true.
hyperparameter(rf, max_features, randint) :- true.
hyperparameter(rf, min_samples_split, randint) :- true.
hyperparameter(rf, max_leaf_nodes, randint) :- true.
hyperparameter(rf, bootstrap, choice) :- true.
hyperparameter(rf, criterion, choice) :- true.
domain(robust_scaler, with_centering, [true, false]) :- true.
domain(robust_scaler, with_scaling, [true, false]) :- true.
domain(standard, with_mean, [true, false]) :- true.
domain(standard, with_std, [true, false]) :- true.
domain(select_k_best, k, [1, 10]) :- true.
domain(pca, n_components, [1, 8]) :- true.
domain(corr_remover, alpha, [0.25, 0.5, 0.75, 1.0]) :- true.
domain(lfr, n_prototypes, [10, 50, 100, 200]) :- true.
domain(lfr, reconstruct_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(lfr, fairness_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(near_miss, n_neighbors, [1, 4]) :- true.
domain(smote, k_neighbors, [5, 8]) :- true.
domain(knn, n_neighbors, [3, 20]) :- true.
domain(knn, weights, [uniform, distance]) :- true.
domain(knn, metric, [minkowski, euclidean, manhattan]) :- true.
domain(nn, n_hidden_layers, [1, 5, 10, 20]) :- true.
domain(nn, n_neurons, [5, 10, 25, 50]) :- true.
domain(nn, activation, [logistic, tanh, relu]) :- true.
domain(nn, solver, [lbfgs, sgd, adam]) :- true.
domain(nn, alpha, [0.0001, 0.001, 0.01, 0.00001]) :- true.
domain(nn, learning_rate, [constant, invscaling, adaptive]) :- true.
domain(rf, n_estimators, [10, 25, 50, 75, 100]) :- true.
domain(rf, max_depth, [1, 5]) :- true.
domain(rf, max_features, [1, 4]) :- true.
domain(rf, min_samples_split, [2, 6]) :- true.
domain(rf, max_leaf_nodes, [2, 6]) :- true.
domain(rf, bootstrap, [true, false]) :- true.
domain(rf, criterion, [gini, entropy]) :- true.
dataset(adult) :- true.
metric(balanced_accuracy) :- true.
fairness_metric(demographic_parity_ratio) :- true.
sensitive_feature(sex, ['Male', 'Female']) :- true.
sensitive_feature(race, ['Amer-Indian-Eskimo', 'Asian-Pac-Islander', 'Black', 'Other', 'White']) :- true.
':=>'(mc0, unbalanced_dataset) :- true.
pipeline([Step_1_0], ZZ_0) :- (step(Step_1_0), '\\='(Step_1_0, classification), operator(classification, ZZ_0)).
pipeline([Step_1_1, Step_2_0], ZZ_1) :- (step(Step_1_1), step(Step_2_0), '\\='(Step_1_1, classification), '\\='(Step_2_0, classification), '\\='(Step_1_1, Step_2_0), operator(classification, ZZ_1)).
pipeline([Step_1_2, Step_2_1, Step_3_0], ZZ_2) :- (step(Step_1_2), step(Step_2_1), step(Step_3_0), '\\='(Step_1_2, classification), '\\='(Step_2_1, classification), '\\='(Step_3_0, classification), '\\='(Step_1_2, Step_2_1), '\\='(Step_1_2, Step_3_0), '\\='(Step_2_1, Step_3_0), operator(classification, ZZ_2)).
pipeline([Step_1_3, Step_2_2, Step_3_1, Step_4_0], ZZ_3) :- (step(Step_1_3), step(Step_2_2), step(Step_3_1), step(Step_4_0), '\\='(Step_1_3, classification), '\\='(Step_2_2, classification), '\\='(Step_3_1, classification), '\\='(Step_4_0, classification), '\\='(Step_1_3, Step_2_2), '\\='(Step_1_3, Step_3_1), '\\='(Step_1_3, Step_4_0), '\\='(Step_2_2, Step_3_1), '\\='(Step_2_2, Step_4_0), '\\='(Step_3_1, Step_4_0), operator(classification, ZZ_3)).
':=>'(p923334, sensitive_group(['Male'])) :- true.
':=>'(p482701, sensitive_group(['Female'])) :- true.
':=>'(p780857, sensitive_group(['Amer-Indian-Eskimo'])) :- true.
':=>'(p538316, sensitive_group(['Asian-Pac-Islander'])) :- true.
':=>'(p163312, sensitive_group(['Black'])) :- true.
':=>'(p239438, sensitive_group(['Other'])) :- true.
':=>'(p185585, sensitive_group(['White'])) :- true.
':=>'(p473128, sensitive_group(['Male', 'Amer-Indian-Eskimo'])) :- true.
':=>'(p371032, sensitive_group(['Male', 'Asian-Pac-Islander'])) :- true.
':=>'(p55090, sensitive_group(['Male', 'Black'])) :- true.
':=>'(p394040, sensitive_group(['Male', 'Other'])) :- true.
':=>'(p396305, sensitive_group(['Male', 'White'])) :- true.
':=>'(p716991, sensitive_group(['Female', 'Amer-Indian-Eskimo'])) :- true.
':=>'(p829194, sensitive_group(['Female', 'Asian-Pac-Islander'])) :- true.
':=>'(p441326, sensitive_group(['Female', 'Black'])) :- true.
':=>'(p968243, sensitive_group(['Female', 'Other'])) :- true.
':=>'(p277234, sensitive_group(['Female', 'White'])) :- true.

Checking Config
Exporting Config
Saving Graph
Exporting AutoML input
Exporting Space
Exporting Constraints
Input created for iteration Config(iteration=1, dataset=adult, metric=balanced_accuracy, fairnessMetric=demographic_parity_ratio, sensitiveFeatures=[sex, race], mode=max, batchSize=999999, timeBudget=900, seed=42)
Here is the standard output/error of the command:

6409db39f5aa726843b85f9d1627fd1af8009a5e7852e28b1707242b08ecccda
Here is the standard output/error of the command:

Here is the standard output/error of the command:

WARNING:root:No module named 'rpy2': FairAdapt will be unavailable. To install, run:
pip install 'aif360[FairAdapt]'
INFO:flaml.tune.searcher.blendsearch:No low-cost partial config given to the search algorithm. For cost-frugal search, consider providing low-cost values for cost-related hps via 'low_cost_partial_config'. More info can be found at https://microsoft.github.io/FLAML/docs/FAQ#about-low_cost_partial_config-in-tune
AutoML: starting optimization.
1
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 4, 'max_leaf_nodes': 4, 'min_samples_split': 5, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.3058025604297844), 'balanced_accuracy': np.float64(0.6870577813477474), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.37), 'Asian-Pac-Islander_Male': np.float64(0.73), 'Black_Female': np.float64(0.44), 'Black_Male': np.float64(0.8), 'White_Female': np.float64(0.5), 'White_Male': np.float64(0.98)}, 'status': 'success', 'total_time': 110.9963927268982, 'fit_time': np.float64(22.072586393356325), 'score_time': np.float64(0.03749790191650391), 'absolute_time': 1746699861.7311437, 'flatten_demographic_parity_ratio': '0.44_0.68_0.06_0.25_0.1', 'flatten_balanced_accuracy': '0.67_0.6_0.7_0.73_0.73'}
2
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 8, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 3}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.12940059412643748), 'balanced_accuracy': np.float64(0.6852705800677538), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.34), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.13), 'Black_Male': np.float64(0.43), 'White_Female': np.float64(0.24), 'White_Male': np.float64(0.73)}, 'status': 'success', 'total_time': 5.837490081787109, 'fit_time': np.float64(0.029987144470214843), 'score_time': np.float64(0.5419699192047119), 'absolute_time': 1746699867.6195748, 'flatten_demographic_parity_ratio': '0.12_0.07_0.08_0.14_0.23', 'flatten_balanced_accuracy': '0.61_0.74_0.75_0.69_0.63'}
3
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 6, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.35676051252314805), 'balanced_accuracy': np.float64(0.520965370664285), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.81), 'Asian-Pac-Islander_Male': np.float64(0.97), 'Black_Female': np.float64(0.66), 'Black_Male': np.float64(0.99), 'White_Female': np.float64(0.36), 'White_Male': np.float64(0.56)}, 'status': 'success', 'total_time': 4.387317419052124, 'fit_time': np.float64(0.15294432640075684), 'score_time': np.float64(0.33612747192382814), 'absolute_time': 1746699872.0597296, 'flatten_demographic_parity_ratio': '0.35_0.34_0.34_0.4_0.36', 'flatten_balanced_accuracy': '0.52_0.53_0.52_0.52_0.53'}
4
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 3, 'max_leaf_nodes': 4, 'min_samples_split': 2, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.2376712353162509), 'balanced_accuracy': np.float64(0.6658849204631444), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.79), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.3), 'Black_Male': np.float64(0.47), 'White_Female': np.float64(0.24), 'White_Male': np.float64(0.5)}, 'status': 'success', 'total_time': 8.775899171829224, 'fit_time': np.float64(1.6565106391906739), 'score_time': np.float64(0.02216496467590332), 'absolute_time': 1746699880.888111, 'flatten_demographic_parity_ratio': '0.23_0.24_0.23_0.28_0.21', 'flatten_balanced_accuracy': '0.66_0.68_0.67_0.66_0.66'}
5
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.18872288298459836), 'balanced_accuracy': np.float64(0.7880539368087296), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.43), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.19), 'Black_Male': np.float64(0.54), 'White_Female': np.float64(0.26), 'White_Male': np.float64(0.87)}, 'status': 'success', 'total_time': 113.8990912437439, 'fit_time': np.float64(22.660887575149538), 'score_time': np.float64(0.029908466339111327), 'absolute_time': 1746699994.8402822, 'flatten_demographic_parity_ratio': '0.2_0.16_0.18_0.25_0.16', 'flatten_balanced_accuracy': '0.79_0.78_0.78_0.8_0.79'}
6
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 4, 'max_leaf_nodes': 4, 'min_samples_split': 3, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.6226683990225281), 'balanced_accuracy': np.float64(0.5938565737943085), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.73), 'Asian-Pac-Islander_Male': np.float64(0.84), 'Black_Female': np.float64(0.86), 'Black_Male': np.float64(0.79), 'White_Female': np.float64(0.84), 'White_Male': np.float64(0.85)}, 'status': 'success', 'total_time': 107.19625949859619, 'fit_time': np.float64(21.30926671028137), 'score_time': np.float64(0.039818620681762694), 'absolute_time': 1746700102.8509462, 'flatten_demographic_parity_ratio': '0.62_0.6_0.88_0.63_0.38', 'flatten_balanced_accuracy': '0.6_0.64_0.6_0.63_0.5'}
7
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 4, 'max_leaf_nodes': 6, 'min_samples_split': 2, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.5079201560946754), 'balanced_accuracy': np.float64(0.5658865696099732), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.82), 'Asian-Pac-Islander_Male': np.float64(0.84), 'Black_Female': np.float64(0.73), 'Black_Male': np.float64(0.65), 'White_Female': np.float64(0.77), 'White_Male': np.float64(0.75)}, 'status': 'success', 'total_time': 22.439799547195435, 'fit_time': np.float64(4.357235670089722), 'score_time': np.float64(0.04054269790649414), 'absolute_time': 1746700125.348165, 'flatten_demographic_parity_ratio': '0.48_0.5_0.13_0.66_0.78', 'flatten_balanced_accuracy': '0.47_0.61_0.73_0.51_0.51'}
8
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 4, 'max_leaf_nodes': 3, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.5941660873613155), 'balanced_accuracy': np.float64(0.5111778490780583), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.79), 'Asian-Pac-Islander_Male': np.float64(0.83), 'Black_Female': np.float64(0.89), 'Black_Male': np.float64(0.74), 'White_Female': np.float64(0.86), 'White_Male': np.float64(0.85)}, 'status': 'success', 'total_time': 28.96405291557312, 'fit_time': np.float64(5.6597754001617435), 'score_time': np.float64(0.03937554359436035), 'absolute_time': 1746700154.3696692, 'flatten_demographic_parity_ratio': '0.41_0.76_0.63_0.55_0.62', 'flatten_balanced_accuracy': '0.52_0.51_0.51_0.5_0.51'}
9
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 4, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.5322501935397144), 'balanced_accuracy': np.float64(0.5084827440909512), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.73), 'Asian-Pac-Islander_Male': np.float64(0.92), 'Black_Female': np.float64(0.79), 'Black_Male': np.float64(0.56), 'White_Female': np.float64(0.86), 'White_Male': np.float64(0.84)}, 'status': 'success', 'total_time': 24.764809608459473, 'fit_time': np.float64(4.842411899566651), 'score_time': np.float64(0.028529882431030273), 'absolute_time': 1746700179.1958582, 'flatten_demographic_parity_ratio': '0.34_0.14_0.69_0.75_0.74', 'flatten_balanced_accuracy': '0.51_0.5_0.51_0.51_0.51'}
10
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 16, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.17418499286369477), 'balanced_accuracy': np.float64(0.656348551170668), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.88), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.33), 'Black_Male': np.float64(0.56), 'White_Female': np.float64(0.17), 'White_Male': np.float64(0.25)}, 'status': 'success', 'total_time': 3.375434398651123, 'fit_time': np.float64(0.23982372283935546), 'score_time': np.float64(0.1880040168762207), 'absolute_time': 1746700182.6300397, 'flatten_demographic_parity_ratio': '0.14_0.17_0.2_0.19_0.17', 'flatten_balanced_accuracy': '0.65_0.66_0.65_0.67_0.66'}
The result for {'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_split': 6, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_split': 6, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')} was NaN

11
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_split': 6, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5096514780595108), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.94), 'Asian-Pac-Islander_Male': np.float64(0.94), 'Black_Female': np.float64(0.82), 'Black_Male': np.float64(0.66), 'White_Female': np.float64(0.86), 'White_Male': np.float64(0.82)}, 'status': 'fail', 'total_time': 30.147565841674805, 'fit_time': np.float64(5.184994840621949), 'score_time': np.float64(0.03545823097229004), 'absolute_time': 1746700212.836284, 'flatten_demographic_parity_ratio': '0.61_nan_0.68_0.68_0.62', 'flatten_balanced_accuracy': '0.53_0.5_0.52_0.5_0.5'}
12
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.503741156377161), 'balanced_accuracy': np.float64(0.5091969624594698), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.89), 'Asian-Pac-Islander_Male': np.float64(0.87), 'Black_Female': np.float64(0.71), 'Black_Male': np.float64(0.58), 'White_Female': np.float64(0.74), 'White_Male': np.float64(0.71)}, 'status': 'success', 'total_time': 35.74293875694275, 'fit_time': np.float64(5.783195924758911), 'score_time': np.float64(0.05183253288269043), 'absolute_time': 1746700248.6390257, 'flatten_demographic_parity_ratio': '0.39_0.71_0.56_0.6_0.25', 'flatten_balanced_accuracy': '0.53_0.5_0.52_0.5_0.5'}
13
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 4, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.6075026659276762), 'balanced_accuracy': np.float64(0.5125786261147111), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.83), 'Asian-Pac-Islander_Male': np.float64(0.92), 'Black_Female': np.float64(0.83), 'Black_Male': np.float64(0.68), 'White_Female': np.float64(0.82), 'White_Male': np.float64(0.8)}, 'status': 'success', 'total_time': 29.841447830200195, 'fit_time': np.float64(5.830690717697143), 'score_time': np.float64(0.042104673385620114), 'absolute_time': 1746700278.5414376, 'flatten_demographic_parity_ratio': '0.39_0.79_0.7_0.55_0.61', 'flatten_balanced_accuracy': '0.51_0.51_0.52_0.51_0.51'}
14
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.011917845514529143), 'balanced_accuracy': np.float64(0.7426354641992484), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.01), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.01), 'Black_Male': np.float64(0.47), 'White_Female': np.float64(0.02), 'White_Male': np.float64(0.84)}, 'status': 'success', 'total_time': 1.5335915088653564, 'fit_time': np.float64(0.21462254524230956), 'score_time': np.float64(0.010850954055786132), 'absolute_time': 1746700280.8392544, 'flatten_demographic_parity_ratio': '0.0_0.02_0.0_0.02_0.02', 'flatten_balanced_accuracy': '0.73_0.74_0.73_0.76_0.75'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

15
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 6, 'min_samples_split': 2, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'Asian-Pac-Islander_Female': -inf, 'Asian-Pac-Islander_Male': -inf, 'Black_Female': -inf, 'Black_Male': -inf, 'White_Female': -inf, 'White_Male': -inf}, 'status': 'fail', 'total_time': 0.000644683837890625, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746700280.9000106}
16
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 3}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.07337498109126647), 'balanced_accuracy': np.float64(0.7010402978055661), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.16), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.07), 'Black_Male': np.float64(0.34), 'White_Female': np.float64(0.14), 'White_Male': np.float64(0.67)}, 'status': 'success', 'total_time': 138.43094992637634, 'fit_time': np.float64(27.39348998069763), 'score_time': np.float64(0.11167802810668945), 'absolute_time': 1746700419.3905208, 'flatten_demographic_parity_ratio': '0.04_0.05_0.03_0.03_0.22', 'flatten_balanced_accuracy': '0.72_0.71_0.72_0.71_0.65'}
17
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 7, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.16083424890571377), 'balanced_accuracy': np.float64(0.731797223922227), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.41), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.16), 'Black_Male': np.float64(0.44), 'White_Female': np.float64(0.29), 'White_Male': np.float64(0.77)}, 'status': 'success', 'total_time': 3.406501293182373, 'fit_time': np.float64(0.15948429107666015), 'score_time': np.float64(0.2318361759185791), 'absolute_time': 1746700422.8600025, 'flatten_demographic_parity_ratio': '0.19_0.13_0.17_0.2_0.11', 'flatten_balanced_accuracy': '0.71_0.75_0.73_0.73_0.74'}
18
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 2, 'max_leaf_nodes': 6, 'min_samples_split': 2, 'n_estimators': np.int64(75)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.03233984371193929), 'balanced_accuracy': np.float64(0.7824888166435142), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.06), 'Asian-Pac-Islander_Male': np.float64(0.96), 'Black_Female': np.float64(0.04), 'Black_Male': np.float64(0.49), 'White_Female': np.float64(0.09), 'White_Male': np.float64(0.99)}, 'status': 'success', 'total_time': 7.93361759185791, 'fit_time': np.float64(1.4829492568969727), 'score_time': np.float64(0.025909900665283203), 'absolute_time': 1746700430.8554552, 'flatten_demographic_parity_ratio': '0.04_0.03_0.04_0.02_0.02', 'flatten_balanced_accuracy': '0.78_0.78_0.78_0.79_0.78'}
19
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.1055493860755721), 'balanced_accuracy': np.float64(0.7684281347363362), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.31), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.11), 'Black_Male': np.float64(0.45), 'White_Female': np.float64(0.24), 'White_Male': np.float64(0.75)}, 'status': 'success', 'total_time': 86.66499495506287, 'fit_time': np.float64(17.228563499450683), 'score_time': np.float64(0.015064001083374023), 'absolute_time': 1746700517.58255, 'flatten_demographic_parity_ratio': '0.13_0.1_0.1_0.1_0.09', 'flatten_balanced_accuracy': '0.78_0.77_0.77_0.77_0.76'}
20
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 6, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.5804181465104596), 'balanced_accuracy': np.float64(0.48802185227018774), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.66), 'Asian-Pac-Islander_Male': np.float64(0.65), 'Black_Female': np.float64(0.72), 'Black_Male': np.float64(1.0), 'White_Female': np.float64(0.68), 'White_Male': np.float64(0.74)}, 'status': 'success', 'total_time': 19.252130031585693, 'fit_time': np.float64(3.7293078899383545), 'score_time': np.float64(0.033864927291870114), 'absolute_time': 1746700536.9141593, 'flatten_demographic_parity_ratio': '0.67_0.39_0.67_0.7_0.47', 'flatten_balanced_accuracy': '0.47_0.49_0.48_0.5_0.49'}
Timeout
21
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(25), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'Asian-Pac-Islander_Female': -inf, 'Asian-Pac-Islander_Male': -inf, 'Black_Female': -inf, 'Black_Male': -inf, 'White_Female': -inf, 'White_Male': -inf}, 'status': 'fail', 'total_time': 900.0009799003601, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746701436.9796267}
AutoML: optimization done.
AutoML: miner done.
AutoML: export done.
Here is the standard output/error of the command:

Here is the standard output/error of the command:

Here is the standard output/error of the command:

hamlet_1038309986
AutoML execution ended
