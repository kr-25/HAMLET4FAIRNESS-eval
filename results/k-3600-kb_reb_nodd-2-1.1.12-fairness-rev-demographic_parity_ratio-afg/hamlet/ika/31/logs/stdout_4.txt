Sensitive groups ready!
Theory ready!
Theory:
step(normalization) :- true.
step(features) :- true.
step(mitigation) :- true.
step(rebalancing) :- true.
step(classification) :- true.
operator(normalization, power_transformer) :- true.
operator(normalization, robust_scaler) :- true.
operator(normalization, standard) :- true.
operator(normalization, minmax) :- true.
operator(features, select_k_best) :- true.
operator(features, pca) :- true.
operator(mitigation, corr_remover) :- true.
operator(mitigation, lfr) :- true.
operator(rebalancing, near_miss) :- true.
operator(rebalancing, smote) :- true.
operator(classification, knn) :- true.
operator(classification, nn) :- true.
operator(classification, rf) :- true.
hyperparameter(robust_scaler, with_centering, choice) :- true.
hyperparameter(robust_scaler, with_scaling, choice) :- true.
hyperparameter(standard, with_mean, choice) :- true.
hyperparameter(standard, with_std, choice) :- true.
hyperparameter(select_k_best, k, randint) :- true.
hyperparameter(pca, n_components, randint) :- true.
hyperparameter(corr_remover, alpha, choice) :- true.
hyperparameter(lfr, n_prototypes, choice) :- true.
hyperparameter(lfr, reconstruct_weight, choice) :- true.
hyperparameter(lfr, fairness_weight, choice) :- true.
hyperparameter(near_miss, n_neighbors, randint) :- true.
hyperparameter(smote, k_neighbors, randint) :- true.
hyperparameter(knn, n_neighbors, randint) :- true.
hyperparameter(knn, weights, choice) :- true.
hyperparameter(knn, metric, choice) :- true.
hyperparameter(nn, n_hidden_layers, choice) :- true.
hyperparameter(nn, n_neurons, choice) :- true.
hyperparameter(nn, activation, choice) :- true.
hyperparameter(nn, solver, choice) :- true.
hyperparameter(nn, alpha, choice) :- true.
hyperparameter(nn, learning_rate, choice) :- true.
hyperparameter(rf, n_estimators, choice) :- true.
hyperparameter(rf, max_depth, randint) :- true.
hyperparameter(rf, max_features, randint) :- true.
hyperparameter(rf, min_samples_split, randint) :- true.
hyperparameter(rf, max_leaf_nodes, randint) :- true.
hyperparameter(rf, bootstrap, choice) :- true.
hyperparameter(rf, criterion, choice) :- true.
domain(robust_scaler, with_centering, [true, false]) :- true.
domain(robust_scaler, with_scaling, [true, false]) :- true.
domain(standard, with_mean, [true, false]) :- true.
domain(standard, with_std, [true, false]) :- true.
domain(select_k_best, k, [1, 10]) :- true.
domain(pca, n_components, [1, 8]) :- true.
domain(corr_remover, alpha, [0.25, 0.5, 0.75, 1.0]) :- true.
domain(lfr, n_prototypes, [10, 50, 100, 200]) :- true.
domain(lfr, reconstruct_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(lfr, fairness_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(near_miss, n_neighbors, [1, 4]) :- true.
domain(smote, k_neighbors, [5, 8]) :- true.
domain(knn, n_neighbors, [3, 20]) :- true.
domain(knn, weights, [uniform, distance]) :- true.
domain(knn, metric, [minkowski, euclidean, manhattan]) :- true.
domain(nn, n_hidden_layers, [1, 5, 10, 20]) :- true.
domain(nn, n_neurons, [5, 10, 25, 50]) :- true.
domain(nn, activation, [logistic, tanh, relu]) :- true.
domain(nn, solver, [lbfgs, sgd, adam]) :- true.
domain(nn, alpha, [0.0001, 0.001, 0.01, 0.00001]) :- true.
domain(nn, learning_rate, [constant, invscaling, adaptive]) :- true.
domain(rf, n_estimators, [10, 25, 50, 75, 100]) :- true.
domain(rf, max_depth, [1, 5]) :- true.
domain(rf, max_features, [1, 4]) :- true.
domain(rf, min_samples_split, [2, 6]) :- true.
domain(rf, max_leaf_nodes, [2, 6]) :- true.
domain(rf, bootstrap, [true, false]) :- true.
domain(rf, criterion, [gini, entropy]) :- true.
dataset('credit-g') :- true.
metric(balanced_accuracy) :- true.
fairness_metric(demographic_parity_ratio) :- true.
sensitive_feature(personal_status, [single, 'div/dep/mar', 'mar/wid']) :- true.
sensitive_feature(sex, [male, female]) :- true.
':=>'(mc0, unbalanced_dataset) :- true.
':=>'(cc8825203134102224935, mandatory([rebalancing], knn)) :- true.
':=>'(cc7872058418108943959, mandatory([features, normalization], knn)) :- true.
':=>'(cc851903295553634046, mandatory([mitigation, normalization], knn)) :- true.
':=>'(cc610802081933718530, mandatory([normalization, features], nn)) :- true.
':=>'(cc6245097273306630383, mandatory([normalization, mitigation], nn)) :- true.
':=>'(cc7798730209209439878, mandatory([normalization, rebalancing], nn)) :- true.
':=>'(cc1361649492150022569, mandatory([features], rf)) :- true.
':=>'(cc2612024093039360408, mandatory([normalization, mitigation], rf)) :- true.
':=>'(cc6879317989374125140, mandatory_order([mitigation, features], rf)) :- true.
':=>'(cc5621299089657265006, mandatory([features, normalization], nn)) :- true.
':=>'(cc7466873496047421045, mandatory([mitigation, normalization], nn)) :- true.
':=>'(cc1046974847385033543, mandatory([rebalancing, normalization], nn)) :- true.
':=>'(cc3446651192380935411, mandatory([features, rebalancing], rf)) :- true.
':=>'(cc3848074166242549320, mandatory([normalization, features, mitigation], rf)) :- true.
':=>'(cc4718914882170258577, mandatory([mitigation], nn)) :- true.
discriminate(pipeline([rebalancing], knn), [male, div/sep]) :- true.
discriminate(pipeline([features], knn), [male, div/sep]) :- true.
discriminate(pipeline([normalization], knn), [male, div/sep]) :- true.
discriminate(pipeline([features, rebalancing], knn), [male, div/sep]) :- true.
pipeline([Step_1_0], ZZ_0) :- (step(Step_1_0), '\\='(Step_1_0, classification), operator(classification, ZZ_0)).
pipeline([Step_1_1, Step_2_0], ZZ_1) :- (step(Step_1_1), step(Step_2_0), '\\='(Step_1_1, classification), '\\='(Step_2_0, classification), '\\='(Step_1_1, Step_2_0), operator(classification, ZZ_1)).
pipeline([Step_1_2, Step_2_1, Step_3_0], ZZ_2) :- (step(Step_1_2), step(Step_2_1), step(Step_3_0), '\\='(Step_1_2, classification), '\\='(Step_2_1, classification), '\\='(Step_3_0, classification), '\\='(Step_1_2, Step_2_1), '\\='(Step_1_2, Step_3_0), '\\='(Step_2_1, Step_3_0), operator(classification, ZZ_2)).
pipeline([Step_1_3, Step_2_2, Step_3_1, Step_4_0], ZZ_3) :- (step(Step_1_3), step(Step_2_2), step(Step_3_1), step(Step_4_0), '\\='(Step_1_3, classification), '\\='(Step_2_2, classification), '\\='(Step_3_1, classification), '\\='(Step_4_0, classification), '\\='(Step_1_3, Step_2_2), '\\='(Step_1_3, Step_3_1), '\\='(Step_1_3, Step_4_0), '\\='(Step_2_2, Step_3_1), '\\='(Step_2_2, Step_4_0), '\\='(Step_3_1, Step_4_0), operator(classification, ZZ_3)).
':=>'(p755765, sensitive_group([single])) :- true.
':=>'(p540632, sensitive_group(['div/dep/mar'])) :- true.
':=>'(p309889, sensitive_group(['mar/wid'])) :- true.
':=>'(p890809, sensitive_group([male])) :- true.
':=>'(p61234, sensitive_group([female])) :- true.
':=>'(p981571, sensitive_group([single, male])) :- true.
':=>'(p659515, sensitive_group([single, female])) :- true.
':=>'(p844109, sensitive_group(['div/dep/mar', male])) :- true.
':=>'(p944168, sensitive_group(['div/dep/mar', female])) :- true.
':=>'(p254967, sensitive_group(['mar/wid', male])) :- true.
':=>'(p340587, sensitive_group(['mar/wid', female])) :- true.
':=>'(p110689, pipeline([], knn)) :- true.
':=>'(p736991, pipeline([], knn)) :- true.
':=>'(p384323, pipeline([], knn)) :- true.
':=>'(p974225, pipeline([], nn)) :- true.
':=>'(p739438, pipeline([], nn)) :- true.
':=>'(p751353, pipeline([], nn)) :- true.
':=>'(p499875, pipeline([], nn)) :- true.
':=>'(p254958, pipeline([], nn)) :- true.
':=>'(p724450, pipeline([], nn)) :- true.
':=>'(p112508, pipeline([], nn)) :- true.
':=>'(p449166, pipeline([], rf)) :- true.
':=>'(p583154, pipeline([], rf)) :- true.
':=>'(p868878, pipeline([], rf)) :- true.
':=>'(p551440, pipeline([], rf)) :- true.
':=>'(p191786, pipeline([normalization], knn)) :- true.
':=>'(p39540, pipeline([normalization], knn)) :- true.
':=>'(p719897, pipeline([normalization], knn)) :- true.
':=>'(p246276, pipeline([normalization], nn)) :- true.
':=>'(p483441, pipeline([normalization], nn)) :- true.
':=>'(p646437, pipeline([normalization], nn)) :- true.
':=>'(p982626, pipeline([normalization], nn)) :- true.
':=>'(p656847, pipeline([normalization], nn)) :- true.
':=>'(p470713, pipeline([normalization], nn)) :- true.
':=>'(p918791, pipeline([normalization], nn)) :- true.
':=>'(p50665, pipeline([normalization], rf)) :- true.
':=>'(p408738, pipeline([normalization], rf)) :- true.
':=>'(p975182, pipeline([normalization], rf)) :- true.
':=>'(p307465, pipeline([normalization], rf)) :- true.
':=>'(p983763, pipeline([features], knn)) :- true.
':=>'(p789018, pipeline([features], knn)) :- true.
':=>'(p55434, pipeline([features], knn)) :- true.
':=>'(p448297, pipeline([features], nn)) :- true.
':=>'(p786175, pipeline([features], nn)) :- true.
':=>'(p974942, pipeline([features], nn)) :- true.
':=>'(p615706, pipeline([features], nn)) :- true.
':=>'(p76728, pipeline([features], nn)) :- true.
':=>'(p646361, pipeline([features], nn)) :- true.
':=>'(p351733, pipeline([features], nn)) :- true.
':=>'(p757459, pipeline([features], rf)) :- true.
':=>'(p680764, pipeline([features], rf)) :- true.
':=>'(p668392, pipeline([features], rf)) :- true.
':=>'(p59392, pipeline([mitigation], knn)) :- true.
':=>'(p690127, pipeline([mitigation], knn)) :- true.
':=>'(p80468, pipeline([mitigation], knn)) :- true.
':=>'(p181341, pipeline([mitigation], nn)) :- true.
':=>'(p166304, pipeline([mitigation], nn)) :- true.
':=>'(p542588, pipeline([mitigation], nn)) :- true.
':=>'(p921275, pipeline([mitigation], nn)) :- true.
':=>'(p385238, pipeline([mitigation], nn)) :- true.
':=>'(p629021, pipeline([mitigation], nn)) :- true.
':=>'(p899593, pipeline([mitigation], rf)) :- true.
':=>'(p160313, pipeline([mitigation], rf)) :- true.
':=>'(p70089, pipeline([mitigation], rf)) :- true.
':=>'(p486789, pipeline([mitigation], rf)) :- true.
':=>'(p604001, pipeline([rebalancing], knn)) :- true.
':=>'(p28309, pipeline([rebalancing], knn)) :- true.
':=>'(p84122, pipeline([rebalancing], nn)) :- true.
':=>'(p182894, pipeline([rebalancing], nn)) :- true.
':=>'(p672588, pipeline([rebalancing], nn)) :- true.
':=>'(p48304, pipeline([rebalancing], nn)) :- true.
':=>'(p549986, pipeline([rebalancing], nn)) :- true.
':=>'(p50333, pipeline([rebalancing], nn)) :- true.
':=>'(p925763, pipeline([rebalancing], nn)) :- true.
':=>'(p781898, pipeline([rebalancing], rf)) :- true.
':=>'(p406526, pipeline([rebalancing], rf)) :- true.
':=>'(p259948, pipeline([rebalancing], rf)) :- true.
':=>'(p297492, pipeline([rebalancing], rf)) :- true.
':=>'(p193243, pipeline([normalization, features], knn)) :- true.
':=>'(p202263, pipeline([normalization, features], knn)) :- true.
':=>'(p396277, pipeline([normalization, features], nn)) :- true.
':=>'(p660997, pipeline([normalization, features], nn)) :- true.
':=>'(p867158, pipeline([normalization, features], nn)) :- true.
':=>'(p744645, pipeline([normalization, features], nn)) :- true.
':=>'(p531731, pipeline([normalization, features], nn)) :- true.
':=>'(p303817, pipeline([normalization, features], rf)) :- true.
':=>'(p442306, pipeline([normalization, features], rf)) :- true.
':=>'(p827265, pipeline([normalization, features], rf)) :- true.
':=>'(p41947, pipeline([normalization, mitigation], knn)) :- true.
':=>'(p211879, pipeline([normalization, mitigation], knn)) :- true.
':=>'(p425714, pipeline([normalization, mitigation], nn)) :- true.
':=>'(p284643, pipeline([normalization, mitigation], nn)) :- true.
':=>'(p743639, pipeline([normalization, mitigation], nn)) :- true.
':=>'(p955166, pipeline([normalization, mitigation], nn)) :- true.
':=>'(p407986, pipeline([normalization, mitigation], rf)) :- true.
':=>'(p827073, pipeline([normalization, mitigation], rf)) :- true.
':=>'(p161428, pipeline([normalization, mitigation], rf)) :- true.
':=>'(p710930, pipeline([normalization, rebalancing], knn)) :- true.
':=>'(p789932, pipeline([normalization, rebalancing], knn)) :- true.
':=>'(p926734, pipeline([normalization, rebalancing], nn)) :- true.
':=>'(p786853, pipeline([normalization, rebalancing], nn)) :- true.
':=>'(p808987, pipeline([normalization, rebalancing], nn)) :- true.
':=>'(p508324, pipeline([normalization, rebalancing], nn)) :- true.
':=>'(p47980, pipeline([normalization, rebalancing], nn)) :- true.
':=>'(p76991, pipeline([normalization, rebalancing], rf)) :- true.
':=>'(p185624, pipeline([normalization, rebalancing], rf)) :- true.
':=>'(p245307, pipeline([normalization, rebalancing], rf)) :- true.
':=>'(p95781, pipeline([normalization, rebalancing], rf)) :- true.
':=>'(p103250, pipeline([features, normalization], knn)) :- true.
':=>'(p691876, pipeline([features, normalization], knn)) :- true.
':=>'(p838818, pipeline([features, normalization], nn)) :- true.
':=>'(p908406, pipeline([features, normalization], nn)) :- true.
':=>'(p210178, pipeline([features, normalization], nn)) :- true.
':=>'(p587628, pipeline([features, normalization], nn)) :- true.
':=>'(p403654, pipeline([features, normalization], nn)) :- true.
':=>'(p265682, pipeline([features, normalization], rf)) :- true.
':=>'(p224306, pipeline([features, normalization], rf)) :- true.
':=>'(p8420, pipeline([features, normalization], rf)) :- true.
':=>'(p79226, pipeline([features, mitigation], knn)) :- true.
':=>'(p149966, pipeline([features, mitigation], knn)) :- true.
':=>'(p971784, pipeline([features, mitigation], knn)) :- true.
':=>'(p439206, pipeline([features, mitigation], nn)) :- true.
':=>'(p444135, pipeline([features, mitigation], nn)) :- true.
':=>'(p183731, pipeline([features, mitigation], nn)) :- true.
':=>'(p539585, pipeline([features, mitigation], nn)) :- true.
':=>'(p690197, pipeline([features, mitigation], nn)) :- true.
':=>'(p490159, pipeline([features, mitigation], nn)) :- true.
':=>'(p748453, pipeline([features, mitigation], rf)) :- true.
':=>'(p857919, pipeline([features, mitigation], rf)) :- true.
':=>'(p420682, pipeline([features, mitigation], rf)) :- true.
':=>'(p411499, pipeline([features, mitigation], rf)) :- true.
':=>'(p97863, pipeline([features, rebalancing], knn)) :- true.
':=>'(p947954, pipeline([features, rebalancing], knn)) :- true.
':=>'(p645229, pipeline([features, rebalancing], nn)) :- true.
':=>'(p643165, pipeline([features, rebalancing], nn)) :- true.
':=>'(p226123, pipeline([features, rebalancing], nn)) :- true.
':=>'(p720386, pipeline([features, rebalancing], nn)) :- true.
':=>'(p645549, pipeline([features, rebalancing], nn)) :- true.
':=>'(p914874, pipeline([features, rebalancing], nn)) :- true.
':=>'(p319866, pipeline([features, rebalancing], nn)) :- true.
':=>'(p346923, pipeline([features, rebalancing], rf)) :- true.
':=>'(p673702, pipeline([features, rebalancing], rf)) :- true.
':=>'(p829263, pipeline([mitigation, normalization], knn)) :- true.
':=>'(p13408, pipeline([mitigation, normalization], knn)) :- true.
':=>'(p32104, pipeline([mitigation, normalization], nn)) :- true.
':=>'(p21671, pipeline([mitigation, normalization], nn)) :- true.
':=>'(p213983, pipeline([mitigation, normalization], nn)) :- true.
':=>'(p111298, pipeline([mitigation, normalization], nn)) :- true.
':=>'(p130577, pipeline([mitigation, normalization], rf)) :- true.
':=>'(p905709, pipeline([mitigation, normalization], rf)) :- true.
':=>'(p223947, pipeline([mitigation, normalization], rf)) :- true.
':=>'(p299394, pipeline([mitigation, features], knn)) :- true.
':=>'(p882163, pipeline([mitigation, features], knn)) :- true.
':=>'(p370717, pipeline([mitigation, features], knn)) :- true.
':=>'(p900928, pipeline([mitigation, features], nn)) :- true.
':=>'(p419931, pipeline([mitigation, features], nn)) :- true.
':=>'(p184893, pipeline([mitigation, features], nn)) :- true.
':=>'(p919068, pipeline([mitigation, features], nn)) :- true.
':=>'(p355681, pipeline([mitigation, features], nn)) :- true.
':=>'(p30233, pipeline([mitigation, features], nn)) :- true.
':=>'(p826821, pipeline([mitigation, features], rf)) :- true.
':=>'(p745228, pipeline([mitigation, features], rf)) :- true.
':=>'(p208313, pipeline([mitigation, features], rf)) :- true.
':=>'(p977213, pipeline([mitigation, rebalancing], knn)) :- true.
':=>'(p655739, pipeline([mitigation, rebalancing], knn)) :- true.
':=>'(p475770, pipeline([mitigation, rebalancing], nn)) :- true.
':=>'(p320525, pipeline([mitigation, rebalancing], nn)) :- true.
':=>'(p426292, pipeline([mitigation, rebalancing], nn)) :- true.
':=>'(p171694, pipeline([mitigation, rebalancing], nn)) :- true.
':=>'(p118019, pipeline([mitigation, rebalancing], nn)) :- true.
':=>'(p970739, pipeline([mitigation, rebalancing], nn)) :- true.
':=>'(p464500, pipeline([mitigation, rebalancing], rf)) :- true.
':=>'(p791070, pipeline([mitigation, rebalancing], rf)) :- true.
':=>'(p497854, pipeline([mitigation, rebalancing], rf)) :- true.
':=>'(p345798, pipeline([mitigation, rebalancing], rf)) :- true.
':=>'(p626382, pipeline([rebalancing, normalization], knn)) :- true.
':=>'(p391246, pipeline([rebalancing, normalization], knn)) :- true.
':=>'(p314002, pipeline([rebalancing, normalization], nn)) :- true.
':=>'(p958373, pipeline([rebalancing, normalization], nn)) :- true.
':=>'(p661474, pipeline([rebalancing, normalization], nn)) :- true.
':=>'(p634984, pipeline([rebalancing, normalization], nn)) :- true.
':=>'(p688812, pipeline([rebalancing, normalization], nn)) :- true.
':=>'(p953213, pipeline([rebalancing, normalization], rf)) :- true.
':=>'(p152380, pipeline([rebalancing, normalization], rf)) :- true.
':=>'(p398987, pipeline([rebalancing, normalization], rf)) :- true.
':=>'(p963461, pipeline([rebalancing, normalization], rf)) :- true.
':=>'(p932808, pipeline([rebalancing, features], knn)) :- true.
':=>'(p268235, pipeline([rebalancing, features], knn)) :- true.
':=>'(p285358, pipeline([rebalancing, features], nn)) :- true.
':=>'(p952054, pipeline([rebalancing, features], nn)) :- true.
':=>'(p97625, pipeline([rebalancing, features], nn)) :- true.
':=>'(p837634, pipeline([rebalancing, features], nn)) :- true.
':=>'(p769711, pipeline([rebalancing, features], nn)) :- true.
':=>'(p52271, pipeline([rebalancing, features], nn)) :- true.
':=>'(p909417, pipeline([rebalancing, features], nn)) :- true.
':=>'(p190791, pipeline([rebalancing, features], rf)) :- true.
':=>'(p340821, pipeline([rebalancing, features], rf)) :- true.
':=>'(p573174, pipeline([rebalancing, mitigation], knn)) :- true.
':=>'(p310328, pipeline([rebalancing, mitigation], knn)) :- true.
':=>'(p893892, pipeline([rebalancing, mitigation], nn)) :- true.
':=>'(p709817, pipeline([rebalancing, mitigation], nn)) :- true.
':=>'(p150467, pipeline([rebalancing, mitigation], nn)) :- true.
':=>'(p460081, pipeline([rebalancing, mitigation], nn)) :- true.
':=>'(p359994, pipeline([rebalancing, mitigation], nn)) :- true.
':=>'(p448630, pipeline([rebalancing, mitigation], nn)) :- true.
':=>'(p451400, pipeline([rebalancing, mitigation], rf)) :- true.
':=>'(p672658, pipeline([rebalancing, mitigation], rf)) :- true.
':=>'(p580504, pipeline([rebalancing, mitigation], rf)) :- true.
':=>'(p798423, pipeline([rebalancing, mitigation], rf)) :- true.
':=>'(p865976, pipeline([normalization, features, mitigation], knn)) :- true.
':=>'(p192691, pipeline([normalization, features, mitigation], nn)) :- true.
':=>'(p178817, pipeline([normalization, features, mitigation], nn)) :- true.
':=>'(p595777, pipeline([normalization, features, mitigation], rf)) :- true.
':=>'(p369266, pipeline([normalization, features, mitigation], rf)) :- true.
':=>'(p335233, pipeline([normalization, features, rebalancing], knn)) :- true.
':=>'(p781976, pipeline([normalization, features, rebalancing], nn)) :- true.
':=>'(p294764, pipeline([normalization, features, rebalancing], nn)) :- true.
':=>'(p875087, pipeline([normalization, features, rebalancing], nn)) :- true.
':=>'(p838594, pipeline([normalization, features, rebalancing], rf)) :- true.
':=>'(p975850, pipeline([normalization, features, rebalancing], rf)) :- true.
':=>'(p340344, pipeline([normalization, mitigation, features], knn)) :- true.
':=>'(p828027, pipeline([normalization, mitigation, features], nn)) :- true.
':=>'(p789926, pipeline([normalization, mitigation, features], nn)) :- true.
':=>'(p816612, pipeline([normalization, mitigation, features], rf)) :- true.
':=>'(p35259, pipeline([normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p216612, pipeline([normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p32601, pipeline([normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p984621, pipeline([normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p173869, pipeline([normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p641735, pipeline([normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p189513, pipeline([normalization, rebalancing, features], knn)) :- true.
':=>'(p918180, pipeline([normalization, rebalancing, features], nn)) :- true.
':=>'(p359486, pipeline([normalization, rebalancing, features], nn)) :- true.
':=>'(p821178, pipeline([normalization, rebalancing, features], nn)) :- true.
':=>'(p872996, pipeline([normalization, rebalancing, features], rf)) :- true.
':=>'(p460618, pipeline([normalization, rebalancing, features], rf)) :- true.
':=>'(p467214, pipeline([normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p223383, pipeline([normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p915395, pipeline([normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p911693, pipeline([normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p682083, pipeline([normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p260781, pipeline([normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p623276, pipeline([features, normalization, mitigation], knn)) :- true.
':=>'(p304672, pipeline([features, normalization, mitigation], nn)) :- true.
':=>'(p495719, pipeline([features, normalization, mitigation], nn)) :- true.
':=>'(p440065, pipeline([features, normalization, mitigation], rf)) :- true.
':=>'(p143543, pipeline([features, normalization, mitigation], rf)) :- true.
':=>'(p135418, pipeline([features, normalization, rebalancing], knn)) :- true.
':=>'(p925578, pipeline([features, normalization, rebalancing], nn)) :- true.
':=>'(p505097, pipeline([features, normalization, rebalancing], nn)) :- true.
':=>'(p279767, pipeline([features, normalization, rebalancing], nn)) :- true.
':=>'(p19512, pipeline([features, normalization, rebalancing], rf)) :- true.
':=>'(p59784, pipeline([features, normalization, rebalancing], rf)) :- true.
':=>'(p738567, pipeline([features, mitigation, normalization], knn)) :- true.
':=>'(p278200, pipeline([features, mitigation, normalization], nn)) :- true.
':=>'(p38499, pipeline([features, mitigation, normalization], nn)) :- true.
':=>'(p155922, pipeline([features, mitigation, normalization], rf)) :- true.
':=>'(p46200, pipeline([features, mitigation, normalization], rf)) :- true.
':=>'(p301610, pipeline([features, mitigation, rebalancing], knn)) :- true.
':=>'(p524481, pipeline([features, mitigation, rebalancing], knn)) :- true.
':=>'(p528770, pipeline([features, mitigation, rebalancing], nn)) :- true.
':=>'(p597128, pipeline([features, mitigation, rebalancing], nn)) :- true.
':=>'(p749951, pipeline([features, mitigation, rebalancing], nn)) :- true.
':=>'(p138932, pipeline([features, mitigation, rebalancing], nn)) :- true.
':=>'(p660898, pipeline([features, mitigation, rebalancing], nn)) :- true.
':=>'(p106392, pipeline([features, mitigation, rebalancing], nn)) :- true.
':=>'(p112156, pipeline([features, mitigation, rebalancing], rf)) :- true.
':=>'(p239823, pipeline([features, mitigation, rebalancing], rf)) :- true.
':=>'(p288431, pipeline([features, mitigation, rebalancing], rf)) :- true.
':=>'(p770997, pipeline([features, rebalancing, normalization], knn)) :- true.
':=>'(p560374, pipeline([features, rebalancing, normalization], nn)) :- true.
':=>'(p364759, pipeline([features, rebalancing, normalization], nn)) :- true.
':=>'(p830542, pipeline([features, rebalancing, normalization], nn)) :- true.
':=>'(p769169, pipeline([features, rebalancing, normalization], rf)) :- true.
':=>'(p919684, pipeline([features, rebalancing, normalization], rf)) :- true.
':=>'(p589287, pipeline([features, rebalancing, mitigation], knn)) :- true.
':=>'(p137887, pipeline([features, rebalancing, mitigation], knn)) :- true.
':=>'(p339344, pipeline([features, rebalancing, mitigation], nn)) :- true.
':=>'(p633854, pipeline([features, rebalancing, mitigation], nn)) :- true.
':=>'(p732435, pipeline([features, rebalancing, mitigation], nn)) :- true.
':=>'(p65687, pipeline([features, rebalancing, mitigation], nn)) :- true.
':=>'(p307763, pipeline([features, rebalancing, mitigation], nn)) :- true.
':=>'(p474021, pipeline([features, rebalancing, mitigation], nn)) :- true.
':=>'(p922920, pipeline([features, rebalancing, mitigation], rf)) :- true.
':=>'(p586188, pipeline([features, rebalancing, mitigation], rf)) :- true.
':=>'(p998885, pipeline([features, rebalancing, mitigation], rf)) :- true.
':=>'(p903278, pipeline([mitigation, normalization, features], knn)) :- true.
':=>'(p726464, pipeline([mitigation, normalization, features], nn)) :- true.
':=>'(p532189, pipeline([mitigation, normalization, features], nn)) :- true.
':=>'(p788462, pipeline([mitigation, normalization, features], rf)) :- true.
':=>'(p505098, pipeline([mitigation, normalization, rebalancing], knn)) :- true.
':=>'(p71723, pipeline([mitigation, normalization, rebalancing], nn)) :- true.
':=>'(p820649, pipeline([mitigation, normalization, rebalancing], nn)) :- true.
':=>'(p462871, pipeline([mitigation, normalization, rebalancing], rf)) :- true.
':=>'(p801010, pipeline([mitigation, normalization, rebalancing], rf)) :- true.
':=>'(p690651, pipeline([mitigation, normalization, rebalancing], rf)) :- true.
':=>'(p422318, pipeline([mitigation, features, normalization], knn)) :- true.
':=>'(p21856, pipeline([mitigation, features, normalization], nn)) :- true.
':=>'(p289079, pipeline([mitigation, features, normalization], nn)) :- true.
':=>'(p314594, pipeline([mitigation, features, normalization], rf)) :- true.
':=>'(p82031, pipeline([mitigation, features, rebalancing], knn)) :- true.
':=>'(p354571, pipeline([mitigation, features, rebalancing], knn)) :- true.
':=>'(p130659, pipeline([mitigation, features, rebalancing], nn)) :- true.
':=>'(p107274, pipeline([mitigation, features, rebalancing], nn)) :- true.
':=>'(p769109, pipeline([mitigation, features, rebalancing], nn)) :- true.
':=>'(p214047, pipeline([mitigation, features, rebalancing], nn)) :- true.
':=>'(p542966, pipeline([mitigation, features, rebalancing], nn)) :- true.
':=>'(p970693, pipeline([mitigation, features, rebalancing], nn)) :- true.
':=>'(p123067, pipeline([mitigation, features, rebalancing], rf)) :- true.
':=>'(p153184, pipeline([mitigation, features, rebalancing], rf)) :- true.
':=>'(p628944, pipeline([mitigation, rebalancing, normalization], knn)) :- true.
':=>'(p562064, pipeline([mitigation, rebalancing, normalization], nn)) :- true.
':=>'(p962623, pipeline([mitigation, rebalancing, normalization], nn)) :- true.
':=>'(p409008, pipeline([mitigation, rebalancing, normalization], rf)) :- true.
':=>'(p567391, pipeline([mitigation, rebalancing, normalization], rf)) :- true.
':=>'(p75300, pipeline([mitigation, rebalancing, normalization], rf)) :- true.
':=>'(p754312, pipeline([mitigation, rebalancing, features], knn)) :- true.
':=>'(p909750, pipeline([mitigation, rebalancing, features], knn)) :- true.
':=>'(p611449, pipeline([mitigation, rebalancing, features], nn)) :- true.
':=>'(p239521, pipeline([mitigation, rebalancing, features], nn)) :- true.
':=>'(p991857, pipeline([mitigation, rebalancing, features], nn)) :- true.
':=>'(p112166, pipeline([mitigation, rebalancing, features], nn)) :- true.
':=>'(p24226, pipeline([mitigation, rebalancing, features], nn)) :- true.
':=>'(p680071, pipeline([mitigation, rebalancing, features], nn)) :- true.
':=>'(p272458, pipeline([mitigation, rebalancing, features], rf)) :- true.
':=>'(p416129, pipeline([mitigation, rebalancing, features], rf)) :- true.
':=>'(p141481, pipeline([rebalancing, normalization, features], knn)) :- true.
':=>'(p540297, pipeline([rebalancing, normalization, features], nn)) :- true.
':=>'(p933742, pipeline([rebalancing, normalization, features], nn)) :- true.
':=>'(p613670, pipeline([rebalancing, normalization, features], nn)) :- true.
':=>'(p381380, pipeline([rebalancing, normalization, features], rf)) :- true.
':=>'(p35078, pipeline([rebalancing, normalization, features], rf)) :- true.
':=>'(p458510, pipeline([rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p692427, pipeline([rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p394777, pipeline([rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p640982, pipeline([rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p556197, pipeline([rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p748713, pipeline([rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p828531, pipeline([rebalancing, features, normalization], knn)) :- true.
':=>'(p61007, pipeline([rebalancing, features, normalization], nn)) :- true.
':=>'(p101386, pipeline([rebalancing, features, normalization], nn)) :- true.
':=>'(p720992, pipeline([rebalancing, features, normalization], nn)) :- true.
':=>'(p87166, pipeline([rebalancing, features, normalization], rf)) :- true.
':=>'(p590815, pipeline([rebalancing, features, normalization], rf)) :- true.
':=>'(p546514, pipeline([rebalancing, features, mitigation], knn)) :- true.
':=>'(p259053, pipeline([rebalancing, features, mitigation], knn)) :- true.
':=>'(p965131, pipeline([rebalancing, features, mitigation], nn)) :- true.
':=>'(p254467, pipeline([rebalancing, features, mitigation], nn)) :- true.
':=>'(p59420, pipeline([rebalancing, features, mitigation], nn)) :- true.
':=>'(p765069, pipeline([rebalancing, features, mitigation], nn)) :- true.
':=>'(p775102, pipeline([rebalancing, features, mitigation], nn)) :- true.
':=>'(p354698, pipeline([rebalancing, features, mitigation], nn)) :- true.
':=>'(p4151, pipeline([rebalancing, features, mitigation], rf)) :- true.
':=>'(p921546, pipeline([rebalancing, features, mitigation], rf)) :- true.
':=>'(p938907, pipeline([rebalancing, features, mitigation], rf)) :- true.
':=>'(p40665, pipeline([rebalancing, mitigation, normalization], knn)) :- true.
':=>'(p571110, pipeline([rebalancing, mitigation, normalization], nn)) :- true.
':=>'(p503932, pipeline([rebalancing, mitigation, normalization], nn)) :- true.
':=>'(p791886, pipeline([rebalancing, mitigation, normalization], rf)) :- true.
':=>'(p366639, pipeline([rebalancing, mitigation, normalization], rf)) :- true.
':=>'(p366227, pipeline([rebalancing, mitigation, normalization], rf)) :- true.
':=>'(p154247, pipeline([rebalancing, mitigation, features], knn)) :- true.
':=>'(p683400, pipeline([rebalancing, mitigation, features], knn)) :- true.
':=>'(p557811, pipeline([rebalancing, mitigation, features], nn)) :- true.
':=>'(p907371, pipeline([rebalancing, mitigation, features], nn)) :- true.
':=>'(p384045, pipeline([rebalancing, mitigation, features], nn)) :- true.
':=>'(p2444, pipeline([rebalancing, mitigation, features], nn)) :- true.
':=>'(p221329, pipeline([rebalancing, mitigation, features], nn)) :- true.
':=>'(p638079, pipeline([rebalancing, mitigation, features], nn)) :- true.
':=>'(p757233, pipeline([rebalancing, mitigation, features], rf)) :- true.
':=>'(p962317, pipeline([rebalancing, mitigation, features], rf)) :- true.
':=>'(p109038, pipeline([normalization, features, mitigation, rebalancing], rf)) :- true.
':=>'(p592410, pipeline([normalization, features, rebalancing, mitigation], rf)) :- true.
':=>'(p604453, pipeline([normalization, rebalancing, features, mitigation], rf)) :- true.
':=>'(p171174, pipeline([features, normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p500818, pipeline([features, normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p378191, pipeline([features, mitigation, normalization, rebalancing], rf)) :- true.
':=>'(p509615, pipeline([features, mitigation, rebalancing, normalization], rf)) :- true.
':=>'(p17179, pipeline([features, rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p68286, pipeline([features, rebalancing, mitigation, normalization], rf)) :- true.
':=>'(p982474, pipeline([rebalancing, normalization, features, mitigation], rf)) :- true.
':=>'(p535118, pipeline([rebalancing, features, normalization, mitigation], rf)) :- true.
':=>'(p714350, pipeline([rebalancing, features, mitigation, normalization], rf)) :- true.

Checking Config
Exporting Config
Saving Graph
Exporting AutoML input
Exporting Space
Exporting Constraints
Input created for iteration Config(iteration=4, dataset=credit-g, metric=balanced_accuracy, fairnessMetric=demographic_parity_ratio, sensitiveFeatures=[personal_status, sex], mode=max, batchSize=999999, timeBudget=900, seed=42)
Here is the standard output/error of the command:

f61c2d7eca095acde734096ef49c3e46c9741dc42f9c75b558d0419f371afebb
Here is the standard output/error of the command:

Here is the standard output/error of the command:

WARNING:root:No module named 'rpy2': FairAdapt will be unavailable. To install, run:
pip install 'aif360[FairAdapt]'
INFO:flaml.tune.searcher.blendsearch:No low-cost partial config given to the search algorithm. For cost-frugal search, consider providing low-cost values for cost-related hps via 'low_cost_partial_config'. More info can be found at https://microsoft.github.io/FLAML/docs/FAQ#about-low_cost_partial_config-in-tune
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Added successfully: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Trying to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: features == 'FunctionTransformer' && Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Added successfully: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: features == 'FunctionTransformer' && Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Trying to add: (Forbidden: features == 'FunctionTransformer' && Forbidden: rebalancing == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Added successfully: (Forbidden: features == 'FunctionTransformer' && Forbidden: rebalancing == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Trying to add: (Forbidden: rebalancing == 'FunctionTransformer' && Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Added successfully: (Forbidden: rebalancing == 'FunctionTransformer' && Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Added successfully: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Trying to add: (Forbidden: features == 'FunctionTransformer' && Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Added successfully: (Forbidden: features == 'FunctionTransformer' && Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Trying to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Added successfully: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Trying to add: (Forbidden: features == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Added successfully: (Forbidden: features == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Trying to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: rebalancing == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Added successfully: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: rebalancing == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Trying to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Added successfully: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Trying to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: features == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Added successfully: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: features == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer' && Forbidden: normalization == 'FunctionTransformer')
Trying to add: (Forbidden: features == 'FunctionTransformer' && Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: features == 'FunctionTransformer' && Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: features == 'FunctionTransformer' && Forbidden: normalization == 'FunctionTransformer')
Trying to add: (Forbidden: rebalancing == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: rebalancing == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: features == 'FunctionTransformer' && Forbidden: normalization == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: features == 'FunctionTransformer' && Forbidden: normalization == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_mitigation_features_rebalancing_classification', 'mitigation_normalization_features_rebalancing_classification', 'mitigation_features_normalization_rebalancing_classification', 'mitigation_features_rebalancing_normalization_classification', 'normalization_mitigation_rebalancing_features_classification', 'mitigation_normalization_rebalancing_features_classification', 'mitigation_rebalancing_normalization_features_classification', 'mitigation_rebalancing_features_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification', 'rebalancing_mitigation_normalization_features_classification', 'rebalancing_mitigation_features_normalization_classification'} && Forbidden: rebalancing in {'NearMiss', 'SMOTE'} && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_mitigation_features_rebalancing_classification', 'mitigation_normalization_features_rebalancing_classification', 'mitigation_features_normalization_rebalancing_classification', 'mitigation_features_rebalancing_normalization_classification', 'normalization_mitigation_rebalancing_features_classification', 'mitigation_normalization_rebalancing_features_classification', 'mitigation_rebalancing_normalization_features_classification', 'mitigation_rebalancing_features_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification', 'rebalancing_mitigation_normalization_features_classification', 'rebalancing_mitigation_features_normalization_classification'} && Forbidden: rebalancing in {'NearMiss', 'SMOTE'} && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: features == 'FunctionTransformer' && Forbidden: normalization == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_mitigation_features_rebalancing_classification', 'mitigation_normalization_features_rebalancing_classification', 'mitigation_features_normalization_rebalancing_classification', 'mitigation_features_rebalancing_normalization_classification', 'normalization_mitigation_rebalancing_features_classification', 'mitigation_normalization_rebalancing_features_classification', 'mitigation_rebalancing_normalization_features_classification', 'mitigation_rebalancing_features_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification', 'rebalancing_mitigation_normalization_features_classification', 'rebalancing_mitigation_features_normalization_classification'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_mitigation_features_rebalancing_classification', 'mitigation_normalization_features_rebalancing_classification', 'mitigation_features_normalization_rebalancing_classification', 'mitigation_features_rebalancing_normalization_classification', 'normalization_mitigation_rebalancing_features_classification', 'mitigation_normalization_rebalancing_features_classification', 'mitigation_rebalancing_normalization_features_classification', 'mitigation_rebalancing_features_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification', 'rebalancing_mitigation_normalization_features_classification', 'rebalancing_mitigation_features_normalization_classification'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: features == 'FunctionTransformer' && Forbidden: normalization == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_mitigation_features_rebalancing_classification', 'mitigation_normalization_features_rebalancing_classification', 'mitigation_features_normalization_rebalancing_classification', 'mitigation_features_rebalancing_normalization_classification', 'normalization_mitigation_rebalancing_features_classification', 'mitigation_normalization_rebalancing_features_classification', 'mitigation_rebalancing_normalization_features_classification', 'mitigation_rebalancing_features_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification', 'rebalancing_mitigation_normalization_features_classification', 'rebalancing_mitigation_features_normalization_classification'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_mitigation_features_rebalancing_classification', 'mitigation_normalization_features_rebalancing_classification', 'mitigation_features_normalization_rebalancing_classification', 'mitigation_features_rebalancing_normalization_classification', 'normalization_mitigation_rebalancing_features_classification', 'mitigation_normalization_rebalancing_features_classification', 'mitigation_rebalancing_normalization_features_classification', 'mitigation_rebalancing_features_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification', 'rebalancing_mitigation_normalization_features_classification', 'rebalancing_mitigation_features_normalization_classification'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: features == 'FunctionTransformer' && Forbidden: normalization == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_mitigation_features_rebalancing_classification', 'mitigation_normalization_features_rebalancing_classification', 'mitigation_features_normalization_rebalancing_classification', 'mitigation_features_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: rebalancing in {'NearMiss', 'SMOTE'} && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_mitigation_features_rebalancing_classification', 'mitigation_normalization_features_rebalancing_classification', 'mitigation_features_normalization_rebalancing_classification', 'mitigation_features_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: rebalancing in {'NearMiss', 'SMOTE'} && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: features == 'FunctionTransformer' && Forbidden: normalization == 'FunctionTransformer')
AutoML: starting optimization.
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification')} was NaN

211
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5333333333333334), 'by_group': {'female_div/dep/mar': np.float64(0.6), 'male_div/sep': np.float64(0.67), 'male_mar/wid': np.float64(0.59), 'male_single': np.float64(0.93)}, 'status': 'fail', 'total_time': 0.45554161071777344, 'fit_time': np.float64(0.06668310165405274), 'score_time': np.float64(0.0042897224426269535), 'absolute_time': 1746694718.792337, 'flatten_demographic_parity_ratio': '0.0_nan_0.76_nan_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.66_0.5_0.5'}
212
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 5, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9487784558752301), 'balanced_accuracy': np.float64(0.5173809523809524), 'by_group': {'female_div/dep/mar': np.float64(0.98), 'male_div/sep': np.float64(0.98), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.96)}, 'status': 'success', 'total_time': 1.098642110824585, 'fit_time': np.float64(0.1853926181793213), 'score_time': np.float64(0.00998702049255371), 'absolute_time': 1746694720.1397827, 'flatten_demographic_parity_ratio': '0.98_0.96_0.94_0.9_0.95', 'flatten_balanced_accuracy': '0.51_0.52_0.51_0.51_0.54'}
213
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.5402353246228242), 'balanced_accuracy': np.float64(0.6152380952380951), 'by_group': {'female_div/dep/mar': np.float64(0.92), 'male_div/sep': np.float64(0.55), 'male_mar/wid': np.float64(0.94), 'male_single': np.float64(0.83)}, 'status': 'success', 'total_time': 0.6768765449523926, 'fit_time': np.float64(0.10673389434814454), 'score_time': np.float64(0.005533552169799805), 'absolute_time': 1746694721.068877, 'flatten_demographic_parity_ratio': '0.87_0.45_0.76_0.29_0.33', 'flatten_balanced_accuracy': '0.65_0.63_0.57_0.59_0.62'}
214
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 4, 'min_samples_split': 6, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.8178145581087689), 'balanced_accuracy': np.float64(0.5473809523809523), 'by_group': {'female_div/dep/mar': np.float64(0.93), 'male_div/sep': np.float64(0.88), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.86)}, 'status': 'success', 'total_time': 38.735583782196045, 'fit_time': np.float64(1.0079968929290772), 'score_time': np.float64(0.008679819107055665), 'absolute_time': 1746694760.062975, 'flatten_demographic_parity_ratio': '0.84_0.8_0.92_0.79_0.74', 'flatten_balanced_accuracy': '0.56_0.58_0.52_0.56_0.52'}
215
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 1.2539169788360596, 'fit_time': np.float64(0.2284984588623047), 'score_time': np.float64(0.0036321640014648437), 'absolute_time': 1746694761.5763848, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
216
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.8116815352454865), 'balanced_accuracy': np.float64(0.6304761904761904), 'by_group': {'female_div/dep/mar': np.float64(0.88), 'male_div/sep': np.float64(0.86), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.9)}, 'status': 'success', 'total_time': 1.542571783065796, 'fit_time': np.float64(0.28339014053344724), 'score_time': np.float64(0.0058057308197021484), 'absolute_time': 1746694763.3846967, 'flatten_demographic_parity_ratio': '0.87_0.75_0.81_0.85_0.78', 'flatten_balanced_accuracy': '0.59_0.65_0.63_0.64_0.65'}
217
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(50), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.6683964402781606), 'balanced_accuracy': np.float64(0.6054761904761905), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.69), 'male_mar/wid': np.float64(0.93), 'male_single': np.float64(0.82)}, 'status': 'success', 'total_time': 3.407108783721924, 'fit_time': np.float64(0.656235933303833), 'score_time': np.float64(0.00537724494934082), 'absolute_time': 1746694767.0494828, 'flatten_demographic_parity_ratio': '0.97_0.75_0.55_0.78_0.29', 'flatten_balanced_accuracy': '0.62_0.6_0.58_0.64_0.57'}
218
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 2, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9417713985071192), 'balanced_accuracy': np.float64(0.5107142857142857), 'by_group': {'female_div/dep/mar': np.float64(0.98), 'male_div/sep': np.float64(0.95), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.97)}, 'status': 'success', 'total_time': 0.8585186004638672, 'fit_time': np.float64(0.14152746200561522), 'score_time': np.float64(0.007705116271972656), 'absolute_time': 1746694768.1696694, 'flatten_demographic_parity_ratio': '1.0_0.9_0.97_0.9_0.94', 'flatten_balanced_accuracy': '0.5_0.51_0.5_0.52_0.52'}
219
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.5948901098901098), 'balanced_accuracy': np.float64(0.5992857142857144), 'by_group': {'female_div/dep/mar': np.float64(0.81), 'male_div/sep': np.float64(0.63), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.67)}, 'status': 'success', 'total_time': 1.1009736061096191, 'fit_time': np.float64(0.18532729148864746), 'score_time': np.float64(0.009834194183349609), 'absolute_time': 1746694773.1257164, 'flatten_demographic_parity_ratio': '0.69_0.6_0.8_0.48_0.41', 'flatten_balanced_accuracy': '0.66_0.62_0.6_0.58_0.54'}
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(50), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(50), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')} was NaN

220
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(50), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5373809523809523), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(0.59), 'male_mar/wid': np.float64(0.93), 'male_single': np.float64(1.0)}, 'status': 'fail', 'total_time': 41.30412840843201, 'fit_time': np.float64(8.172428083419799), 'score_time': np.float64(0.05196700096130371), 'absolute_time': 1746694814.6904705, 'flatten_demographic_parity_ratio': '0.17_0.99_nan_nan_nan', 'flatten_balanced_accuracy': '0.68_0.51_0.5_0.5_0.5'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

221
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.00043463706970214844, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746694814.991076}
222
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(50), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9705882352941178), 'balanced_accuracy': np.float64(0.5097619047619047), 'by_group': {'female_div/dep/mar': np.float64(0.99), 'male_div/sep': np.float64(0.97), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.99)}, 'status': 'success', 'total_time': 32.657095193862915, 'fit_time': np.float64(6.454824352264405), 'score_time': np.float64(0.04611210823059082), 'absolute_time': 1746694847.912221, 'flatten_demographic_parity_ratio': '0.95_1.0_1.0_0.9_1.0', 'flatten_balanced_accuracy': '0.53_0.5_0.5_0.52_0.5'}
223
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 6, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.7696075163398692), 'balanced_accuracy': np.float64(0.5935714285714286), 'by_group': {'female_div/dep/mar': np.float64(0.97), 'male_div/sep': np.float64(0.77), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.96)}, 'status': 'success', 'total_time': 0.7452704906463623, 'fit_time': np.float64(0.1201584815979004), 'score_time': np.float64(0.0067882537841796875), 'absolute_time': 1746694848.925946, 'flatten_demographic_parity_ratio': '0.8_0.78_0.85_0.89_0.53', 'flatten_balanced_accuracy': '0.62_0.61_0.55_0.63_0.56'}
224
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.8546865649774164), 'balanced_accuracy': np.float64(0.5628571428571428), 'by_group': {'female_div/dep/mar': np.float64(0.87), 'male_div/sep': np.float64(0.99), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.88)}, 'status': 'success', 'total_time': 1.2936623096466064, 'fit_time': np.float64(0.23511834144592286), 'score_time': np.float64(0.004642868041992187), 'absolute_time': 1746694850.480757, 'flatten_demographic_parity_ratio': '0.79_0.87_0.84_0.89_0.89', 'flatten_balanced_accuracy': '0.56_0.56_0.55_0.57_0.57'}
225
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 9}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.7029310106199423), 'balanced_accuracy': np.float64(0.6235714285714286), 'by_group': {'female_div/dep/mar': np.float64(0.91), 'male_div/sep': np.float64(0.72), 'male_mar/wid': np.float64(0.94), 'male_single': np.float64(0.98)}, 'status': 'success', 'total_time': 1.0132184028625488, 'fit_time': np.float64(0.1709240436553955), 'score_time': np.float64(0.004641437530517578), 'absolute_time': 1746694851.760265, 'flatten_demographic_parity_ratio': '0.43_0.85_0.84_0.88_0.51', 'flatten_balanced_accuracy': '0.6_0.64_0.66_0.62_0.59'}
226
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.5514032813889562), 'balanced_accuracy': np.float64(0.6297619047619047), 'by_group': {'female_div/dep/mar': np.float64(0.81), 'male_div/sep': np.float64(0.66), 'male_mar/wid': np.float64(0.71), 'male_single': np.float64(0.91)}, 'status': 'success', 'total_time': 3.2381536960601807, 'fit_time': np.float64(0.6192057132720947), 'score_time': np.float64(0.007306241989135742), 'absolute_time': 1746694855.2644274, 'flatten_demographic_parity_ratio': '0.49_0.44_0.51_0.61_0.7', 'flatten_balanced_accuracy': '0.63_0.62_0.62_0.64_0.64'}
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')} was NaN

227
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.508095238095238), 'by_group': {'female_div/dep/mar': np.float64(0.9), 'male_div/sep': np.float64(0.93), 'male_mar/wid': np.float64(0.89), 'male_single': np.float64(0.86)}, 'status': 'fail', 'total_time': 5.374148368835449, 'fit_time': np.float64(1.0443410873413086), 'score_time': np.float64(0.006902742385864258), 'absolute_time': 1746694864.9198408, 'flatten_demographic_parity_ratio': '0.68_1.0_0.68_nan_nan', 'flatten_balanced_accuracy': '0.51_0.5_0.53_0.5_0.5'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 609, in objective
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_param_validation.py", line 216, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 431, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 517, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 5 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
5 fits failed with the following error:
Traceback (most recent call last):
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 866, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "/usr/local/lib/python3.12/site-packages/sklearn/base.py", line 1389, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 518, in fit
    Xt, yt = self._fit(X, y, routed_params, raw_params=params)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 430, in _fit
    X, fitted_transformer = fit_transform_one_cached(
                            ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/joblib/memory.py", line 312, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 1383, in _fit_transform_one
    res = transformer.fit_transform(X, y, **params.get("fit_transform", {}))
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_set_output.py", line 319, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 76, in fit_transform
    df_X, df_y = self._prepare_dataset(X, y, fit=True)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 37, in _prepare_dataset
    raise Exception("No sensitive features to mitigate")
Exception: No sensitive features to mitigate


228
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.02204585075378418, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746694865.2097855}
229
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 3, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.5469038486480713, 'fit_time': np.float64(0.07860794067382812), 'score_time': np.float64(0.008494234085083008), 'absolute_time': 1746694866.029154, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
230
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_split': 2, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.4927788928411842), 'balanced_accuracy': np.float64(0.5857142857142856), 'by_group': {'female_div/dep/mar': np.float64(0.58), 'male_div/sep': np.float64(0.63), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.73)}, 'status': 'success', 'total_time': 0.7637090682983398, 'fit_time': np.float64(0.11871719360351562), 'score_time': np.float64(0.009336137771606445), 'absolute_time': 1746694867.069486, 'flatten_demographic_parity_ratio': '0.64_0.51_0.63_0.29_0.38', 'flatten_balanced_accuracy': '0.69_0.61_0.56_0.53_0.53'}
231
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.5569214808894717), 'balanced_accuracy': np.float64(0.5952380952380952), 'by_group': {'female_div/dep/mar': np.float64(0.63), 'male_div/sep': np.float64(0.6), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.81)}, 'status': 'success', 'total_time': 0.2326197624206543, 'fit_time': np.float64(0.022439956665039062), 'score_time': np.float64(0.004890871047973633), 'absolute_time': 1746694867.5840163, 'flatten_demographic_parity_ratio': '0.58_0.5_0.67_0.48_0.56', 'flatten_balanced_accuracy': '0.68_0.68_0.55_0.55_0.51'}
232
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'features': {'type': np.str_('SelectKBest'), 'k': 1}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 1.5247750282287598, 'fit_time': np.float64(0.2821136474609375), 'score_time': np.float64(0.003330707550048828), 'absolute_time': 1746694869.381677, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
233
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 4, 'max_leaf_nodes': 4, 'min_samples_split': 2, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.6739668831193872), 'balanced_accuracy': np.float64(0.5176190476190475), 'by_group': {'female_div/dep/mar': np.float64(0.85), 'male_div/sep': np.float64(0.86), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.75)}, 'status': 'success', 'total_time': 13.205456495285034, 'fit_time': np.float64(2.609629249572754), 'score_time': np.float64(0.009595680236816406), 'absolute_time': 1746694882.8597848, 'flatten_demographic_parity_ratio': '0.55_0.61_0.59_0.81_0.8', 'flatten_balanced_accuracy': '0.52_0.53_0.45_0.57_0.51'}
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')} was NaN

234
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5269047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.84), 'male_div/sep': np.float64(0.78), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.77)}, 'status': 'fail', 'total_time': 5.240989446640015, 'fit_time': np.float64(1.0230958938598633), 'score_time': np.float64(0.00536503791809082), 'absolute_time': 1746694888.3752038, 'flatten_demographic_parity_ratio': '0.64_nan_0.91_0.62_0.78', 'flatten_balanced_accuracy': '0.61_0.5_0.5_0.51_0.52'}
235
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(50), 'solver': np.str_('adam')}, 'features': {'type': np.str_('SelectKBest'), 'k': 9}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.6926611486136581), 'balanced_accuracy': np.float64(0.5504761904761905), 'by_group': {'female_div/dep/mar': np.float64(0.74), 'male_div/sep': np.float64(0.78), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.73)}, 'status': 'success', 'total_time': 2.922762870788574, 'fit_time': np.float64(0.5425686359405517), 'score_time': np.float64(0.005699062347412109), 'absolute_time': 1746694895.4317446, 'flatten_demographic_parity_ratio': '0.9_0.87_1.0_0.7_0.0', 'flatten_balanced_accuracy': '0.58_0.6_0.5_0.57_0.51'}
236
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.8857685069140177), 'balanced_accuracy': np.float64(0.5226190476190476), 'by_group': {'female_div/dep/mar': np.float64(0.97), 'male_div/sep': np.float64(0.89), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.96)}, 'status': 'success', 'total_time': 0.6484856605529785, 'fit_time': np.float64(0.10787053108215332), 'score_time': np.float64(0.0032777309417724608), 'absolute_time': 1746694896.3566384, 'flatten_demographic_parity_ratio': '0.74_0.98_0.93_0.9_0.87', 'flatten_balanced_accuracy': '0.57_0.5_0.52_0.52_0.5'}
237
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 6, 'min_samples_split': 6, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9085482807111205), 'balanced_accuracy': np.float64(0.5152380952380952), 'by_group': {'female_div/dep/mar': np.float64(0.97), 'male_div/sep': np.float64(0.92), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.95)}, 'status': 'success', 'total_time': 0.5947961807250977, 'fit_time': np.float64(0.08898134231567383), 'score_time': np.float64(0.007601213455200195), 'absolute_time': 1746694897.2313163, 'flatten_demographic_parity_ratio': '0.92_1.0_0.98_0.9_0.74', 'flatten_balanced_accuracy': '0.53_0.5_0.5_0.52_0.52'}
238
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.3296318958818959), 'balanced_accuracy': np.float64(0.6423809523809524), 'by_group': {'female_div/dep/mar': np.float64(0.87), 'male_div/sep': np.float64(0.33), 'male_mar/wid': np.float64(0.82), 'male_single': np.float64(0.91)}, 'status': 'success', 'total_time': 1.6163668632507324, 'fit_time': np.float64(0.29962005615234377), 'score_time': np.float64(0.004348897933959961), 'absolute_time': 1746694899.1286435, 'flatten_demographic_parity_ratio': '0.19_0.33_0.65_0.48_0.0', 'flatten_balanced_accuracy': '0.67_0.66_0.64_0.63_0.62'}
239
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.7677389364109202), 'balanced_accuracy': np.float64(0.6280952380952382), 'by_group': {'female_div/dep/mar': np.float64(0.88), 'male_div/sep': np.float64(0.83), 'male_mar/wid': np.float64(0.88), 'male_single': np.float64(0.93)}, 'status': 'success', 'total_time': 1.7333405017852783, 'fit_time': np.float64(0.32291626930236816), 'score_time': np.float64(0.004655694961547852), 'absolute_time': 1746694901.147326, 'flatten_demographic_parity_ratio': '0.78_0.77_0.71_0.93_0.64', 'flatten_balanced_accuracy': '0.59_0.62_0.61_0.66_0.67'}
240
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 3, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.2984955115102174), 'balanced_accuracy': np.float64(0.6466666666666667), 'by_group': {'female_div/dep/mar': np.float64(0.92), 'male_div/sep': np.float64(0.3), 'male_mar/wid': np.float64(0.84), 'male_single': np.float64(0.85)}, 'status': 'success', 'total_time': 0.2149670124053955, 'fit_time': np.float64(0.01888589859008789), 'score_time': np.float64(0.004191684722900391), 'absolute_time': 1746694901.646855, 'flatten_demographic_parity_ratio': '0.22_0.13_0.66_0.29_0.19', 'flatten_balanced_accuracy': '0.68_0.61_0.74_0.59_0.61'}
241
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.6649203374092394), 'balanced_accuracy': np.float64(0.6488095238095238), 'by_group': {'female_div/dep/mar': np.float64(0.73), 'male_div/sep': np.float64(0.86), 'male_mar/wid': np.float64(0.84), 'male_single': np.float64(0.76)}, 'status': 'success', 'total_time': 1.7104735374450684, 'fit_time': np.float64(0.31685609817504884), 'score_time': np.float64(0.004775619506835938), 'absolute_time': 1746694903.640532, 'flatten_demographic_parity_ratio': '0.63_0.78_0.63_0.67_0.61', 'flatten_balanced_accuracy': '0.58_0.69_0.67_0.66_0.64'}
242
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 9}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.998165137614679), 'balanced_accuracy': np.float64(0.5016666666666667), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.809363842010498, 'fit_time': np.float64(0.1231001377105713), 'score_time': np.float64(0.010609722137451172), 'absolute_time': 1746694904.7458375, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_0.99_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.51_0.5'}
243
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 5, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('SelectKBest'), 'k': 1}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.10145328084931582), 'balanced_accuracy': np.float64(0.6354761904761904), 'by_group': {'female_div/dep/mar': np.float64(0.75), 'male_div/sep': np.float64(0.36), 'male_mar/wid': np.float64(0.1), 'male_single': np.float64(0.96)}, 'status': 'success', 'total_time': 0.3246307373046875, 'fit_time': np.float64(0.0393864631652832), 'score_time': np.float64(0.004996252059936523), 'absolute_time': 1746694905.4562776, 'flatten_demographic_parity_ratio': '0.0_0.07_0.0_0.43_0.0', 'flatten_balanced_accuracy': '0.66_0.61_0.64_0.6_0.67'}
244
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_split': 3, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9062598461681031), 'balanced_accuracy': np.float64(0.5488095238095237), 'by_group': {'female_div/dep/mar': np.float64(0.96), 'male_div/sep': np.float64(0.97), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.93)}, 'status': 'success', 'total_time': 0.6146941184997559, 'fit_time': np.float64(0.09150776863098145), 'score_time': np.float64(0.008380460739135741), 'absolute_time': 1746694910.4128256, 'flatten_demographic_parity_ratio': '0.93_0.89_0.93_0.9_0.88', 'flatten_balanced_accuracy': '0.55_0.57_0.56_0.51_0.55'}
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')} was NaN

245
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 11.178190469741821, 'fit_time': np.float64(2.2070987224578857), 'score_time': np.float64(0.007328128814697266), 'absolute_time': 1746694921.8810837, 'flatten_demographic_parity_ratio': 'nan_nan_nan_nan_nan', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
246
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 5, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 1}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9761467889908257), 'balanced_accuracy': np.float64(0.5083333333333333), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(0.98), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.98)}, 'status': 'success', 'total_time': 3.7178738117218018, 'fit_time': np.float64(0.5937281131744385), 'score_time': np.float64(0.012730789184570313), 'absolute_time': 1746694925.890818, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_0.88_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.54_0.5'}
247
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(50), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.7717182105159318), 'balanced_accuracy': np.float64(0.549047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.86), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.78)}, 'status': 'success', 'total_time': 31.363311052322388, 'fit_time': np.float64(1.2095312595367431), 'score_time': np.float64(0.007093048095703125), 'absolute_time': 1746694957.5496116, 'flatten_demographic_parity_ratio': '0.84_0.79_0.86_0.63_0.74', 'flatten_balanced_accuracy': '0.56_0.59_0.55_0.52_0.52'}
248
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 4, 'min_samples_split': 2, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('PCA'), 'n_components': 3}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.4070635013703995), 'balanced_accuracy': np.float64(0.5595238095238095), 'by_group': {'female_div/dep/mar': np.float64(0.54), 'male_div/sep': np.float64(0.52), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.81)}, 'status': 'success', 'total_time': 0.6214632987976074, 'fit_time': np.float64(0.09831538200378417), 'score_time': np.float64(0.005812501907348633), 'absolute_time': 1746694958.46588, 'flatten_demographic_parity_ratio': '0.62_0.48_0.34_0.59_0.0', 'flatten_balanced_accuracy': '0.65_0.57_0.49_0.56_0.52'}
249
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 6, 'min_samples_split': 2, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.41879178885630497), 'balanced_accuracy': np.float64(0.6507142857142858), 'by_group': {'female_div/dep/mar': np.float64(0.76), 'male_div/sep': np.float64(0.45), 'male_mar/wid': np.float64(0.92), 'male_single': np.float64(0.85)}, 'status': 'success', 'total_time': 0.822500467300415, 'fit_time': np.float64(0.1302783966064453), 'score_time': np.float64(0.009787273406982423), 'absolute_time': 1746694959.582755, 'flatten_demographic_parity_ratio': '0.22_0.49_0.72_0.49_0.17', 'flatten_balanced_accuracy': '0.71_0.67_0.68_0.59_0.6'}
250
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.932191641182467), 'balanced_accuracy': np.float64(0.5121428571428571), 'by_group': {'female_div/dep/mar': np.float64(0.98), 'male_div/sep': np.float64(0.95), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.93)}, 'status': 'success', 'total_time': 5.0252227783203125, 'fit_time': np.float64(0.9761898517608643), 'score_time': np.float64(0.007653284072875977), 'absolute_time': 1746694964.9058151, 'flatten_demographic_parity_ratio': '1.0_1.0_0.97_0.84_0.84', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.54_0.52'}
251
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(10), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.39883516483516485), 'balanced_accuracy': np.float64(0.5283333333333333), 'by_group': {'female_div/dep/mar': np.float64(0.79), 'male_div/sep': np.float64(0.57), 'male_mar/wid': np.float64(0.77), 'male_single': np.float64(0.7)}, 'status': 'success', 'total_time': 7.167881965637207, 'fit_time': np.float64(1.4053563594818115), 'score_time': np.float64(0.005312490463256836), 'absolute_time': 1746694972.4792242, 'flatten_demographic_parity_ratio': '0.33_0.48_0.54_0.51_0.14', 'flatten_balanced_accuracy': '0.52_0.56_0.54_0.51_0.52'}
252
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.5347140414510769), 'balanced_accuracy': np.float64(0.684047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.57), 'male_mar/wid': np.float64(0.76), 'male_single': np.float64(0.94)}, 'status': 'success', 'total_time': 0.7014191150665283, 'fit_time': np.float64(0.09314689636230469), 'score_time': np.float64(0.007133913040161133), 'absolute_time': 1746694977.445129, 'flatten_demographic_parity_ratio': '0.34_0.47_0.63_0.83_0.41', 'flatten_balanced_accuracy': '0.68_0.67_0.71_0.66_0.7'}
253
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_features_normalization_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.551064935064935), 'balanced_accuracy': np.float64(0.6292857142857142), 'by_group': {'female_div/dep/mar': np.float64(0.82), 'male_div/sep': np.float64(0.59), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.79)}, 'status': 'success', 'total_time': 1.4341044425964355, 'fit_time': np.float64(0.26330857276916503), 'score_time': np.float64(0.004477596282958985), 'absolute_time': 1746694979.1772256, 'flatten_demographic_parity_ratio': '0.41_0.75_0.67_0.41_0.52', 'flatten_balanced_accuracy': '0.68_0.67_0.6_0.58_0.62'}
254
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_split': 3, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.5447249287021483), 'balanced_accuracy': np.float64(0.6280952380952382), 'by_group': {'female_div/dep/mar': np.float64(0.84), 'male_div/sep': np.float64(0.57), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.86)}, 'status': 'success', 'total_time': 0.7471303939819336, 'fit_time': np.float64(0.11912493705749512), 'score_time': np.float64(0.007824325561523437), 'absolute_time': 1746694980.2195652, 'flatten_demographic_parity_ratio': '0.75_0.45_0.85_0.44_0.24', 'flatten_balanced_accuracy': '0.7_0.65_0.61_0.61_0.57'}
255
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9078772123055245), 'balanced_accuracy': np.float64(0.5452380952380952), 'by_group': {'female_div/dep/mar': np.float64(0.95), 'male_div/sep': np.float64(0.99), 'male_mar/wid': np.float64(0.94), 'male_single': np.float64(0.95)}, 'status': 'success', 'total_time': 9.699161767959595, 'fit_time': np.float64(1.9092968463897706), 'score_time': np.float64(0.009038400650024415), 'absolute_time': 1746694990.2161257, 'flatten_demographic_parity_ratio': '0.89_0.96_0.83_0.96_0.89', 'flatten_balanced_accuracy': '0.57_0.54_0.53_0.57_0.52'}
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification')} was NaN

256
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.2831428050994873, 'fit_time': np.float64(0.03401341438293457), 'score_time': np.float64(0.003815031051635742), 'absolute_time': 1746694990.7964525, 'flatten_demographic_parity_ratio': 'nan_nan_nan_nan_nan', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
257
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 4, 'min_samples_split': 2, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9502212628170534), 'balanced_accuracy': np.float64(0.5197619047619046), 'by_group': {'female_div/dep/mar': np.float64(0.99), 'male_div/sep': np.float64(0.97), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.96)}, 'status': 'success', 'total_time': 5.3892011642456055, 'fit_time': np.float64(1.051297092437744), 'score_time': np.float64(0.006247425079345703), 'absolute_time': 1746694996.484593, 'flatten_demographic_parity_ratio': '0.95_1.0_0.96_0.89_0.94', 'flatten_balanced_accuracy': '0.54_0.5_0.51_0.52_0.53'}
258
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 2, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.43520303100155033), 'balanced_accuracy': np.float64(0.5673809523809524), 'by_group': {'female_div/dep/mar': np.float64(0.61), 'male_div/sep': np.float64(0.71), 'male_mar/wid': np.float64(0.93), 'male_single': np.float64(0.96)}, 'status': 'success', 'total_time': 0.8581056594848633, 'fit_time': np.float64(0.1413264751434326), 'score_time': np.float64(0.008440828323364258), 'absolute_time': 1746694997.643264, 'flatten_demographic_parity_ratio': '0.34_0.53_0.32_0.36_0.63', 'flatten_balanced_accuracy': '0.59_0.55_0.55_0.59_0.56'}
259
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.6845158800916473), 'balanced_accuracy': np.float64(0.5421428571428571), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.76), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.75)}, 'status': 'success', 'total_time': 7.424994945526123, 'fit_time': np.float64(1.458235740661621), 'score_time': np.float64(0.006307029724121093), 'absolute_time': 1746695009.5700681, 'flatten_demographic_parity_ratio': '0.88_0.45_0.84_0.77_0.48', 'flatten_balanced_accuracy': '0.55_0.55_0.54_0.55_0.52'}
260
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9563302752293577), 'balanced_accuracy': np.float64(0.515), 'by_group': {'female_div/dep/mar': np.float64(0.99), 'male_div/sep': np.float64(0.96), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.98)}, 'status': 'success', 'total_time': 6.741671323776245, 'fit_time': np.float64(1.3231963634490966), 'score_time': np.float64(0.005497455596923828), 'absolute_time': 1746695016.6208394, 'flatten_demographic_parity_ratio': '1.0_0.9_0.98_0.9_1.0', 'flatten_balanced_accuracy': '0.5_0.55_0.5_0.52_0.5'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

261
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0004069805145263672, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746695016.929072}
262
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 5, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.59617859584025), 'balanced_accuracy': np.float64(0.6745238095238095), 'by_group': {'female_div/dep/mar': np.float64(0.82), 'male_div/sep': np.float64(0.6), 'male_mar/wid': np.float64(0.88), 'male_single': np.float64(0.9)}, 'status': 'success', 'total_time': 1.1030433177947998, 'fit_time': np.float64(0.1742074966430664), 'score_time': np.float64(0.009520483016967774), 'absolute_time': 1746695018.334495, 'flatten_demographic_parity_ratio': '0.49_0.84_0.63_0.54_0.48', 'flatten_balanced_accuracy': '0.66_0.68_0.69_0.66_0.69'}
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(25), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('rebalancing_features_normalization_mitigation_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(25), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('rebalancing_features_normalization_mitigation_classification')} was NaN

263
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(25), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('rebalancing_features_normalization_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5219047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.91), 'male_div/sep': np.float64(0.91), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.87)}, 'status': 'fail', 'total_time': 11.451900482177734, 'fit_time': np.float64(2.2526427268981934), 'score_time': np.float64(0.005744647979736328), 'absolute_time': 1746695030.0927894, 'flatten_demographic_parity_ratio': 'nan_0.74_0.61_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.58_0.53_0.5_0.5'}
264
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 5, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.6545359923329904), 'balanced_accuracy': np.float64(0.6064285714285714), 'by_group': {'female_div/dep/mar': np.float64(0.74), 'male_div/sep': np.float64(0.7), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.8)}, 'status': 'success', 'total_time': 0.8606698513031006, 'fit_time': np.float64(0.1443628787994385), 'score_time': np.float64(0.006565189361572266), 'absolute_time': 1746695031.267168, 'flatten_demographic_parity_ratio': '0.74_0.6_0.58_0.58_0.77', 'flatten_balanced_accuracy': '0.63_0.6_0.58_0.62_0.61'}
265
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 3}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.5449586776859505), 'balanced_accuracy': np.float64(0.5833333333333334), 'by_group': {'female_div/dep/mar': np.float64(0.74), 'male_div/sep': np.float64(0.71), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.66)}, 'status': 'success', 'total_time': 1.4088623523712158, 'fit_time': np.float64(0.25878210067749025), 'score_time': np.float64(0.0040244579315185545), 'absolute_time': 1746695032.985023, 'flatten_demographic_parity_ratio': '0.62_0.75_0.54_0.54_0.27', 'flatten_balanced_accuracy': '0.6_0.6_0.6_0.51_0.61'}
266
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.5476061984426798), 'balanced_accuracy': np.float64(0.5523809523809524), 'by_group': {'female_div/dep/mar': np.float64(0.84), 'male_div/sep': np.float64(0.63), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.69)}, 'status': 'success', 'total_time': 28.501065254211426, 'fit_time': np.float64(5.668355560302734), 'score_time': np.float64(0.00943288803100586), 'absolute_time': 1746695061.796878, 'flatten_demographic_parity_ratio': '0.77_0.74_0.68_0.54_0.0', 'flatten_balanced_accuracy': '0.61_0.58_0.53_0.5_0.54'}
267
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 6, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('SelectKBest'), 'k': 7}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9073521324616184), 'balanced_accuracy': np.float64(0.5311904761904762), 'by_group': {'female_div/dep/mar': np.float64(0.96), 'male_div/sep': np.float64(0.91), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.96)}, 'status': 'success', 'total_time': 0.5006437301635742, 'fit_time': np.float64(0.07335486412048339), 'score_time': np.float64(0.005600404739379883), 'absolute_time': 1746695062.969479, 'flatten_demographic_parity_ratio': '0.83_0.9_0.96_0.9_0.94', 'flatten_balanced_accuracy': '0.54_0.53_0.53_0.5_0.54'}
268
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 4, 'min_samples_split': 5, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9162150537634408), 'balanced_accuracy': np.float64(0.5188095238095237), 'by_group': {'female_div/dep/mar': np.float64(0.97), 'male_div/sep': np.float64(0.93), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.99)}, 'status': 'success', 'total_time': 5.692955255508423, 'fit_time': np.float64(0.9594248294830322), 'score_time': np.float64(0.00904703140258789), 'absolute_time': 1746695068.9772096, 'flatten_demographic_parity_ratio': '0.97_1.0_0.94_0.74_0.93', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.58_0.52'}
269
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.6044988344988345), 'balanced_accuracy': np.float64(0.6747619047619049), 'by_group': {'female_div/dep/mar': np.float64(0.86), 'male_div/sep': np.float64(0.6), 'male_mar/wid': np.float64(0.93), 'male_single': np.float64(0.91)}, 'status': 'success', 'total_time': 0.736473560333252, 'fit_time': np.float64(0.12449493408203124), 'score_time': np.float64(0.0035205841064453124), 'absolute_time': 1746695070.0376937, 'flatten_demographic_parity_ratio': '0.56_0.49_0.75_0.58_0.63', 'flatten_balanced_accuracy': '0.65_0.68_0.72_0.65_0.68'}
270
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.6141760683760684), 'balanced_accuracy': np.float64(0.584047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.86), 'male_div/sep': np.float64(0.79), 'male_mar/wid': np.float64(0.81), 'male_single': np.float64(0.91)}, 'status': 'success', 'total_time': 2.0458292961120605, 'fit_time': np.float64(0.3797754287719727), 'score_time': np.float64(0.0074824333190917965), 'absolute_time': 1746695077.0056067, 'flatten_demographic_parity_ratio': '0.56_0.56_0.83_0.65_0.48', 'flatten_balanced_accuracy': '0.57_0.61_0.59_0.62_0.53'}
271
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': 6, 'min_samples_split': 4, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.6669353663066562), 'balanced_accuracy': np.float64(0.5373809523809523), 'by_group': {'female_div/dep/mar': np.float64(0.86), 'male_div/sep': np.float64(0.72), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.72)}, 'status': 'success', 'total_time': 31.089430809020996, 'fit_time': np.float64(1.1431958198547363), 'score_time': np.float64(0.008806228637695312), 'absolute_time': 1746695108.414282, 'flatten_demographic_parity_ratio': '0.89_0.68_0.84_0.52_0.41', 'flatten_balanced_accuracy': '0.56_0.59_0.54_0.49_0.51'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

272
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0005524158477783203, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746695108.7353785}
273
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.7586287661255586), 'balanced_accuracy': np.float64(0.6035714285714285), 'by_group': {'female_div/dep/mar': np.float64(0.93), 'male_div/sep': np.float64(0.76), 'male_mar/wid': np.float64(0.93), 'male_single': np.float64(0.96)}, 'status': 'success', 'total_time': 2.240597724914551, 'fit_time': np.float64(0.4204958438873291), 'score_time': np.float64(0.006814813613891602), 'absolute_time': 1746695111.295651, 'flatten_demographic_parity_ratio': '0.72_0.83_0.79_0.98_0.48', 'flatten_balanced_accuracy': '0.55_0.64_0.57_0.6_0.65'}
274
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 2}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.5955203843159639), 'balanced_accuracy': np.float64(0.6347619047619049), 'by_group': {'female_div/dep/mar': np.float64(0.77), 'male_div/sep': np.float64(0.65), 'male_mar/wid': np.float64(0.83), 'male_single': np.float64(0.91)}, 'status': 'success', 'total_time': 0.5804343223571777, 'fit_time': np.float64(0.07575936317443847), 'score_time': np.float64(0.006233644485473633), 'absolute_time': 1746695112.1956556, 'flatten_demographic_parity_ratio': '0.17_0.83_0.65_0.83_0.49', 'flatten_balanced_accuracy': '0.67_0.64_0.51_0.65_0.7'}
275
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 3}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.5119231699025459), 'balanced_accuracy': np.float64(0.630952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.63), 'male_div/sep': np.float64(0.59), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.78)}, 'status': 'success', 'total_time': 0.8259603977203369, 'fit_time': np.float64(0.14013900756835937), 'score_time': np.float64(0.004796361923217774), 'absolute_time': 1746695117.8549771, 'flatten_demographic_parity_ratio': '0.39_0.61_0.48_0.54_0.54', 'flatten_balanced_accuracy': '0.61_0.61_0.68_0.61_0.64'}
276
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 3}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.5541714551480427), 'balanced_accuracy': np.float64(0.6183333333333334), 'by_group': {'female_div/dep/mar': np.float64(0.9), 'male_div/sep': np.float64(0.74), 'male_mar/wid': np.float64(0.76), 'male_single': np.float64(0.88)}, 'status': 'success', 'total_time': 0.32570314407348633, 'fit_time': np.float64(0.040368175506591795), 'score_time': np.float64(0.0037934303283691405), 'absolute_time': 1746695118.501037, 'flatten_demographic_parity_ratio': '0.7_0.5_0.49_0.67_0.41', 'flatten_balanced_accuracy': '0.67_0.64_0.62_0.55_0.61'}
277
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.7746492958745883), 'balanced_accuracy': np.float64(0.5526190476190476), 'by_group': {'female_div/dep/mar': np.float64(0.88), 'male_div/sep': np.float64(0.86), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.78)}, 'status': 'success', 'total_time': 7.009199380874634, 'fit_time': np.float64(1.3760367393493653), 'score_time': np.float64(0.005932521820068359), 'absolute_time': 1746695125.8334296, 'flatten_demographic_parity_ratio': '0.84_0.68_0.74_0.77_0.84', 'flatten_balanced_accuracy': '0.56_0.57_0.55_0.56_0.52'}
278
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.8467959243477715), 'balanced_accuracy': np.float64(0.5540476190476189), 'by_group': {'female_div/dep/mar': np.float64(0.98), 'male_div/sep': np.float64(0.86), 'male_mar/wid': np.float64(0.95), 'male_single': np.float64(0.96)}, 'status': 'success', 'total_time': 0.24349284172058105, 'fit_time': np.float64(0.023442792892456054), 'score_time': np.float64(0.004578113555908203), 'absolute_time': 1746695126.4003184, 'flatten_demographic_parity_ratio': '0.76_0.9_0.93_0.91_0.74', 'flatten_balanced_accuracy': '0.59_0.53_0.54_0.56_0.55'}
279
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_split': 2, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.6428060596939176), 'balanced_accuracy': np.float64(0.5464285714285715), 'by_group': {'female_div/dep/mar': np.float64(0.88), 'male_div/sep': np.float64(0.76), 'male_mar/wid': np.float64(0.87), 'male_single': np.float64(0.8)}, 'status': 'success', 'total_time': 0.42136073112487793, 'fit_time': np.float64(0.058971071243286134), 'score_time': np.float64(0.0051959514617919925), 'absolute_time': 1746695127.1541238, 'flatten_demographic_parity_ratio': '0.73_0.69_0.75_0.48_0.56', 'flatten_balanced_accuracy': '0.54_0.53_0.55_0.55_0.56'}
280
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 6, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.5323085501358659), 'balanced_accuracy': np.float64(0.5547619047619047), 'by_group': {'female_div/dep/mar': np.float64(0.7), 'male_div/sep': np.float64(0.68), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.74)}, 'status': 'success', 'total_time': 0.4518616199493408, 'fit_time': np.float64(0.061811399459838864), 'score_time': np.float64(0.005027294158935547), 'absolute_time': 1746695127.9337668, 'flatten_demographic_parity_ratio': '0.37_0.56_0.64_0.71_0.38', 'flatten_balanced_accuracy': '0.6_0.57_0.56_0.52_0.52'}
281
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('adam')}, 'features': {'type': np.str_('SelectKBest'), 'k': 9}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9707784254843078), 'balanced_accuracy': np.float64(0.5254761904761904), 'by_group': {'female_div/dep/mar': np.float64(0.98), 'male_div/sep': np.float64(0.98), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.98)}, 'status': 'success', 'total_time': 1.0512027740478516, 'fit_time': np.float64(0.18730635643005372), 'score_time': np.float64(0.0034522056579589845), 'absolute_time': 1746695129.3125727, 'flatten_demographic_parity_ratio': '0.95_0.95_1.0_0.95_1.0', 'flatten_balanced_accuracy': '0.55_0.52_0.5_0.55_0.5'}
282
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.9709677419354839), 'balanced_accuracy': np.float64(0.503095238095238), 'by_group': {'female_div/dep/mar': np.float64(0.97), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.98)}, 'status': 'success', 'total_time': 6.234538316726685, 'fit_time': np.float64(0.5724120616912842), 'score_time': np.float64(0.007967233657836914), 'absolute_time': 1746695135.8769495, 'flatten_demographic_parity_ratio': '0.92_1.0_1.0_1.0_0.94', 'flatten_balanced_accuracy': '0.48_0.5_0.5_0.5_0.54'}
283
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 3, 'max_leaf_nodes': 4, 'min_samples_split': 6, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.7595788868965758), 'balanced_accuracy': np.float64(0.5480952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.9), 'male_div/sep': np.float64(0.82), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.81)}, 'status': 'success', 'total_time': 8.76024317741394, 'fit_time': np.float64(0.8218757629394531), 'score_time': np.float64(0.007273101806640625), 'absolute_time': 1746695145.117812, 'flatten_demographic_parity_ratio': '0.84_0.74_0.67_0.81_0.74', 'flatten_balanced_accuracy': '0.56_0.59_0.52_0.55_0.51'}
284
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(50), 'solver': np.str_('adam')}, 'features': {'type': np.str_('SelectKBest'), 'k': 2}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_features_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.6874129239741917), 'balanced_accuracy': np.float64(0.6616666666666667), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.8), 'male_mar/wid': np.float64(0.84), 'male_single': np.float64(0.94)}, 'status': 'success', 'total_time': 6.630380153656006, 'fit_time': np.float64(1.2879570484161378), 'score_time': np.float64(0.004731178283691406), 'absolute_time': 1746695156.849068, 'flatten_demographic_parity_ratio': '0.55_0.88_0.71_0.81_0.49', 'flatten_balanced_accuracy': '0.68_0.66_0.69_0.61_0.66'}
285
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'features': {'type': np.str_('SelectKBest'), 'k': 9}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.6350909919535642), 'balanced_accuracy': np.float64(0.6107142857142858), 'by_group': {'female_div/dep/mar': np.float64(0.79), 'male_div/sep': np.float64(0.79), 'male_mar/wid': np.float64(0.82), 'male_single': np.float64(0.81)}, 'status': 'success', 'total_time': 1.2779462337493896, 'fit_time': np.float64(0.22962307929992676), 'score_time': np.float64(0.005292224884033203), 'absolute_time': 1746695158.4604526, 'flatten_demographic_parity_ratio': '0.71_0.48_0.64_0.69_0.66', 'flatten_balanced_accuracy': '0.67_0.54_0.65_0.61_0.58'}
286
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.673496211569606), 'balanced_accuracy': np.float64(0.6052380952380952), 'by_group': {'female_div/dep/mar': np.float64(0.85), 'male_div/sep': np.float64(0.76), 'male_mar/wid': np.float64(0.9), 'male_single': np.float64(0.8)}, 'status': 'success', 'total_time': 0.9987974166870117, 'fit_time': np.float64(0.17320556640625), 'score_time': np.float64(0.006816053390502929), 'absolute_time': 1746695159.800249, 'flatten_demographic_parity_ratio': '0.65_0.72_0.68_0.68_0.63', 'flatten_balanced_accuracy': '0.63_0.61_0.6_0.62_0.56'}
287
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(10), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.6456635481893509), 'balanced_accuracy': np.float64(0.6783333333333333), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.74), 'male_mar/wid': np.float64(0.87), 'male_single': np.float64(0.88)}, 'status': 'success', 'total_time': 2.1499760150909424, 'fit_time': np.float64(0.4071660995483398), 'score_time': np.float64(0.00376739501953125), 'absolute_time': 1746695162.2892168, 'flatten_demographic_parity_ratio': '0.34_0.87_0.81_0.69_0.52', 'flatten_balanced_accuracy': '0.67_0.7_0.67_0.67_0.69'}
288
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 6, 'min_samples_split': 2, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.6094525904203323), 'balanced_accuracy': np.float64(0.665952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.8), 'male_div/sep': np.float64(0.66), 'male_mar/wid': np.float64(0.87), 'male_single': np.float64(0.92)}, 'status': 'success', 'total_time': 0.7288343906402588, 'fit_time': np.float64(0.11106324195861816), 'score_time': np.float64(0.009741926193237304), 'absolute_time': 1746695163.360732, 'flatten_demographic_parity_ratio': '0.38_0.71_0.74_0.78_0.44', 'flatten_balanced_accuracy': '0.64_0.65_0.69_0.63_0.71'}
289
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(25), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.7856657470580719), 'balanced_accuracy': np.float64(0.5459523809523809), 'by_group': {'female_div/dep/mar': np.float64(0.88), 'male_div/sep': np.float64(0.94), 'male_mar/wid': np.float64(0.85), 'male_single': np.float64(0.89)}, 'status': 'success', 'total_time': 0.9145512580871582, 'fit_time': np.float64(0.1454463005065918), 'score_time': np.float64(0.005984258651733398), 'absolute_time': 1746695164.6140008, 'flatten_demographic_parity_ratio': '0.83_0.61_0.76_0.89_0.83', 'flatten_balanced_accuracy': '0.5_0.58_0.59_0.57_0.5'}
290
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(50), 'solver': np.str_('adam')}, 'features': {'type': np.str_('SelectKBest'), 'k': 9}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.5851253179897181), 'balanced_accuracy': np.float64(0.6795238095238094), 'by_group': {'female_div/dep/mar': np.float64(0.87), 'male_div/sep': np.float64(0.7), 'male_mar/wid': np.float64(0.83), 'male_single': np.float64(0.9)}, 'status': 'success', 'total_time': 2.8842365741729736, 'fit_time': np.float64(0.5412064552307129), 'score_time': np.float64(0.004707193374633789), 'absolute_time': 1746695167.8489962, 'flatten_demographic_parity_ratio': '0.18_0.74_0.82_0.72_0.48', 'flatten_balanced_accuracy': '0.67_0.7_0.7_0.64_0.69'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

291
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 3}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0005223751068115234, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746695172.9704509}
292
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9799793601651187), 'balanced_accuracy': np.float64(0.5107142857142858), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(0.99), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 12.4182288646698, 'fit_time': np.float64(0.6076615333557129), 'score_time': np.float64(0.012743568420410157), 'absolute_time': 1746695185.727279, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_1.0_0.9', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.55'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

293
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0004467964172363281, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746695186.0733924}
294
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(25), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 10.636648178100586, 'fit_time': np.float64(1.5841866970062255), 'score_time': np.float64(0.0071887969970703125), 'absolute_time': 1746695197.0479157, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
295
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.7102153876489946), 'balanced_accuracy': np.float64(0.589047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.8), 'male_mar/wid': np.float64(0.91), 'male_single': np.float64(0.77)}, 'status': 'success', 'total_time': 1.8332853317260742, 'fit_time': np.float64(0.3388993740081787), 'score_time': np.float64(0.0067370891571044925), 'absolute_time': 1746695199.2238162, 'flatten_demographic_parity_ratio': '0.75_0.68_0.79_0.79_0.54', 'flatten_balanced_accuracy': '0.6_0.58_0.62_0.64_0.5'}
296
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9299968934762903), 'balanced_accuracy': np.float64(0.5066666666666666), 'by_group': {'female_div/dep/mar': np.float64(0.99), 'male_div/sep': np.float64(0.93), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.99)}, 'status': 'success', 'total_time': 63.45832967758179, 'fit_time': np.float64(12.5861346244812), 'score_time': np.float64(0.0718276023864746), 'absolute_time': 1746695263.0314445, 'flatten_demographic_parity_ratio': '0.79_1.0_1.0_0.94_0.92', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.53_0.51'}
297
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9727381993130889), 'balanced_accuracy': np.float64(0.5121428571428571), 'by_group': {'female_div/dep/mar': np.float64(0.99), 'male_div/sep': np.float64(0.99), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.98)}, 'status': 'success', 'total_time': 3.598975896835327, 'fit_time': np.float64(0.6915708065032959), 'score_time': np.float64(0.007061195373535156), 'absolute_time': 1746695266.989339, 'flatten_demographic_parity_ratio': '1.0_0.93_1.0_0.98_0.94', 'flatten_balanced_accuracy': '0.5_0.54_0.5_0.5_0.52'}
298
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.98348623853211), 'balanced_accuracy': np.float64(0.5064285714285715), 'by_group': {'female_div/dep/mar': np.float64(0.99), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.98)}, 'status': 'success', 'total_time': 12.621367454528809, 'fit_time': np.float64(0.7502025604248047), 'score_time': np.float64(0.005781745910644532), 'absolute_time': 1746695279.9595852, 'flatten_demographic_parity_ratio': '1.0_1.0_0.97_1.0_0.94', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.53'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

299
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(25), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0007116794586181641, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746695285.5490432}
300
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 6, 'min_samples_split': 3, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.47522117806863573), 'balanced_accuracy': np.float64(0.6764285714285714), 'by_group': {'female_div/dep/mar': np.float64(0.74), 'male_div/sep': np.float64(0.48), 'male_mar/wid': np.float64(0.71), 'male_single': np.float64(0.96)}, 'status': 'success', 'total_time': 1.1992499828338623, 'fit_time': np.float64(0.18858799934387208), 'score_time': np.float64(0.010172891616821288), 'absolute_time': 1746695287.0905304, 'flatten_demographic_parity_ratio': '0.52_0.45_0.33_0.67_0.41', 'flatten_balanced_accuracy': '0.66_0.67_0.66_0.68_0.71'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

301
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.00042438507080078125, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746695287.439262}
302
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.01686182669789227), 'balanced_accuracy': np.float64(0.5666666666666667), 'by_group': {'female_div/dep/mar': np.float64(0.05), 'male_div/sep': np.float64(0.2), 'male_mar/wid': np.float64(0.63), 'male_single': np.float64(0.96)}, 'status': 'success', 'total_time': 0.4175083637237549, 'fit_time': np.float64(0.05714101791381836), 'score_time': np.float64(0.005532646179199218), 'absolute_time': 1746695288.210992, 'flatten_demographic_parity_ratio': '0.0_0.08_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.55_0.58_0.6_0.53_0.58'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

303
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0004284381866455078, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746695288.642136}
304
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(50), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.0), 'balanced_accuracy': np.float64(0.5547619047619048), 'by_group': {'female_div/dep/mar': np.float64(0.95), 'male_div/sep': np.float64(0.0), 'male_mar/wid': np.float64(0.89), 'male_single': np.float64(0.84)}, 'status': 'success', 'total_time': 1.1548597812652588, 'fit_time': np.float64(0.20809245109558105), 'score_time': np.float64(0.003972578048706055), 'absolute_time': 1746695290.149834, 'flatten_demographic_parity_ratio': '0.0_0.0_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.59_0.56_0.55_0.53_0.54'}
305
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('adam')}, 'features': {'type': np.str_('SelectKBest'), 'k': 1}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.8073909282684326, 'fit_time': np.float64(0.13807754516601561), 'score_time': np.float64(0.0034739494323730467), 'absolute_time': 1746695291.3076797, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
306
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.6778995654273298), 'balanced_accuracy': np.float64(0.5285714285714286), 'by_group': {'female_div/dep/mar': np.float64(0.93), 'male_div/sep': np.float64(0.73), 'male_mar/wid': np.float64(0.85), 'male_single': np.float64(0.83)}, 'status': 'success', 'total_time': 7.174203157424927, 'fit_time': np.float64(1.406214189529419), 'score_time': np.float64(0.007919406890869141), 'absolute_time': 1746695298.8347733, 'flatten_demographic_parity_ratio': '0.49_0.75_0.66_0.49_1.0', 'flatten_balanced_accuracy': '0.61_0.51_0.55_0.47_0.5'}
307
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 2, 'max_features': 4, 'max_leaf_nodes': 4, 'min_samples_split': 5, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 1}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_features_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.6203638450883704), 'balanced_accuracy': np.float64(0.5842857142857143), 'by_group': {'female_div/dep/mar': np.float64(0.81), 'male_div/sep': np.float64(0.75), 'male_mar/wid': np.float64(0.91), 'male_single': np.float64(0.71)}, 'status': 'success', 'total_time': 0.48721790313720703, 'fit_time': np.float64(0.05831623077392578), 'score_time': np.float64(0.006925058364868164), 'absolute_time': 1746695304.8218565, 'flatten_demographic_parity_ratio': '0.7_0.72_0.56_0.35_0.78', 'flatten_balanced_accuracy': '0.65_0.57_0.61_0.55_0.53'}
308
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9903721051262036), 'balanced_accuracy': np.float64(0.5026190476190476), 'by_group': {'female_div/dep/mar': np.float64(0.99), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.2938845157623291, 'fit_time': np.float64(0.03316473960876465), 'score_time': np.float64(0.005768537521362305), 'absolute_time': 1746695305.4709547, 'flatten_demographic_parity_ratio': '1.0_0.98_0.97_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.51_0.5_0.5_0.5'}
309
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(25), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.837037037037037), 'balanced_accuracy': np.float64(0.5123809523809524), 'by_group': {'female_div/dep/mar': np.float64(0.94), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(0.84), 'male_single': np.float64(0.97)}, 'status': 'success', 'total_time': 0.7792603969573975, 'fit_time': np.float64(0.12312898635864258), 'score_time': np.float64(0.0037212371826171875), 'absolute_time': 1746695306.6168041, 'flatten_demographic_parity_ratio': '1.0_1.0_0.19_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.56_0.5_0.5'}
310
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(50), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.670482917365427), 'balanced_accuracy': np.float64(0.5497619047619049), 'by_group': {'female_div/dep/mar': np.float64(0.75), 'male_div/sep': np.float64(0.82), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.72)}, 'status': 'success', 'total_time': 4.840000629425049, 'fit_time': np.float64(0.9439509868621826), 'score_time': np.float64(0.00504302978515625), 'absolute_time': 1746695311.8160148, 'flatten_demographic_parity_ratio': '0.83_0.48_0.59_0.74_0.71', 'flatten_balanced_accuracy': '0.62_0.55_0.53_0.54_0.5'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

311
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.00055694580078125, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746695312.1897545}
312
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_split': 4, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9967741935483871), 'balanced_accuracy': np.float64(0.5009523809523809), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.6300263404846191, 'fit_time': np.float64(0.09367942810058594), 'score_time': np.float64(0.008670234680175781), 'absolute_time': 1746695313.1768508, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_0.98_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
313
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 1}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.6279167873812973), 'balanced_accuracy': np.float64(0.5004761904761905), 'by_group': {'female_div/dep/mar': np.float64(0.87), 'male_div/sep': np.float64(0.82), 'male_mar/wid': np.float64(0.82), 'male_single': np.float64(0.86)}, 'status': 'success', 'total_time': 16.48686718940735, 'fit_time': np.float64(1.4162843704223633), 'score_time': np.float64(0.006353998184204101), 'absolute_time': 1746695330.03422, 'flatten_demographic_parity_ratio': '0.6_0.48_0.69_0.75_0.62', 'flatten_balanced_accuracy': '0.53_0.45_0.54_0.47_0.51'}
314
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.7722921094006462), 'balanced_accuracy': np.float64(0.5435714285714285), 'by_group': {'female_div/dep/mar': np.float64(0.92), 'male_div/sep': np.float64(0.85), 'male_mar/wid': np.float64(0.92), 'male_single': np.float64(0.84)}, 'status': 'success', 'total_time': 21.38355302810669, 'fit_time': np.float64(4.036976957321167), 'score_time': np.float64(0.006188297271728515), 'absolute_time': 1746695351.792044, 'flatten_demographic_parity_ratio': '0.8_0.68_0.86_0.78_0.74', 'flatten_balanced_accuracy': '0.51_0.59_0.54_0.56_0.52'}
315
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 4, 'min_samples_split': 2, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.4701616426387069), 'balanced_accuracy': np.float64(0.6649999999999999), 'by_group': {'female_div/dep/mar': np.float64(0.7), 'male_div/sep': np.float64(0.49), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.69)}, 'status': 'success', 'total_time': 0.32438135147094727, 'fit_time': np.float64(0.039345598220825194), 'score_time': np.float64(0.00526723861694336), 'absolute_time': 1746695357.6179109, 'flatten_demographic_parity_ratio': '0.2_0.6_0.61_0.62_0.32', 'flatten_balanced_accuracy': '0.72_0.68_0.67_0.62_0.62'}
316
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_split': 3, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.578483458437587), 'balanced_accuracy': np.float64(0.5771428571428572), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.63), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.64)}, 'status': 'success', 'total_time': 0.7930529117584229, 'fit_time': np.float64(0.12628526687622071), 'score_time': np.float64(0.008319425582885741), 'absolute_time': 1746695358.771363, 'flatten_demographic_parity_ratio': '0.72_0.6_0.75_0.35_0.48', 'flatten_balanced_accuracy': '0.69_0.63_0.55_0.51_0.5'}
317
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 6, 'min_samples_split': 2, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('SelectKBest'), 'k': 4}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.610981430063999), 'balanced_accuracy': np.float64(0.6516666666666666), 'by_group': {'female_div/dep/mar': np.float64(0.84), 'male_div/sep': np.float64(0.68), 'male_mar/wid': np.float64(0.94), 'male_single': np.float64(0.76)}, 'status': 'success', 'total_time': 0.3359344005584717, 'fit_time': np.float64(0.04115290641784668), 'score_time': np.float64(0.005365991592407226), 'absolute_time': 1746695359.4711788, 'flatten_demographic_parity_ratio': '0.3_0.69_0.85_0.8_0.42', 'flatten_balanced_accuracy': '0.66_0.66_0.7_0.59_0.64'}
318
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_split': 5, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('SelectKBest'), 'k': 9}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.5605032087528717), 'balanced_accuracy': np.float64(0.6916666666666667), 'by_group': {'female_div/dep/mar': np.float64(0.75), 'male_div/sep': np.float64(0.65), 'male_mar/wid': np.float64(0.86), 'male_single': np.float64(0.89)}, 'status': 'success', 'total_time': 0.9075326919555664, 'fit_time': np.float64(0.14141664505004883), 'score_time': np.float64(0.008855438232421875), 'absolute_time': 1746695360.74468, 'flatten_demographic_parity_ratio': '0.19_0.72_0.68_0.86_0.36', 'flatten_balanced_accuracy': '0.7_0.68_0.71_0.68_0.7'}
319
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(25), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.7353060724848139), 'balanced_accuracy': np.float64(0.5285714285714286), 'by_group': {'female_div/dep/mar': np.float64(0.78), 'male_div/sep': np.float64(0.89), 'male_mar/wid': np.float64(0.95), 'male_single': np.float64(0.93)}, 'status': 'success', 'total_time': 0.8473455905914307, 'fit_time': np.float64(0.14633402824401856), 'score_time': np.float64(0.003911542892456055), 'absolute_time': 1746695361.9599192, 'flatten_demographic_parity_ratio': '0.74_0.67_0.84_0.69_0.74', 'flatten_balanced_accuracy': '0.52_0.51_0.57_0.54_0.5'}
320
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_split': 6, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 3}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.5480119260124657), 'balanced_accuracy': np.float64(0.5464285714285714), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.59), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.67)}, 'status': 'success', 'total_time': 21.704582452774048, 'fit_time': np.float64(2.04309983253479), 'score_time': np.float64(0.015162801742553711), 'absolute_time': 1746695384.0324178, 'flatten_demographic_parity_ratio': '0.55_0.68_0.75_0.63_0.14', 'flatten_balanced_accuracy': '0.59_0.58_0.53_0.52_0.52'}
321
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(50), 'solver': np.str_('adam')}, 'features': {'type': np.str_('SelectKBest'), 'k': 7}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.6434282749885465), 'balanced_accuracy': np.float64(0.6923809523809523), 'by_group': {'female_div/dep/mar': np.float64(0.88), 'male_div/sep': np.float64(0.76), 'male_mar/wid': np.float64(0.84), 'male_single': np.float64(0.92)}, 'status': 'success', 'total_time': 10.292346477508545, 'fit_time': np.float64(2.0227925777435303), 'score_time': np.float64(0.005089616775512696), 'absolute_time': 1746695394.7063766, 'flatten_demographic_parity_ratio': '0.47_0.51_0.72_0.79_0.72', 'flatten_balanced_accuracy': '0.73_0.65_0.65_0.68_0.74'}
322
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 4, 'max_leaf_nodes': 2, 'min_samples_split': 6, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 1}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.6571011942594286), 'balanced_accuracy': np.float64(0.6780952380952382), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.73), 'male_mar/wid': np.float64(0.75), 'male_single': np.float64(0.92)}, 'status': 'success', 'total_time': 0.192169189453125, 'fit_time': np.float64(0.015268516540527344), 'score_time': np.float64(0.004258966445922852), 'absolute_time': 1746695395.2792702, 'flatten_demographic_parity_ratio': '0.5_0.54_0.82_0.7_0.74', 'flatten_balanced_accuracy': '0.65_0.69_0.72_0.65_0.69'}
323
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 4, 'max_leaf_nodes': 4, 'min_samples_split': 3, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.7578677936446506), 'balanced_accuracy': np.float64(0.5488095238095239), 'by_group': {'female_div/dep/mar': np.float64(0.85), 'male_div/sep': np.float64(0.84), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.81)}, 'status': 'success', 'total_time': 17.64528512954712, 'fit_time': np.float64(0.753658676147461), 'score_time': np.float64(0.006552505493164063), 'absolute_time': 1746695418.4728205, 'flatten_demographic_parity_ratio': '0.77_0.6_0.83_0.76_0.83', 'flatten_balanced_accuracy': '0.61_0.55_0.51_0.55_0.52'}
324
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.7661612933479511), 'balanced_accuracy': np.float64(0.6161904761904762), 'by_group': {'female_div/dep/mar': np.float64(0.94), 'male_div/sep': np.float64(0.79), 'male_mar/wid': np.float64(0.92), 'male_single': np.float64(0.94)}, 'status': 'success', 'total_time': 5.728964328765869, 'fit_time': np.float64(1.1150686264038085), 'score_time': np.float64(0.006730461120605468), 'absolute_time': 1746695424.5795627, 'flatten_demographic_parity_ratio': '0.69_0.79_0.74_0.72_0.89', 'flatten_balanced_accuracy': '0.65_0.6_0.61_0.62_0.6'}
325
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 4, 'min_samples_split': 6, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9744954128440366), 'balanced_accuracy': np.float64(0.5040476190476191), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(0.98), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.98)}, 'status': 'success', 'total_time': 13.614827156066895, 'fit_time': np.float64(0.8717935085296631), 'score_time': np.float64(0.009437322616577148), 'absolute_time': 1746695438.5678003, 'flatten_demographic_parity_ratio': '1.0_1.0_0.97_0.9_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.52_0.5'}
326
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 3}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 16.226760625839233, 'fit_time': np.float64(0.5236823081970214), 'score_time': np.float64(0.008327436447143555), 'absolute_time': 1746695455.1743355, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

327
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(50), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_features_normalization_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0005700588226318359, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746695455.5522358}
328
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(25), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.5498197454420365), 'balanced_accuracy': np.float64(0.48904761904761906), 'by_group': {'female_div/dep/mar': np.float64(0.91), 'male_div/sep': np.float64(0.78), 'male_mar/wid': np.float64(0.65), 'male_single': np.float64(0.87)}, 'status': 'success', 'total_time': 1.1240558624267578, 'fit_time': np.float64(0.20009250640869142), 'score_time': np.float64(0.005273056030273437), 'absolute_time': 1746695457.055066, 'flatten_demographic_parity_ratio': '0.44_1.0_0.21_0.59_0.51', 'flatten_balanced_accuracy': '0.42_0.5_0.51_0.5_0.52'}
329
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 3, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.6793238359293405), 'balanced_accuracy': np.float64(0.5747619047619048), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.76), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.7)}, 'status': 'success', 'total_time': 0.5489842891693115, 'fit_time': np.float64(0.08118581771850586), 'score_time': np.float64(0.0068744182586669925), 'absolute_time': 1746695457.9800153, 'flatten_demographic_parity_ratio': '0.65_0.65_0.74_0.72_0.63', 'flatten_balanced_accuracy': '0.65_0.63_0.5_0.59_0.51'}
330
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.25049650349650354), 'balanced_accuracy': np.float64(0.5804761904761906), 'by_group': {'female_div/dep/mar': np.float64(0.88), 'male_div/sep': np.float64(0.25), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.73)}, 'status': 'success', 'total_time': 1.0692932605743408, 'fit_time': np.float64(0.18453454971313477), 'score_time': np.float64(0.0033487319946289063), 'absolute_time': 1746695459.4335368, 'flatten_demographic_parity_ratio': '0.16_0.23_0.55_0.31_0.0', 'flatten_balanced_accuracy': '0.6_0.62_0.58_0.54_0.56'}
331
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.7244494657722734), 'balanced_accuracy': np.float64(0.6333333333333333), 'by_group': {'female_div/dep/mar': np.float64(0.86), 'male_div/sep': np.float64(0.88), 'male_mar/wid': np.float64(0.95), 'male_single': np.float64(0.81)}, 'status': 'success', 'total_time': 2.295614242553711, 'fit_time': np.float64(0.42446351051330566), 'score_time': np.float64(0.005882930755615234), 'absolute_time': 1746695467.4829977, 'flatten_demographic_parity_ratio': '0.87_0.82_0.67_0.72_0.54', 'flatten_balanced_accuracy': '0.63_0.63_0.61_0.66_0.64'}
332
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9136053130929792), 'balanced_accuracy': np.float64(0.5264285714285715), 'by_group': {'female_div/dep/mar': np.float64(0.95), 'male_div/sep': np.float64(0.94), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.96)}, 'status': 'success', 'total_time': 4.541487693786621, 'fit_time': np.float64(0.8686343193054199), 'score_time': np.float64(0.012903356552124023), 'absolute_time': 1746695472.4256065, 'flatten_demographic_parity_ratio': '0.9_0.85_1.0_0.87_0.95', 'flatten_balanced_accuracy': '0.53_0.51_0.5_0.54_0.55'}
333
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.34264094722810323), 'balanced_accuracy': np.float64(0.6352380952380953), 'by_group': {'female_div/dep/mar': np.float64(0.92), 'male_div/sep': np.float64(0.35), 'male_mar/wid': np.float64(0.95), 'male_single': np.float64(0.83)}, 'status': 'success', 'total_time': 0.8788630962371826, 'fit_time': np.float64(0.14935879707336425), 'score_time': np.float64(0.006006002426147461), 'absolute_time': 1746695473.6907609, 'flatten_demographic_parity_ratio': '0.0_0.68_0.74_0.29_0.0', 'flatten_balanced_accuracy': '0.7_0.66_0.68_0.6_0.54'}
334
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.615129799524295), 'balanced_accuracy': np.float64(0.5878571428571429), 'by_group': {'female_div/dep/mar': np.float64(0.92), 'male_div/sep': np.float64(0.67), 'male_mar/wid': np.float64(0.84), 'male_single': np.float64(0.81)}, 'status': 'success', 'total_time': 408.1118152141571, 'fit_time': np.float64(81.53641109466552), 'score_time': np.float64(0.05331435203552246), 'absolute_time': 1746695882.1897652, 'flatten_demographic_parity_ratio': '0.35_0.79_0.75_0.48_0.71', 'flatten_balanced_accuracy': '0.62_0.62_0.57_0.54_0.58'}
AutoML: optimization done.
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
AutoML: miner done.
AutoML: export done.
Here is the standard output/error of the command:

Here is the standard output/error of the command:

Here is the standard output/error of the command:

hamlet_1075458987
AutoML execution ended
