Sensitive groups ready!
Theory ready!
Theory:
step(normalization) :- true.
step(features) :- true.
step(mitigation) :- true.
step(rebalancing) :- true.
step(classification) :- true.
operator(normalization, power_transformer) :- true.
operator(normalization, robust_scaler) :- true.
operator(normalization, standard) :- true.
operator(normalization, minmax) :- true.
operator(features, select_k_best) :- true.
operator(features, pca) :- true.
operator(mitigation, corr_remover) :- true.
operator(mitigation, lfr) :- true.
operator(rebalancing, near_miss) :- true.
operator(rebalancing, smote) :- true.
operator(classification, knn) :- true.
operator(classification, nn) :- true.
operator(classification, rf) :- true.
hyperparameter(robust_scaler, with_centering, choice) :- true.
hyperparameter(robust_scaler, with_scaling, choice) :- true.
hyperparameter(standard, with_mean, choice) :- true.
hyperparameter(standard, with_std, choice) :- true.
hyperparameter(select_k_best, k, randint) :- true.
hyperparameter(pca, n_components, randint) :- true.
hyperparameter(corr_remover, alpha, choice) :- true.
hyperparameter(lfr, n_prototypes, choice) :- true.
hyperparameter(lfr, reconstruct_weight, choice) :- true.
hyperparameter(lfr, fairness_weight, choice) :- true.
hyperparameter(near_miss, n_neighbors, randint) :- true.
hyperparameter(smote, k_neighbors, randint) :- true.
hyperparameter(knn, n_neighbors, randint) :- true.
hyperparameter(knn, weights, choice) :- true.
hyperparameter(knn, metric, choice) :- true.
hyperparameter(nn, n_hidden_layers, choice) :- true.
hyperparameter(nn, n_neurons, choice) :- true.
hyperparameter(nn, activation, choice) :- true.
hyperparameter(nn, solver, choice) :- true.
hyperparameter(nn, alpha, choice) :- true.
hyperparameter(nn, learning_rate, choice) :- true.
hyperparameter(rf, n_estimators, choice) :- true.
hyperparameter(rf, max_depth, randint) :- true.
hyperparameter(rf, max_features, randint) :- true.
hyperparameter(rf, min_samples_split, randint) :- true.
hyperparameter(rf, max_leaf_nodes, randint) :- true.
hyperparameter(rf, bootstrap, choice) :- true.
hyperparameter(rf, criterion, choice) :- true.
domain(robust_scaler, with_centering, [true, false]) :- true.
domain(robust_scaler, with_scaling, [true, false]) :- true.
domain(standard, with_mean, [true, false]) :- true.
domain(standard, with_std, [true, false]) :- true.
domain(select_k_best, k, [1, 10]) :- true.
domain(pca, n_components, [1, 8]) :- true.
domain(corr_remover, alpha, [0.25, 0.5, 0.75, 1.0]) :- true.
domain(lfr, n_prototypes, [10, 50, 100, 200]) :- true.
domain(lfr, reconstruct_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(lfr, fairness_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(near_miss, n_neighbors, [1, 4]) :- true.
domain(smote, k_neighbors, [5, 8]) :- true.
domain(knn, n_neighbors, [3, 20]) :- true.
domain(knn, weights, [uniform, distance]) :- true.
domain(knn, metric, [minkowski, euclidean, manhattan]) :- true.
domain(nn, n_hidden_layers, [1, 5, 10, 20]) :- true.
domain(nn, n_neurons, [5, 10, 25, 50]) :- true.
domain(nn, activation, [logistic, tanh, relu]) :- true.
domain(nn, solver, [lbfgs, sgd, adam]) :- true.
domain(nn, alpha, [0.0001, 0.001, 0.01, 0.00001]) :- true.
domain(nn, learning_rate, [constant, invscaling, adaptive]) :- true.
domain(rf, n_estimators, [10, 25, 50, 75, 100]) :- true.
domain(rf, max_depth, [1, 5]) :- true.
domain(rf, max_features, [1, 4]) :- true.
domain(rf, min_samples_split, [2, 6]) :- true.
domain(rf, max_leaf_nodes, [2, 6]) :- true.
domain(rf, bootstrap, [true, false]) :- true.
domain(rf, criterion, [gini, entropy]) :- true.
dataset('credit-g') :- true.
metric(balanced_accuracy) :- true.
fairness_metric(demographic_parity_ratio) :- true.
sensitive_feature(personal_status, [single, 'div/dep/mar', 'mar/wid']) :- true.
sensitive_feature(sex, [male, female]) :- true.
':=>'(mc0, unbalanced_dataset) :- true.
pipeline([Step_1_0], ZZ_0) :- (step(Step_1_0), '\\='(Step_1_0, classification), operator(classification, ZZ_0)).
pipeline([Step_1_1, Step_2_0], ZZ_1) :- (step(Step_1_1), step(Step_2_0), '\\='(Step_1_1, classification), '\\='(Step_2_0, classification), '\\='(Step_1_1, Step_2_0), operator(classification, ZZ_1)).
pipeline([Step_1_2, Step_2_1, Step_3_0], ZZ_2) :- (step(Step_1_2), step(Step_2_1), step(Step_3_0), '\\='(Step_1_2, classification), '\\='(Step_2_1, classification), '\\='(Step_3_0, classification), '\\='(Step_1_2, Step_2_1), '\\='(Step_1_2, Step_3_0), '\\='(Step_2_1, Step_3_0), operator(classification, ZZ_2)).
pipeline([Step_1_3, Step_2_2, Step_3_1, Step_4_0], ZZ_3) :- (step(Step_1_3), step(Step_2_2), step(Step_3_1), step(Step_4_0), '\\='(Step_1_3, classification), '\\='(Step_2_2, classification), '\\='(Step_3_1, classification), '\\='(Step_4_0, classification), '\\='(Step_1_3, Step_2_2), '\\='(Step_1_3, Step_3_1), '\\='(Step_1_3, Step_4_0), '\\='(Step_2_2, Step_3_1), '\\='(Step_2_2, Step_4_0), '\\='(Step_3_1, Step_4_0), operator(classification, ZZ_3)).
':=>'(p402148, sensitive_group([single])) :- true.
':=>'(p811030, sensitive_group(['div/dep/mar'])) :- true.
':=>'(p487640, sensitive_group(['mar/wid'])) :- true.
':=>'(p324779, sensitive_group([male])) :- true.
':=>'(p448970, sensitive_group([female])) :- true.
':=>'(p406963, sensitive_group([single, male])) :- true.
':=>'(p651365, sensitive_group([single, female])) :- true.
':=>'(p581490, sensitive_group(['div/dep/mar', male])) :- true.
':=>'(p418153, sensitive_group(['div/dep/mar', female])) :- true.
':=>'(p824559, sensitive_group(['mar/wid', male])) :- true.
':=>'(p901779, sensitive_group(['mar/wid', female])) :- true.

Checking Config
Exporting Config
Saving Graph
Exporting AutoML input
Exporting Space
Exporting Constraints
Input created for iteration Config(iteration=1, dataset=credit-g, metric=balanced_accuracy, fairnessMetric=demographic_parity_ratio, sensitiveFeatures=[personal_status, sex], mode=max, batchSize=999999, timeBudget=900, seed=42)
Here is the standard output/error of the command:

d369342a20c7b6b759c5ad59ec9b1fdfb7f18679c7ad2cda26b245d308de87e8
Here is the standard output/error of the command:

Here is the standard output/error of the command:

WARNING:root:No module named 'rpy2': FairAdapt will be unavailable. To install, run:
pip install 'aif360[FairAdapt]'
INFO:flaml.tune.searcher.blendsearch:No low-cost partial config given to the search algorithm. For cost-frugal search, consider providing low-cost values for cost-related hps via 'low_cost_partial_config'. More info can be found at https://microsoft.github.io/FLAML/docs/FAQ#about-low_cost_partial_config-in-tune
AutoML: starting optimization.
1
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 4, 'max_leaf_nodes': 4, 'min_samples_split': 5, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.6655592986474904), 'balanced_accuracy': np.float64(0.5730952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.87), 'male_mar/wid': np.float64(0.89), 'male_single': np.float64(0.8)}, 'status': 'success', 'total_time': 3.834521532058716, 'fit_time': np.float64(0.7303933143615723), 'score_time': np.float64(0.010959482192993164), 'absolute_time': 1746691594.737334, 'flatten_demographic_parity_ratio': '0.76_0.49_0.72_0.58_0.78', 'flatten_balanced_accuracy': '0.6_0.6_0.52_0.58_0.56'}
2
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 8, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 3}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.8629685230343125), 'balanced_accuracy': np.float64(0.5678571428571428), 'by_group': {'female_div/dep/mar': np.float64(0.94), 'male_div/sep': np.float64(0.92), 'male_mar/wid': np.float64(0.92), 'male_single': np.float64(0.93)}, 'status': 'success', 'total_time': 0.2394564151763916, 'fit_time': np.float64(0.00572056770324707), 'score_time': np.float64(0.013903093338012696), 'absolute_time': 1746691594.9878495, 'flatten_demographic_parity_ratio': '0.81_0.96_0.89_0.82_0.83', 'flatten_balanced_accuracy': '0.65_0.57_0.53_0.55_0.54'}
3
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 6, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.16129870129870133), 'balanced_accuracy': np.float64(0.5314285714285714), 'by_group': {'female_div/dep/mar': np.float64(0.81), 'male_div/sep': np.float64(0.16), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.76)}, 'status': 'success', 'total_time': 1.0052385330200195, 'fit_time': np.float64(0.06598749160766601), 'score_time': np.float64(0.053298139572143556), 'absolute_time': 1746691596.004811, 'flatten_demographic_parity_ratio': '0.2_0.0_0.16_0.44_0.0', 'flatten_balanced_accuracy': '0.53_0.58_0.54_0.48_0.53'}
4
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 3, 'max_leaf_nodes': 4, 'min_samples_split': 2, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.55812605230711), 'balanced_accuracy': np.float64(0.579047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.63), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.71)}, 'status': 'success', 'total_time': 0.9161677360534668, 'fit_time': np.float64(0.15077037811279298), 'score_time': np.float64(0.008264303207397461), 'absolute_time': 1746691596.9333115, 'flatten_demographic_parity_ratio': '0.71_0.56_0.68_0.54_0.29', 'flatten_balanced_accuracy': '0.64_0.62_0.55_0.57_0.51'}
5
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.6755377525700107), 'balanced_accuracy': np.float64(0.690952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.68), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.89)}, 'status': 'success', 'total_time': 1.07781982421875, 'fit_time': np.float64(0.17810211181640626), 'score_time': np.float64(0.003993988037109375), 'absolute_time': 1746691598.0271692, 'flatten_demographic_parity_ratio': '0.72_0.7_0.69_0.58_0.68', 'flatten_balanced_accuracy': '0.66_0.7_0.72_0.66_0.72'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 609, in objective
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_param_validation.py", line 216, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 431, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 517, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 5 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
5 fits failed with the following error:
Traceback (most recent call last):
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 866, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "/usr/local/lib/python3.12/site-packages/sklearn/base.py", line 1389, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 518, in fit
    Xt, yt = self._fit(X, y, routed_params, raw_params=params)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 430, in _fit
    X, fitted_transformer = fit_transform_one_cached(
                            ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/joblib/memory.py", line 312, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 1383, in _fit_transform_one
    res = transformer.fit_transform(X, y, **params.get("fit_transform", {}))
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_set_output.py", line 319, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 76, in fit_transform
    df_X, df_y = self._prepare_dataset(X, y, fit=True)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 37, in _prepare_dataset
    raise Exception("No sensitive features to mitigate")
Exception: No sensitive features to mitigate


6
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('adam')}, 'features': {'type': np.str_('SelectKBest'), 'k': 7}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.039664268493652344, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746691598.9706514}
7
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 4}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.895634296924586), 'balanced_accuracy': np.float64(0.5204761904761905), 'by_group': {'female_div/dep/mar': np.float64(0.97), 'male_div/sep': np.float64(0.92), 'male_mar/wid': np.float64(0.95), 'male_single': np.float64(0.95)}, 'status': 'success', 'total_time': 1.2081420421600342, 'fit_time': np.float64(0.21431527137756348), 'score_time': np.float64(0.005826377868652343), 'absolute_time': 1746691600.1937654, 'flatten_demographic_parity_ratio': '0.72_0.94_0.94_0.95_0.93', 'flatten_balanced_accuracy': '0.53_0.54_0.51_0.51_0.51'}
8
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 4}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.26239308945402134), 'balanced_accuracy': np.float64(0.4616666666666667), 'by_group': {'female_div/dep/mar': np.float64(0.6), 'male_div/sep': np.float64(0.81), 'male_mar/wid': np.float64(0.32), 'male_single': np.float64(0.87)}, 'status': 'success', 'total_time': 0.2861294746398926, 'fit_time': np.float64(0.03397789001464844), 'score_time': np.float64(0.003754854202270508), 'absolute_time': 1746691600.497462, 'flatten_demographic_parity_ratio': '0.17_0.14_0.22_0.48_0.29', 'flatten_balanced_accuracy': '0.45_0.41_0.48_0.47_0.5'}
9
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(50), 'solver': np.str_('adam')}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9491525423728813), 'balanced_accuracy': np.float64(0.5285714285714286), 'by_group': {'female_div/dep/mar': np.float64(0.97), 'male_div/sep': np.float64(0.95), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.96)}, 'status': 'success', 'total_time': 4.599169015884399, 'fit_time': np.float64(0.8879298686981201), 'score_time': np.float64(0.007414054870605469), 'absolute_time': 1746691605.1142154, 'flatten_demographic_parity_ratio': '0.95_0.9_1.0_1.0_0.9', 'flatten_balanced_accuracy': '0.54_0.56_0.5_0.5_0.54'}
10
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 16, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.4368127558715794), 'balanced_accuracy': np.float64(0.5680952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.87), 'male_div/sep': np.float64(0.45), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.74)}, 'status': 'success', 'total_time': 0.14860320091247559, 'fit_time': np.float64(0.0063954353332519535), 'score_time': np.float64(0.003603696823120117), 'absolute_time': 1746691605.286108, 'flatten_demographic_parity_ratio': '0.54_0.39_0.67_0.44_0.15', 'flatten_balanced_accuracy': '0.6_0.61_0.57_0.55_0.51'}
11
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_split': 6, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.7878827210079059), 'balanced_accuracy': np.float64(0.5504761904761905), 'by_group': {'female_div/dep/mar': np.float64(0.87), 'male_div/sep': np.float64(0.86), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.82)}, 'status': 'success', 'total_time': 32.37060809135437, 'fit_time': np.float64(1.3564929008483886), 'score_time': np.float64(0.011288976669311524), 'absolute_time': 1746691637.67705, 'flatten_demographic_parity_ratio': '0.83_0.6_0.82_0.88_0.81', 'flatten_balanced_accuracy': '0.62_0.55_0.53_0.53_0.52'}
12
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.758136938799133), 'balanced_accuracy': np.float64(0.552142857142857), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.84), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.81)}, 'status': 'success', 'total_time': 29.998512268066406, 'fit_time': np.float64(1.823335838317871), 'score_time': np.float64(0.014449644088745116), 'absolute_time': 1746691667.6978612, 'flatten_demographic_parity_ratio': '0.84_0.74_0.68_0.79_0.74', 'flatten_balanced_accuracy': '0.56_0.59_0.55_0.54_0.52'}
13
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.8850170088830639), 'balanced_accuracy': np.float64(0.5507142857142857), 'by_group': {'female_div/dep/mar': np.float64(0.99), 'male_div/sep': np.float64(0.91), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.96)}, 'status': 'success', 'total_time': 1.1134061813354492, 'fit_time': np.float64(0.1993074893951416), 'score_time': np.float64(0.0043906688690185545), 'absolute_time': 1746691668.8303945, 'flatten_demographic_parity_ratio': '0.89_0.78_1.0_0.88_0.89', 'flatten_balanced_accuracy': '0.58_0.58_0.5_0.55_0.54'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

14
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0004975795745849609, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746691669.571305}
15
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(50), 'solver': np.str_('adam')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.6784534896228445), 'balanced_accuracy': np.float64(0.6254761904761905), 'by_group': {'female_div/dep/mar': np.float64(0.86), 'male_div/sep': np.float64(0.73), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.84)}, 'status': 'success', 'total_time': 1.751692295074463, 'fit_time': np.float64(0.31667342185974123), 'score_time': np.float64(0.0026310443878173827), 'absolute_time': 1746691671.3450487, 'flatten_demographic_parity_ratio': '0.89_0.87_0.81_0.83_0.0', 'flatten_balanced_accuracy': '0.66_0.6_0.65_0.62_0.6'}
16
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 3}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.96), 'balanced_accuracy': np.float64(0.5147619047619048), 'by_group': {'female_div/dep/mar': np.float64(0.97), 'male_div/sep': np.float64(0.96), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.97)}, 'status': 'success', 'total_time': 1.7839946746826172, 'fit_time': np.float64(0.3313100337982178), 'score_time': np.float64(0.00490117073059082), 'absolute_time': 1746691673.1541936, 'flatten_demographic_parity_ratio': '0.9_0.9_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.55_0.52_0.5_0.5_0.5'}
17
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 6, 'min_samples_split': 3, 'n_estimators': np.int64(75)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.4372203441009431), 'balanced_accuracy': np.float64(0.6090476190476191), 'by_group': {'female_div/dep/mar': np.float64(0.6), 'male_div/sep': np.float64(0.47), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.66)}, 'status': 'success', 'total_time': 1.0565500259399414, 'fit_time': np.float64(0.17962241172790527), 'score_time': np.float64(0.008577871322631835), 'absolute_time': 1746691674.2391398, 'flatten_demographic_parity_ratio': '0.39_0.24_0.59_0.62_0.36', 'flatten_balanced_accuracy': '0.69_0.6_0.61_0.56_0.58'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 609, in objective
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_param_validation.py", line 216, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 431, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 517, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 5 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
5 fits failed with the following error:
Traceback (most recent call last):
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 866, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "/usr/local/lib/python3.12/site-packages/sklearn/base.py", line 1389, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 518, in fit
    Xt, yt = self._fit(X, y, routed_params, raw_params=params)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 430, in _fit
    X, fitted_transformer = fit_transform_one_cached(
                            ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/joblib/memory.py", line 312, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 1383, in _fit_transform_one
    res = transformer.fit_transform(X, y, **params.get("fit_transform", {}))
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_set_output.py", line 319, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 76, in fit_transform
    df_X, df_y = self._prepare_dataset(X, y, fit=True)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 37, in _prepare_dataset
    raise Exception("No sensitive features to mitigate")
Exception: No sensitive features to mitigate


18
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 4, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.021248579025268555, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746691674.2883592}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 609, in objective
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_param_validation.py", line 216, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 431, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 517, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 5 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
5 fits failed with the following error:
Traceback (most recent call last):
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 866, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "/usr/local/lib/python3.12/site-packages/sklearn/base.py", line 1389, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 518, in fit
    Xt, yt = self._fit(X, y, routed_params, raw_params=params)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 430, in _fit
    X, fitted_transformer = fit_transform_one_cached(
                            ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/joblib/memory.py", line 312, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 1383, in _fit_transform_one
    res = transformer.fit_transform(X, y, **params.get("fit_transform", {}))
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_set_output.py", line 319, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 76, in fit_transform
    df_X, df_y = self._prepare_dataset(X, y, fit=True)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 37, in _prepare_dataset
    raise Exception("No sensitive features to mitigate")
Exception: No sensitive features to mitigate


19
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 1}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.03947138786315918, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746691674.3557448}
20
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 6, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.5309142589658927), 'balanced_accuracy': np.float64(0.5357142857142857), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.6), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.67)}, 'status': 'success', 'total_time': 18.735689163208008, 'fit_time': np.float64(3.715644598007202), 'score_time': np.float64(0.008726882934570312), 'absolute_time': 1746691693.1213362, 'flatten_demographic_parity_ratio': '0.84_0.74_0.68_0.39_0.0', 'flatten_balanced_accuracy': '0.56_0.57_0.53_0.47_0.54'}
21
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(25), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.60309627920799), 'balanced_accuracy': np.float64(0.7028571428571428), 'by_group': {'female_div/dep/mar': np.float64(0.76), 'male_div/sep': np.float64(0.61), 'male_mar/wid': np.float64(0.84), 'male_single': np.float64(0.94)}, 'status': 'success', 'total_time': 9.446761846542358, 'fit_time': np.float64(1.8657703876495362), 'score_time': np.float64(0.004578638076782227), 'absolute_time': 1746691702.599392, 'flatten_demographic_parity_ratio': '0.31_0.82_0.56_0.72_0.61', 'flatten_balanced_accuracy': '0.69_0.7_0.72_0.69_0.72'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

22
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_features_normalization_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0004546642303466797, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746691703.445074}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 609, in objective
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_param_validation.py", line 216, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 431, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 517, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 5 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
5 fits failed with the following error:
Traceback (most recent call last):
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 866, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "/usr/local/lib/python3.12/site-packages/sklearn/base.py", line 1389, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 518, in fit
    Xt, yt = self._fit(X, y, routed_params, raw_params=params)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 430, in _fit
    X, fitted_transformer = fit_transform_one_cached(
                            ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/joblib/memory.py", line 312, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 1383, in _fit_transform_one
    res = transformer.fit_transform(X, y, **params.get("fit_transform", {}))
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_set_output.py", line 319, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 76, in fit_transform
    df_X, df_y = self._prepare_dataset(X, y, fit=True)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 37, in _prepare_dataset
    raise Exception("No sensitive features to mitigate")
Exception: No sensitive features to mitigate


23
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.021413326263427734, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746691703.5003178}
24
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 14, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.6968032035191944), 'balanced_accuracy': np.float64(0.5219047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.86), 'male_div/sep': np.float64(0.84), 'male_mar/wid': np.float64(0.87), 'male_single': np.float64(0.81)}, 'status': 'success', 'total_time': 0.17646026611328125, 'fit_time': np.float64(0.007859373092651367), 'score_time': np.float64(0.0065819740295410155), 'absolute_time': 1746691703.711567, 'flatten_demographic_parity_ratio': '0.78_0.75_0.51_0.69_0.74', 'flatten_balanced_accuracy': '0.51_0.53_0.51_0.55_0.51'}
25
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.5574777045123519), 'balanced_accuracy': np.float64(0.5821428571428571), 'by_group': {'female_div/dep/mar': np.float64(0.77), 'male_div/sep': np.float64(0.66), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.76)}, 'status': 'success', 'total_time': 0.47210001945495605, 'fit_time': np.float64(0.07219452857971191), 'score_time': np.float64(0.0036702632904052736), 'absolute_time': 1746691704.2203453, 'flatten_demographic_parity_ratio': '0.61_0.76_0.75_0.32_0.36', 'flatten_balanced_accuracy': '0.65_0.65_0.51_0.58_0.52'}
26
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 4, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 2, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.5821385520350058), 'balanced_accuracy': np.float64(0.5364285714285715), 'by_group': {'female_div/dep/mar': np.float64(0.85), 'male_div/sep': np.float64(0.91), 'male_mar/wid': np.float64(0.72), 'male_single': np.float64(0.83)}, 'status': 'success', 'total_time': 17.133199214935303, 'fit_time': np.float64(3.3924304008483888), 'score_time': np.float64(0.009951639175415038), 'absolute_time': 1746691721.3911693, 'flatten_demographic_parity_ratio': '0.65_0.53_0.65_0.42_0.65', 'flatten_balanced_accuracy': '0.49_0.59_0.54_0.57_0.48'}
27
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 6, 'n_estimators': np.int64(100)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.6550340446987384), 'balanced_accuracy': np.float64(0.5361904761904762), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.72), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.76)}, 'status': 'success', 'total_time': 41.84527826309204, 'fit_time': np.float64(8.33121657371521), 'score_time': np.float64(0.011993026733398438), 'absolute_time': 1746691763.2766554, 'flatten_demographic_parity_ratio': '0.84_0.68_0.63_0.75_0.38', 'flatten_balanced_accuracy': '0.56_0.57_0.5_0.55_0.5'}
28
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.43767391360213814), 'balanced_accuracy': np.float64(0.6019047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.66), 'male_div/sep': np.float64(0.48), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.68)}, 'status': 'success', 'total_time': 0.6020143032073975, 'fit_time': np.float64(0.09442262649536133), 'score_time': np.float64(0.006129121780395508), 'absolute_time': 1746691763.9183304, 'flatten_demographic_parity_ratio': '0.15_0.26_0.66_0.65_0.48', 'flatten_balanced_accuracy': '0.64_0.58_0.62_0.57_0.6'}
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')} was NaN

29
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.13324260711669922, 'fit_time': np.float64(0.007331132888793945), 'score_time': np.float64(0.00234375), 'absolute_time': 1746691764.091022, 'flatten_demographic_parity_ratio': 'nan_nan_nan_nan_nan', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
30
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 4, 'max_leaf_nodes': 6, 'min_samples_split': 6, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.8612532032120284), 'balanced_accuracy': np.float64(0.5973809523809523), 'by_group': {'female_div/dep/mar': np.float64(0.95), 'male_div/sep': np.float64(0.87), 'male_mar/wid': np.float64(0.95), 'male_single': np.float64(0.92)}, 'status': 'success', 'total_time': 0.7392561435699463, 'fit_time': np.float64(0.11926393508911133), 'score_time': np.float64(0.006873178482055664), 'absolute_time': 1746691765.9485228, 'flatten_demographic_parity_ratio': '0.8_0.77_0.95_0.86_0.92', 'flatten_balanced_accuracy': '0.64_0.6_0.55_0.64_0.55'}
31
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9234672948660444), 'balanced_accuracy': np.float64(0.5378571428571428), 'by_group': {'female_div/dep/mar': np.float64(0.97), 'male_div/sep': np.float64(0.97), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.96)}, 'status': 'success', 'total_time': 3.688880443572998, 'fit_time': np.float64(0.7172375679016113), 'score_time': np.float64(0.003138160705566406), 'absolute_time': 1746691769.685074, 'flatten_demographic_parity_ratio': '0.94_0.9_0.9_0.94_0.95', 'flatten_balanced_accuracy': '0.54_0.54_0.53_0.56_0.52'}
32
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(10), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.8589344262295082), 'balanced_accuracy': np.float64(0.5302380952380952), 'by_group': {'female_div/dep/mar': np.float64(0.95), 'male_div/sep': np.float64(0.88), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.9)}, 'status': 'success', 'total_time': 5.407308101654053, 'fit_time': np.float64(1.04848313331604), 'score_time': np.float64(0.010040807723999023), 'absolute_time': 1746691775.1456034, 'flatten_demographic_parity_ratio': '1.0_0.82_1.0_0.48_1.0', 'flatten_balanced_accuracy': '0.5_0.59_0.5_0.57_0.5'}
33
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.8329221408376272), 'balanced_accuracy': np.float64(0.6371428571428572), 'by_group': {'female_div/dep/mar': np.float64(0.87), 'male_div/sep': np.float64(0.97), 'male_mar/wid': np.float64(0.95), 'male_single': np.float64(0.9)}, 'status': 'success', 'total_time': 1.181321382522583, 'fit_time': np.float64(0.21381473541259766), 'score_time': np.float64(0.0038595199584960938), 'absolute_time': 1746691776.377738, 'flatten_demographic_parity_ratio': '0.89_0.83_0.74_0.87_0.83', 'flatten_balanced_accuracy': '0.71_0.65_0.59_0.62_0.61'}
34
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': 6, 'min_samples_split': 3, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.5452745236414961), 'balanced_accuracy': np.float64(0.6264285714285714), 'by_group': {'female_div/dep/mar': np.float64(0.73), 'male_div/sep': np.float64(0.58), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.72)}, 'status': 'success', 'total_time': 0.4623100757598877, 'fit_time': np.float64(0.06333179473876953), 'score_time': np.float64(0.007218360900878906), 'absolute_time': 1746691776.8948715, 'flatten_demographic_parity_ratio': '0.36_0.6_0.75_0.72_0.29', 'flatten_balanced_accuracy': '0.71_0.6_0.59_0.63_0.6'}
35
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 11, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.6656460512832616), 'balanced_accuracy': np.float64(0.6595238095238095), 'by_group': {'female_div/dep/mar': np.float64(0.79), 'male_div/sep': np.float64(0.68), 'male_mar/wid': np.float64(0.95), 'male_single': np.float64(0.9)}, 'status': 'success', 'total_time': 0.39866089820861816, 'fit_time': np.float64(0.03824272155761719), 'score_time': np.float64(0.007032012939453125), 'absolute_time': 1746691777.3456187, 'flatten_demographic_parity_ratio': '0.87_0.8_0.56_0.63_0.46', 'flatten_balanced_accuracy': '0.67_0.64_0.67_0.66_0.65'}
/usr/local/lib/python3.12/site-packages/numpy/_core/_methods.py:194: RuntimeWarning: overflow encountered in multiply
  x = um.multiply(x, x, out=x)
36
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(25)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.7944460142691158), 'balanced_accuracy': np.float64(0.5614285714285714), 'by_group': {'female_div/dep/mar': np.float64(0.92), 'male_div/sep': np.float64(0.84), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.84)}, 'status': 'success', 'total_time': 12.319848775863647, 'fit_time': np.float64(2.4325161933898927), 'score_time': np.float64(0.008983182907104491), 'absolute_time': 1746691789.7185047, 'flatten_demographic_parity_ratio': '0.83_0.74_0.87_0.79_0.74', 'flatten_balanced_accuracy': '0.62_0.58_0.54_0.54_0.52'}
37
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.5431492921492922), 'balanced_accuracy': np.float64(0.64), 'by_group': {'female_div/dep/mar': np.float64(0.82), 'male_div/sep': np.float64(0.61), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.81)}, 'status': 'success', 'total_time': 1.5949385166168213, 'fit_time': np.float64(0.296000337600708), 'score_time': np.float64(0.0037651538848876955), 'absolute_time': 1746691791.3687317, 'flatten_demographic_parity_ratio': '0.4_0.77_0.69_0.38_0.48', 'flatten_balanced_accuracy': '0.69_0.66_0.65_0.62_0.59'}
38
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(10), 'solver': np.str_('adam')}, 'features': {'type': np.str_('SelectKBest'), 'k': 3}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.7039416929458362), 'balanced_accuracy': np.float64(0.5504761904761905), 'by_group': {'female_div/dep/mar': np.float64(0.9), 'male_div/sep': np.float64(0.78), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.76)}, 'status': 'success', 'total_time': 44.005486726760864, 'fit_time': np.float64(0.6146467208862305), 'score_time': np.float64(0.005640649795532226), 'absolute_time': 1746691835.4407701, 'flatten_demographic_parity_ratio': '0.84_0.68_0.86_0.73_0.41', 'flatten_balanced_accuracy': '0.56_0.58_0.55_0.55_0.51'}
39
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.7738436057232339), 'balanced_accuracy': np.float64(0.5311904761904762), 'by_group': {'female_div/dep/mar': np.float64(0.91), 'male_div/sep': np.float64(0.81), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.91)}, 'status': 'success', 'total_time': 0.17121005058288574, 'fit_time': np.float64(0.006232547760009766), 'score_time': np.float64(0.006692266464233399), 'absolute_time': 1746691836.7866404, 'flatten_demographic_parity_ratio': '0.64_0.87_0.7_0.78_0.88', 'flatten_balanced_accuracy': '0.59_0.53_0.5_0.57_0.46'}
40
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 11, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 3}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.6281661213404333), 'balanced_accuracy': np.float64(0.5692857142857142), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.66), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.72)}, 'status': 'success', 'total_time': 0.3602473735809326, 'fit_time': np.float64(0.025754594802856447), 'score_time': np.float64(0.017014598846435545), 'absolute_time': 1746691837.2126305, 'flatten_demographic_parity_ratio': '0.55_0.81_0.69_0.56_0.52', 'flatten_balanced_accuracy': '0.64_0.59_0.57_0.51_0.53'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

41
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.00042819976806640625, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746691837.2806776}
42
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.5133725338988497), 'balanced_accuracy': np.float64(0.6664285714285715), 'by_group': {'female_div/dep/mar': np.float64(0.73), 'male_div/sep': np.float64(0.52), 'male_mar/wid': np.float64(0.83), 'male_single': np.float64(0.85)}, 'status': 'success', 'total_time': 0.21011662483215332, 'fit_time': np.float64(0.019698047637939455), 'score_time': np.float64(0.0033807754516601562), 'absolute_time': 1746691837.5620081, 'flatten_demographic_parity_ratio': '0.56_0.77_0.23_0.43_0.58', 'flatten_balanced_accuracy': '0.67_0.64_0.69_0.63_0.7'}
43
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 8, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.6420922216778979), 'balanced_accuracy': np.float64(0.5464285714285714), 'by_group': {'female_div/dep/mar': np.float64(0.84), 'male_div/sep': np.float64(0.8), 'male_mar/wid': np.float64(0.89), 'male_single': np.float64(0.81)}, 'status': 'success', 'total_time': 0.3540501594543457, 'fit_time': np.float64(0.008087444305419921), 'score_time': np.float64(0.028289651870727538), 'absolute_time': 1746691837.9868717, 'flatten_demographic_parity_ratio': '0.69_0.78_0.55_0.67_0.52', 'flatten_balanced_accuracy': '0.58_0.53_0.53_0.53_0.55'}
44
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 3, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 7}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.6028701079622133), 'balanced_accuracy': np.float64(0.6166666666666666), 'by_group': {'female_div/dep/mar': np.float64(0.79), 'male_div/sep': np.float64(0.66), 'male_mar/wid': np.float64(0.94), 'male_single': np.float64(0.77)}, 'status': 'success', 'total_time': 0.9286694526672363, 'fit_time': np.float64(0.14689035415649415), 'score_time': np.float64(0.009302091598510743), 'absolute_time': 1746691838.9786224, 'flatten_demographic_parity_ratio': '0.55_0.56_0.84_0.7_0.36', 'flatten_balanced_accuracy': '0.68_0.6_0.62_0.65_0.54'}
45
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.2888463640292661), 'balanced_accuracy': np.float64(0.6304761904761904), 'by_group': {'female_div/dep/mar': np.float64(0.76), 'male_div/sep': np.float64(0.32), 'male_mar/wid': np.float64(0.41), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.24253463745117188, 'fit_time': np.float64(0.02452840805053711), 'score_time': np.float64(0.004184627532958984), 'absolute_time': 1746691839.2956588, 'flatten_demographic_parity_ratio': '0.15_0.13_0.52_0.27_0.37', 'flatten_balanced_accuracy': '0.67_0.64_0.59_0.62_0.63'}
46
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 14, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.7281879594280107), 'balanced_accuracy': np.float64(0.572857142857143), 'by_group': {'female_div/dep/mar': np.float64(0.85), 'male_div/sep': np.float64(0.82), 'male_mar/wid': np.float64(0.88), 'male_single': np.float64(0.86)}, 'status': 'success', 'total_time': 0.21178865432739258, 'fit_time': np.float64(0.010839128494262695), 'score_time': np.float64(0.004881858825683594), 'absolute_time': 1746691839.59753, 'flatten_demographic_parity_ratio': '0.48_0.82_0.74_0.72_0.89', 'flatten_balanced_accuracy': '0.54_0.61_0.59_0.54_0.58'}
47
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 8, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.559737037156392), 'balanced_accuracy': np.float64(0.5983333333333334), 'by_group': {'female_div/dep/mar': np.float64(0.75), 'male_div/sep': np.float64(0.58), 'male_mar/wid': np.float64(0.9), 'male_single': np.float64(0.95)}, 'status': 'success', 'total_time': 0.24508094787597656, 'fit_time': np.float64(0.00921177864074707), 'score_time': np.float64(0.012369489669799805), 'absolute_time': 1746691841.065273, 'flatten_demographic_parity_ratio': '0.65_0.54_0.59_0.52_0.5', 'flatten_balanced_accuracy': '0.6_0.64_0.62_0.59_0.54'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

48
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0004456043243408203, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746691841.1352916}
49
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_features_normalization_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.5924823239509956), 'balanced_accuracy': np.float64(0.6490476190476191), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.61), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.84)}, 'status': 'success', 'total_time': 1.5512747764587402, 'fit_time': np.float64(0.27974977493286135), 'score_time': np.float64(0.004198884963989258), 'absolute_time': 1746691842.7542095, 'flatten_demographic_parity_ratio': '0.18_0.55_0.85_0.94_0.44', 'flatten_balanced_accuracy': '0.58_0.62_0.7_0.65_0.69'}
50
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9214552491446467), 'balanced_accuracy': np.float64(0.565952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.94), 'male_div/sep': np.float64(0.96), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.96)}, 'status': 'success', 'total_time': 4.495646953582764, 'fit_time': np.float64(0.871192741394043), 'score_time': np.float64(0.006874561309814453), 'absolute_time': 1746691847.3293438, 'flatten_demographic_parity_ratio': '0.9_0.89_0.94_1.0_0.88', 'flatten_balanced_accuracy': '0.59_0.63_0.52_0.5_0.58'}
51
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(25), 'solver': np.str_('adam')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.8127164701873107), 'balanced_accuracy': np.float64(0.6259523809523809), 'by_group': {'female_div/dep/mar': np.float64(0.86), 'male_div/sep': np.float64(0.86), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.9)}, 'status': 'success', 'total_time': 2.209333896636963, 'fit_time': np.float64(0.4173459053039551), 'score_time': np.float64(0.004757356643676758), 'absolute_time': 1746691849.612219, 'flatten_demographic_parity_ratio': '0.85_0.74_0.79_0.83_0.85', 'flatten_balanced_accuracy': '0.64_0.61_0.66_0.61_0.6'}
52
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.5867751621467218), 'balanced_accuracy': np.float64(0.6311904761904762), 'by_group': {'female_div/dep/mar': np.float64(0.72), 'male_div/sep': np.float64(0.65), 'male_mar/wid': np.float64(0.95), 'male_single': np.float64(0.86)}, 'status': 'success', 'total_time': 0.9213602542877197, 'fit_time': np.float64(0.15298700332641602), 'score_time': np.float64(0.005238151550292969), 'absolute_time': 1746691850.6032538, 'flatten_demographic_parity_ratio': '0.54_0.56_0.65_0.76_0.42', 'flatten_balanced_accuracy': '0.63_0.64_0.64_0.6_0.65'}
53
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 4, 'n_estimators': np.int64(25)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.7148908148837123), 'balanced_accuracy': np.float64(0.5483333333333333), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.76), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.75)}, 'status': 'success', 'total_time': 5.227551221847534, 'fit_time': np.float64(1.0126866340637206), 'score_time': np.float64(0.009545850753784179), 'absolute_time': 1746691855.9011111, 'flatten_demographic_parity_ratio': '0.83_0.48_0.82_0.54_0.91', 'flatten_balanced_accuracy': '0.62_0.55_0.55_0.5_0.52'}
/usr/local/lib/python3.12/site-packages/numpy/_core/_methods.py:194: RuntimeWarning: overflow encountered in multiply
  x = um.multiply(x, x, out=x)
/usr/local/lib/python3.12/site-packages/numpy/_core/_methods.py:205: RuntimeWarning: overflow encountered in reduce
  ret = umr_sum(x, axis, dtype, out, keepdims=keepdims, where=where)
54
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9400000000000001), 'balanced_accuracy': np.float64(0.5264285714285715), 'by_group': {'female_div/dep/mar': np.float64(0.97), 'male_div/sep': np.float64(0.94), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.96)}, 'status': 'success', 'total_time': 14.658416748046875, 'fit_time': np.float64(1.1551066875457763), 'score_time': np.float64(0.007395172119140625), 'absolute_time': 1746691872.1256793, 'flatten_demographic_parity_ratio': '0.9_0.9_1.0_1.0_0.9', 'flatten_balanced_accuracy': '0.54_0.57_0.5_0.5_0.52'}
55
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 20, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.8753963832271024), 'balanced_accuracy': np.float64(0.5073809523809524), 'by_group': {'female_div/dep/mar': np.float64(0.92), 'male_div/sep': np.float64(0.96), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.88)}, 'status': 'success', 'total_time': 27.234410524368286, 'fit_time': np.float64(0.9498049259185791), 'score_time': np.float64(0.008041191101074218), 'absolute_time': 1746691899.4344065, 'flatten_demographic_parity_ratio': '0.98_0.78_0.79_0.89_0.94', 'flatten_balanced_accuracy': '0.49_0.48_0.51_0.52_0.53'}
56
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 2}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.7452413385306271), 'balanced_accuracy': np.float64(0.6171428571428572), 'by_group': {'female_div/dep/mar': np.float64(0.95), 'male_div/sep': np.float64(0.87), 'male_mar/wid': np.float64(0.89), 'male_single': np.float64(0.89)}, 'status': 'success', 'total_time': 0.19905376434326172, 'fit_time': np.float64(0.004949808120727539), 'score_time': np.float64(0.010281991958618165), 'absolute_time': 1746691899.7073648, 'flatten_demographic_parity_ratio': '0.62_0.76_0.64_0.9_0.8', 'flatten_balanced_accuracy': '0.64_0.59_0.65_0.59_0.61'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

57
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 3}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0004286766052246094, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746691899.781286}
58
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.8429387722567077), 'balanced_accuracy': np.float64(0.5223809523809523), 'by_group': {'female_div/dep/mar': np.float64(0.98), 'male_div/sep': np.float64(0.92), 'male_mar/wid': np.float64(0.92), 'male_single': np.float64(0.91)}, 'status': 'success', 'total_time': 3.7222678661346436, 'fit_time': np.float64(0.6993526935577392), 'score_time': np.float64(0.015385723114013672), 'absolute_time': 1746691903.578003, 'flatten_demographic_parity_ratio': '0.78_0.83_0.88_0.88_0.86', 'flatten_balanced_accuracy': '0.51_0.51_0.55_0.47_0.58'}
59
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.7279716328446374), 'balanced_accuracy': np.float64(0.5404761904761906), 'by_group': {'female_div/dep/mar': np.float64(0.84), 'male_div/sep': np.float64(0.78), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.79)}, 'status': 'success', 'total_time': 11.735244512557983, 'fit_time': np.float64(2.3204036712646485), 'score_time': np.float64(0.006031703948974609), 'absolute_time': 1746691915.396093, 'flatten_demographic_parity_ratio': '0.89_0.74_0.7_0.67_0.63', 'flatten_balanced_accuracy': '0.53_0.58_0.52_0.51_0.56'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 609, in objective
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_param_validation.py", line 216, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 431, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 517, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 5 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
5 fits failed with the following error:
Traceback (most recent call last):
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 866, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "/usr/local/lib/python3.12/site-packages/sklearn/base.py", line 1389, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 518, in fit
    Xt, yt = self._fit(X, y, routed_params, raw_params=params)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 430, in _fit
    X, fitted_transformer = fit_transform_one_cached(
                            ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/joblib/memory.py", line 312, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 1383, in _fit_transform_one
    res = transformer.fit_transform(X, y, **params.get("fit_transform", {}))
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_set_output.py", line 319, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 76, in fit_transform
    df_X, df_y = self._prepare_dataset(X, y, fit=True)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 37, in _prepare_dataset
    raise Exception("No sensitive features to mitigate")
Exception: No sensitive features to mitigate


60
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.018874645233154297, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746691915.4927547}
61
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(50), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.5017628243316317), 'balanced_accuracy': np.float64(0.6254761904761905), 'by_group': {'female_div/dep/mar': np.float64(0.69), 'male_div/sep': np.float64(0.54), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.73)}, 'status': 'success', 'total_time': 2.293912649154663, 'fit_time': np.float64(0.4346144676208496), 'score_time': np.float64(0.004290437698364258), 'absolute_time': 1746691917.8641608, 'flatten_demographic_parity_ratio': '0.49_0.51_0.53_0.68_0.29', 'flatten_balanced_accuracy': '0.71_0.66_0.56_0.55_0.64'}
62
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(25), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.8737544946403583), 'balanced_accuracy': np.float64(0.6083333333333334), 'by_group': {'female_div/dep/mar': np.float64(0.9), 'male_div/sep': np.float64(0.99), 'male_mar/wid': np.float64(0.95), 'male_single': np.float64(0.91)}, 'status': 'success', 'total_time': 2.819880247116089, 'fit_time': np.float64(0.5383256435394287), 'score_time': np.float64(0.005827760696411133), 'absolute_time': 1746691920.782893, 'flatten_demographic_parity_ratio': '0.91_0.86_0.81_0.88_0.91', 'flatten_balanced_accuracy': '0.62_0.6_0.61_0.63_0.58'}
63
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 4, 'max_leaf_nodes': 2, 'min_samples_split': 4, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('PCA'), 'n_components': 3}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.7073454264807433), 'balanced_accuracy': np.float64(0.5266666666666666), 'by_group': {'female_div/dep/mar': np.float64(0.85), 'male_div/sep': np.float64(0.92), 'male_mar/wid': np.float64(0.88), 'male_single': np.float64(0.78)}, 'status': 'success', 'total_time': 0.5098576545715332, 'fit_time': np.float64(0.07350277900695801), 'score_time': np.float64(0.007134628295898437), 'absolute_time': 1746691921.3743012, 'flatten_demographic_parity_ratio': '0.92_0.44_0.73_0.7_0.74', 'flatten_balanced_accuracy': '0.53_0.5_0.55_0.54_0.52'}
64
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 4, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('PCA'), 'n_components': 3}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.29819981325863687), 'balanced_accuracy': np.float64(0.5754761904761905), 'by_group': {'female_div/dep/mar': np.float64(0.94), 'male_div/sep': np.float64(0.3), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.88)}, 'status': 'success', 'total_time': 0.5713582038879395, 'fit_time': np.float64(0.08691172599792481), 'score_time': np.float64(0.006253576278686524), 'absolute_time': 1746691922.0225937, 'flatten_demographic_parity_ratio': '0.26_0.36_0.53_0.34_0.0', 'flatten_balanced_accuracy': '0.59_0.6_0.57_0.58_0.55'}
65
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.663375487900078), 'balanced_accuracy': np.float64(0.6809523809523809), 'by_group': {'female_div/dep/mar': np.float64(0.84), 'male_div/sep': np.float64(0.66), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.93)}, 'status': 'success', 'total_time': 0.5058746337890625, 'fit_time': np.float64(0.042449140548706056), 'score_time': np.float64(0.016293144226074217), 'absolute_time': 1746691923.9219556, 'flatten_demographic_parity_ratio': '0.9_0.63_0.51_0.79_0.48', 'flatten_balanced_accuracy': '0.66_0.7_0.71_0.67_0.67'}
66
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 11, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.607130960782337), 'balanced_accuracy': np.float64(0.641904761904762), 'by_group': {'female_div/dep/mar': np.float64(0.74), 'male_div/sep': np.float64(0.63), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.79)}, 'status': 'success', 'total_time': 1.1651115417480469, 'fit_time': np.float64(0.06311368942260742), 'score_time': np.float64(0.09047050476074218), 'absolute_time': 1746691925.1651323, 'flatten_demographic_parity_ratio': '0.54_0.6_0.73_0.63_0.54', 'flatten_balanced_accuracy': '0.61_0.72_0.61_0.62_0.66'}
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')} was NaN

67
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'fail', 'total_time': 0.13598966598510742, 'fit_time': np.float64(0.007467746734619141), 'score_time': np.float64(0.002382326126098633), 'absolute_time': 1746691925.381178, 'flatten_demographic_parity_ratio': 'nan_nan_1.0_nan_nan', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

68
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0003180503845214844, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746691925.4606419}
69
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.6857245438048191), 'balanced_accuracy': np.float64(0.6421428571428571), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.71), 'male_mar/wid': np.float64(0.93), 'male_single': np.float64(0.89)}, 'status': 'success', 'total_time': 0.8665480613708496, 'fit_time': np.float64(0.14774169921875), 'score_time': np.float64(0.004735708236694336), 'absolute_time': 1746691926.406874, 'flatten_demographic_parity_ratio': '0.55_0.61_0.69_0.89_0.68', 'flatten_balanced_accuracy': '0.61_0.68_0.66_0.66_0.61'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

70
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 6, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0005006790161132812, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746691928.1417983}
71
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(25)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.5672844912368756), 'balanced_accuracy': np.float64(0.5997619047619047), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.59), 'male_mar/wid': np.float64(0.89), 'male_single': np.float64(0.89)}, 'status': 'success', 'total_time': 16.549304008483887, 'fit_time': np.float64(3.2760335922241213), 'score_time': np.float64(0.010754776000976563), 'absolute_time': 1746691944.7803528, 'flatten_demographic_parity_ratio': '0.45_0.45_0.68_0.75_0.51', 'flatten_balanced_accuracy': '0.58_0.64_0.5_0.64_0.64'}
72
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(25), 'solver': np.str_('adam')}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.6485097629252031), 'balanced_accuracy': np.float64(0.6557142857142857), 'by_group': {'female_div/dep/mar': np.float64(0.68), 'male_div/sep': np.float64(0.74), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.92)}, 'status': 'success', 'total_time': 2.254566192626953, 'fit_time': np.float64(0.4261471748352051), 'score_time': np.float64(0.005227804183959961), 'absolute_time': 1746691947.1258686, 'flatten_demographic_parity_ratio': '0.65_0.62_0.73_0.68_0.57', 'flatten_balanced_accuracy': '0.71_0.68_0.61_0.64_0.63'}
73
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.5946788081757007), 'balanced_accuracy': np.float64(0.5452380952380953), 'by_group': {'female_div/dep/mar': np.float64(0.84), 'male_div/sep': np.float64(0.78), 'male_mar/wid': np.float64(0.9), 'male_single': np.float64(0.7)}, 'status': 'success', 'total_time': 0.2085556983947754, 'fit_time': np.float64(0.0057219982147216795), 'score_time': np.float64(0.010463380813598632), 'absolute_time': 1746691947.428151, 'flatten_demographic_parity_ratio': '0.63_0.51_0.63_0.56_0.63', 'flatten_balanced_accuracy': '0.49_0.53_0.57_0.57_0.57'}
74
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 12, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.8276033360638456), 'balanced_accuracy': np.float64(0.5357142857142857), 'by_group': {'female_div/dep/mar': np.float64(0.91), 'male_div/sep': np.float64(0.87), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.9)}, 'status': 'success', 'total_time': 0.1221766471862793, 'fit_time': np.float64(0.003241729736328125), 'score_time': np.float64(0.0033749103546142577), 'absolute_time': 1746691947.643042, 'flatten_demographic_parity_ratio': '0.85_0.85_0.95_0.84_0.63', 'flatten_balanced_accuracy': '0.55_0.53_0.53_0.57_0.51'}
75
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 9}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.6143600996875025), 'balanced_accuracy': np.float64(0.5342857142857143), 'by_group': {'female_div/dep/mar': np.float64(0.81), 'male_div/sep': np.float64(0.7), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.67)}, 'status': 'success', 'total_time': 37.16146945953369, 'fit_time': np.float64(2.36458740234375), 'score_time': np.float64(0.007553529739379883), 'absolute_time': 1746691984.8977299, 'flatten_demographic_parity_ratio': '0.84_0.48_0.68_0.66_0.41', 'flatten_balanced_accuracy': '0.56_0.55_0.55_0.51_0.51'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 609, in objective
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_param_validation.py", line 216, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 431, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 517, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 5 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
5 fits failed with the following error:
Traceback (most recent call last):
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 866, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "/usr/local/lib/python3.12/site-packages/sklearn/base.py", line 1389, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 518, in fit
    Xt, yt = self._fit(X, y, routed_params, raw_params=params)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 430, in _fit
    X, fitted_transformer = fit_transform_one_cached(
                            ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/joblib/memory.py", line 312, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 1383, in _fit_transform_one
    res = transformer.fit_transform(X, y, **params.get("fit_transform", {}))
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_set_output.py", line 319, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 76, in fit_transform
    df_X, df_y = self._prepare_dataset(X, y, fit=True)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 37, in _prepare_dataset
    raise Exception("No sensitive features to mitigate")
Exception: No sensitive features to mitigate


76
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.03231406211853027, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746691985.0429122}
77
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 9}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.8309289804017705), 'balanced_accuracy': np.float64(0.5757142857142856), 'by_group': {'female_div/dep/mar': np.float64(0.9), 'male_div/sep': np.float64(0.88), 'male_mar/wid': np.float64(0.91), 'male_single': np.float64(0.95)}, 'status': 'success', 'total_time': 2.995854139328003, 'fit_time': np.float64(0.5422327995300293), 'score_time': np.float64(0.01960444450378418), 'absolute_time': 1746691988.1506739, 'flatten_demographic_parity_ratio': '0.76_0.87_0.88_0.87_0.78', 'flatten_balanced_accuracy': '0.55_0.58_0.56_0.64_0.55'}
78
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 6, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.7797042630803924), 'balanced_accuracy': np.float64(0.6085714285714285), 'by_group': {'female_div/dep/mar': np.float64(0.88), 'male_div/sep': np.float64(0.86), 'male_mar/wid': np.float64(0.92), 'male_single': np.float64(0.92)}, 'status': 'success', 'total_time': 0.9225993156433105, 'fit_time': np.float64(0.022734308242797853), 'score_time': np.float64(0.06814508438110352), 'absolute_time': 1746691989.2162142, 'flatten_demographic_parity_ratio': '0.62_0.83_0.74_0.87_0.83', 'flatten_balanced_accuracy': '0.63_0.63_0.6_0.62_0.56'}
79
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 4, 'max_leaf_nodes': 4, 'min_samples_split': 6, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.6687236565498276), 'balanced_accuracy': np.float64(0.6076190476190476), 'by_group': {'female_div/dep/mar': np.float64(0.92), 'male_div/sep': np.float64(0.79), 'male_mar/wid': np.float64(0.88), 'male_single': np.float64(0.86)}, 'status': 'success', 'total_time': 10.953073263168335, 'fit_time': np.float64(2.15704140663147), 'score_time': np.float64(0.00974116325378418), 'absolute_time': 1746692001.866703, 'flatten_demographic_parity_ratio': '0.69_0.69_0.51_0.73_0.72', 'flatten_balanced_accuracy': '0.66_0.68_0.58_0.55_0.57'}
80
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 6, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.8176898732320833), 'balanced_accuracy': np.float64(0.5614285714285715), 'by_group': {'female_div/dep/mar': np.float64(0.88), 'male_div/sep': np.float64(0.86), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.91)}, 'status': 'success', 'total_time': 0.16773748397827148, 'fit_time': np.float64(0.008716297149658204), 'score_time': np.float64(0.005127573013305664), 'absolute_time': 1746692002.1336875, 'flatten_demographic_parity_ratio': '0.86_0.92_0.68_0.83_0.8', 'flatten_balanced_accuracy': '0.51_0.55_0.67_0.55_0.53'}
81
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 2, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.6410199110160345), 'balanced_accuracy': np.float64(0.5716666666666667), 'by_group': {'female_div/dep/mar': np.float64(0.81), 'male_div/sep': np.float64(0.69), 'male_mar/wid': np.float64(0.93), 'male_single': np.float64(0.87)}, 'status': 'success', 'total_time': 8.042015314102173, 'fit_time': np.float64(1.5757869243621827), 'score_time': np.float64(0.010535049438476562), 'absolute_time': 1746692010.2742949, 'flatten_demographic_parity_ratio': '0.17_0.78_0.73_0.86_0.66', 'flatten_balanced_accuracy': '0.54_0.57_0.56_0.65_0.53'}
82
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 11, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.9157271361534718), 'balanced_accuracy': np.float64(0.515), 'by_group': {'female_div/dep/mar': np.float64(0.96), 'male_div/sep': np.float64(0.96), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.92)}, 'status': 'success', 'total_time': 24.39424753189087, 'fit_time': np.float64(2.7064886569976805), 'score_time': np.float64(0.009277629852294921), 'absolute_time': 1746692034.7692816, 'flatten_demographic_parity_ratio': '0.95_0.91_0.96_0.83_0.93', 'flatten_balanced_accuracy': '0.55_0.52_0.51_0.48_0.52'}
83
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.6311617884356338), 'balanced_accuracy': np.float64(0.6535714285714285), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.75), 'male_mar/wid': np.float64(0.78), 'male_single': np.float64(0.97)}, 'status': 'success', 'total_time': 0.9699122905731201, 'fit_time': np.float64(0.16053481101989747), 'score_time': np.float64(0.009391593933105468), 'absolute_time': 1746692035.8418853, 'flatten_demographic_parity_ratio': '0.6_0.59_0.57_0.75_0.64', 'flatten_balanced_accuracy': '0.64_0.64_0.67_0.63_0.69'}
84
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 10, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.6426382672223079), 'balanced_accuracy': np.float64(0.5447619047619048), 'by_group': {'female_div/dep/mar': np.float64(0.87), 'male_div/sep': np.float64(0.77), 'male_mar/wid': np.float64(0.85), 'male_single': np.float64(0.76)}, 'status': 'success', 'total_time': 0.3647799491882324, 'fit_time': np.float64(0.033323478698730466), 'score_time': np.float64(0.012715578079223633), 'absolute_time': 1746692036.3082476, 'flatten_demographic_parity_ratio': '0.82_0.55_0.3_0.84_0.7', 'flatten_balanced_accuracy': '0.57_0.54_0.56_0.57_0.48'}
85
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 5, 'n_estimators': np.int64(50)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.415693371144984), 'balanced_accuracy': np.float64(0.6630952380952382), 'by_group': {'female_div/dep/mar': np.float64(0.72), 'male_div/sep': np.float64(0.45), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.78)}, 'status': 'success', 'total_time': 0.8648381233215332, 'fit_time': np.float64(0.14449796676635743), 'score_time': np.float64(0.006460762023925782), 'absolute_time': 1746692037.277987, 'flatten_demographic_parity_ratio': '0.18_0.28_0.61_0.74_0.27', 'flatten_balanced_accuracy': '0.71_0.68_0.66_0.59_0.67'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

86
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.00037932395935058594, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692039.404963}
87
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 4, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 4, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.683270720316761), 'balanced_accuracy': np.float64(0.6007142857142858), 'by_group': {'female_div/dep/mar': np.float64(0.8), 'male_div/sep': np.float64(0.72), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.8)}, 'status': 'success', 'total_time': 1.4189164638519287, 'fit_time': np.float64(0.25223722457885744), 'score_time': np.float64(0.008126592636108399), 'absolute_time': 1746692040.9515169, 'flatten_demographic_parity_ratio': '0.76_0.75_0.58_0.69_0.63', 'flatten_balanced_accuracy': '0.63_0.58_0.58_0.61_0.61'}
88
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 4, 'max_leaf_nodes': 2, 'min_samples_split': 6, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.7611499610696371), 'balanced_accuracy': np.float64(0.5688095238095239), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.82), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.77)}, 'status': 'success', 'total_time': 0.6385536193847656, 'fit_time': np.float64(0.10160937309265136), 'score_time': np.float64(0.005420207977294922), 'absolute_time': 1746692041.7158873, 'flatten_demographic_parity_ratio': '0.83_0.76_0.73_0.74_0.74', 'flatten_balanced_accuracy': '0.62_0.59_0.55_0.56_0.52'}
89
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 4, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 3}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.7442029259568026), 'balanced_accuracy': np.float64(0.5819047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.84), 'male_div/sep': np.float64(0.91), 'male_mar/wid': np.float64(0.82), 'male_single': np.float64(0.9)}, 'status': 'success', 'total_time': 0.1352550983428955, 'fit_time': np.float64(0.0048195838928222655), 'score_time': np.float64(0.0031099796295166017), 'absolute_time': 1746692041.9789064, 'flatten_demographic_parity_ratio': '0.69_0.74_0.8_0.78_0.7', 'flatten_balanced_accuracy': '0.68_0.65_0.5_0.56_0.53'}
90
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 6, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.5187276851038923), 'balanced_accuracy': np.float64(0.6728571428571428), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.52), 'male_mar/wid': np.float64(0.78), 'male_single': np.float64(0.95)}, 'status': 'success', 'total_time': 0.5811150074005127, 'fit_time': np.float64(0.042328166961669925), 'score_time': np.float64(0.023801088333129883), 'absolute_time': 1746692042.6907704, 'flatten_demographic_parity_ratio': '0.55_0.31_0.45_0.63_0.65', 'flatten_balanced_accuracy': '0.68_0.67_0.68_0.7_0.64'}
91
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.7693777692818046), 'balanced_accuracy': np.float64(0.5573809523809523), 'by_group': {'female_div/dep/mar': np.float64(0.88), 'male_div/sep': np.float64(0.85), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.78)}, 'status': 'success', 'total_time': 48.746506690979004, 'fit_time': np.float64(9.724464416503906), 'score_time': np.float64(0.005646991729736328), 'absolute_time': 1746692091.5479455, 'flatten_demographic_parity_ratio': '0.84_0.79_0.68_0.75_0.78', 'flatten_balanced_accuracy': '0.56_0.59_0.55_0.56_0.53'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

92
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 8, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0004284381866455078, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692091.66053}
93
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 3}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.8413441289776962), 'balanced_accuracy': np.float64(0.556904761904762), 'by_group': {'female_div/dep/mar': np.float64(0.94), 'male_div/sep': np.float64(0.88), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.89)}, 'status': 'success', 'total_time': 0.29974842071533203, 'fit_time': np.float64(0.03043990135192871), 'score_time': np.float64(0.008192968368530274), 'absolute_time': 1746692092.0725918, 'flatten_demographic_parity_ratio': '0.89_0.85_0.9_0.79_0.78', 'flatten_balanced_accuracy': '0.55_0.59_0.56_0.54_0.55'}
94
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.6289904550088036), 'balanced_accuracy': np.float64(0.5302380952380952), 'by_group': {'female_div/dep/mar': np.float64(0.81), 'male_div/sep': np.float64(0.7), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.68)}, 'status': 'success', 'total_time': 25.582671880722046, 'fit_time': np.float64(5.08723669052124), 'score_time': np.float64(0.007462406158447265), 'absolute_time': 1746692119.5526867, 'flatten_demographic_parity_ratio': '0.8_0.6_0.77_0.6_0.38', 'flatten_balanced_accuracy': '0.59_0.54_0.54_0.49_0.5'}
95
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.8576482654053728), 'balanced_accuracy': np.float64(0.585952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.88), 'male_div/sep': np.float64(0.93), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.97)}, 'status': 'success', 'total_time': 0.6098270416259766, 'fit_time': np.float64(0.09450874328613282), 'score_time': np.float64(0.004910612106323242), 'absolute_time': 1746692120.2760012, 'flatten_demographic_parity_ratio': '0.97_0.91_0.8_0.77_0.85', 'flatten_balanced_accuracy': '0.56_0.59_0.61_0.58_0.59'}
96
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 3}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.26589393615722656, 'fit_time': np.float64(0.030542421340942382), 'score_time': np.float64(0.004371166229248047), 'absolute_time': 1746692120.6569781, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
97
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.49067553954960125), 'balanced_accuracy': np.float64(0.5114285714285715), 'by_group': {'female_div/dep/mar': np.float64(0.69), 'male_div/sep': np.float64(0.62), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.59)}, 'status': 'success', 'total_time': 0.5584287643432617, 'fit_time': np.float64(0.06408772468566895), 'score_time': np.float64(0.015490007400512696), 'absolute_time': 1746692121.3405745, 'flatten_demographic_parity_ratio': '0.62_0.65_0.6_0.41_0.17', 'flatten_balanced_accuracy': '0.55_0.52_0.53_0.48_0.48'}
98
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 13, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.5660758172969145), 'balanced_accuracy': np.float64(0.5816666666666667), 'by_group': {'female_div/dep/mar': np.float64(0.75), 'male_div/sep': np.float64(0.89), 'male_mar/wid': np.float64(0.7), 'male_single': np.float64(0.83)}, 'status': 'success', 'total_time': 18.59883952140808, 'fit_time': np.float64(3.68889799118042), 'score_time': np.float64(0.008640909194946289), 'absolute_time': 1746692140.0644245, 'flatten_demographic_parity_ratio': '0.65_0.56_0.44_0.49_0.69', 'flatten_balanced_accuracy': '0.52_0.62_0.62_0.58_0.57'}
99
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 5, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.8199042736041269), 'balanced_accuracy': np.float64(0.5561904761904761), 'by_group': {'female_div/dep/mar': np.float64(0.91), 'male_div/sep': np.float64(0.91), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.87)}, 'status': 'success', 'total_time': 5.806918621063232, 'fit_time': np.float64(1.131526565551758), 'score_time': np.float64(0.008376502990722656), 'absolute_time': 1746692145.9975383, 'flatten_demographic_parity_ratio': '0.89_0.74_0.86_0.78_0.83', 'flatten_balanced_accuracy': '0.56_0.59_0.55_0.56_0.52'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

100
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(10), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_features_normalization_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.00040793418884277344, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692146.124208}
101
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 15, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.6290423306700312), 'balanced_accuracy': np.float64(0.5538095238095239), 'by_group': {'female_div/dep/mar': np.float64(0.8), 'male_div/sep': np.float64(0.83), 'male_mar/wid': np.float64(0.88), 'male_single': np.float64(0.72)}, 'status': 'success', 'total_time': 0.2062849998474121, 'fit_time': np.float64(0.005105352401733399), 'score_time': np.float64(0.010408639907836914), 'absolute_time': 1746692146.4581475, 'flatten_demographic_parity_ratio': '0.74_0.56_0.39_0.78_0.67', 'flatten_balanced_accuracy': '0.56_0.55_0.58_0.55_0.51'}
102
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 10, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.6242454199352419), 'balanced_accuracy': np.float64(0.6921428571428573), 'by_group': {'female_div/dep/mar': np.float64(0.78), 'male_div/sep': np.float64(0.7), 'male_mar/wid': np.float64(0.82), 'male_single': np.float64(0.97)}, 'status': 'success', 'total_time': 0.673959493637085, 'fit_time': np.float64(0.04150810241699219), 'score_time': np.float64(0.03867034912109375), 'absolute_time': 1746692149.134344, 'flatten_demographic_parity_ratio': '0.64_0.52_0.71_0.58_0.66', 'flatten_balanced_accuracy': '0.65_0.75_0.71_0.67_0.68'}
103
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.7980513683069366), 'balanced_accuracy': np.float64(0.5652380952380952), 'by_group': {'female_div/dep/mar': np.float64(0.88), 'male_div/sep': np.float64(0.86), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.97)}, 'status': 'success', 'total_time': 1.2419586181640625, 'fit_time': np.float64(0.2241002082824707), 'score_time': np.float64(0.005099248886108398), 'absolute_time': 1746692150.522764, 'flatten_demographic_parity_ratio': '0.48_0.85_0.83_0.94_0.9', 'flatten_balanced_accuracy': '0.59_0.59_0.53_0.57_0.55'}
104
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 6, 'min_samples_split': 3, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 2.8421828746795654, 'fit_time': np.float64(0.5383287906646729), 'score_time': np.float64(0.00812535285949707), 'absolute_time': 1746692153.4964068, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
105
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 5, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 9}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.6766828726828727), 'balanced_accuracy': np.float64(0.6009523809523809), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.7), 'male_mar/wid': np.float64(0.85), 'male_single': np.float64(0.84)}, 'status': 'success', 'total_time': 0.6087512969970703, 'fit_time': np.float64(0.0670168399810791), 'score_time': np.float64(0.01369023323059082), 'absolute_time': 1746692154.239879, 'flatten_demographic_parity_ratio': '0.64_0.77_0.69_0.62_0.66', 'flatten_balanced_accuracy': '0.65_0.6_0.62_0.53_0.62'}
106
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 12, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'prototype': np.str_('rebalancing_features_normalization_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.724920634920635), 'balanced_accuracy': np.float64(0.5961904761904762), 'by_group': {'female_div/dep/mar': np.float64(0.87), 'male_div/sep': np.float64(0.78), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.83)}, 'status': 'success', 'total_time': 0.4657554626464844, 'fit_time': np.float64(0.05447354316711426), 'score_time': np.float64(0.006234502792358399), 'absolute_time': 1746692154.8392599, 'flatten_demographic_parity_ratio': '0.83_0.75_0.81_0.69_0.54', 'flatten_balanced_accuracy': '0.67_0.63_0.68_0.52_0.48'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

107
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'prototype': np.str_('normalization_rebalancing_features_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0004379749298095703, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692154.975442}
108
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_split': 5, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.6158204996817724), 'balanced_accuracy': np.float64(0.5716666666666667), 'by_group': {'female_div/dep/mar': np.float64(0.8), 'male_div/sep': np.float64(0.72), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.71)}, 'status': 'success', 'total_time': 0.7686746120452881, 'fit_time': np.float64(0.12003026008605958), 'score_time': np.float64(0.009491395950317384), 'absolute_time': 1746692155.8783484, 'flatten_demographic_parity_ratio': '0.91_0.74_0.62_0.34_0.48', 'flatten_balanced_accuracy': '0.65_0.61_0.55_0.55_0.5'}
109
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 10, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.6870393628776774), 'balanced_accuracy': np.float64(0.6585714285714286), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.74), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.89)}, 'status': 'success', 'total_time': 0.19303059577941895, 'fit_time': np.float64(0.013984012603759765), 'score_time': np.float64(0.004890632629394531), 'absolute_time': 1746692156.2077453, 'flatten_demographic_parity_ratio': '0.95_0.69_0.8_0.67_0.32', 'flatten_balanced_accuracy': '0.69_0.64_0.67_0.65_0.64'}
110
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 12, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.35786560387968835), 'balanced_accuracy': np.float64(0.678095238095238), 'by_group': {'female_div/dep/mar': np.float64(0.67), 'male_div/sep': np.float64(0.36), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.89)}, 'status': 'success', 'total_time': 1.0167632102966309, 'fit_time': np.float64(0.08630499839782715), 'score_time': np.float64(0.05597257614135742), 'absolute_time': 1746692159.55485, 'flatten_demographic_parity_ratio': '0.31_0.0_0.55_0.51_0.42', 'flatten_balanced_accuracy': '0.64_0.7_0.71_0.65_0.68'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

111
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 8, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0004057884216308594, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692159.7317965}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

112
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 5, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0002982616424560547, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692159.8714087}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

113
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 6, 'min_samples_split': 5, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.00029587745666503906, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692160.0104125}
114
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(10), 'solver': np.str_('adam')}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.8776366539917572), 'balanced_accuracy': np.float64(0.5702380952380952), 'by_group': {'female_div/dep/mar': np.float64(0.91), 'male_div/sep': np.float64(0.92), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.94)}, 'status': 'success', 'total_time': 2.255073070526123, 'fit_time': np.float64(0.42723984718322755), 'score_time': np.float64(0.004886484146118164), 'absolute_time': 1746692162.4046924, 'flatten_demographic_parity_ratio': '0.79_0.93_0.94_0.84_0.89', 'flatten_balanced_accuracy': '0.62_0.54_0.55_0.58_0.57'}
115
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(50), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.4980317872060992), 'balanced_accuracy': np.float64(0.650952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.78), 'male_div/sep': np.float64(0.57), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.74)}, 'status': 'success', 'total_time': 1.4289720058441162, 'fit_time': np.float64(0.2659476280212402), 'score_time': np.float64(0.0025245189666748048), 'absolute_time': 1746692163.9795694, 'flatten_demographic_parity_ratio': '0.6_0.62_0.7_0.56_0.0', 'flatten_balanced_accuracy': '0.65_0.66_0.69_0.65_0.61'}
116
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 7, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.6966149458198388), 'balanced_accuracy': np.float64(0.5395238095238095), 'by_group': {'female_div/dep/mar': np.float64(0.92), 'male_div/sep': np.float64(0.84), 'male_mar/wid': np.float64(0.84), 'male_single': np.float64(0.82)}, 'status': 'success', 'total_time': 0.4723513126373291, 'fit_time': np.float64(0.03704819679260254), 'score_time': np.float64(0.01579561233520508), 'absolute_time': 1746692164.6029286, 'flatten_demographic_parity_ratio': '0.67_0.56_0.55_0.76_0.94', 'flatten_balanced_accuracy': '0.54_0.54_0.54_0.53_0.55'}
117
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.6934716761322266), 'balanced_accuracy': np.float64(0.5566666666666666), 'by_group': {'female_div/dep/mar': np.float64(0.86), 'male_div/sep': np.float64(0.78), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.74)}, 'status': 'success', 'total_time': 8.339926958084106, 'fit_time': np.float64(1.6444718837738037), 'score_time': np.float64(0.004743766784667969), 'absolute_time': 1746692173.0889242, 'flatten_demographic_parity_ratio': '0.77_0.6_0.82_0.75_0.53', 'flatten_balanced_accuracy': '0.61_0.54_0.53_0.55_0.55'}
118
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 6, 'min_samples_split': 4, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.43896503496503503), 'balanced_accuracy': np.float64(0.6307142857142858), 'by_group': {'female_div/dep/mar': np.float64(0.79), 'male_div/sep': np.float64(0.44), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.74)}, 'status': 'success', 'total_time': 0.7162942886352539, 'fit_time': np.float64(0.10313596725463867), 'score_time': np.float64(0.005218124389648438), 'absolute_time': 1746692176.142881, 'flatten_demographic_parity_ratio': '0.16_0.55_0.72_0.58_0.17', 'flatten_balanced_accuracy': '0.69_0.65_0.65_0.56_0.61'}
119
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.673593970695239), 'balanced_accuracy': np.float64(0.63), 'by_group': {'female_div/dep/mar': np.float64(0.69), 'male_div/sep': np.float64(0.75), 'male_mar/wid': np.float64(0.93), 'male_single': np.float64(0.86)}, 'status': 'success', 'total_time': 1.516169786453247, 'fit_time': np.float64(0.27694387435913087), 'score_time': np.float64(0.003973054885864258), 'absolute_time': 1746692177.8082445, 'flatten_demographic_parity_ratio': '0.69_0.73_0.53_0.77_0.66', 'flatten_balanced_accuracy': '0.62_0.65_0.59_0.65_0.64'}
120
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 4, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9278011245930748), 'balanced_accuracy': np.float64(0.5238095238095238), 'by_group': {'female_div/dep/mar': np.float64(0.96), 'male_div/sep': np.float64(0.96), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.95)}, 'status': 'success', 'total_time': 0.5059306621551514, 'fit_time': np.float64(0.07451653480529785), 'score_time': np.float64(0.006140327453613282), 'absolute_time': 1746692178.4625566, 'flatten_demographic_parity_ratio': '0.9_0.9_0.97_0.9_0.96', 'flatten_balanced_accuracy': '0.52_0.55_0.5_0.52_0.53'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

121
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 18, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0004134178161621094, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692178.6136804}
122
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.6085548514626662), 'balanced_accuracy': np.float64(0.6611904761904762), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.66), 'male_mar/wid': np.float64(0.83), 'male_single': np.float64(0.89)}, 'status': 'success', 'total_time': 0.9409022331237793, 'fit_time': np.float64(0.043669605255126955), 'score_time': np.float64(0.06558232307434082), 'absolute_time': 1746692179.7061498, 'flatten_demographic_parity_ratio': '0.36_0.59_0.73_0.79_0.56', 'flatten_balanced_accuracy': '0.58_0.68_0.69_0.66_0.7'}
123
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 16, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.6241311906278868), 'balanced_accuracy': np.float64(0.5295238095238095), 'by_group': {'female_div/dep/mar': np.float64(0.73), 'male_div/sep': np.float64(0.81), 'male_mar/wid': np.float64(0.89), 'male_single': np.float64(0.79)}, 'status': 'success', 'total_time': 5.147886514663696, 'fit_time': np.float64(0.8976942539215088), 'score_time': np.float64(0.05165672302246094), 'absolute_time': 1746692185.0308225, 'flatten_demographic_parity_ratio': '0.64_0.51_0.65_0.49_0.83', 'flatten_balanced_accuracy': '0.54_0.51_0.55_0.52_0.52'}
124
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 4, 'max_leaf_nodes': 4, 'min_samples_split': 5, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.666926595053104), 'balanced_accuracy': np.float64(0.5845238095238094), 'by_group': {'female_div/dep/mar': np.float64(0.81), 'male_div/sep': np.float64(0.79), 'male_mar/wid': np.float64(0.94), 'male_single': np.float64(0.75)}, 'status': 'success', 'total_time': 0.9682016372680664, 'fit_time': np.float64(0.15010590553283693), 'score_time': np.float64(0.008158493041992187), 'absolute_time': 1746692186.1768167, 'flatten_demographic_parity_ratio': '0.79_0.68_0.69_0.7_0.48', 'flatten_balanced_accuracy': '0.66_0.58_0.52_0.65_0.52'}
125
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 4, 'max_leaf_nodes': 4, 'min_samples_split': 3, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9618578416865414), 'balanced_accuracy': np.float64(0.5161904761904762), 'by_group': {'female_div/dep/mar': np.float64(0.98), 'male_div/sep': np.float64(0.97), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.97)}, 'status': 'success', 'total_time': 9.231985330581665, 'fit_time': np.float64(1.8166499614715577), 'score_time': np.float64(0.007902717590332032), 'absolute_time': 1746692195.5631275, 'flatten_demographic_parity_ratio': '0.95_1.0_0.97_0.98_0.9', 'flatten_balanced_accuracy': '0.56_0.5_0.5_0.5_0.52'}
126
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.6924088779242583), 'balanced_accuracy': np.float64(0.5397619047619048), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.76), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.77)}, 'status': 'success', 'total_time': 11.555887699127197, 'fit_time': np.float64(2.2716063022613526), 'score_time': np.float64(0.013353395462036132), 'absolute_time': 1746692209.7081902, 'flatten_demographic_parity_ratio': '0.79_0.74_0.66_0.53_0.74', 'flatten_balanced_accuracy': '0.61_0.58_0.52_0.46_0.52'}
127
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 4, 'max_leaf_nodes': 4, 'min_samples_split': 3, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9496561342102025), 'balanced_accuracy': np.float64(0.5221428571428571), 'by_group': {'female_div/dep/mar': np.float64(0.98), 'male_div/sep': np.float64(0.98), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.96)}, 'status': 'success', 'total_time': 8.03288459777832, 'fit_time': np.float64(1.5751834869384767), 'score_time': np.float64(0.009490776062011718), 'absolute_time': 1746692217.8991725, 'flatten_demographic_parity_ratio': '0.96_0.97_0.97_0.9_0.94', 'flatten_balanced_accuracy': '0.54_0.52_0.5_0.52_0.53'}
128
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('distance')}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.913958546296507), 'balanced_accuracy': np.float64(0.5326190476190475), 'by_group': {'female_div/dep/mar': np.float64(0.95), 'male_div/sep': np.float64(0.94), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.94)}, 'status': 'success', 'total_time': 0.7239475250244141, 'fit_time': np.float64(0.00485377311706543), 'score_time': np.float64(0.06571521759033203), 'absolute_time': 1746692218.7798262, 'flatten_demographic_parity_ratio': '0.93_0.93_0.98_0.89_0.84', 'flatten_balanced_accuracy': '0.55_0.58_0.51_0.52_0.5'}
129
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.939044910274412), 'balanced_accuracy': np.float64(0.5273809523809524), 'by_group': {'female_div/dep/mar': np.float64(0.96), 'male_div/sep': np.float64(0.97), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.96)}, 'status': 'success', 'total_time': 0.22978711128234863, 'fit_time': np.float64(0.020058441162109374), 'score_time': np.float64(0.005339860916137695), 'absolute_time': 1746692219.167177, 'flatten_demographic_parity_ratio': '0.94_0.93_0.94_0.9_0.98', 'flatten_balanced_accuracy': '0.53_0.55_0.51_0.52_0.52'}
130
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_features_normalization_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.7767716913338011), 'balanced_accuracy': np.float64(0.6519047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.81), 'male_div/sep': np.float64(0.91), 'male_mar/wid': np.float64(0.92), 'male_single': np.float64(0.86)}, 'status': 'success', 'total_time': 0.24268031120300293, 'fit_time': np.float64(0.009158658981323241), 'score_time': np.float64(0.012407970428466798), 'absolute_time': 1746692219.5680974, 'flatten_demographic_parity_ratio': '0.73_0.69_0.79_0.89_0.78', 'flatten_balanced_accuracy': '0.67_0.62_0.66_0.65_0.66'}
131
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 6, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.4013699908654037), 'balanced_accuracy': np.float64(0.6214285714285714), 'by_group': {'female_div/dep/mar': np.float64(0.72), 'male_div/sep': np.float64(0.47), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.72)}, 'status': 'success', 'total_time': 0.6317059993743896, 'fit_time': np.float64(0.09912605285644531), 'score_time': np.float64(0.006916332244873047), 'absolute_time': 1746692220.3572934, 'flatten_demographic_parity_ratio': '0.33_0.33_0.57_0.62_0.16', 'flatten_balanced_accuracy': '0.69_0.64_0.61_0.53_0.63'}
132
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 2, 'n_estimators': np.int64(100)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.8688747882843018, 'fit_time': np.float64(0.13869352340698243), 'score_time': np.float64(0.01007981300354004), 'absolute_time': 1746692221.3878024, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
133
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 14, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.49107069645439766), 'balanced_accuracy': np.float64(0.6440476190476191), 'by_group': {'female_div/dep/mar': np.float64(0.71), 'male_div/sep': np.float64(0.56), 'male_mar/wid': np.float64(0.89), 'male_single': np.float64(0.94)}, 'status': 'success', 'total_time': 0.1994953155517578, 'fit_time': np.float64(0.009103536605834961), 'score_time': np.float64(0.008937788009643555), 'absolute_time': 1746692221.7488568, 'flatten_demographic_parity_ratio': '0.26_0.48_0.6_0.48_0.65', 'flatten_balanced_accuracy': '0.64_0.64_0.68_0.63_0.62'}
134
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.7162935321057284), 'balanced_accuracy': np.float64(0.5530952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.86), 'male_div/sep': np.float64(0.81), 'male_mar/wid': np.float64(0.91), 'male_single': np.float64(0.88)}, 'status': 'success', 'total_time': 0.9164786338806152, 'fit_time': np.float64(0.03240985870361328), 'score_time': np.float64(0.07988510131835938), 'absolute_time': 1746692222.8691392, 'flatten_demographic_parity_ratio': '0.32_0.71_0.92_0.86_0.76', 'flatten_balanced_accuracy': '0.57_0.6_0.52_0.55_0.53'}
135
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(50), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.6976724585127547), 'balanced_accuracy': np.float64(0.6157142857142857), 'by_group': {'female_div/dep/mar': np.float64(0.81), 'male_div/sep': np.float64(0.76), 'male_mar/wid': np.float64(0.93), 'male_single': np.float64(0.91)}, 'status': 'success', 'total_time': 1.7523815631866455, 'fit_time': np.float64(0.3155830383300781), 'score_time': np.float64(0.004227447509765625), 'absolute_time': 1746692227.119992, 'flatten_demographic_parity_ratio': '0.79_0.81_0.48_0.65_0.76', 'flatten_balanced_accuracy': '0.68_0.61_0.65_0.55_0.6'}
136
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 8, 'weights': np.str_('distance')}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_features_normalization_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.5708172946597995), 'balanced_accuracy': np.float64(0.6585714285714286), 'by_group': {'female_div/dep/mar': np.float64(0.72), 'male_div/sep': np.float64(0.63), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.91)}, 'status': 'success', 'total_time': 0.733365535736084, 'fit_time': np.float64(0.02884221076965332), 'score_time': np.float64(0.051115560531616214), 'absolute_time': 1746692228.0260298, 'flatten_demographic_parity_ratio': '0.51_0.51_0.63_0.45_0.75', 'flatten_balanced_accuracy': '0.65_0.69_0.67_0.59_0.69'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

137
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0004448890686035156, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692228.2243118}
138
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 17, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9407669317029089), 'balanced_accuracy': np.float64(0.5278571428571428), 'by_group': {'female_div/dep/mar': np.float64(0.96), 'male_div/sep': np.float64(0.97), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.95)}, 'status': 'success', 'total_time': 0.22318673133850098, 'fit_time': np.float64(0.0036246776580810547), 'score_time': np.float64(0.012923288345336913), 'absolute_time': 1746692228.6450236, 'flatten_demographic_parity_ratio': '0.93_0.94_0.95_0.99_0.9', 'flatten_balanced_accuracy': '0.53_0.56_0.5_0.53_0.52'}
139
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 4, 'max_leaf_nodes': 6, 'min_samples_split': 2, 'n_estimators': np.int64(75)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9573532588632604), 'balanced_accuracy': np.float64(0.5226190476190476), 'by_group': {'female_div/dep/mar': np.float64(0.98), 'male_div/sep': np.float64(0.98), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.98)}, 'status': 'success', 'total_time': 0.7269964218139648, 'fit_time': np.float64(0.1131260871887207), 'score_time': np.float64(0.008731222152709961), 'absolute_time': 1746692229.5712998, 'flatten_demographic_parity_ratio': '0.98_0.95_0.98_0.9_0.97', 'flatten_balanced_accuracy': '0.52_0.52_0.52_0.52_0.52'}
140
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9359093362115489), 'balanced_accuracy': np.float64(0.5161904761904761), 'by_group': {'female_div/dep/mar': np.float64(0.98), 'male_div/sep': np.float64(0.95), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.96)}, 'status': 'success', 'total_time': 21.39802646636963, 'fit_time': np.float64(4.2500235080719), 'score_time': np.float64(0.00800461769104004), 'absolute_time': 1746692251.1807582, 'flatten_demographic_parity_ratio': '0.95_1.0_0.93_0.9_0.9', 'flatten_balanced_accuracy': '0.53_0.5_0.51_0.52_0.52'}
141
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 3, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.42142820358276367, 'fit_time': np.float64(0.058282899856567386), 'score_time': np.float64(0.005442142486572266), 'absolute_time': 1746692251.7722342, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
142
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 4, 'max_leaf_nodes': 2, 'min_samples_split': 3, 'n_estimators': np.int64(25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.40320239659139084), 'balanced_accuracy': np.float64(0.6483333333333333), 'by_group': {'female_div/dep/mar': np.float64(0.66), 'male_div/sep': np.float64(0.49), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.64)}, 'status': 'success', 'total_time': 0.3591470718383789, 'fit_time': np.float64(0.044899940490722656), 'score_time': np.float64(0.005750179290771484), 'absolute_time': 1746692255.1303825, 'flatten_demographic_parity_ratio': '0.3_0.36_0.54_0.67_0.15', 'flatten_balanced_accuracy': '0.7_0.66_0.63_0.64_0.62'}
143
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 6, 'min_samples_split': 6, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.5163303707205046), 'balanced_accuracy': np.float64(0.5761904761904761), 'by_group': {'female_div/dep/mar': np.float64(0.76), 'male_div/sep': np.float64(0.64), 'male_mar/wid': np.float64(0.94), 'male_single': np.float64(0.72)}, 'status': 'success', 'total_time': 5.106882333755493, 'fit_time': np.float64(0.7681525707244873), 'score_time': np.float64(0.013927793502807618), 'absolute_time': 1746692260.4362917, 'flatten_demographic_parity_ratio': '0.0_0.62_0.67_0.65_0.63', 'flatten_balanced_accuracy': '0.59_0.56_0.52_0.57_0.64'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 609, in objective
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_param_validation.py", line 216, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 431, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 517, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 5 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
5 fits failed with the following error:
Traceback (most recent call last):
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 866, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "/usr/local/lib/python3.12/site-packages/sklearn/base.py", line 1389, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 518, in fit
    Xt, yt = self._fit(X, y, routed_params, raw_params=params)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 430, in _fit
    X, fitted_transformer = fit_transform_one_cached(
                            ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/joblib/memory.py", line 312, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 1383, in _fit_transform_one
    res = transformer.fit_transform(X, y, **params.get("fit_transform", {}))
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_set_output.py", line 319, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 76, in fit_transform
    df_X, df_y = self._prepare_dataset(X, y, fit=True)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 37, in _prepare_dataset
    raise Exception("No sensitive features to mitigate")
Exception: No sensitive features to mitigate


144
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 7}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.03728675842285156, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692260.6815727}
145
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 9}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.8956733587292517), 'balanced_accuracy': np.float64(0.5426190476190477), 'by_group': {'female_div/dep/mar': np.float64(0.93), 'male_div/sep': np.float64(0.94), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.98)}, 'status': 'success', 'total_time': 4.640801668167114, 'fit_time': np.float64(0.900938606262207), 'score_time': np.float64(0.006278467178344726), 'absolute_time': 1746692265.5285683, 'flatten_demographic_parity_ratio': '0.86_0.91_0.9_0.94_0.87', 'flatten_balanced_accuracy': '0.54_0.56_0.51_0.51_0.59'}
146
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 4, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.6111037747149762), 'balanced_accuracy': np.float64(0.549047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.68), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.7)}, 'status': 'success', 'total_time': 0.34819507598876953, 'fit_time': np.float64(0.04715814590454102), 'score_time': np.float64(0.004050207138061523), 'absolute_time': 1746692266.0504208, 'flatten_demographic_parity_ratio': '0.77_0.48_0.74_0.71_0.36', 'flatten_balanced_accuracy': '0.61_0.54_0.55_0.52_0.52'}
147
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.7982318598832361), 'balanced_accuracy': np.float64(0.5273809523809524), 'by_group': {'female_div/dep/mar': np.float64(0.9), 'male_div/sep': np.float64(0.86), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.84)}, 'status': 'success', 'total_time': 14.365212440490723, 'fit_time': np.float64(1.094324779510498), 'score_time': np.float64(0.015702199935913087), 'absolute_time': 1746692280.5880117, 'flatten_demographic_parity_ratio': '0.96_1.0_0.8_0.63_0.6', 'flatten_balanced_accuracy': '0.54_0.5_0.53_0.51_0.56'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

148
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 11, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0004248619079589844, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692280.764697}
149
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.8709137327615272), 'balanced_accuracy': np.float64(0.5266666666666666), 'by_group': {'female_div/dep/mar': np.float64(0.95), 'male_div/sep': np.float64(0.9), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.9)}, 'status': 'success', 'total_time': 7.064007520675659, 'fit_time': np.float64(1.3101133346557616), 'score_time': np.float64(0.034522056579589844), 'absolute_time': 1746692288.0053077, 'flatten_demographic_parity_ratio': '0.89_0.9_0.97_0.76_0.83', 'flatten_balanced_accuracy': '0.54_0.57_0.5_0.5_0.52'}
150
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.69920478151365), 'balanced_accuracy': np.float64(0.5573809523809523), 'by_group': {'female_div/dep/mar': np.float64(0.79), 'male_div/sep': np.float64(0.8), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.72)}, 'status': 'success', 'total_time': 1.215353012084961, 'fit_time': np.float64(0.21768078804016114), 'score_time': np.float64(0.0057620048522949215), 'absolute_time': 1746692292.1304905, 'flatten_demographic_parity_ratio': '0.83_0.69_0.67_0.58_0.72', 'flatten_balanced_accuracy': '0.59_0.54_0.57_0.57_0.51'}
151
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(50), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.45861731950844853), 'balanced_accuracy': np.float64(0.5692857142857143), 'by_group': {'female_div/dep/mar': np.float64(0.71), 'male_div/sep': np.float64(0.49), 'male_mar/wid': np.float64(0.87), 'male_single': np.float64(0.75)}, 'status': 'success', 'total_time': 1.3172180652618408, 'fit_time': np.float64(0.23934364318847656), 'score_time': np.float64(0.004760265350341797), 'absolute_time': 1746692293.6318352, 'flatten_demographic_parity_ratio': '0.61_0.6_0.34_0.51_0.24', 'flatten_balanced_accuracy': '0.6_0.59_0.58_0.53_0.54'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

152
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0004398822784423828, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692293.8164341}
153
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 2, 'max_features': 4, 'max_leaf_nodes': 3, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.5770678246484697), 'balanced_accuracy': np.float64(0.5845238095238094), 'by_group': {'female_div/dep/mar': np.float64(0.93), 'male_div/sep': np.float64(0.62), 'male_mar/wid': np.float64(0.9), 'male_single': np.float64(0.77)}, 'status': 'success', 'total_time': 1.1148080825805664, 'fit_time': np.float64(0.18984851837158204), 'score_time': np.float64(0.009236574172973633), 'absolute_time': 1746692295.1157558, 'flatten_demographic_parity_ratio': '0.81_0.68_0.63_0.48_0.29', 'flatten_balanced_accuracy': '0.62_0.63_0.57_0.58_0.53'}
154
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 4, 'max_leaf_nodes': 2, 'min_samples_split': 6, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.23197759103641458), 'balanced_accuracy': np.float64(0.5964285714285713), 'by_group': {'female_div/dep/mar': np.float64(0.9), 'male_div/sep': np.float64(0.23), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.75)}, 'status': 'success', 'total_time': 0.2771880626678467, 'fit_time': np.float64(0.034097719192504886), 'score_time': np.float64(0.003668212890625), 'absolute_time': 1746692295.574924, 'flatten_demographic_parity_ratio': '0.26_0.12_0.53_0.25_0.0', 'flatten_balanced_accuracy': '0.62_0.6_0.57_0.6_0.58'}
155
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.7382764189215802), 'balanced_accuracy': np.float64(0.5580952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.94), 'male_div/sep': np.float64(0.74), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.9)}, 'status': 'success', 'total_time': 1.0101256370544434, 'fit_time': np.float64(0.170737361907959), 'score_time': np.float64(0.004907941818237305), 'absolute_time': 1746692296.7686036, 'flatten_demographic_parity_ratio': '0.83_1.0_0.87_1.0_0.0', 'flatten_balanced_accuracy': '0.61_0.5_0.64_0.5_0.54'}
156
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(50), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.5759432858563294), 'balanced_accuracy': np.float64(0.6592857142857143), 'by_group': {'female_div/dep/mar': np.float64(0.72), 'male_div/sep': np.float64(0.61), 'male_mar/wid': np.float64(0.87), 'male_single': np.float64(0.95)}, 'status': 'success', 'total_time': 6.3433685302734375, 'fit_time': np.float64(1.2483443737030029), 'score_time': np.float64(0.002870988845825195), 'absolute_time': 1746692303.2974327, 'flatten_demographic_parity_ratio': '0.59_0.51_0.71_0.58_0.47', 'flatten_balanced_accuracy': '0.68_0.67_0.63_0.67_0.65'}
157
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.45198014937511627), 'balanced_accuracy': np.float64(0.5916666666666667), 'by_group': {'female_div/dep/mar': np.float64(0.7), 'male_div/sep': np.float64(0.5), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.94)}, 'status': 'success', 'total_time': 1.0247538089752197, 'fit_time': np.float64(0.0432403564453125), 'score_time': np.float64(0.06957368850708008), 'absolute_time': 1746692304.5119019, 'flatten_demographic_parity_ratio': '0.62_0.42_0.14_0.64_0.45', 'flatten_balanced_accuracy': '0.56_0.56_0.6_0.6_0.63'}
158
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_split': 6, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.4231950092636011), 'balanced_accuracy': np.float64(0.578095238095238), 'by_group': {'female_div/dep/mar': np.float64(0.6), 'male_div/sep': np.float64(0.49), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.75)}, 'status': 'success', 'total_time': 0.2224419116973877, 'fit_time': np.float64(0.02067227363586426), 'score_time': np.float64(0.004210090637207032), 'absolute_time': 1746692304.9748995, 'flatten_demographic_parity_ratio': '0.37_0.53_0.85_0.13_0.24', 'flatten_balanced_accuracy': '0.59_0.58_0.58_0.57_0.57'}
159
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.811654618388129), 'balanced_accuracy': np.float64(0.5609523809523809), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.9), 'male_mar/wid': np.float64(0.94), 'male_single': np.float64(0.89)}, 'status': 'success', 'total_time': 0.20900630950927734, 'fit_time': np.float64(0.0043752193450927734), 'score_time': np.float64(0.01121525764465332), 'absolute_time': 1746692308.2388277, 'flatten_demographic_parity_ratio': '0.69_0.81_0.89_0.87_0.8', 'flatten_balanced_accuracy': '0.59_0.58_0.54_0.59_0.51'}
160
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 2, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.8836612021857924), 'balanced_accuracy': np.float64(0.5328571428571428), 'by_group': {'female_div/dep/mar': np.float64(0.93), 'male_div/sep': np.float64(0.9), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.96)}, 'status': 'success', 'total_time': 0.3648860454559326, 'fit_time': np.float64(0.048312711715698245), 'score_time': np.float64(0.0048943042755126955), 'absolute_time': 1746692308.7912397, 'flatten_demographic_parity_ratio': '0.92_0.9_0.8_0.9_0.9', 'flatten_balanced_accuracy': '0.53_0.54_0.55_0.52_0.53'}
161
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.6919116985286679), 'balanced_accuracy': np.float64(0.6507142857142857), 'by_group': {'female_div/dep/mar': np.float64(0.79), 'male_div/sep': np.float64(0.74), 'male_mar/wid': np.float64(0.88), 'male_single': np.float64(0.95)}, 'status': 'success', 'total_time': 1.9065253734588623, 'fit_time': np.float64(0.35713939666748046), 'score_time': np.float64(0.004227256774902344), 'absolute_time': 1746692310.8851154, 'flatten_demographic_parity_ratio': '0.74_0.56_0.73_0.74_0.69', 'flatten_balanced_accuracy': '0.68_0.64_0.7_0.62_0.63'}
The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 4, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 4, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')} was NaN

162
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 4, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5021428571428571), 'by_group': {'female_div/dep/mar': np.float64(0.0), 'male_div/sep': np.float64(0.0), 'male_mar/wid': np.float64(0.0), 'male_single': np.float64(1.0)}, 'status': 'fail', 'total_time': 13.279235363006592, 'fit_time': np.float64(2.5306416034698485), 'score_time': np.float64(0.07150530815124512), 'absolute_time': 1746692324.3528194, 'flatten_demographic_parity_ratio': 'nan_nan_0.0_0.0_nan', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.51_0.5'}
163
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_features_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.46617180205415504), 'balanced_accuracy': np.float64(0.6061904761904762), 'by_group': {'female_div/dep/mar': np.float64(0.88), 'male_div/sep': np.float64(0.5), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.87)}, 'status': 'success', 'total_time': 0.9288768768310547, 'fit_time': np.float64(0.15759620666503907), 'score_time': np.float64(0.007576417922973633), 'absolute_time': 1746692325.4724662, 'flatten_demographic_parity_ratio': '0.75_0.45_0.81_0.32_0.0', 'flatten_balanced_accuracy': '0.58_0.62_0.61_0.65_0.57'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 609, in objective
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_param_validation.py", line 216, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 431, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 517, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 5 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
5 fits failed with the following error:
Traceback (most recent call last):
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 866, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "/usr/local/lib/python3.12/site-packages/sklearn/base.py", line 1389, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 518, in fit
    Xt, yt = self._fit(X, y, routed_params, raw_params=params)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 430, in _fit
    X, fitted_transformer = fit_transform_one_cached(
                            ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/joblib/memory.py", line 312, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 1383, in _fit_transform_one
    res = transformer.fit_transform(X, y, **params.get("fit_transform", {}))
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_set_output.py", line 319, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 76, in fit_transform
    df_X, df_y = self._prepare_dataset(X, y, fit=True)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 37, in _prepare_dataset
    raise Exception("No sensitive features to mitigate")
Exception: No sensitive features to mitigate


164
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 17, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.033442020416259766, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692325.6990669}
165
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9465470917285647), 'balanced_accuracy': np.float64(0.5116666666666667), 'by_group': {'female_div/dep/mar': np.float64(0.99), 'male_div/sep': np.float64(0.96), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.98)}, 'status': 'success', 'total_time': 0.2713623046875, 'fit_time': np.float64(0.02842288017272949), 'score_time': np.float64(0.005826377868652343), 'absolute_time': 1746692326.1641805, 'flatten_demographic_parity_ratio': '0.9_0.97_0.98_0.9_0.98', 'flatten_balanced_accuracy': '0.51_0.52_0.5_0.52_0.5'}
166
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 7}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.7596742642463665), 'balanced_accuracy': np.float64(0.680952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.87), 'male_div/sep': np.float64(0.88), 'male_mar/wid': np.float64(0.83), 'male_single': np.float64(0.95)}, 'status': 'success', 'total_time': 0.6821231842041016, 'fit_time': np.float64(0.1072575569152832), 'score_time': np.float64(0.005327081680297852), 'absolute_time': 1746692330.34467, 'flatten_demographic_parity_ratio': '0.68_0.76_0.71_0.79_0.85', 'flatten_balanced_accuracy': '0.69_0.66_0.72_0.7_0.63'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 622, in objective
    fair_scores, fair_scores_by_group = _compute_fair_metric(
                                        ^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 381, in _compute_fair_metric
    y_pred = np.array(scores["estimator"][fold].predict(x_original))
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 659, in predict
    return self.steps[-1][1].predict(Xt, **params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/neighbors/_classification.py", line 262, in predict
    probabilities = self.predict_proba(X)
                    ^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/neighbors/_classification.py", line 348, in predict_proba
    probabilities = ArgKminClassMode.compute(
                    ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/metrics/_pairwise_distances_reduction/_dispatcher.py", line 587, in compute
    return ArgKminClassMode64.compute(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Argument 'metric' has incorrect type (expected str, got numpy.str_)

167
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 10, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 2.85129451751709, 'fit_time': np.float64(0.5581372737884521), 'score_time': np.float64(0.009209823608398438), 'absolute_time': 1746692333.396938}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

168
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0004172325134277344, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692333.5956786}
169
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_split': 3, 'n_estimators': np.int64(100)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.22257560975609758), 'balanced_accuracy': np.float64(0.6592857142857143), 'by_group': {'female_div/dep/mar': np.float64(0.88), 'male_div/sep': np.float64(0.22), 'male_mar/wid': np.float64(0.91), 'male_single': np.float64(0.89)}, 'status': 'success', 'total_time': 1.2756636142730713, 'fit_time': np.float64(0.22077088356018065), 'score_time': np.float64(0.009774446487426758), 'absolute_time': 1746692335.0694773, 'flatten_demographic_parity_ratio': '0.0_0.15_0.36_0.6_0.0', 'flatten_balanced_accuracy': '0.7_0.68_0.61_0.65_0.66'}
170
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.5264820714156577), 'balanced_accuracy': np.float64(0.6685714285714285), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.58), 'male_mar/wid': np.float64(0.81), 'male_single': np.float64(0.96)}, 'status': 'success', 'total_time': 1.830296277999878, 'fit_time': np.float64(0.3436387062072754), 'score_time': np.float64(0.0041347980499267575), 'absolute_time': 1746692337.102578, 'flatten_demographic_parity_ratio': '0.17_0.33_0.75_0.78_0.61', 'flatten_balanced_accuracy': '0.67_0.69_0.67_0.63_0.69'}
171
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.6016574831185456), 'balanced_accuracy': np.float64(0.6195238095238095), 'by_group': {'female_div/dep/mar': np.float64(0.85), 'male_div/sep': np.float64(0.69), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.67)}, 'status': 'success', 'total_time': 2.0351128578186035, 'fit_time': np.float64(0.38309731483459475), 'score_time': np.float64(0.005061101913452148), 'absolute_time': 1746692339.336349, 'flatten_demographic_parity_ratio': '0.65_0.64_0.7_0.63_0.38', 'flatten_balanced_accuracy': '0.66_0.68_0.65_0.52_0.59'}
172
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_split': 2, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9660588124512361), 'balanced_accuracy': np.float64(0.5204761904761904), 'by_group': {'female_div/dep/mar': np.float64(0.97), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.97)}, 'status': 'success', 'total_time': 0.9403476715087891, 'fit_time': np.float64(0.1541205883026123), 'score_time': np.float64(0.009610128402709962), 'absolute_time': 1746692340.4747276, 'flatten_demographic_parity_ratio': '0.98_1.0_0.96_0.92_0.97', 'flatten_balanced_accuracy': '0.51_0.5_0.54_0.53_0.52'}
173
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 18, 'weights': np.str_('distance')}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.8863261974398469), 'balanced_accuracy': np.float64(0.5295238095238095), 'by_group': {'female_div/dep/mar': np.float64(0.94), 'male_div/sep': np.float64(0.89), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.94)}, 'status': 'success', 'total_time': 0.556692361831665, 'fit_time': np.float64(0.005326223373413086), 'score_time': np.float64(0.0469815731048584), 'absolute_time': 1746692341.2415972, 'flatten_demographic_parity_ratio': '0.88_0.95_0.95_0.8_0.84', 'flatten_balanced_accuracy': '0.51_0.58_0.5_0.54_0.5'}
174
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 7, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.8247574513434325), 'balanced_accuracy': np.float64(0.5440476190476191), 'by_group': {'female_div/dep/mar': np.float64(0.92), 'male_div/sep': np.float64(0.91), 'male_mar/wid': np.float64(0.92), 'male_single': np.float64(0.89)}, 'status': 'success', 'total_time': 0.1584491729736328, 'fit_time': np.float64(0.0076274871826171875), 'score_time': np.float64(0.004632329940795899), 'absolute_time': 1746692341.6616855, 'flatten_demographic_parity_ratio': '0.65_0.9_0.93_0.75_0.89', 'flatten_balanced_accuracy': '0.54_0.54_0.5_0.61_0.53'}
175
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 3, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.9026000351990324), 'balanced_accuracy': np.float64(0.5166666666666667), 'by_group': {'female_div/dep/mar': np.float64(0.95), 'male_div/sep': np.float64(0.96), 'male_mar/wid': np.float64(0.95), 'male_single': np.float64(0.96)}, 'status': 'success', 'total_time': 7.166489124298096, 'fit_time': np.float64(1.28171648979187), 'score_time': np.float64(0.0552574634552002), 'absolute_time': 1746692352.0752535, 'flatten_demographic_parity_ratio': '1.0_0.9_0.86_0.75_1.0', 'flatten_balanced_accuracy': '0.5_0.56_0.52_0.5_0.5'}
176
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.7022758368249715), 'balanced_accuracy': np.float64(0.5488095238095239), 'by_group': {'female_div/dep/mar': np.float64(0.87), 'male_div/sep': np.float64(0.79), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.76)}, 'status': 'success', 'total_time': 5.752007722854614, 'fit_time': np.float64(1.1242821216583252), 'score_time': np.float64(0.005880832672119141), 'absolute_time': 1746692358.03331, 'flatten_demographic_parity_ratio': '0.81_0.68_0.87_0.78_0.38', 'flatten_balanced_accuracy': '0.58_0.57_0.54_0.55_0.5'}
177
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 5, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.991660642638476), 'balanced_accuracy': np.float64(0.505), 'by_group': {'female_div/dep/mar': np.float64(0.99), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.4813535213470459, 'fit_time': np.float64(0.07035255432128906), 'score_time': np.float64(0.005449485778808594), 'absolute_time': 1746692358.7261693, 'flatten_demographic_parity_ratio': '1.0_0.98_1.0_0.99_0.98', 'flatten_balanced_accuracy': '0.5_0.51_0.5_0.51_0.51'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 609, in objective
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_param_validation.py", line 216, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 431, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 517, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 5 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
5 fits failed with the following error:
Traceback (most recent call last):
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 866, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "/usr/local/lib/python3.12/site-packages/sklearn/base.py", line 1389, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 518, in fit
    Xt, yt = self._fit(X, y, routed_params, raw_params=params)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 430, in _fit
    X, fitted_transformer = fit_transform_one_cached(
                            ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/joblib/memory.py", line 312, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 1383, in _fit_transform_one
    res = transformer.fit_transform(X, y, **params.get("fit_transform", {}))
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_set_output.py", line 319, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 76, in fit_transform
    df_X, df_y = self._prepare_dataset(X, y, fit=True)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 37, in _prepare_dataset
    raise Exception("No sensitive features to mitigate")
Exception: No sensitive features to mitigate


178
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(50), 'solver': np.str_('adam')}, 'features': {'type': np.str_('SelectKBest'), 'k': 2}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.035807132720947266, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692358.9737449}
179
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.47900706789462416), 'balanced_accuracy': np.float64(0.5842857142857143), 'by_group': {'female_div/dep/mar': np.float64(0.72), 'male_div/sep': np.float64(0.56), 'male_mar/wid': np.float64(0.91), 'male_single': np.float64(0.86)}, 'status': 'success', 'total_time': 0.36214208602905273, 'fit_time': np.float64(0.046537256240844725), 'score_time': np.float64(0.005709505081176758), 'absolute_time': 1746692359.5449612, 'flatten_demographic_parity_ratio': '0.4_0.67_0.38_0.38_0.56', 'flatten_balanced_accuracy': '0.56_0.57_0.59_0.55_0.65'}
180
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.34765195453480685), 'balanced_accuracy': np.float64(0.6697619047619048), 'by_group': {'female_div/dep/mar': np.float64(0.62), 'male_div/sep': np.float64(0.4), 'male_mar/wid': np.float64(0.93), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.9869780540466309, 'fit_time': np.float64(0.038432645797729495), 'score_time': np.float64(0.06527824401855468), 'absolute_time': 1746692360.75588, 'flatten_demographic_parity_ratio': '0.0_0.39_0.35_0.57_0.43', 'flatten_balanced_accuracy': '0.64_0.69_0.69_0.64_0.7'}
181
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_split': 2, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.4389054775238037, 'fit_time': np.float64(0.058707571029663085), 'score_time': np.float64(0.006647920608520508), 'absolute_time': 1746692361.4244022, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')} was NaN

182
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.495952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.87), 'male_div/sep': np.float64(0.73), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.79)}, 'status': 'fail', 'total_time': 4.94919490814209, 'fit_time': np.float64(0.8288957595825195), 'score_time': np.float64(0.005513238906860352), 'absolute_time': 1746692370.070775, 'flatten_demographic_parity_ratio': 'nan_0.18_nan_0.89_1.0', 'flatten_balanced_accuracy': '0.5_0.49_0.5_0.49_0.5'}
183
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 13, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.6148148700123172), 'balanced_accuracy': np.float64(0.5652380952380952), 'by_group': {'female_div/dep/mar': np.float64(0.78), 'male_div/sep': np.float64(0.68), 'male_mar/wid': np.float64(0.95), 'male_single': np.float64(0.87)}, 'status': 'success', 'total_time': 0.3737325668334961, 'fit_time': np.float64(0.04542961120605469), 'score_time': np.float64(0.00847015380859375), 'absolute_time': 1746692370.6589088, 'flatten_demographic_parity_ratio': '0.68_0.69_0.69_0.54_0.47', 'flatten_balanced_accuracy': '0.58_0.59_0.58_0.52_0.55'}
184
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 6, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.7219120878067036), 'balanced_accuracy': np.float64(0.5642857142857144), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.89), 'male_mar/wid': np.float64(0.9), 'male_single': np.float64(0.8)}, 'status': 'success', 'total_time': 0.21634173393249512, 'fit_time': np.float64(0.020493125915527342), 'score_time': np.float64(0.004101848602294922), 'absolute_time': 1746692371.0868032, 'flatten_demographic_parity_ratio': '0.79_0.75_0.59_0.77_0.72', 'flatten_balanced_accuracy': '0.62_0.58_0.52_0.56_0.54'}
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(50), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(50), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')} was NaN

185
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(50), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5240476190476191), 'by_group': {'female_div/dep/mar': np.float64(0.67), 'male_div/sep': np.float64(0.56), 'male_mar/wid': np.float64(0.72), 'male_single': np.float64(0.82)}, 'status': 'fail', 'total_time': 15.092191934585571, 'fit_time': np.float64(0.9318889141082763), 'score_time': np.float64(0.007571697235107422), 'absolute_time': 1746692386.3951936, 'flatten_demographic_parity_ratio': '0.0_nan_0.87_0.78_0.41', 'flatten_balanced_accuracy': '0.5_0.5_0.54_0.56_0.51'}
186
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.5609674449547912), 'balanced_accuracy': np.float64(0.621904761904762), 'by_group': {'female_div/dep/mar': np.float64(0.79), 'male_div/sep': np.float64(0.6), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.88)}, 'status': 'success', 'total_time': 0.570432186126709, 'fit_time': np.float64(0.09135794639587402), 'score_time': np.float64(0.0042079448699951175), 'absolute_time': 1746692387.179833, 'flatten_demographic_parity_ratio': '0.39_0.8_0.53_0.56_0.53', 'flatten_balanced_accuracy': '0.58_0.67_0.65_0.6_0.6'}
187
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(50), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.17337121212121212), 'balanced_accuracy': np.float64(0.6297619047619049), 'by_group': {'female_div/dep/mar': np.float64(0.87), 'male_div/sep': np.float64(0.17), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.88)}, 'status': 'success', 'total_time': 64.35746788978577, 'fit_time': np.float64(12.805683660507203), 'score_time': np.float64(0.030329036712646484), 'absolute_time': 1746692451.7581666, 'flatten_demographic_parity_ratio': '0.0_0.38_0.33_0.16_0.0', 'flatten_balanced_accuracy': '0.65_0.66_0.63_0.61_0.61'}
188
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.5892237378043005), 'balanced_accuracy': np.float64(0.6661904761904761), 'by_group': {'female_div/dep/mar': np.float64(0.84), 'male_div/sep': np.float64(0.64), 'male_mar/wid': np.float64(0.95), 'male_single': np.float64(0.93)}, 'status': 'success', 'total_time': 0.33838605880737305, 'fit_time': np.float64(0.032976627349853516), 'score_time': np.float64(0.005608510971069336), 'absolute_time': 1746692452.3943522, 'flatten_demographic_parity_ratio': '0.74_0.41_0.53_0.48_0.79', 'flatten_balanced_accuracy': '0.7_0.69_0.65_0.65_0.64'}
189
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 6, 'min_samples_split': 5, 'n_estimators': np.int64(50)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.5412019092418594), 'balanced_accuracy': np.float64(0.6530952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.66), 'male_div/sep': np.float64(0.54), 'male_mar/wid': np.float64(0.85), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.5617883205413818, 'fit_time': np.float64(0.08453807830810547), 'score_time': np.float64(0.006797122955322266), 'absolute_time': 1746692453.1716692, 'flatten_demographic_parity_ratio': '0.69_0.47_0.47_0.68_0.4', 'flatten_balanced_accuracy': '0.63_0.65_0.63_0.64_0.72'}
190
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9908256880733944), 'balanced_accuracy': np.float64(0.5011904761904762), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.99)}, 'status': 'success', 'total_time': 6.295917272567749, 'fit_time': np.float64(1.2309680461883545), 'score_time': np.float64(0.006862735748291016), 'absolute_time': 1746692463.0102413, 'flatten_demographic_parity_ratio': '1.0_1.0_0.95_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.51_0.5_0.5'}
191
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.33676714513556616), 'balanced_accuracy': np.float64(0.6328571428571429), 'by_group': {'female_div/dep/mar': np.float64(0.69), 'male_div/sep': np.float64(0.34), 'male_mar/wid': np.float64(0.74), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.877190351486206, 'fit_time': np.float64(0.03300943374633789), 'score_time': np.float64(0.05970449447631836), 'absolute_time': 1746692464.1105335, 'flatten_demographic_parity_ratio': '0.0_0.2_0.36_0.57_0.54', 'flatten_balanced_accuracy': '0.59_0.65_0.67_0.58_0.68'}
192
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.5046075245994023), 'balanced_accuracy': np.float64(0.6242857142857143), 'by_group': {'female_div/dep/mar': np.float64(0.74), 'male_div/sep': np.float64(0.5), 'male_mar/wid': np.float64(0.65), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.32616734504699707, 'fit_time': np.float64(0.04481668472290039), 'score_time': np.float64(0.003028726577758789), 'absolute_time': 1746692464.6556382, 'flatten_demographic_parity_ratio': '0.39_0.5_0.66_0.49_0.48', 'flatten_balanced_accuracy': '0.62_0.59_0.66_0.63_0.63'}
193
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.5835457242656569), 'balanced_accuracy': np.float64(0.5338095238095238), 'by_group': {'female_div/dep/mar': np.float64(0.93), 'male_div/sep': np.float64(0.67), 'male_mar/wid': np.float64(0.82), 'male_single': np.float64(0.82)}, 'status': 'success', 'total_time': 0.5050489902496338, 'fit_time': np.float64(0.03945722579956055), 'score_time': np.float64(0.015680742263793946), 'absolute_time': 1746692465.3789864, 'flatten_demographic_parity_ratio': '0.64_0.59_0.77_0.5_0.41', 'flatten_balanced_accuracy': '0.55_0.6_0.46_0.54_0.52'}
194
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 16, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.8429174742805179), 'balanced_accuracy': np.float64(0.6076190476190476), 'by_group': {'female_div/dep/mar': np.float64(0.9), 'male_div/sep': np.float64(0.89), 'male_mar/wid': np.float64(0.94), 'male_single': np.float64(0.94)}, 'status': 'success', 'total_time': 0.22043061256408691, 'fit_time': np.float64(0.004450082778930664), 'score_time': np.float64(0.012142229080200195), 'absolute_time': 1746692465.8232608, 'flatten_demographic_parity_ratio': '0.72_0.82_0.91_0.89_0.88', 'flatten_balanced_accuracy': '0.65_0.6_0.51_0.65_0.63'}
195
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(50), 'solver': np.str_('adam')}, 'features': {'type': np.str_('SelectKBest'), 'k': 1}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.6072986675946132), 'balanced_accuracy': np.float64(0.5788095238095238), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.64), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.74)}, 'status': 'success', 'total_time': 1.214277744293213, 'fit_time': np.float64(0.2051107406616211), 'score_time': np.float64(0.004893445968627929), 'absolute_time': 1746692467.2623303, 'flatten_demographic_parity_ratio': '0.82_0.6_0.9_0.44_0.27', 'flatten_balanced_accuracy': '0.64_0.61_0.56_0.53_0.56'}
196
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 6, 'min_samples_split': 4, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('SelectKBest'), 'k': 2}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.025714285714285717), 'balanced_accuracy': np.float64(0.584047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.94), 'male_div/sep': np.float64(0.03), 'male_mar/wid': np.float64(0.89), 'male_single': np.float64(0.82)}, 'status': 'success', 'total_time': 0.5466327667236328, 'fit_time': np.float64(0.08003072738647461), 'score_time': np.float64(0.005026769638061523), 'absolute_time': 1746692468.0353403, 'flatten_demographic_parity_ratio': '0.0_0.0_0.13_0.0_0.0', 'flatten_balanced_accuracy': '0.61_0.62_0.55_0.59_0.54'}
197
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.6007425722425722), 'balanced_accuracy': np.float64(0.6704761904761904), 'by_group': {'female_div/dep/mar': np.float64(0.85), 'male_div/sep': np.float64(0.63), 'male_mar/wid': np.float64(0.89), 'male_single': np.float64(0.88)}, 'status': 'success', 'total_time': 0.26732325553894043, 'fit_time': np.float64(0.025011825561523437), 'score_time': np.float64(0.005129623413085938), 'absolute_time': 1746692468.5286243, 'flatten_demographic_parity_ratio': '0.41_0.76_0.85_0.54_0.44', 'flatten_balanced_accuracy': '0.65_0.63_0.7_0.66_0.7'}
198
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 1}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.48786091804504395, 'fit_time': np.float64(0.07770442962646484), 'score_time': np.float64(0.0025117874145507814), 'absolute_time': 1746692472.699293, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
199
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.1)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 5.749919652938843, 'fit_time': np.float64(1.1168127536773682), 'score_time': np.float64(0.006472206115722657), 'absolute_time': 1746692478.6762676, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
200
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 4.232325792312622, 'fit_time': np.float64(0.8205818176269531), 'score_time': np.float64(0.006102418899536133), 'absolute_time': 1746692483.1377165, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
201
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9156455687306562), 'balanced_accuracy': np.float64(0.5442857142857143), 'by_group': {'female_div/dep/mar': np.float64(0.94), 'male_div/sep': np.float64(0.95), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.95)}, 'status': 'success', 'total_time': 0.8621294498443604, 'fit_time': np.float64(0.004740619659423828), 'score_time': np.float64(0.07563695907592774), 'absolute_time': 1746692484.228755, 'flatten_demographic_parity_ratio': '0.9_0.9_0.97_0.92_0.89', 'flatten_balanced_accuracy': '0.56_0.58_0.52_0.54_0.52'}
202
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.03166666666666667), 'balanced_accuracy': np.float64(0.5457142857142857), 'by_group': {'female_div/dep/mar': np.float64(0.87), 'male_div/sep': np.float64(0.03), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.82)}, 'status': 'success', 'total_time': 0.4947845935821533, 'fit_time': np.float64(0.05908889770507812), 'score_time': np.float64(0.013309717178344727), 'absolute_time': 1746692484.9537344, 'flatten_demographic_parity_ratio': '0.0_0.0_0.0_0.16_0.0', 'flatten_balanced_accuracy': '0.56_0.54_0.53_0.55_0.55'}
203
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('distance')}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.8226556292116065), 'balanced_accuracy': np.float64(0.6073809523809525), 'by_group': {'female_div/dep/mar': np.float64(0.86), 'male_div/sep': np.float64(0.89), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.93)}, 'status': 'success', 'total_time': 0.37758851051330566, 'fit_time': np.float64(0.004989004135131836), 'score_time': np.float64(0.029848003387451173), 'absolute_time': 1746692485.5628572, 'flatten_demographic_parity_ratio': '0.79_0.79_0.81_0.89_0.83', 'flatten_balanced_accuracy': '0.61_0.63_0.61_0.6_0.59'}
204
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.7435113789567771), 'balanced_accuracy': np.float64(0.545952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.87), 'male_div/sep': np.float64(0.85), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.76)}, 'status': 'success', 'total_time': 5.337978363037109, 'fit_time': np.float64(1.036743450164795), 'score_time': np.float64(0.008213281631469727), 'absolute_time': 1746692491.1391227, 'flatten_demographic_parity_ratio': '0.82_0.6_0.79_0.77_0.74', 'flatten_balanced_accuracy': '0.57_0.54_0.54_0.55_0.52'}
AutoML: optimization done.
AutoML: miner done.
AutoML: export done.
Here is the standard output/error of the command:

Here is the standard output/error of the command:

Here is the standard output/error of the command:

hamlet_1815895017
AutoML execution ended
