Sensitive groups ready!
Theory ready!
Theory:
step(normalization) :- true.
step(features) :- true.
step(mitigation) :- true.
step(rebalancing) :- true.
step(classification) :- true.
operator(normalization, power_transformer) :- true.
operator(normalization, robust_scaler) :- true.
operator(normalization, standard) :- true.
operator(normalization, minmax) :- true.
operator(features, select_k_best) :- true.
operator(features, pca) :- true.
operator(mitigation, corr_remover) :- true.
operator(mitigation, lfr) :- true.
operator(rebalancing, near_miss) :- true.
operator(rebalancing, smote) :- true.
operator(classification, knn) :- true.
operator(classification, nn) :- true.
operator(classification, rf) :- true.
hyperparameter(robust_scaler, with_centering, choice) :- true.
hyperparameter(robust_scaler, with_scaling, choice) :- true.
hyperparameter(standard, with_mean, choice) :- true.
hyperparameter(standard, with_std, choice) :- true.
hyperparameter(select_k_best, k, randint) :- true.
hyperparameter(pca, n_components, randint) :- true.
hyperparameter(corr_remover, alpha, choice) :- true.
hyperparameter(lfr, n_prototypes, choice) :- true.
hyperparameter(lfr, reconstruct_weight, choice) :- true.
hyperparameter(lfr, fairness_weight, choice) :- true.
hyperparameter(near_miss, n_neighbors, randint) :- true.
hyperparameter(smote, k_neighbors, randint) :- true.
hyperparameter(knn, n_neighbors, randint) :- true.
hyperparameter(knn, weights, choice) :- true.
hyperparameter(knn, metric, choice) :- true.
hyperparameter(nn, n_hidden_layers, choice) :- true.
hyperparameter(nn, n_neurons, choice) :- true.
hyperparameter(nn, activation, choice) :- true.
hyperparameter(nn, solver, choice) :- true.
hyperparameter(nn, alpha, choice) :- true.
hyperparameter(nn, learning_rate, choice) :- true.
hyperparameter(rf, n_estimators, choice) :- true.
hyperparameter(rf, max_depth, randint) :- true.
hyperparameter(rf, max_features, randint) :- true.
hyperparameter(rf, min_samples_split, randint) :- true.
hyperparameter(rf, max_leaf_nodes, randint) :- true.
hyperparameter(rf, bootstrap, choice) :- true.
hyperparameter(rf, criterion, choice) :- true.
domain(robust_scaler, with_centering, [true, false]) :- true.
domain(robust_scaler, with_scaling, [true, false]) :- true.
domain(standard, with_mean, [true, false]) :- true.
domain(standard, with_std, [true, false]) :- true.
domain(select_k_best, k, [1, 10]) :- true.
domain(pca, n_components, [1, 8]) :- true.
domain(corr_remover, alpha, [0.25, 0.5, 0.75, 1.0]) :- true.
domain(lfr, n_prototypes, [10, 50, 100, 200]) :- true.
domain(lfr, reconstruct_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(lfr, fairness_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(near_miss, n_neighbors, [1, 4]) :- true.
domain(smote, k_neighbors, [5, 8]) :- true.
domain(knn, n_neighbors, [3, 20]) :- true.
domain(knn, weights, [uniform, distance]) :- true.
domain(knn, metric, [minkowski, euclidean, manhattan]) :- true.
domain(nn, n_hidden_layers, [1, 5, 10, 20]) :- true.
domain(nn, n_neurons, [5, 10, 25, 50]) :- true.
domain(nn, activation, [logistic, tanh, relu]) :- true.
domain(nn, solver, [lbfgs, sgd, adam]) :- true.
domain(nn, alpha, [0.0001, 0.001, 0.01, 0.00001]) :- true.
domain(nn, learning_rate, [constant, invscaling, adaptive]) :- true.
domain(rf, n_estimators, [10, 25, 50, 75, 100]) :- true.
domain(rf, max_depth, [1, 5]) :- true.
domain(rf, max_features, [1, 4]) :- true.
domain(rf, min_samples_split, [2, 6]) :- true.
domain(rf, max_leaf_nodes, [2, 6]) :- true.
domain(rf, bootstrap, [true, false]) :- true.
domain(rf, criterion, [gini, entropy]) :- true.
dataset('credit-g') :- true.
metric(balanced_accuracy) :- true.
fairness_metric(demographic_parity_ratio) :- true.
sensitive_feature(personal_status, [single, 'div/dep/mar', 'mar/wid']) :- true.
sensitive_feature(sex, [male, female]) :- true.
':=>'(mc0, unbalanced_dataset) :- true.
':=>'(cc8825203134102224935, mandatory([rebalancing], knn)) :- true.
':=>'(cc7872058418108943959, mandatory([features, normalization], knn)) :- true.
':=>'(cc851903295553634046, mandatory([mitigation, normalization], knn)) :- true.
':=>'(cc610802081933718530, mandatory([normalization, features], nn)) :- true.
':=>'(cc6245097273306630383, mandatory([normalization, mitigation], nn)) :- true.
':=>'(cc7798730209209439878, mandatory([normalization, rebalancing], nn)) :- true.
':=>'(cc1361649492150022569, mandatory([features], rf)) :- true.
':=>'(cc2612024093039360408, mandatory([normalization, mitigation], rf)) :- true.
pipeline([Step_1_0], ZZ_0) :- (step(Step_1_0), '\\='(Step_1_0, classification), operator(classification, ZZ_0)).
pipeline([Step_1_1, Step_2_0], ZZ_1) :- (step(Step_1_1), step(Step_2_0), '\\='(Step_1_1, classification), '\\='(Step_2_0, classification), '\\='(Step_1_1, Step_2_0), operator(classification, ZZ_1)).
pipeline([Step_1_2, Step_2_1, Step_3_0], ZZ_2) :- (step(Step_1_2), step(Step_2_1), step(Step_3_0), '\\='(Step_1_2, classification), '\\='(Step_2_1, classification), '\\='(Step_3_0, classification), '\\='(Step_1_2, Step_2_1), '\\='(Step_1_2, Step_3_0), '\\='(Step_2_1, Step_3_0), operator(classification, ZZ_2)).
pipeline([Step_1_3, Step_2_2, Step_3_1, Step_4_0], ZZ_3) :- (step(Step_1_3), step(Step_2_2), step(Step_3_1), step(Step_4_0), '\\='(Step_1_3, classification), '\\='(Step_2_2, classification), '\\='(Step_3_1, classification), '\\='(Step_4_0, classification), '\\='(Step_1_3, Step_2_2), '\\='(Step_1_3, Step_3_1), '\\='(Step_1_3, Step_4_0), '\\='(Step_2_2, Step_3_1), '\\='(Step_2_2, Step_4_0), '\\='(Step_3_1, Step_4_0), operator(classification, ZZ_3)).
':=>'(p570570, sensitive_group([single])) :- true.
':=>'(p208361, sensitive_group(['div/dep/mar'])) :- true.
':=>'(p874172, sensitive_group(['mar/wid'])) :- true.
':=>'(p94276, sensitive_group([male])) :- true.
':=>'(p364477, sensitive_group([female])) :- true.
':=>'(p829944, sensitive_group([single, male])) :- true.
':=>'(p825907, sensitive_group([single, female])) :- true.
':=>'(p327176, sensitive_group(['div/dep/mar', male])) :- true.
':=>'(p476805, sensitive_group(['div/dep/mar', female])) :- true.
':=>'(p742940, sensitive_group(['mar/wid', male])) :- true.
':=>'(p184853, sensitive_group(['mar/wid', female])) :- true.
':=>'(p399877, pipeline([], knn)) :- true.
':=>'(p900736, pipeline([], knn)) :- true.
':=>'(p134483, pipeline([], knn)) :- true.
':=>'(p639194, pipeline([], nn)) :- true.
':=>'(p367738, pipeline([], nn)) :- true.
':=>'(p125738, pipeline([], nn)) :- true.
':=>'(p280765, pipeline([], rf)) :- true.
':=>'(p809702, pipeline([], rf)) :- true.
':=>'(p594746, pipeline([normalization], knn)) :- true.
':=>'(p474000, pipeline([normalization], knn)) :- true.
':=>'(p953458, pipeline([normalization], knn)) :- true.
':=>'(p642796, pipeline([normalization], nn)) :- true.
':=>'(p23673, pipeline([normalization], nn)) :- true.
':=>'(p458051, pipeline([normalization], nn)) :- true.
':=>'(p982253, pipeline([normalization], rf)) :- true.
':=>'(p931224, pipeline([normalization], rf)) :- true.
':=>'(p224847, pipeline([features], knn)) :- true.
':=>'(p523431, pipeline([features], knn)) :- true.
':=>'(p236616, pipeline([features], knn)) :- true.
':=>'(p693763, pipeline([features], nn)) :- true.
':=>'(p840152, pipeline([features], nn)) :- true.
':=>'(p883327, pipeline([features], nn)) :- true.
':=>'(p856605, pipeline([features], rf)) :- true.
':=>'(p415183, pipeline([mitigation], knn)) :- true.
':=>'(p285170, pipeline([mitigation], knn)) :- true.
':=>'(p793909, pipeline([mitigation], knn)) :- true.
':=>'(p526840, pipeline([mitigation], nn)) :- true.
':=>'(p656032, pipeline([mitigation], nn)) :- true.
':=>'(p603358, pipeline([mitigation], nn)) :- true.
':=>'(p578058, pipeline([mitigation], rf)) :- true.
':=>'(p294160, pipeline([mitigation], rf)) :- true.
':=>'(p413560, pipeline([rebalancing], knn)) :- true.
':=>'(p940318, pipeline([rebalancing], knn)) :- true.
':=>'(p398397, pipeline([rebalancing], nn)) :- true.
':=>'(p765138, pipeline([rebalancing], nn)) :- true.
':=>'(p13586, pipeline([rebalancing], nn)) :- true.
':=>'(p416155, pipeline([rebalancing], rf)) :- true.
':=>'(p975446, pipeline([rebalancing], rf)) :- true.
':=>'(p415642, pipeline([normalization, features], knn)) :- true.
':=>'(p709114, pipeline([normalization, features], knn)) :- true.
':=>'(p277771, pipeline([normalization, features], nn)) :- true.
':=>'(p181666, pipeline([normalization, features], nn)) :- true.
':=>'(p795711, pipeline([normalization, features], rf)) :- true.
':=>'(p731950, pipeline([normalization, mitigation], knn)) :- true.
':=>'(p13313, pipeline([normalization, mitigation], knn)) :- true.
':=>'(p678443, pipeline([normalization, mitigation], nn)) :- true.
':=>'(p652287, pipeline([normalization, mitigation], nn)) :- true.
':=>'(p472781, pipeline([normalization, mitigation], rf)) :- true.
':=>'(p351130, pipeline([normalization, rebalancing], knn)) :- true.
':=>'(p227275, pipeline([normalization, rebalancing], knn)) :- true.
':=>'(p234070, pipeline([normalization, rebalancing], nn)) :- true.
':=>'(p896200, pipeline([normalization, rebalancing], nn)) :- true.
':=>'(p838560, pipeline([normalization, rebalancing], rf)) :- true.
':=>'(p487239, pipeline([normalization, rebalancing], rf)) :- true.
':=>'(p377621, pipeline([features, normalization], knn)) :- true.
':=>'(p573701, pipeline([features, normalization], knn)) :- true.
':=>'(p297796, pipeline([features, normalization], nn)) :- true.
':=>'(p300237, pipeline([features, normalization], nn)) :- true.
':=>'(p789290, pipeline([features, normalization], rf)) :- true.
':=>'(p288401, pipeline([features, mitigation], knn)) :- true.
':=>'(p443720, pipeline([features, mitigation], knn)) :- true.
':=>'(p306176, pipeline([features, mitigation], knn)) :- true.
':=>'(p392027, pipeline([features, mitigation], nn)) :- true.
':=>'(p578910, pipeline([features, mitigation], nn)) :- true.
':=>'(p543237, pipeline([features, mitigation], nn)) :- true.
':=>'(p160066, pipeline([features, mitigation], rf)) :- true.
':=>'(p419249, pipeline([features, rebalancing], knn)) :- true.
':=>'(p844037, pipeline([features, rebalancing], knn)) :- true.
':=>'(p938956, pipeline([features, rebalancing], nn)) :- true.
':=>'(p40034, pipeline([features, rebalancing], nn)) :- true.
':=>'(p922742, pipeline([features, rebalancing], nn)) :- true.
':=>'(p179776, pipeline([features, rebalancing], rf)) :- true.
':=>'(p102857, pipeline([mitigation, normalization], knn)) :- true.
':=>'(p204437, pipeline([mitigation, normalization], knn)) :- true.
':=>'(p774130, pipeline([mitigation, normalization], nn)) :- true.
':=>'(p892502, pipeline([mitigation, normalization], nn)) :- true.
':=>'(p529592, pipeline([mitigation, normalization], rf)) :- true.
':=>'(p878515, pipeline([mitigation, features], knn)) :- true.
':=>'(p957172, pipeline([mitigation, features], knn)) :- true.
':=>'(p623148, pipeline([mitigation, features], knn)) :- true.
':=>'(p427719, pipeline([mitigation, features], nn)) :- true.
':=>'(p819054, pipeline([mitigation, features], nn)) :- true.
':=>'(p825992, pipeline([mitigation, features], nn)) :- true.
':=>'(p710745, pipeline([mitigation, features], rf)) :- true.
':=>'(p728403, pipeline([mitigation, rebalancing], knn)) :- true.
':=>'(p989958, pipeline([mitigation, rebalancing], knn)) :- true.
':=>'(p671739, pipeline([mitigation, rebalancing], nn)) :- true.
':=>'(p928194, pipeline([mitigation, rebalancing], nn)) :- true.
':=>'(p651998, pipeline([mitigation, rebalancing], nn)) :- true.
':=>'(p882084, pipeline([mitigation, rebalancing], rf)) :- true.
':=>'(p309557, pipeline([mitigation, rebalancing], rf)) :- true.
':=>'(p836437, pipeline([rebalancing, normalization], knn)) :- true.
':=>'(p384667, pipeline([rebalancing, normalization], knn)) :- true.
':=>'(p535462, pipeline([rebalancing, normalization], nn)) :- true.
':=>'(p965558, pipeline([rebalancing, normalization], nn)) :- true.
':=>'(p224686, pipeline([rebalancing, normalization], rf)) :- true.
':=>'(p613911, pipeline([rebalancing, normalization], rf)) :- true.
':=>'(p478472, pipeline([rebalancing, features], knn)) :- true.
':=>'(p65574, pipeline([rebalancing, features], knn)) :- true.
':=>'(p780560, pipeline([rebalancing, features], nn)) :- true.
':=>'(p866471, pipeline([rebalancing, features], nn)) :- true.
':=>'(p408884, pipeline([rebalancing, features], nn)) :- true.
':=>'(p905191, pipeline([rebalancing, features], rf)) :- true.
':=>'(p190890, pipeline([rebalancing, mitigation], knn)) :- true.
':=>'(p924556, pipeline([rebalancing, mitigation], knn)) :- true.
':=>'(p207822, pipeline([rebalancing, mitigation], nn)) :- true.
':=>'(p858476, pipeline([rebalancing, mitigation], nn)) :- true.
':=>'(p576861, pipeline([rebalancing, mitigation], nn)) :- true.
':=>'(p596029, pipeline([rebalancing, mitigation], rf)) :- true.
':=>'(p60211, pipeline([rebalancing, mitigation], rf)) :- true.
':=>'(p634898, pipeline([normalization, features, mitigation], knn)) :- true.
':=>'(p354081, pipeline([normalization, features, mitigation], nn)) :- true.
':=>'(p399495, pipeline([normalization, features, rebalancing], knn)) :- true.
':=>'(p384489, pipeline([normalization, features, rebalancing], nn)) :- true.
':=>'(p516532, pipeline([normalization, features, rebalancing], rf)) :- true.
':=>'(p548059, pipeline([normalization, mitigation, features], knn)) :- true.
':=>'(p731436, pipeline([normalization, mitigation, features], nn)) :- true.
':=>'(p631438, pipeline([normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p344397, pipeline([normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p585832, pipeline([normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p660306, pipeline([normalization, rebalancing, features], knn)) :- true.
':=>'(p623680, pipeline([normalization, rebalancing, features], nn)) :- true.
':=>'(p970813, pipeline([normalization, rebalancing, features], rf)) :- true.
':=>'(p452116, pipeline([normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p382700, pipeline([normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p239450, pipeline([normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p186699, pipeline([features, normalization, mitigation], knn)) :- true.
':=>'(p844094, pipeline([features, normalization, mitigation], nn)) :- true.
':=>'(p827148, pipeline([features, normalization, rebalancing], knn)) :- true.
':=>'(p383278, pipeline([features, normalization, rebalancing], nn)) :- true.
':=>'(p142699, pipeline([features, normalization, rebalancing], rf)) :- true.
':=>'(p51501, pipeline([features, mitigation, normalization], knn)) :- true.
':=>'(p681820, pipeline([features, mitigation, normalization], nn)) :- true.
':=>'(p419962, pipeline([features, mitigation, rebalancing], knn)) :- true.
':=>'(p638570, pipeline([features, mitigation, rebalancing], knn)) :- true.
':=>'(p895678, pipeline([features, mitigation, rebalancing], nn)) :- true.
':=>'(p226950, pipeline([features, mitigation, rebalancing], nn)) :- true.
':=>'(p688504, pipeline([features, mitigation, rebalancing], nn)) :- true.
':=>'(p759077, pipeline([features, mitigation, rebalancing], rf)) :- true.
':=>'(p689792, pipeline([features, rebalancing, normalization], knn)) :- true.
':=>'(p501525, pipeline([features, rebalancing, normalization], nn)) :- true.
':=>'(p615888, pipeline([features, rebalancing, normalization], rf)) :- true.
':=>'(p837122, pipeline([features, rebalancing, mitigation], knn)) :- true.
':=>'(p163675, pipeline([features, rebalancing, mitigation], knn)) :- true.
':=>'(p683195, pipeline([features, rebalancing, mitigation], nn)) :- true.
':=>'(p516812, pipeline([features, rebalancing, mitigation], nn)) :- true.
':=>'(p864685, pipeline([features, rebalancing, mitigation], nn)) :- true.
':=>'(p766278, pipeline([features, rebalancing, mitigation], rf)) :- true.
':=>'(p153212, pipeline([mitigation, normalization, features], knn)) :- true.
':=>'(p485350, pipeline([mitigation, normalization, features], nn)) :- true.
':=>'(p581872, pipeline([mitigation, normalization, rebalancing], knn)) :- true.
':=>'(p895600, pipeline([mitigation, normalization, rebalancing], nn)) :- true.
':=>'(p841307, pipeline([mitigation, normalization, rebalancing], rf)) :- true.
':=>'(p147584, pipeline([mitigation, features, normalization], knn)) :- true.
':=>'(p369475, pipeline([mitigation, features, normalization], nn)) :- true.
':=>'(p736630, pipeline([mitigation, features, rebalancing], knn)) :- true.
':=>'(p956768, pipeline([mitigation, features, rebalancing], knn)) :- true.
':=>'(p902422, pipeline([mitigation, features, rebalancing], nn)) :- true.
':=>'(p641475, pipeline([mitigation, features, rebalancing], nn)) :- true.
':=>'(p778455, pipeline([mitigation, features, rebalancing], nn)) :- true.
':=>'(p503723, pipeline([mitigation, features, rebalancing], rf)) :- true.
':=>'(p594259, pipeline([mitigation, rebalancing, normalization], knn)) :- true.
':=>'(p459538, pipeline([mitigation, rebalancing, normalization], nn)) :- true.
':=>'(p486, pipeline([mitigation, rebalancing, normalization], rf)) :- true.
':=>'(p995493, pipeline([mitigation, rebalancing, features], knn)) :- true.
':=>'(p982258, pipeline([mitigation, rebalancing, features], knn)) :- true.
':=>'(p908285, pipeline([mitigation, rebalancing, features], nn)) :- true.
':=>'(p973105, pipeline([mitigation, rebalancing, features], nn)) :- true.
':=>'(p115845, pipeline([mitigation, rebalancing, features], nn)) :- true.
':=>'(p774392, pipeline([mitigation, rebalancing, features], rf)) :- true.
':=>'(p763312, pipeline([rebalancing, normalization, features], knn)) :- true.
':=>'(p399003, pipeline([rebalancing, normalization, features], nn)) :- true.
':=>'(p980050, pipeline([rebalancing, normalization, features], rf)) :- true.
':=>'(p613290, pipeline([rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p322910, pipeline([rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p467585, pipeline([rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p819026, pipeline([rebalancing, features, normalization], knn)) :- true.
':=>'(p234953, pipeline([rebalancing, features, normalization], nn)) :- true.
':=>'(p133677, pipeline([rebalancing, features, normalization], rf)) :- true.
':=>'(p722885, pipeline([rebalancing, features, mitigation], knn)) :- true.
':=>'(p827654, pipeline([rebalancing, features, mitigation], knn)) :- true.
':=>'(p837531, pipeline([rebalancing, features, mitigation], nn)) :- true.
':=>'(p650378, pipeline([rebalancing, features, mitigation], nn)) :- true.
':=>'(p310648, pipeline([rebalancing, features, mitigation], nn)) :- true.
':=>'(p17540, pipeline([rebalancing, features, mitigation], rf)) :- true.
':=>'(p28160, pipeline([rebalancing, mitigation, normalization], knn)) :- true.
':=>'(p387951, pipeline([rebalancing, mitigation, normalization], nn)) :- true.
':=>'(p835982, pipeline([rebalancing, mitigation, normalization], rf)) :- true.
':=>'(p628735, pipeline([rebalancing, mitigation, features], knn)) :- true.
':=>'(p457418, pipeline([rebalancing, mitigation, features], knn)) :- true.
':=>'(p69364, pipeline([rebalancing, mitigation, features], nn)) :- true.
':=>'(p145543, pipeline([rebalancing, mitigation, features], nn)) :- true.
':=>'(p183904, pipeline([rebalancing, mitigation, features], nn)) :- true.
':=>'(p772211, pipeline([rebalancing, mitigation, features], rf)) :- true.

Checking Config
Exporting Config
Saving Graph
Exporting AutoML input
Exporting Space
Exporting Constraints
Input created for iteration Config(iteration=3, dataset=credit-g, metric=balanced_accuracy, fairnessMetric=demographic_parity_ratio, sensitiveFeatures=[personal_status, sex], mode=max, batchSize=999999, timeBudget=900, seed=42)
Here is the standard output/error of the command:

d95a0fff6806b711d3d6bbed978531c33cb832a579cf12248dbd16c9de05202c
Here is the standard output/error of the command:

Here is the standard output/error of the command:

WARNING:root:No module named 'rpy2': FairAdapt will be unavailable. To install, run:
pip install 'aif360[FairAdapt]'
INFO:flaml.tune.searcher.blendsearch:No low-cost partial config given to the search algorithm. For cost-frugal search, consider providing low-cost values for cost-related hps via 'low_cost_partial_config'. More info can be found at https://microsoft.github.io/FLAML/docs/FAQ#about-low_cost_partial_config-in-tune
Trying to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Added successfully: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Trying to add: (Forbidden: features == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Added successfully: (Forbidden: features == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Trying to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: rebalancing == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Added successfully: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: rebalancing == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Trying to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Added successfully: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Trying to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: features == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Added successfully: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: features == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer' && Forbidden: normalization == 'FunctionTransformer')
Trying to add: (Forbidden: features == 'FunctionTransformer' && Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: features == 'FunctionTransformer' && Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: features == 'FunctionTransformer' && Forbidden: normalization == 'FunctionTransformer')
Trying to add: (Forbidden: rebalancing == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: rebalancing == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: features == 'FunctionTransformer' && Forbidden: normalization == 'FunctionTransformer')
AutoML: starting optimization.
275
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 8, 'weights': np.str_('uniform')}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.36212265932065707), 'balanced_accuracy': np.float64(0.6433333333333333), 'by_group': {'female_div/dep/mar': np.float64(0.66), 'male_div/sep': np.float64(0.39), 'male_mar/wid': np.float64(0.8), 'male_single': np.float64(0.97)}, 'status': 'success', 'total_time': 1.1524837017059326, 'fit_time': np.float64(0.05294699668884277), 'score_time': np.float64(0.07694921493530274), 'absolute_time': 1746693615.4707325, 'flatten_demographic_parity_ratio': '0.0_0.18_0.62_0.67_0.34', 'flatten_balanced_accuracy': '0.64_0.6_0.68_0.59_0.7'}
276
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.7611746718060093), 'balanced_accuracy': np.float64(0.5488095238095237), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.86), 'male_mar/wid': np.float64(0.88), 'male_single': np.float64(0.82)}, 'status': 'success', 'total_time': 7.17336106300354, 'fit_time': np.float64(0.9757841110229493), 'score_time': np.float64(0.006652927398681641), 'absolute_time': 1746693622.9687793, 'flatten_demographic_parity_ratio': '0.79_0.77_0.72_0.79_0.74', 'flatten_balanced_accuracy': '0.6_0.53_0.53_0.54_0.54'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

277
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_features_normalization_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0005137920379638672, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693623.2908182}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 609, in objective
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_param_validation.py", line 216, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 431, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 517, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 5 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
5 fits failed with the following error:
Traceback (most recent call last):
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 866, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "/usr/local/lib/python3.12/site-packages/sklearn/base.py", line 1389, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 518, in fit
    Xt, yt = self._fit(X, y, routed_params, raw_params=params)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 430, in _fit
    X, fitted_transformer = fit_transform_one_cached(
                            ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/joblib/memory.py", line 312, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 1383, in _fit_transform_one
    res = transformer.fit_transform(X, y, **params.get("fit_transform", {}))
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_set_output.py", line 319, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 76, in fit_transform
    df_X, df_y = self._prepare_dataset(X, y, fit=True)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 37, in _prepare_dataset
    raise Exception("No sensitive features to mitigate")
Exception: No sensitive features to mitigate


278
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(50), 'solver': np.str_('adam')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.10969042778015137, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693623.7203665}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

279
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0003075599670410156, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693624.043733}
280
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(50), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 9}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.6404742261854901), 'balanced_accuracy': np.float64(0.6021428571428572), 'by_group': {'female_div/dep/mar': np.float64(0.84), 'male_div/sep': np.float64(0.67), 'male_mar/wid': np.float64(0.93), 'male_single': np.float64(0.89)}, 'status': 'success', 'total_time': 1.611316204071045, 'fit_time': np.float64(0.28005332946777345), 'score_time': np.float64(0.005874443054199219), 'absolute_time': 1746693625.9803736, 'flatten_demographic_parity_ratio': '0.84_0.64_0.69_0.86_0.17', 'flatten_balanced_accuracy': '0.63_0.57_0.53_0.59_0.69'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 622, in objective
    fair_scores, fair_scores_by_group = _compute_fair_metric(
                                        ^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 381, in _compute_fair_metric
    y_pred = np.array(scores["estimator"][fold].predict(x_original))
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 659, in predict
    return self.steps[-1][1].predict(Xt, **params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/neighbors/_classification.py", line 262, in predict
    probabilities = self.predict_proba(X)
                    ^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/neighbors/_classification.py", line 348, in predict_proba
    probabilities = ArgKminClassMode.compute(
                    ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/metrics/_pairwise_distances_reduction/_dispatcher.py", line 587, in compute
    return ArgKminClassMode64.compute(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Argument 'metric' has incorrect type (expected str, got numpy.str_)

281
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 5, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.22121810913085938, 'fit_time': np.float64(0.036760139465332034), 'score_time': np.float64(0.005112123489379883), 'absolute_time': 1746693626.5290296}
282
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9672226855713095), 'balanced_accuracy': np.float64(0.5102380952380952), 'by_group': {'female_div/dep/mar': np.float64(0.99), 'male_div/sep': np.float64(0.98), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.97)}, 'status': 'success', 'total_time': 8.421583890914917, 'fit_time': np.float64(1.65669846534729), 'score_time': np.float64(0.006042671203613281), 'absolute_time': 1746693635.2774339, 'flatten_demographic_parity_ratio': '0.96_1.0_0.97_0.9_1.0', 'flatten_balanced_accuracy': '0.54_0.5_0.5_0.51_0.5'}
283
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 4, 'min_samples_split': 6, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.7011380417345834), 'balanced_accuracy': np.float64(0.6697619047619048), 'by_group': {'female_div/dep/mar': np.float64(0.87), 'male_div/sep': np.float64(0.76), 'male_mar/wid': np.float64(0.84), 'male_single': np.float64(0.95)}, 'status': 'success', 'total_time': 0.9458885192871094, 'fit_time': np.float64(0.15108151435852052), 'score_time': np.float64(0.011205005645751952), 'absolute_time': 1746693641.5728555, 'flatten_demographic_parity_ratio': '0.68_0.58_0.76_0.9_0.58', 'flatten_balanced_accuracy': '0.63_0.66_0.72_0.63_0.71'}
284
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.6581081187728125), 'balanced_accuracy': np.float64(0.5307142857142857), 'by_group': {'female_div/dep/mar': np.float64(0.81), 'male_div/sep': np.float64(0.73), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.68)}, 'status': 'success', 'total_time': 23.66171956062317, 'fit_time': np.float64(1.7958945751190185), 'score_time': np.float64(0.006804227828979492), 'absolute_time': 1746693665.6178527, 'flatten_demographic_parity_ratio': '0.84_0.48_0.71_0.52_0.74', 'flatten_balanced_accuracy': '0.56_0.55_0.53_0.49_0.51'}
285
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 4, 'max_leaf_nodes': 3, 'min_samples_split': 6, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 4}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.4600109217999126), 'balanced_accuracy': np.float64(0.6442857142857144), 'by_group': {'female_div/dep/mar': np.float64(0.85), 'male_div/sep': np.float64(0.55), 'male_mar/wid': np.float64(0.92), 'male_single': np.float64(0.76)}, 'status': 'success', 'total_time': 0.5392608642578125, 'fit_time': np.float64(0.06990737915039062), 'score_time': np.float64(0.005336380004882813), 'absolute_time': 1746693666.4909067, 'flatten_demographic_parity_ratio': '0.26_0.26_0.79_0.78_0.21', 'flatten_balanced_accuracy': '0.69_0.62_0.7_0.58_0.62'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

286
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0004589557647705078, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693666.822671}
287
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.5496214491216073), 'balanced_accuracy': np.float64(0.6028571428571429), 'by_group': {'female_div/dep/mar': np.float64(0.9), 'male_div/sep': np.float64(0.7), 'male_mar/wid': np.float64(0.81), 'male_single': np.float64(0.85)}, 'status': 'success', 'total_time': 0.47924351692199707, 'fit_time': np.float64(0.053282880783081056), 'score_time': np.float64(0.015436410903930664), 'absolute_time': 1746693667.6392267, 'flatten_demographic_parity_ratio': '0.48_0.65_0.6_0.68_0.35', 'flatten_balanced_accuracy': '0.6_0.62_0.65_0.53_0.62'}
288
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 11, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.2791149391149391), 'balanced_accuracy': np.float64(0.5335714285714286), 'by_group': {'female_div/dep/mar': np.float64(0.82), 'male_div/sep': np.float64(0.28), 'male_mar/wid': np.float64(0.94), 'male_single': np.float64(0.71)}, 'status': 'success', 'total_time': 0.44446539878845215, 'fit_time': np.float64(0.05701775550842285), 'score_time': np.float64(0.00525059700012207), 'absolute_time': 1746693668.4250548, 'flatten_demographic_parity_ratio': '0.0_0.4_0.51_0.15_0.34', 'flatten_balanced_accuracy': '0.61_0.55_0.55_0.5_0.47'}
The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 12, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 9}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 12, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 9}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')} was NaN

289
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 12, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 9}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5035714285714286), 'by_group': {'female_div/dep/mar': np.float64(0.46), 'male_div/sep': np.float64(0.0), 'male_mar/wid': np.float64(0.5), 'male_single': np.float64(0.5)}, 'status': 'fail', 'total_time': 5.788994550704956, 'fit_time': np.float64(1.1286342144012451), 'score_time': np.float64(0.006087255477905273), 'absolute_time': 1746693674.5573196, 'flatten_demographic_parity_ratio': 'nan_nan_0.0_nan_0.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.51'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

290
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0006227493286132812, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693674.9004025}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

291
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0005962848663330078, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693680.148602}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

292
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 6, 'min_samples_split': 4, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0003714561462402344, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693680.4861393}
293
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 18, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.40984615384615386), 'balanced_accuracy': np.float64(0.635), 'by_group': {'female_div/dep/mar': np.float64(0.67), 'male_div/sep': np.float64(0.41), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.82)}, 'status': 'success', 'total_time': 0.6600286960601807, 'fit_time': np.float64(0.08289275169372559), 'score_time': np.float64(0.01970677375793457), 'absolute_time': 1746693681.4875515, 'flatten_demographic_parity_ratio': '0.4_0.42_0.42_0.44_0.38', 'flatten_balanced_accuracy': '0.68_0.64_0.65_0.62_0.6'}
294
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.595416282642089), 'balanced_accuracy': np.float64(0.6754761904761905), 'by_group': {'female_div/dep/mar': np.float64(0.77), 'male_div/sep': np.float64(0.7), 'male_mar/wid': np.float64(0.85), 'male_single': np.float64(0.93)}, 'status': 'success', 'total_time': 0.6636655330657959, 'fit_time': np.float64(0.10921692848205566), 'score_time': np.float64(0.0039694786071777345), 'absolute_time': 1746693682.4976404, 'flatten_demographic_parity_ratio': '0.69_0.58_0.48_0.48_0.75', 'flatten_balanced_accuracy': '0.65_0.69_0.68_0.65_0.7'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

295
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 14, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0003914833068847656, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693682.8528738}
296
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.6561691232374345), 'balanced_accuracy': np.float64(0.6016666666666668), 'by_group': {'female_div/dep/mar': np.float64(0.81), 'male_div/sep': np.float64(0.7), 'male_mar/wid': np.float64(0.92), 'male_single': np.float64(0.86)}, 'status': 'success', 'total_time': 0.5946488380432129, 'fit_time': np.float64(0.0946190357208252), 'score_time': np.float64(0.004642868041992187), 'absolute_time': 1746693683.7938867, 'flatten_demographic_parity_ratio': '0.55_0.72_0.7_0.59_0.72', 'flatten_balanced_accuracy': '0.64_0.6_0.59_0.57_0.61'}
297
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 3, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 9}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.5931414936276737), 'balanced_accuracy': np.float64(0.6197619047619047), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.6), 'male_mar/wid': np.float64(0.84), 'male_single': np.float64(0.98)}, 'status': 'success', 'total_time': 0.40926599502563477, 'fit_time': np.float64(0.03969221115112305), 'score_time': np.float64(0.009219837188720704), 'absolute_time': 1746693684.5580597, 'flatten_demographic_parity_ratio': '0.3_0.6_0.55_0.82_0.69', 'flatten_balanced_accuracy': '0.61_0.61_0.61_0.67_0.59'}
298
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.5205239067192811), 'balanced_accuracy': np.float64(0.6464285714285714), 'by_group': {'female_div/dep/mar': np.float64(0.62), 'male_div/sep': np.float64(0.64), 'male_mar/wid': np.float64(0.9), 'male_single': np.float64(0.97)}, 'status': 'success', 'total_time': 0.5353837013244629, 'fit_time': np.float64(0.03847150802612305), 'score_time': np.float64(0.02344088554382324), 'absolute_time': 1746693685.4428604, 'flatten_demographic_parity_ratio': '0.85_0.36_0.42_0.41_0.57', 'flatten_balanced_accuracy': '0.61_0.64_0.69_0.63_0.66'}
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(25), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(25), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')} was NaN

299
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(25), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.520952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.9), 'male_div/sep': np.float64(0.74), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.8)}, 'status': 'fail', 'total_time': 10.572659254074097, 'fit_time': np.float64(1.1411349296569824), 'score_time': np.float64(0.006741857528686524), 'absolute_time': 1746693701.299564, 'flatten_demographic_parity_ratio': 'nan_0.7_0.77_0.72_nan', 'flatten_balanced_accuracy': '0.5_0.6_0.49_0.52_0.5'}
300
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.6647851325084336), 'balanced_accuracy': np.float64(0.6088095238095238), 'by_group': {'female_div/dep/mar': np.float64(0.81), 'male_div/sep': np.float64(0.79), 'male_mar/wid': np.float64(0.88), 'male_single': np.float64(0.86)}, 'status': 'success', 'total_time': 8.751304149627686, 'fit_time': np.float64(0.6650701522827148), 'score_time': np.float64(0.007803821563720703), 'absolute_time': 1746693710.399082, 'flatten_demographic_parity_ratio': '0.6_0.45_0.74_0.7_0.83', 'flatten_balanced_accuracy': '0.63_0.57_0.59_0.65_0.59'}
301
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 13, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.5956035096402068), 'balanced_accuracy': np.float64(0.5040476190476191), 'by_group': {'female_div/dep/mar': np.float64(0.76), 'male_div/sep': np.float64(0.68), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.78)}, 'status': 'success', 'total_time': 0.15833616256713867, 'fit_time': np.float64(0.006919145584106445), 'score_time': np.float64(0.005303716659545899), 'absolute_time': 1746693710.9078307, 'flatten_demographic_parity_ratio': '0.66_0.82_0.62_0.21_0.66', 'flatten_balanced_accuracy': '0.55_0.53_0.51_0.47_0.47'}
302
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.568597720322491), 'balanced_accuracy': np.float64(0.5230952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.79), 'male_div/sep': np.float64(0.64), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.64)}, 'status': 'success', 'total_time': 0.24470138549804688, 'fit_time': np.float64(0.008563947677612305), 'score_time': np.float64(0.01268463134765625), 'absolute_time': 1746693711.5044928, 'flatten_demographic_parity_ratio': '0.54_0.49_0.75_0.74_0.32', 'flatten_balanced_accuracy': '0.56_0.52_0.52_0.49_0.52'}
303
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.5811746031746032), 'balanced_accuracy': np.float64(0.6561904761904762), 'by_group': {'female_div/dep/mar': np.float64(0.88), 'male_div/sep': np.float64(0.58), 'male_mar/wid': np.float64(0.91), 'male_single': np.float64(0.83)}, 'status': 'success', 'total_time': 1.9350075721740723, 'fit_time': np.float64(0.36480154991149905), 'score_time': np.float64(0.0035142898559570312), 'absolute_time': 1746693713.7977147, 'flatten_demographic_parity_ratio': '0.52_0.68_0.88_0.32_0.51', 'flatten_balanced_accuracy': '0.65_0.72_0.65_0.64_0.62'}
304
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(50), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.6000330110538838), 'balanced_accuracy': np.float64(0.5216666666666667), 'by_group': {'female_div/dep/mar': np.float64(0.73), 'male_div/sep': np.float64(0.69), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.71)}, 'status': 'success', 'total_time': 5.9185450077056885, 'fit_time': np.float64(1.1477458477020264), 'score_time': np.float64(0.008341598510742187), 'absolute_time': 1746693720.0794652, 'flatten_demographic_parity_ratio': '0.84_0.6_0.62_0.56_0.38', 'flatten_balanced_accuracy': '0.56_0.55_0.5_0.45_0.53'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

305
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0004987716674804688, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693720.4864404}
306
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(10), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.6216223089648004), 'balanced_accuracy': np.float64(0.5504761904761905), 'by_group': {'female_div/dep/mar': np.float64(0.78), 'male_div/sep': np.float64(0.73), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.78)}, 'status': 'success', 'total_time': 4.322523832321167, 'fit_time': np.float64(0.8346404552459716), 'score_time': np.float64(0.008539342880249023), 'absolute_time': 1746693725.2201838, 'flatten_demographic_parity_ratio': '1.0_0.59_0.68_0.0_0.84', 'flatten_balanced_accuracy': '0.5_0.54_0.58_0.53_0.61'}
307
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_split': 3, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.6312730206486101), 'balanced_accuracy': np.float64(0.6492857142857142), 'by_group': {'female_div/dep/mar': np.float64(0.76), 'male_div/sep': np.float64(0.68), 'male_mar/wid': np.float64(0.86), 'male_single': np.float64(0.99)}, 'status': 'success', 'total_time': 0.33348655700683594, 'fit_time': np.float64(0.04048566818237305), 'score_time': np.float64(0.005922842025756836), 'absolute_time': 1746693726.046196, 'flatten_demographic_parity_ratio': '0.29_0.79_0.7_0.8_0.57', 'flatten_balanced_accuracy': '0.63_0.63_0.65_0.65_0.68'}
308
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.22792945326278655), 'balanced_accuracy': np.float64(0.6759523809523811), 'by_group': {'female_div/dep/mar': np.float64(0.86), 'male_div/sep': np.float64(0.31), 'male_mar/wid': np.float64(0.88), 'male_single': np.float64(0.91)}, 'status': 'success', 'total_time': 0.29872941970825195, 'fit_time': np.float64(0.018262243270874022), 'score_time': np.float64(0.012778615951538086), 'absolute_time': 1746693731.7653127, 'flatten_demographic_parity_ratio': '0.54_0.0_0.6_0.0_0.0', 'flatten_balanced_accuracy': '0.65_0.72_0.69_0.68_0.65'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 609, in objective
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_param_validation.py", line 216, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 431, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 517, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 5 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
5 fits failed with the following error:
Traceback (most recent call last):
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 866, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "/usr/local/lib/python3.12/site-packages/sklearn/base.py", line 1389, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 518, in fit
    Xt, yt = self._fit(X, y, routed_params, raw_params=params)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 430, in _fit
    X, fitted_transformer = fit_transform_one_cached(
                            ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/joblib/memory.py", line 312, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 1383, in _fit_transform_one
    res = transformer.fit_transform(X, y, **params.get("fit_transform", {}))
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_set_output.py", line 319, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 76, in fit_transform
    df_X, df_y = self._prepare_dataset(X, y, fit=True)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 37, in _prepare_dataset
    raise Exception("No sensitive features to mitigate")
Exception: No sensitive features to mitigate


309
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 2}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.01955413818359375, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693732.1436443}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

310
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0003151893615722656, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693732.5034943}
311
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.5951471362480538), 'balanced_accuracy': np.float64(0.6552380952380952), 'by_group': {'female_div/dep/mar': np.float64(0.73), 'male_div/sep': np.float64(0.66), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.68)}, 'status': 'success', 'total_time': 0.5824637413024902, 'fit_time': np.float64(0.07677912712097168), 'score_time': np.float64(0.005233335494995117), 'absolute_time': 1746693733.4455888, 'flatten_demographic_parity_ratio': '0.69_0.64_0.66_0.56_0.42', 'flatten_balanced_accuracy': '0.71_0.65_0.71_0.56_0.65'}
312
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 1}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_features_normalization_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 1.982757568359375, 'fit_time': np.float64(0.3719987392425537), 'score_time': np.float64(0.004206037521362305), 'absolute_time': 1746693735.8958435, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 609, in objective
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_param_validation.py", line 216, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 431, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 517, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 5 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
5 fits failed with the following error:
Traceback (most recent call last):
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 866, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "/usr/local/lib/python3.12/site-packages/sklearn/base.py", line 1389, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 518, in fit
    Xt, yt = self._fit(X, y, routed_params, raw_params=params)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 430, in _fit
    X, fitted_transformer = fit_transform_one_cached(
                            ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/joblib/memory.py", line 312, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 1383, in _fit_transform_one
    res = transformer.fit_transform(X, y, **params.get("fit_transform", {}))
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_set_output.py", line 319, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 76, in fit_transform
    df_X, df_y = self._prepare_dataset(X, y, fit=True)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 37, in _prepare_dataset
    raise Exception("No sensitive features to mitigate")
Exception: No sensitive features to mitigate


313
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(50), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.035126447677612305, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693736.3534646}
314
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 4, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.44558247317399635), 'balanced_accuracy': np.float64(0.6264285714285713), 'by_group': {'female_div/dep/mar': np.float64(0.82), 'male_div/sep': np.float64(0.52), 'male_mar/wid': np.float64(0.82), 'male_single': np.float64(0.9)}, 'status': 'success', 'total_time': 1.1747956275939941, 'fit_time': np.float64(0.08040032386779786), 'score_time': np.float64(0.06562480926513672), 'absolute_time': 1746693737.9471102, 'flatten_demographic_parity_ratio': '0.24_0.21_0.67_0.61_0.5', 'flatten_balanced_accuracy': '0.58_0.6_0.67_0.64_0.65'}
315
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.23370927318295737), 'balanced_accuracy': np.float64(0.4771428571428572), 'by_group': {'female_div/dep/mar': np.float64(0.63), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(0.23), 'male_single': np.float64(0.52)}, 'status': 'success', 'total_time': 0.3315243721008301, 'fit_time': np.float64(0.04340968132019043), 'score_time': np.float64(0.0037233829498291016), 'absolute_time': 1746693738.808294, 'flatten_demographic_parity_ratio': '0.32_0.0_0.28_0.38_0.2', 'flatten_balanced_accuracy': '0.48_0.5_0.49_0.46_0.45'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

316
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0006055831909179688, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693744.4542093}
317
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': 4, 'min_samples_split': 5, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.5519416332244873, 'fit_time': np.float64(0.07967281341552734), 'score_time': np.float64(0.008077621459960938), 'absolute_time': 1746693745.3746035, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

318
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 8, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.00034737586975097656, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693745.7440734}
319
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 13, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.5362970942899123), 'balanced_accuracy': np.float64(0.6785714285714286), 'by_group': {'female_div/dep/mar': np.float64(0.86), 'male_div/sep': np.float64(0.54), 'male_mar/wid': np.float64(0.87), 'male_single': np.float64(0.96)}, 'status': 'success', 'total_time': 0.6571834087371826, 'fit_time': np.float64(0.02513298988342285), 'score_time': np.float64(0.051252555847167966), 'absolute_time': 1746693746.768488, 'flatten_demographic_parity_ratio': '0.58_0.55_0.64_0.51_0.41', 'flatten_balanced_accuracy': '0.66_0.68_0.68_0.68_0.69'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

320
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0003936290740966797, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693747.1445193}
321
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('adam')}, 'features': {'type': np.str_('SelectKBest'), 'k': 3}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.5612237181778467), 'balanced_accuracy': np.float64(0.654047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.9), 'male_div/sep': np.float64(0.65), 'male_mar/wid': np.float64(0.91), 'male_single': np.float64(0.84)}, 'status': 'success', 'total_time': 1.1060824394226074, 'fit_time': np.float64(0.19813909530639648), 'score_time': np.float64(0.0038457393646240236), 'absolute_time': 1746693748.6248617, 'flatten_demographic_parity_ratio': '0.53_0.48_0.7_0.75_0.35', 'flatten_balanced_accuracy': '0.69_0.66_0.7_0.59_0.63'}
322
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.7769521911416721), 'balanced_accuracy': np.float64(0.5838095238095239), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.85), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.95)}, 'status': 'success', 'total_time': 0.5261297225952148, 'fit_time': np.float64(0.08128867149353028), 'score_time': np.float64(0.0048806190490722655), 'absolute_time': 1746693749.5244317, 'flatten_demographic_parity_ratio': '0.86_0.79_0.64_0.94_0.65', 'flatten_balanced_accuracy': '0.5_0.57_0.67_0.59_0.59'}
323
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_rebalancing_features_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.6219586435070306), 'balanced_accuracy': np.float64(0.5980952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.65), 'male_mar/wid': np.float64(0.95), 'male_single': np.float64(0.92)}, 'status': 'success', 'total_time': 0.9373629093170166, 'fit_time': np.float64(0.16389889717102052), 'score_time': np.float64(0.0043487548828125), 'absolute_time': 1746693756.2053757, 'flatten_demographic_parity_ratio': '0.42_0.51_0.6_0.83_0.75', 'flatten_balanced_accuracy': '0.59_0.61_0.63_0.57_0.59'}
324
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 4, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('SelectKBest'), 'k': 3}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.6631844789351473), 'balanced_accuracy': np.float64(0.5002380952380953), 'by_group': {'female_div/dep/mar': np.float64(0.84), 'male_div/sep': np.float64(0.93), 'male_mar/wid': np.float64(0.74), 'male_single': np.float64(0.86)}, 'status': 'success', 'total_time': 20.576699256896973, 'fit_time': np.float64(0.6934614181518555), 'score_time': np.float64(0.008992481231689452), 'absolute_time': 1746693777.1586974, 'flatten_demographic_parity_ratio': '0.49_0.71_0.96_0.42_0.74', 'flatten_balanced_accuracy': '0.46_0.48_0.51_0.52_0.53'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

325
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0005638599395751953, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693777.5454485}
326
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 7, 'weights': np.str_('distance')}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.5090439021140202), 'balanced_accuracy': np.float64(0.6538095238095238), 'by_group': {'female_div/dep/mar': np.float64(0.64), 'male_div/sep': np.float64(0.62), 'male_mar/wid': np.float64(0.88), 'male_single': np.float64(0.98)}, 'status': 'success', 'total_time': 1.1291847229003906, 'fit_time': np.float64(0.04554028511047363), 'score_time': np.float64(0.07567348480224609), 'absolute_time': 1746693779.050227, 'flatten_demographic_parity_ratio': '0.2_0.68_0.48_0.52_0.67', 'flatten_balanced_accuracy': '0.63_0.67_0.66_0.62_0.69'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

327
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 5, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0003502368927001953, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693779.4312792}
/usr/local/lib/python3.12/site-packages/sklearn/decomposition/_pca.py:648: RuntimeWarning: invalid value encountered in divide
  explained_variance_ratio_ = explained_variance_ / total_var
The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 9, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 9, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')} was NaN

328
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 9, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5009523809523809), 'by_group': {'female_div/dep/mar': np.float64(0.58), 'male_div/sep': np.float64(0.0), 'male_mar/wid': np.float64(0.25), 'male_single': np.float64(0.57)}, 'status': 'fail', 'total_time': 5.3043200969696045, 'fit_time': np.float64(1.0310563564300537), 'score_time': np.float64(0.008211374282836914), 'absolute_time': 1746693785.1152341, 'flatten_demographic_parity_ratio': '0.0_0.0_nan_0.0_0.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.51'}
329
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 10, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.7042819794584501), 'balanced_accuracy': np.float64(0.555952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.76), 'male_mar/wid': np.float64(0.85), 'male_single': np.float64(0.86)}, 'status': 'success', 'total_time': 0.15962982177734375, 'fit_time': np.float64(0.007283782958984375), 'score_time': np.float64(0.0048506736755371095), 'absolute_time': 1746693785.6543899, 'flatten_demographic_parity_ratio': '0.81_0.58_0.61_0.71_0.81', 'flatten_balanced_accuracy': '0.53_0.52_0.68_0.56_0.49'}
330
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_split': 6, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9713026669759431), 'balanced_accuracy': np.float64(0.5071428571428571), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(0.98), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.99)}, 'status': 'success', 'total_time': 0.564478874206543, 'fit_time': np.float64(0.07750301361083985), 'score_time': np.float64(0.006630802154541015), 'absolute_time': 1746693786.6089113, 'flatten_demographic_parity_ratio': '0.98_0.99_1.0_0.9_0.98', 'flatten_balanced_accuracy': '0.5_0.51_0.5_0.51_0.52'}
331
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(50), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 3}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_rebalancing_features_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.8765064255915658), 'balanced_accuracy': np.float64(0.5521428571428572), 'by_group': {'female_div/dep/mar': np.float64(0.91), 'male_div/sep': np.float64(0.96), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.97)}, 'status': 'success', 'total_time': 1.3058507442474365, 'fit_time': np.float64(0.23634371757507325), 'score_time': np.float64(0.005254077911376953), 'absolute_time': 1746693788.4540224, 'flatten_demographic_parity_ratio': '0.79_0.89_0.87_0.84_0.99', 'flatten_balanced_accuracy': '0.56_0.52_0.58_0.56_0.54'}
332
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 5, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9355200807757255), 'balanced_accuracy': np.float64(0.5233333333333333), 'by_group': {'female_div/dep/mar': np.float64(0.96), 'male_div/sep': np.float64(0.95), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.97)}, 'status': 'success', 'total_time': 0.20390987396240234, 'fit_time': np.float64(0.019086551666259766), 'score_time': np.float64(0.0032849788665771486), 'absolute_time': 1746693789.049148, 'flatten_demographic_parity_ratio': '0.91_0.9_0.97_0.9_1.0', 'flatten_balanced_accuracy': '0.54_0.55_0.5_0.52_0.5'}
333
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9800000000000001), 'balanced_accuracy': np.float64(0.5038095238095238), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(0.98), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.99)}, 'status': 'success', 'total_time': 4.864985942840576, 'fit_time': np.float64(0.9471717357635498), 'score_time': np.float64(0.0054290771484375), 'absolute_time': 1746693794.3016155, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_0.9_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.52_0.5'}
334
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.6945681511470986), 'balanced_accuracy': np.float64(0.6826190476190476), 'by_group': {'female_div/dep/mar': np.float64(0.87), 'male_div/sep': np.float64(0.71), 'male_mar/wid': np.float64(0.91), 'male_single': np.float64(0.9)}, 'status': 'success', 'total_time': 0.26090383529663086, 'fit_time': np.float64(0.02656245231628418), 'score_time': np.float64(0.005159330368041992), 'absolute_time': 1746693800.4394553, 'flatten_demographic_parity_ratio': '0.82_0.76_0.69_0.73_0.48', 'flatten_balanced_accuracy': '0.72_0.67_0.7_0.64_0.68'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 609, in objective
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_param_validation.py", line 216, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 431, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 517, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 5 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
5 fits failed with the following error:
Traceback (most recent call last):
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 866, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "/usr/local/lib/python3.12/site-packages/sklearn/base.py", line 1389, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 518, in fit
    Xt, yt = self._fit(X, y, routed_params, raw_params=params)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 430, in _fit
    X, fitted_transformer = fit_transform_one_cached(
                            ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/joblib/memory.py", line 312, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 1383, in _fit_transform_one
    res = transformer.fit_transform(X, y, **params.get("fit_transform", {}))
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_set_output.py", line 319, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 76, in fit_transform
    df_X, df_y = self._prepare_dataset(X, y, fit=True)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 37, in _prepare_dataset
    raise Exception("No sensitive features to mitigate")
Exception: No sensitive features to mitigate


335
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 15, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.02046942710876465, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693800.8491657}
336
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9202941028662048), 'balanced_accuracy': np.float64(0.531904761904762), 'by_group': {'female_div/dep/mar': np.float64(0.98), 'male_div/sep': np.float64(0.95), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.95)}, 'status': 'success', 'total_time': 2.488307476043701, 'fit_time': np.float64(0.4699519157409668), 'score_time': np.float64(0.006842613220214844), 'absolute_time': 1746693803.7261689, 'flatten_demographic_parity_ratio': '0.97_0.9_0.91_0.93_0.9', 'flatten_balanced_accuracy': '0.57_0.52_0.51_0.54_0.52'}
337
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.6506869510457878), 'balanced_accuracy': np.float64(0.6688095238095239), 'by_group': {'female_div/dep/mar': np.float64(0.77), 'male_div/sep': np.float64(0.72), 'male_mar/wid': np.float64(0.87), 'male_single': np.float64(0.99)}, 'status': 'success', 'total_time': 0.835064172744751, 'fit_time': np.float64(0.14405603408813478), 'score_time': np.float64(0.0041980743408203125), 'absolute_time': 1746693804.951377, 'flatten_demographic_parity_ratio': '0.54_0.65_0.69_0.75_0.62', 'flatten_balanced_accuracy': '0.66_0.68_0.67_0.63_0.71'}
338
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.049945054945054954), 'balanced_accuracy': np.float64(0.5664285714285715), 'by_group': {'female_div/dep/mar': np.float64(0.9), 'male_div/sep': np.float64(0.05), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.85)}, 'status': 'success', 'total_time': 0.8203790187835693, 'fit_time': np.float64(0.14216575622558594), 'score_time': np.float64(0.0033805370330810547), 'absolute_time': 1746693806.1617393, 'flatten_demographic_parity_ratio': '0.13_0.0_0.12_0.0_0.0', 'flatten_balanced_accuracy': '0.62_0.57_0.55_0.56_0.54'}
339
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 12, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.7427233421700338), 'balanced_accuracy': np.float64(0.5311904761904762), 'by_group': {'female_div/dep/mar': np.float64(0.8), 'male_div/sep': np.float64(0.92), 'male_mar/wid': np.float64(0.84), 'male_single': np.float64(0.83)}, 'status': 'success', 'total_time': 0.34738779067993164, 'fit_time': np.float64(0.03812651634216309), 'score_time': np.float64(0.007990264892578125), 'absolute_time': 1746693812.4989593, 'flatten_demographic_parity_ratio': '0.7_0.7_0.88_0.64_0.79', 'flatten_balanced_accuracy': '0.57_0.54_0.5_0.53_0.52'}
340
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 14, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.5319429458386224), 'balanced_accuracy': np.float64(0.665), 'by_group': {'female_div/dep/mar': np.float64(0.77), 'male_div/sep': np.float64(0.66), 'male_mar/wid': np.float64(0.9), 'male_single': np.float64(0.75)}, 'status': 'success', 'total_time': 0.770150899887085, 'fit_time': np.float64(0.08602614402770996), 'score_time': np.float64(0.017963075637817384), 'absolute_time': 1746693813.6765597, 'flatten_demographic_parity_ratio': '0.56_0.57_0.55_0.7_0.27', 'flatten_balanced_accuracy': '0.72_0.68_0.66_0.62_0.64'}
341
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(10), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.5248386123100536), 'balanced_accuracy': np.float64(0.6023809523809524), 'by_group': {'female_div/dep/mar': np.float64(0.63), 'male_div/sep': np.float64(0.67), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.64)}, 'status': 'success', 'total_time': 0.6363446712493896, 'fit_time': np.float64(0.10744848251342773), 'score_time': np.float64(0.0026380062103271485), 'absolute_time': 1746693814.7067428, 'flatten_demographic_parity_ratio': '0.58_0.48_0.74_0.67_0.15', 'flatten_balanced_accuracy': '0.64_0.65_0.57_0.61_0.55'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

342
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 13, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0004551410675048828, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693815.1012042}
343
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 3, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_features_normalization_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.5136268810190828), 'balanced_accuracy': np.float64(0.5780952380952382), 'by_group': {'female_div/dep/mar': np.float64(0.74), 'male_div/sep': np.float64(0.61), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.64)}, 'status': 'success', 'total_time': 0.7195100784301758, 'fit_time': np.float64(0.11681652069091797), 'score_time': np.float64(0.006861686706542969), 'absolute_time': 1746693816.2143722, 'flatten_demographic_parity_ratio': '0.73_0.48_0.62_0.38_0.36', 'flatten_balanced_accuracy': '0.67_0.6_0.56_0.54_0.52'}
344
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.8744954128440368), 'balanced_accuracy': np.float64(0.530952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.95), 'male_div/sep': np.float64(0.88), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.95)}, 'status': 'success', 'total_time': 0.25308990478515625, 'fit_time': np.float64(0.023257637023925783), 'score_time': np.float64(0.0067084312438964845), 'absolute_time': 1746693816.8620126, 'flatten_demographic_parity_ratio': '0.8_0.9_0.97_0.8_0.9', 'flatten_balanced_accuracy': '0.56_0.53_0.5_0.54_0.52'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

345
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0006487369537353516, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693817.2673476}
346
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 18, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.9673624288425048), 'balanced_accuracy': np.float64(0.5119047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.98), 'male_div/sep': np.float64(0.97), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.98)}, 'status': 'success', 'total_time': 55.18689155578613, 'fit_time': np.float64(10.95310411453247), 'score_time': np.float64(0.01569499969482422), 'absolute_time': 1746693872.864415, 'flatten_demographic_parity_ratio': '0.95_1.0_1.0_0.98_0.9', 'flatten_balanced_accuracy': '0.53_0.5_0.5_0.5_0.53'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

347
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(50), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0005307197570800781, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693873.4351547}
348
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 2}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.5183947402552054), 'balanced_accuracy': np.float64(0.6), 'by_group': {'female_div/dep/mar': np.float64(0.93), 'male_div/sep': np.float64(0.59), 'male_mar/wid': np.float64(0.82), 'male_single': np.float64(0.81)}, 'status': 'success', 'total_time': 0.9027745723724365, 'fit_time': np.float64(0.14905118942260742), 'score_time': np.float64(0.005427789688110351), 'absolute_time': 1746693880.478545, 'flatten_demographic_parity_ratio': '0.75_0.49_0.63_0.58_0.14', 'flatten_balanced_accuracy': '0.66_0.66_0.56_0.59_0.53'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

349
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 4, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0004520416259765625, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693880.8800392}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

350
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 4, 'max_leaf_nodes': 3, 'min_samples_split': 2, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0003750324249267578, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693881.2792397}
351
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 6.68238091468811, 'fit_time': np.float64(1.3070715427398683), 'score_time': np.float64(0.007381296157836914), 'absolute_time': 1746693888.3642929, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
352
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.7809761539024211), 'balanced_accuracy': np.float64(0.6038095238095239), 'by_group': {'female_div/dep/mar': np.float64(0.82), 'male_div/sep': np.float64(0.91), 'male_mar/wid': np.float64(0.89), 'male_single': np.float64(0.93)}, 'status': 'success', 'total_time': 2.6532580852508545, 'fit_time': np.float64(0.5008557319641114), 'score_time': np.float64(0.005855464935302734), 'absolute_time': 1746693891.422894, 'flatten_demographic_parity_ratio': '0.76_0.64_0.88_0.92_0.7', 'flatten_balanced_accuracy': '0.61_0.64_0.59_0.57_0.62'}
353
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.6111995464852608), 'balanced_accuracy': np.float64(0.6285714285714286), 'by_group': {'female_div/dep/mar': np.float64(0.77), 'male_div/sep': np.float64(0.66), 'male_mar/wid': np.float64(0.93), 'male_single': np.float64(0.87)}, 'status': 'success', 'total_time': 0.9198517799377441, 'fit_time': np.float64(0.16087956428527833), 'score_time': np.float64(0.004208517074584961), 'absolute_time': 1746693892.770178, 'flatten_demographic_parity_ratio': '0.62_0.39_0.65_0.79_0.61', 'flatten_balanced_accuracy': '0.59_0.65_0.66_0.64_0.6'}
354
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.27364611625671387, 'fit_time': np.float64(0.03215913772583008), 'score_time': np.float64(0.004066848754882812), 'absolute_time': 1746693893.4697251, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
355
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.44359928443649377), 'balanced_accuracy': np.float64(0.5742857142857143), 'by_group': {'female_div/dep/mar': np.float64(0.9), 'male_div/sep': np.float64(0.44), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.71)}, 'status': 'success', 'total_time': 0.22899103164672852, 'fit_time': np.float64(0.02197685241699219), 'score_time': np.float64(0.004300451278686524), 'absolute_time': 1746693899.8314342, 'flatten_demographic_parity_ratio': '0.6_0.36_0.44_0.44_0.38', 'flatten_balanced_accuracy': '0.63_0.63_0.48_0.61_0.51'}
356
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_features_normalization_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.5973754427390792), 'balanced_accuracy': np.float64(0.5802380952380952), 'by_group': {'female_div/dep/mar': np.float64(0.72), 'male_div/sep': np.float64(0.68), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.67)}, 'status': 'success', 'total_time': 0.4349062442779541, 'fit_time': np.float64(0.061789655685424806), 'score_time': np.float64(0.004712486267089843), 'absolute_time': 1746693900.675476, 'flatten_demographic_parity_ratio': '0.8_0.48_0.69_0.54_0.48', 'flatten_balanced_accuracy': '0.66_0.61_0.59_0.55_0.5'}
357
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 4, 'max_features': 4, 'max_leaf_nodes': 3, 'min_samples_split': 5, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('SelectKBest'), 'k': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_features_normalization_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.3776203007518797), 'balanced_accuracy': np.float64(0.6447619047619048), 'by_group': {'female_div/dep/mar': np.float64(0.84), 'male_div/sep': np.float64(0.38), 'male_mar/wid': np.float64(0.94), 'male_single': np.float64(0.81)}, 'status': 'success', 'total_time': 1.015564203262329, 'fit_time': np.float64(0.15954723358154296), 'score_time': np.float64(0.008571147918701172), 'absolute_time': 1746693902.1799192, 'flatten_demographic_parity_ratio': '0.33_0.49_0.51_0.32_0.24', 'flatten_balanced_accuracy': '0.67_0.67_0.69_0.58_0.62'}
358
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.5855463820437607), 'balanced_accuracy': np.float64(0.6442857142857144), 'by_group': {'female_div/dep/mar': np.float64(0.77), 'male_div/sep': np.float64(0.65), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.74)}, 'status': 'success', 'total_time': 1.5425820350646973, 'fit_time': np.float64(0.2829416751861572), 'score_time': np.float64(0.004958152770996094), 'absolute_time': 1746693904.1336644, 'flatten_demographic_parity_ratio': '0.39_0.69_0.73_0.68_0.44', 'flatten_balanced_accuracy': '0.65_0.69_0.66_0.62_0.61'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

359
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 6, 'min_samples_split': 5, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0005509853363037109, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693904.5652578}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

360
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.00036716461181640625, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693904.9816449}
The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 10, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 10, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')} was NaN

361
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 10, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.4990476190476191), 'by_group': {'female_div/dep/mar': np.float64(0.0), 'male_div/sep': np.float64(0.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.17)}, 'status': 'fail', 'total_time': 17.830838441848755, 'fit_time': np.float64(3.3768444061279297), 'score_time': np.float64(0.0961146354675293), 'absolute_time': 1746693923.2238858, 'flatten_demographic_parity_ratio': 'nan_nan_nan_nan_0.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
362
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.6300274928774929), 'balanced_accuracy': np.float64(0.6623809523809523), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.64), 'male_mar/wid': np.float64(0.95), 'male_single': np.float64(0.9)}, 'status': 'success', 'total_time': 1.0712618827819824, 'fit_time': np.float64(0.17378382682800292), 'score_time': np.float64(0.004534435272216797), 'absolute_time': 1746693924.7090402, 'flatten_demographic_parity_ratio': '0.93_0.59_0.6_0.44_0.59', 'flatten_balanced_accuracy': '0.64_0.66_0.65_0.65_0.71'}
363
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': 6, 'min_samples_split': 4, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.0), 'balanced_accuracy': np.float64(0.539047619047619), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(0.0), 'male_mar/wid': np.float64(0.16), 'male_single': np.float64(0.82)}, 'status': 'success', 'total_time': 0.5195448398590088, 'fit_time': np.float64(0.07552194595336914), 'score_time': np.float64(0.006360816955566406), 'absolute_time': 1746693931.8159003, 'flatten_demographic_parity_ratio': '0.0_0.0_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.58_0.54_0.5_0.57_0.51'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 622, in objective
    fair_scores, fair_scores_by_group = _compute_fair_metric(
                                        ^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 381, in _compute_fair_metric
    y_pred = np.array(scores["estimator"][fold].predict(x_original))
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 659, in predict
    return self.steps[-1][1].predict(Xt, **params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/neighbors/_classification.py", line 262, in predict
    probabilities = self.predict_proba(X)
                    ^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/neighbors/_classification.py", line 348, in predict_proba
    probabilities = ArgKminClassMode.compute(
                    ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/metrics/_pairwise_distances_reduction/_dispatcher.py", line 587, in compute
    return ArgKminClassMode64.compute(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Argument 'metric' has incorrect type (expected str, got numpy.str_)

364
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 6, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 11.911494970321655, 'fit_time': np.float64(2.3716614723205565), 'score_time': np.float64(0.00746450424194336), 'absolute_time': 1746693944.14691}
365
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 4, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_features_normalization_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.7234119038790896), 'balanced_accuracy': np.float64(0.6252380952380954), 'by_group': {'female_div/dep/mar': np.float64(0.82), 'male_div/sep': np.float64(0.81), 'male_mar/wid': np.float64(0.95), 'male_single': np.float64(0.92)}, 'status': 'success', 'total_time': 0.6508543491363525, 'fit_time': np.float64(0.024532890319824217), 'score_time': np.float64(0.04662237167358398), 'absolute_time': 1746693945.2571778, 'flatten_demographic_parity_ratio': '0.64_0.64_0.81_0.75_0.77', 'flatten_balanced_accuracy': '0.53_0.68_0.64_0.59_0.68'}
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(25), 'solver': np.str_('adam')}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(25), 'solver': np.str_('adam')}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification')} was NaN

366
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(25), 'solver': np.str_('adam')}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.49976190476190474), 'by_group': {'female_div/dep/mar': np.float64(0.5), 'male_div/sep': np.float64(0.5), 'male_mar/wid': np.float64(0.5), 'male_single': np.float64(1.0)}, 'status': 'fail', 'total_time': 23.828823566436768, 'fit_time': np.float64(0.9909104347229004), 'score_time': np.float64(0.00721583366394043), 'absolute_time': 1746693969.5029736, 'flatten_demographic_parity_ratio': 'nan_nan_1.0_0.0_nan', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

367
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.00037407875061035156, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693969.925161}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

368
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(50), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.00038051605224609375, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693970.3443751}
369
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.7427855559683401), 'balanced_accuracy': np.float64(0.5747619047619047), 'by_group': {'female_div/dep/mar': np.float64(0.9), 'male_div/sep': np.float64(0.81), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.92)}, 'status': 'success', 'total_time': 0.23187541961669922, 'fit_time': np.float64(0.025199127197265626), 'score_time': np.float64(0.0032670021057128905), 'absolute_time': 1746693970.9990933, 'flatten_demographic_parity_ratio': '0.59_0.9_0.56_0.76_0.91', 'flatten_balanced_accuracy': '0.59_0.56_0.61_0.57_0.55'}
370
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.713168670228093), 'balanced_accuracy': np.float64(0.6233333333333333), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.78), 'male_mar/wid': np.float64(0.93), 'male_single': np.float64(0.89)}, 'status': 'success', 'total_time': 0.8850686550140381, 'fit_time': np.float64(0.14805727005004882), 'score_time': np.float64(0.005690288543701172), 'absolute_time': 1746693972.3054612, 'flatten_demographic_parity_ratio': '0.74_0.89_0.68_0.58_0.67', 'flatten_balanced_accuracy': '0.65_0.62_0.64_0.6_0.6'}
371
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.5339340659340659), 'balanced_accuracy': np.float64(0.5826190476190476), 'by_group': {'female_div/dep/mar': np.float64(0.72), 'male_div/sep': np.float64(0.56), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.81)}, 'status': 'success', 'total_time': 0.6479132175445557, 'fit_time': np.float64(0.10766167640686035), 'score_time': np.float64(0.0036441802978515623), 'absolute_time': 1746693979.5657368, 'flatten_demographic_parity_ratio': '0.47_0.42_0.64_0.63_0.51', 'flatten_balanced_accuracy': '0.61_0.62_0.57_0.56_0.55'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

372
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(50), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.00041937828063964844, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693979.9941719}
373
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.6115116307426419), 'balanced_accuracy': np.float64(0.6245238095238095), 'by_group': {'female_div/dep/mar': np.float64(0.84), 'male_div/sep': np.float64(0.75), 'male_mar/wid': np.float64(0.79), 'male_single': np.float64(0.97)}, 'status': 'success', 'total_time': 4.550337314605713, 'fit_time': np.float64(0.8817315578460694), 'score_time': np.float64(0.005253648757934571), 'absolute_time': 1746693984.9775586, 'flatten_demographic_parity_ratio': '0.16_0.82_0.77_0.76_0.55', 'flatten_balanced_accuracy': '0.63_0.62_0.61_0.62_0.65'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

374
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 3}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0003542900085449219, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693985.4152243}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

375
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 6, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0003750324249267578, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693985.8551579}
376
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 4, 'min_samples_split': 5, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.6669003234003235), 'balanced_accuracy': np.float64(0.6559523809523811), 'by_group': {'female_div/dep/mar': np.float64(0.84), 'male_div/sep': np.float64(0.68), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.92)}, 'status': 'success', 'total_time': 0.2297971248626709, 'fit_time': np.float64(0.021264266967773438), 'score_time': np.float64(0.004712104797363281), 'absolute_time': 1746693986.514748, 'flatten_demographic_parity_ratio': '0.75_0.74_0.76_0.58_0.5', 'flatten_balanced_accuracy': '0.67_0.62_0.7_0.62_0.68'}
377
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 4, 'min_samples_split': 3, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.5681596920627945), 'balanced_accuracy': np.float64(0.674047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.86), 'male_div/sep': np.float64(0.65), 'male_mar/wid': np.float64(0.8), 'male_single': np.float64(0.95)}, 'status': 'success', 'total_time': 0.22916483879089355, 'fit_time': np.float64(0.022080373764038087), 'score_time': np.float64(0.004434013366699218), 'absolute_time': 1746693987.178295, 'flatten_demographic_parity_ratio': '0.51_0.59_0.65_0.68_0.41', 'flatten_balanced_accuracy': '0.66_0.67_0.69_0.65_0.7'}
378
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 6, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.07275862068965518), 'balanced_accuracy': np.float64(0.5361904761904761), 'by_group': {'female_div/dep/mar': np.float64(0.79), 'male_div/sep': np.float64(0.07), 'male_mar/wid': np.float64(0.9), 'male_single': np.float64(0.67)}, 'status': 'success', 'total_time': 1.1765468120574951, 'fit_time': np.float64(0.0760772705078125), 'score_time': np.float64(0.061331987380981445), 'absolute_time': 1746693988.788044, 'flatten_demographic_parity_ratio': '0.21_0.0_0.15_0.0_0.0', 'flatten_balanced_accuracy': '0.61_0.56_0.53_0.49_0.49'}
379
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 14, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.5948003979224493), 'balanced_accuracy': np.float64(0.5502380952380952), 'by_group': {'female_div/dep/mar': np.float64(0.85), 'male_div/sep': np.float64(0.77), 'male_mar/wid': np.float64(0.95), 'male_single': np.float64(0.7)}, 'status': 'success', 'total_time': 0.23622488975524902, 'fit_time': np.float64(0.008613348007202148), 'score_time': np.float64(0.011817312240600586), 'absolute_time': 1746693995.7356803, 'flatten_demographic_parity_ratio': '0.7_0.59_0.3_0.73_0.66', 'flatten_balanced_accuracy': '0.6_0.53_0.54_0.54_0.54'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

380
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 4, 'max_leaf_nodes': 3, 'min_samples_split': 6, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.00040268898010253906, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693996.1716375}
381
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9638180856689582), 'balanced_accuracy': np.float64(0.5064285714285715), 'by_group': {'female_div/dep/mar': np.float64(0.98), 'male_div/sep': np.float64(0.98), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.99)}, 'status': 'success', 'total_time': 0.5259191989898682, 'fit_time': np.float64(0.0774007797241211), 'score_time': np.float64(0.0065266132354736325), 'absolute_time': 1746693997.1332936, 'flatten_demographic_parity_ratio': '0.94_0.98_1.0_0.9_1.0', 'flatten_balanced_accuracy': '0.51_0.51_0.5_0.51_0.5'}
382
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.7238210231998837), 'balanced_accuracy': np.float64(0.574047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.79), 'male_div/sep': np.float64(0.81), 'male_mar/wid': np.float64(0.87), 'male_single': np.float64(0.96)}, 'status': 'success', 'total_time': 0.5797979831695557, 'fit_time': np.float64(0.09300713539123535), 'score_time': np.float64(0.0042999267578125), 'absolute_time': 1746693998.1481016, 'flatten_demographic_parity_ratio': '0.66_0.62_0.8_0.79_0.75', 'flatten_balanced_accuracy': '0.55_0.62_0.59_0.54_0.57'}
383
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.8192947888966694), 'balanced_accuracy': np.float64(0.5547619047619048), 'by_group': {'female_div/dep/mar': np.float64(0.91), 'male_div/sep': np.float64(0.91), 'male_mar/wid': np.float64(0.91), 'male_single': np.float64(0.9)}, 'status': 'success', 'total_time': 0.6762063503265381, 'fit_time': np.float64(0.1117790699005127), 'score_time': np.float64(0.004532670974731446), 'absolute_time': 1746693999.2611282, 'flatten_demographic_parity_ratio': '0.72_0.87_0.89_0.74_0.87', 'flatten_balanced_accuracy': '0.57_0.57_0.55_0.57_0.51'}
384
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 4, 'max_leaf_nodes': 2, 'min_samples_split': 4, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.680165153336767), 'balanced_accuracy': np.float64(0.6023809523809524), 'by_group': {'female_div/dep/mar': np.float64(0.88), 'male_div/sep': np.float64(0.78), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.73)}, 'status': 'success', 'total_time': 0.6386518478393555, 'fit_time': np.float64(0.08893632888793945), 'score_time': np.float64(0.0053924560546875), 'absolute_time': 1746694000.3460162, 'flatten_demographic_parity_ratio': '0.79_0.76_0.72_0.75_0.38', 'flatten_balanced_accuracy': '0.66_0.64_0.53_0.59_0.58'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

385
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0003838539123535156, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746694000.80004}
386
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 17, 'weights': np.str_('distance')}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.6852695932087024), 'balanced_accuracy': np.float64(0.5378571428571428), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.86), 'male_mar/wid': np.float64(0.89), 'male_single': np.float64(0.79)}, 'status': 'success', 'total_time': 0.9985315799713135, 'fit_time': np.float64(0.032654762268066406), 'score_time': np.float64(0.08055872917175293), 'absolute_time': 1746694002.2496371, 'flatten_demographic_parity_ratio': '0.77_0.81_0.39_0.69_0.77', 'flatten_balanced_accuracy': '0.52_0.52_0.57_0.53_0.55'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

387
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 1, 'max_leaf_nodes': 4, 'min_samples_split': 2, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_rebalancing_features_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.00048804283142089844, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746694009.5652378}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

388
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'prototype': np.str_('normalization_rebalancing_features_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.00037407875061035156, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746694010.0864131}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

389
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_split': 3, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('normalization_rebalancing_features_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.000396728515625, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746694010.605798}
390
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 3, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.3062652181119077), 'balanced_accuracy': np.float64(0.6128571428571428), 'by_group': {'female_div/dep/mar': np.float64(0.95), 'male_div/sep': np.float64(0.31), 'male_mar/wid': np.float64(0.9), 'male_single': np.float64(0.83)}, 'status': 'success', 'total_time': 0.6240129470825195, 'fit_time': np.float64(0.09208173751831054), 'score_time': np.float64(0.008411550521850586), 'absolute_time': 1746694011.7497315, 'flatten_demographic_parity_ratio': '0.24_0.13_0.71_0.33_0.12', 'flatten_balanced_accuracy': '0.64_0.63_0.64_0.61_0.54'}
391
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.7802488317878314), 'balanced_accuracy': np.float64(0.639047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.87), 'male_div/sep': np.float64(0.89), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.88)}, 'status': 'success', 'total_time': 0.5953009128570557, 'fit_time': np.float64(0.09556813240051269), 'score_time': np.float64(0.0034723281860351562), 'absolute_time': 1746694012.859713, 'flatten_demographic_parity_ratio': '0.6_0.74_0.93_0.86_0.77', 'flatten_balanced_accuracy': '0.61_0.61_0.67_0.67_0.64'}
392
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 5, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_features_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.7403493967805895), 'balanced_accuracy': np.float64(0.5985714285714285), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.77), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.82)}, 'status': 'success', 'total_time': 1.0262503623962402, 'fit_time': np.float64(0.04346141815185547), 'score_time': np.float64(0.07145228385925292), 'absolute_time': 1746694014.409048, 'flatten_demographic_parity_ratio': '0.93_0.55_0.82_0.71_0.69', 'flatten_balanced_accuracy': '0.59_0.65_0.55_0.62_0.57'}
393
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.7365982688532182), 'balanced_accuracy': np.float64(0.5747619047619048), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.95), 'male_mar/wid': np.float64(0.79), 'male_single': np.float64(0.77)}, 'status': 'success', 'total_time': 14.91365933418274, 'fit_time': np.float64(2.519703817367554), 'score_time': np.float64(0.00845928192138672), 'absolute_time': 1746694029.7739427, 'flatten_demographic_parity_ratio': '0.71_0.66_0.87_0.75_0.7', 'flatten_balanced_accuracy': '0.58_0.54_0.61_0.55_0.6'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

394
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 8, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0003693103790283203, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746694030.2247047}
395
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.6609190599670964), 'balanced_accuracy': np.float64(0.6547619047619048), 'by_group': {'female_div/dep/mar': np.float64(0.84), 'male_div/sep': np.float64(0.7), 'male_mar/wid': np.float64(0.88), 'male_single': np.float64(0.96)}, 'status': 'success', 'total_time': 0.5366466045379639, 'fit_time': np.float64(0.07557644844055175), 'score_time': np.float64(0.007954883575439452), 'absolute_time': 1746694037.9181511, 'flatten_demographic_parity_ratio': '0.39_0.78_0.73_0.77_0.63', 'flatten_balanced_accuracy': '0.62_0.61_0.72_0.65_0.68'}
396
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.4319829996487531), 'balanced_accuracy': np.float64(0.6666666666666666), 'by_group': {'female_div/dep/mar': np.float64(0.9), 'male_div/sep': np.float64(0.43), 'male_mar/wid': np.float64(0.87), 'male_single': np.float64(0.94)}, 'status': 'success', 'total_time': 0.22779130935668945, 'fit_time': np.float64(0.02232508659362793), 'score_time': np.float64(0.003947019577026367), 'absolute_time': 1746694038.6155133, 'flatten_demographic_parity_ratio': '0.16_0.76_0.29_0.54_0.41', 'flatten_balanced_accuracy': '0.68_0.62_0.68_0.66_0.69'}
397
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.7973360079899724), 'balanced_accuracy': np.float64(0.5519047619047618), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.87), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.82)}, 'status': 'success', 'total_time': 86.6250262260437, 'fit_time': np.float64(10.109212112426757), 'score_time': np.float64(0.0065500736236572266), 'absolute_time': 1746694125.6975062, 'flatten_demographic_parity_ratio': '0.84_0.68_0.84_0.78_0.84', 'flatten_balanced_accuracy': '0.56_0.57_0.54_0.56_0.52'}
398
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 4, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('SelectKBest'), 'k': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.45908021926879883, 'fit_time': np.float64(0.06341729164123536), 'score_time': np.float64(0.006375932693481445), 'absolute_time': 1746694126.6210592, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
399
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.3779580453163282), 'balanced_accuracy': np.float64(0.6757142857142857), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.4), 'male_mar/wid': np.float64(0.65), 'male_single': np.float64(0.94)}, 'status': 'success', 'total_time': 0.23613381385803223, 'fit_time': np.float64(0.022881746292114258), 'score_time': np.float64(0.004202890396118164), 'absolute_time': 1746694127.3122675, 'flatten_demographic_parity_ratio': '0.17_0.5_0.28_0.54_0.41', 'flatten_balanced_accuracy': '0.69_0.66_0.7_0.62_0.71'}
400
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.7906654762998849), 'balanced_accuracy': np.float64(0.5964285714285714), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.93), 'male_mar/wid': np.float64(0.93), 'male_single': np.float64(0.88)}, 'status': 'success', 'total_time': 1.4395897388458252, 'fit_time': np.float64(0.2660956859588623), 'score_time': np.float64(0.0033536434173583986), 'absolute_time': 1746694129.2128103, 'flatten_demographic_parity_ratio': '0.82_0.95_0.72_0.7_0.76', 'flatten_balanced_accuracy': '0.59_0.63_0.57_0.61_0.58'}
401
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.9291644585762233), 'balanced_accuracy': np.float64(0.5142857142857142), 'by_group': {'female_div/dep/mar': np.float64(0.96), 'male_div/sep': np.float64(0.98), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.93)}, 'status': 'success', 'total_time': 13.483979940414429, 'fit_time': np.float64(2.542904567718506), 'score_time': np.float64(0.06336851119995117), 'absolute_time': 1746694143.1667433, 'flatten_demographic_parity_ratio': '1.0_0.87_1.0_0.83_0.94', 'flatten_balanced_accuracy': '0.5_0.54_0.5_0.5_0.53'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

402
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0004715919494628906, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746694143.659934}
403
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 18, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 3}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.6089375536974027), 'balanced_accuracy': np.float64(0.5378571428571429), 'by_group': {'female_div/dep/mar': np.float64(0.85), 'male_div/sep': np.float64(0.71), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.67)}, 'status': 'success', 'total_time': 0.45340919494628906, 'fit_time': np.float64(0.04754137992858887), 'score_time': np.float64(0.013523721694946289), 'absolute_time': 1746694144.790309, 'flatten_demographic_parity_ratio': '0.45_0.74_0.64_0.67_0.54', 'flatten_balanced_accuracy': '0.59_0.54_0.54_0.55_0.47'}
404
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_split': 2, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9829302490308998), 'balanced_accuracy': np.float64(0.5007142857142857), 'by_group': {'female_div/dep/mar': np.float64(0.99), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.99)}, 'status': 'success', 'total_time': 5.761751413345337, 'fit_time': np.float64(1.1117428302764893), 'score_time': np.float64(0.01281723976135254), 'absolute_time': 1746694157.839463, 'flatten_demographic_parity_ratio': '1.0_0.98_0.99_0.97_0.97', 'flatten_balanced_accuracy': '0.5_0.5_0.51_0.5_0.5'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

405
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_features_normalization_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0004181861877441406, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746694158.3823152}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

406
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 15, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0003504753112792969, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746694158.9148293}
407
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(25), 'solver': np.str_('sgd')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.5928674720115884), 'balanced_accuracy': np.float64(0.5395238095238095), 'by_group': {'female_div/dep/mar': np.float64(0.92), 'male_div/sep': np.float64(0.61), 'male_mar/wid': np.float64(0.95), 'male_single': np.float64(0.77)}, 'status': 'success', 'total_time': 19.65290641784668, 'fit_time': np.float64(3.901094102859497), 'score_time': np.float64(0.007793569564819336), 'absolute_time': 1746694179.108134, 'flatten_demographic_parity_ratio': '0.64_0.72_0.82_0.4_0.38', 'flatten_balanced_accuracy': '0.51_0.58_0.49_0.49_0.64'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

408
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.00038623809814453125, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746694179.5725663}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

409
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.000335693359375, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746694180.0365198}
410
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 16, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.4791648791224222), 'balanced_accuracy': np.float64(0.5614285714285714), 'by_group': {'female_div/dep/mar': np.float64(0.63), 'male_div/sep': np.float64(0.6), 'male_mar/wid': np.float64(0.75), 'male_single': np.float64(0.95)}, 'status': 'success', 'total_time': 0.5623438358306885, 'fit_time': np.float64(0.06893987655639648), 'score_time': np.float64(0.015684843063354492), 'absolute_time': 1746694181.0695615, 'flatten_demographic_parity_ratio': '0.33_0.37_0.76_0.55_0.38', 'flatten_balanced_accuracy': '0.62_0.57_0.55_0.55_0.51'}
411
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(10), 'solver': np.str_('adam')}, 'features': {'type': np.str_('SelectKBest'), 'k': 1}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.6405678609260952), 'balanced_accuracy': np.float64(0.6835714285714285), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.71), 'male_mar/wid': np.float64(0.76), 'male_single': np.float64(0.92)}, 'status': 'success', 'total_time': 2.631479024887085, 'fit_time': np.float64(0.49126443862915037), 'score_time': np.float64(0.0036008358001708984), 'absolute_time': 1746694191.108349, 'flatten_demographic_parity_ratio': '0.41_0.54_0.82_0.7_0.74', 'flatten_balanced_accuracy': '0.68_0.69_0.72_0.65_0.69'}
412
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 7, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.7395517929462884), 'balanced_accuracy': np.float64(0.5323809523809524), 'by_group': {'female_div/dep/mar': np.float64(0.9), 'male_div/sep': np.float64(0.79), 'male_mar/wid': np.float64(0.94), 'male_single': np.float64(0.84)}, 'status': 'success', 'total_time': 0.28445959091186523, 'fit_time': np.float64(0.011784172058105469), 'score_time': np.float64(0.013980674743652343), 'absolute_time': 1746694191.9341636, 'flatten_demographic_parity_ratio': '0.8_0.83_0.51_0.75_0.8', 'flatten_balanced_accuracy': '0.52_0.5_0.62_0.54_0.48'}
413
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(50), 'solver': np.str_('adam')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.5217639397639398), 'balanced_accuracy': np.float64(0.645952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.79), 'male_div/sep': np.float64(0.58), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.84)}, 'status': 'success', 'total_time': 2.380378484725952, 'fit_time': np.float64(0.4498579978942871), 'score_time': np.float64(0.005156850814819336), 'absolute_time': 1746694194.8651607, 'flatten_demographic_parity_ratio': '0.2_0.55_0.69_0.76_0.41', 'flatten_balanced_accuracy': '0.69_0.65_0.69_0.57_0.63'}
414
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_features_normalization_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.6667721312928232), 'balanced_accuracy': np.float64(0.5619047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.83), 'male_mar/wid': np.float64(0.83), 'male_single': np.float64(0.83)}, 'status': 'success', 'total_time': 0.4394087791442871, 'fit_time': np.float64(0.034432411193847656), 'score_time': np.float64(0.013871002197265624), 'absolute_time': 1746694195.8493829, 'flatten_demographic_parity_ratio': '0.72_0.83_0.3_0.74_0.75', 'flatten_balanced_accuracy': '0.59_0.56_0.58_0.56_0.52'}
415
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.6080650338166165), 'balanced_accuracy': np.float64(0.6619047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.88), 'male_div/sep': np.float64(0.68), 'male_mar/wid': np.float64(0.76), 'male_single': np.float64(0.98)}, 'status': 'success', 'total_time': 2.1193666458129883, 'fit_time': np.float64(0.40009570121765137), 'score_time': np.float64(0.004452180862426758), 'absolute_time': 1746694198.4494169, 'flatten_demographic_parity_ratio': '0.17_0.73_0.87_0.79_0.49', 'flatten_balanced_accuracy': '0.66_0.7_0.65_0.63_0.68'}
416
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.7085301371214363), 'balanced_accuracy': np.float64(0.5419047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.86), 'male_div/sep': np.float64(0.8), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.74)}, 'status': 'success', 'total_time': 8.100673913955688, 'fit_time': np.float64(1.585329008102417), 'score_time': np.float64(0.009305667877197266), 'absolute_time': 1746694207.0227895, 'flatten_demographic_parity_ratio': '0.84_0.6_0.73_0.63_0.74', 'flatten_balanced_accuracy': '0.56_0.55_0.55_0.52_0.54'}
417
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.6148413459815819), 'balanced_accuracy': np.float64(0.6592857142857144), 'by_group': {'female_div/dep/mar': np.float64(0.81), 'male_div/sep': np.float64(0.73), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.71)}, 'status': 'success', 'total_time': 0.623316764831543, 'fit_time': np.float64(0.08705430030822754), 'score_time': np.float64(0.005603647232055664), 'absolute_time': 1746694208.1285508, 'flatten_demographic_parity_ratio': '0.71_0.83_0.7_0.68_0.15', 'flatten_balanced_accuracy': '0.72_0.67_0.69_0.61_0.61'}
418
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_features_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.683110510829809), 'balanced_accuracy': np.float64(0.6333333333333333), 'by_group': {'female_div/dep/mar': np.float64(0.8), 'male_div/sep': np.float64(0.86), 'male_mar/wid': np.float64(0.87), 'male_single': np.float64(0.78)}, 'status': 'success', 'total_time': 1.0048906803131104, 'fit_time': np.float64(0.17725625038146972), 'score_time': np.float64(0.004536581039428711), 'absolute_time': 1746694209.6121547, 'flatten_demographic_parity_ratio': '0.54_0.66_0.46_0.94_0.81', 'flatten_balanced_accuracy': '0.61_0.67_0.64_0.62_0.63'}
419
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.4870621270621271), 'balanced_accuracy': np.float64(0.5911904761904763), 'by_group': {'female_div/dep/mar': np.float64(0.88), 'male_div/sep': np.float64(0.49), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.73)}, 'status': 'success', 'total_time': 9.381059169769287, 'fit_time': np.float64(1.8466707706451415), 'score_time': np.float64(0.007843589782714844), 'absolute_time': 1746694226.6781397, 'flatten_demographic_parity_ratio': '0.49_0.26_0.51_0.5_0.67', 'flatten_balanced_accuracy': '0.65_0.68_0.54_0.49_0.6'}
420
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 3, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('SelectKBest'), 'k': 9}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.6128888394390283), 'balanced_accuracy': np.float64(0.5245238095238095), 'by_group': {'female_div/dep/mar': np.float64(0.84), 'male_div/sep': np.float64(0.65), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.72)}, 'status': 'success', 'total_time': 15.093385696411133, 'fit_time': np.float64(2.5634243488311768), 'score_time': np.float64(0.009800100326538086), 'absolute_time': 1746694242.2541842, 'flatten_demographic_parity_ratio': '0.89_0.56_0.8_0.41_0.41', 'flatten_balanced_accuracy': '0.56_0.56_0.51_0.48_0.51'}
421
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.5528165266106443), 'balanced_accuracy': np.float64(0.6721428571428572), 'by_group': {'female_div/dep/mar': np.float64(0.82), 'male_div/sep': np.float64(0.55), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.89)}, 'status': 'success', 'total_time': 0.2846665382385254, 'fit_time': np.float64(0.0321075439453125), 'score_time': np.float64(0.004774999618530273), 'absolute_time': 1746694243.0273426, 'flatten_demographic_parity_ratio': '0.55_0.74_0.48_0.54_0.45', 'flatten_balanced_accuracy': '0.64_0.67_0.67_0.66_0.72'}
422
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.41456584823557296), 'balanced_accuracy': np.float64(0.5235714285714286), 'by_group': {'female_div/dep/mar': np.float64(0.75), 'male_div/sep': np.float64(0.49), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.54)}, 'status': 'success', 'total_time': 0.7645080089569092, 'fit_time': np.float64(0.13018536567687988), 'score_time': np.float64(0.004122018814086914), 'absolute_time': 1746694244.275804, 'flatten_demographic_parity_ratio': '0.42_0.51_0.59_0.41_0.15', 'flatten_balanced_accuracy': '0.54_0.54_0.53_0.48_0.52'}
423
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 6, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('SelectKBest'), 'k': 9}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.977609108159393), 'balanced_accuracy': np.float64(0.5085714285714286), 'by_group': {'female_div/dep/mar': np.float64(0.98), 'male_div/sep': np.float64(0.99), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.98)}, 'status': 'success', 'total_time': 39.437119483947754, 'fit_time': np.float64(1.2827906131744384), 'score_time': np.float64(0.0077178955078125), 'absolute_time': 1746694284.1948586, 'flatten_demographic_parity_ratio': '0.89_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.54_0.5_0.5_0.5_0.5'}
424
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(50), 'solver': np.str_('sgd')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 2.3087613582611084, 'fit_time': np.float64(0.4362584114074707), 'score_time': np.float64(0.005554819107055664), 'absolute_time': 1746694287.0062175, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

425
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0004982948303222656, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746694287.4985356}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

426
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 7, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.00040650367736816406, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746694287.986707}
427
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('SelectKBest'), 'k': 2}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.689321553969872), 'balanced_accuracy': np.float64(0.5533333333333333), 'by_group': {'female_div/dep/mar': np.float64(0.84), 'male_div/sep': np.float64(0.83), 'male_mar/wid': np.float64(0.9), 'male_single': np.float64(0.73)}, 'status': 'success', 'total_time': 6.358539581298828, 'fit_time': np.float64(1.1157540798187255), 'score_time': np.float64(0.01240692138671875), 'absolute_time': 1746694295.0621624, 'flatten_demographic_parity_ratio': '0.62_0.6_0.82_0.78_0.63', 'flatten_balanced_accuracy': '0.58_0.54_0.53_0.55_0.56'}
428
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(25), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9745120934111761), 'balanced_accuracy': np.float64(0.503095238095238), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(0.98), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.99)}, 'status': 'success', 'total_time': 1.6646888256072998, 'fit_time': np.float64(0.30983972549438477), 'score_time': np.float64(0.004193019866943359), 'absolute_time': 1746694304.5152452, 'flatten_demographic_parity_ratio': '0.99_0.9_0.98_1.0_1.0', 'flatten_balanced_accuracy': '0.51_0.49_0.51_0.5_0.5'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

429
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 15, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.00044226646423339844, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746694305.0094366}
430
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(50), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.5194556052736481), 'balanced_accuracy': np.float64(0.5109523809523809), 'by_group': {'female_div/dep/mar': np.float64(0.88), 'male_div/sep': np.float64(0.55), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.76)}, 'status': 'success', 'total_time': 6.671068429946899, 'fit_time': np.float64(1.3057854175567627), 'score_time': np.float64(0.006948614120483398), 'absolute_time': 1746694312.1684575, 'flatten_demographic_parity_ratio': '0.56_0.33_0.67_0.63_0.41', 'flatten_balanced_accuracy': '0.56_0.48_0.48_0.51_0.51'}
431
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.6513659531090724), 'balanced_accuracy': np.float64(0.6147619047619048), 'by_group': {'female_div/dep/mar': np.float64(0.84), 'male_div/sep': np.float64(0.78), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.71)}, 'status': 'success', 'total_time': 1.2254536151885986, 'fit_time': np.float64(0.06721124649047852), 'score_time': np.float64(0.07999324798583984), 'absolute_time': 1746694313.886082, 'flatten_demographic_parity_ratio': '0.6_0.56_0.74_0.69_0.66', 'flatten_balanced_accuracy': '0.62_0.65_0.58_0.62_0.6'}
432
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 8, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.7363897716036598), 'balanced_accuracy': np.float64(0.5580952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.77), 'male_div/sep': np.float64(0.96), 'male_mar/wid': np.float64(0.89), 'male_single': np.float64(0.8)}, 'status': 'success', 'total_time': 16.785032272338867, 'fit_time': np.float64(3.1768784523010254), 'score_time': np.float64(0.08591594696044921), 'absolute_time': 1746694331.1815147, 'flatten_demographic_parity_ratio': '0.77_0.83_0.66_0.69_0.73', 'flatten_balanced_accuracy': '0.59_0.55_0.52_0.61_0.51'}
433
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(50), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.4489825870646766), 'balanced_accuracy': np.float64(0.5549999999999999), 'by_group': {'female_div/dep/mar': np.float64(0.87), 'male_div/sep': np.float64(0.54), 'male_mar/wid': np.float64(0.88), 'male_single': np.float64(0.93)}, 'status': 'success', 'total_time': 3.8045284748077393, 'fit_time': np.float64(0.7346844673156738), 'score_time': np.float64(0.006437921524047851), 'absolute_time': 1746694335.4792295, 'flatten_demographic_parity_ratio': '0.38_0.6_0.65_0.42_0.19', 'flatten_balanced_accuracy': '0.57_0.57_0.58_0.54_0.52'}
434
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 9, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.7399483667166414), 'balanced_accuracy': np.float64(0.6192857142857143), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.77), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.82)}, 'status': 'success', 'total_time': 0.2439870834350586, 'fit_time': np.float64(0.009064865112304688), 'score_time': np.float64(0.012491893768310548), 'absolute_time': 1746694336.2155678, 'flatten_demographic_parity_ratio': '0.68_0.78_0.75_0.76_0.73', 'flatten_balanced_accuracy': '0.6_0.67_0.6_0.6_0.62'}
435
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 6, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.5448866340235582), 'balanced_accuracy': np.float64(0.5902380952380952), 'by_group': {'female_div/dep/mar': np.float64(0.78), 'male_div/sep': np.float64(0.61), 'male_mar/wid': np.float64(0.91), 'male_single': np.float64(0.9)}, 'status': 'success', 'total_time': 0.24628496170043945, 'fit_time': np.float64(0.008298063278198242), 'score_time': np.float64(0.012836837768554687), 'absolute_time': 1746694344.3959272, 'flatten_demographic_parity_ratio': '0.65_0.17_0.8_0.63_0.47', 'flatten_balanced_accuracy': '0.6_0.59_0.61_0.62_0.54'}
436
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 8, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.5715162439001549), 'balanced_accuracy': np.float64(0.5326190476190475), 'by_group': {'female_div/dep/mar': np.float64(0.82), 'male_div/sep': np.float64(0.69), 'male_mar/wid': np.float64(0.78), 'male_single': np.float64(0.86)}, 'status': 'success', 'total_time': 20.663084030151367, 'fit_time': np.float64(3.99499454498291), 'score_time': np.float64(0.060909080505371097), 'absolute_time': 1746694365.5548997, 'flatten_demographic_parity_ratio': '0.36_0.68_0.72_0.58_0.52', 'flatten_balanced_accuracy': '0.53_0.57_0.51_0.57_0.48'}
437
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.6038476581579814), 'balanced_accuracy': np.float64(0.5671428571428571), 'by_group': {'female_div/dep/mar': np.float64(0.72), 'male_div/sep': np.float64(0.75), 'male_mar/wid': np.float64(0.78), 'male_single': np.float64(0.89)}, 'status': 'success', 'total_time': 0.8772530555725098, 'fit_time': np.float64(0.15172905921936036), 'score_time': np.float64(0.004687213897705078), 'absolute_time': 1746694366.9310143, 'flatten_demographic_parity_ratio': '0.55_0.54_0.73_0.71_0.49', 'flatten_balanced_accuracy': '0.63_0.59_0.52_0.52_0.58'}
The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')} was NaN

438
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5004761904761905), 'by_group': {'female_div/dep/mar': np.float64(0.33), 'male_div/sep': np.float64(0.0), 'male_mar/wid': np.float64(0.33), 'male_single': np.float64(0.39)}, 'status': 'fail', 'total_time': 9.824443101882935, 'fit_time': np.float64(1.9162802696228027), 'score_time': np.float64(0.01742110252380371), 'absolute_time': 1746694377.253558, 'flatten_demographic_parity_ratio': 'nan_0.0_nan_0.0_0.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

439
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 7, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.00042176246643066406, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746694377.7562423}
440
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 9, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.5317920582051454), 'balanced_accuracy': np.float64(0.6247619047619047), 'by_group': {'female_div/dep/mar': np.float64(0.8), 'male_div/sep': np.float64(0.56), 'male_mar/wid': np.float64(0.71), 'male_single': np.float64(0.99)}, 'status': 'success', 'total_time': 0.16222667694091797, 'fit_time': np.float64(0.005920028686523438), 'score_time': np.float64(0.005939483642578125), 'absolute_time': 1746694378.41259, 'flatten_demographic_parity_ratio': '0.79_0.54_0.44_0.45_0.44', 'flatten_balanced_accuracy': '0.65_0.64_0.6_0.65_0.59'}
441
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.643902342306012), 'balanced_accuracy': np.float64(0.5457142857142857), 'by_group': {'female_div/dep/mar': np.float64(0.85), 'male_div/sep': np.float64(0.68), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.73)}, 'status': 'success', 'total_time': 36.3990044593811, 'fit_time': np.float64(1.9142490386962892), 'score_time': np.float64(0.011798667907714843), 'absolute_time': 1746694415.313274, 'flatten_demographic_parity_ratio': '0.69_0.48_0.85_0.79_0.41', 'flatten_balanced_accuracy': '0.59_0.56_0.54_0.56_0.47'}
442
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 19, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.6442291033264694), 'balanced_accuracy': np.float64(0.5580952380952382), 'by_group': {'female_div/dep/mar': np.float64(0.79), 'male_div/sep': np.float64(0.8), 'male_mar/wid': np.float64(0.89), 'male_single': np.float64(0.76)}, 'status': 'success', 'total_time': 0.7414722442626953, 'fit_time': np.float64(0.029482603073120117), 'score_time': np.float64(0.052181243896484375), 'absolute_time': 1746694416.5645285, 'flatten_demographic_parity_ratio': '0.45_0.49_0.75_0.76_0.77', 'flatten_balanced_accuracy': '0.51_0.52_0.59_0.57_0.6'}
443
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 17, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 1}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.931269606392424), 'balanced_accuracy': np.float64(0.5214285714285715), 'by_group': {'female_div/dep/mar': np.float64(0.97), 'male_div/sep': np.float64(0.94), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.97)}, 'status': 'success', 'total_time': 93.84024596214294, 'fit_time': np.float64(10.604998111724854), 'score_time': np.float64(0.021713876724243165), 'absolute_time': 1746694511.182695, 'flatten_demographic_parity_ratio': '0.9_0.8_0.97_1.0_0.98', 'flatten_balanced_accuracy': '0.54_0.58_0.5_0.5_0.49'}
AutoML: optimization done.
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
AutoML: miner done.
AutoML: export done.
Here is the standard output/error of the command:

Here is the standard output/error of the command:

Here is the standard output/error of the command:

hamlet_1969516810
AutoML execution ended
