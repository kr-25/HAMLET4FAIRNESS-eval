Sensitive groups ready!
Theory ready!
Theory:
step(normalization) :- true.
step(features) :- true.
step(mitigation) :- true.
step(rebalancing) :- true.
step(classification) :- true.
operator(normalization, power_transformer) :- true.
operator(normalization, robust_scaler) :- true.
operator(normalization, standard) :- true.
operator(normalization, minmax) :- true.
operator(features, select_k_best) :- true.
operator(features, pca) :- true.
operator(mitigation, corr_remover) :- true.
operator(mitigation, lfr) :- true.
operator(rebalancing, near_miss) :- true.
operator(rebalancing, smote) :- true.
operator(classification, knn) :- true.
operator(classification, nn) :- true.
operator(classification, rf) :- true.
hyperparameter(robust_scaler, with_centering, choice) :- true.
hyperparameter(robust_scaler, with_scaling, choice) :- true.
hyperparameter(standard, with_mean, choice) :- true.
hyperparameter(standard, with_std, choice) :- true.
hyperparameter(select_k_best, k, randint) :- true.
hyperparameter(pca, n_components, randint) :- true.
hyperparameter(corr_remover, alpha, choice) :- true.
hyperparameter(lfr, n_prototypes, choice) :- true.
hyperparameter(lfr, reconstruct_weight, choice) :- true.
hyperparameter(lfr, fairness_weight, choice) :- true.
hyperparameter(near_miss, n_neighbors, randint) :- true.
hyperparameter(smote, k_neighbors, randint) :- true.
hyperparameter(knn, n_neighbors, randint) :- true.
hyperparameter(knn, weights, choice) :- true.
hyperparameter(knn, metric, choice) :- true.
hyperparameter(nn, n_hidden_layers, choice) :- true.
hyperparameter(nn, n_neurons, choice) :- true.
hyperparameter(nn, activation, choice) :- true.
hyperparameter(nn, solver, choice) :- true.
hyperparameter(nn, alpha, choice) :- true.
hyperparameter(nn, learning_rate, choice) :- true.
hyperparameter(rf, n_estimators, choice) :- true.
hyperparameter(rf, max_depth, randint) :- true.
hyperparameter(rf, max_features, randint) :- true.
hyperparameter(rf, min_samples_split, randint) :- true.
hyperparameter(rf, max_leaf_nodes, randint) :- true.
hyperparameter(rf, bootstrap, choice) :- true.
hyperparameter(rf, criterion, choice) :- true.
domain(robust_scaler, with_centering, [true, false]) :- true.
domain(robust_scaler, with_scaling, [true, false]) :- true.
domain(standard, with_mean, [true, false]) :- true.
domain(standard, with_std, [true, false]) :- true.
domain(select_k_best, k, [1, 10]) :- true.
domain(pca, n_components, [1, 8]) :- true.
domain(corr_remover, alpha, [0.25, 0.5, 0.75, 1.0]) :- true.
domain(lfr, n_prototypes, [10, 50, 100, 200]) :- true.
domain(lfr, reconstruct_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(lfr, fairness_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(near_miss, n_neighbors, [1, 4]) :- true.
domain(smote, k_neighbors, [5, 8]) :- true.
domain(knn, n_neighbors, [3, 20]) :- true.
domain(knn, weights, [uniform, distance]) :- true.
domain(knn, metric, [minkowski, euclidean, manhattan]) :- true.
domain(nn, n_hidden_layers, [1, 5, 10, 20]) :- true.
domain(nn, n_neurons, [5, 10, 25, 50]) :- true.
domain(nn, activation, [logistic, tanh, relu]) :- true.
domain(nn, solver, [lbfgs, sgd, adam]) :- true.
domain(nn, alpha, [0.0001, 0.001, 0.01, 0.00001]) :- true.
domain(nn, learning_rate, [constant, invscaling, adaptive]) :- true.
domain(rf, n_estimators, [10, 25, 50, 75, 100]) :- true.
domain(rf, max_depth, [1, 5]) :- true.
domain(rf, max_features, [1, 4]) :- true.
domain(rf, min_samples_split, [2, 6]) :- true.
domain(rf, max_leaf_nodes, [2, 6]) :- true.
domain(rf, bootstrap, [true, false]) :- true.
domain(rf, criterion, [gini, entropy]) :- true.
dataset('credit-g') :- true.
metric(balanced_accuracy) :- true.
fairness_metric(demographic_parity_ratio) :- true.
sensitive_feature(personal_status, [single, 'div/dep/mar', 'mar/wid']) :- true.
sensitive_feature(sex, [male, female]) :- true.
':=>'(mc0, unbalanced_dataset) :- true.
pipeline([Step_1_0], ZZ_0) :- (step(Step_1_0), '\\='(Step_1_0, classification), operator(classification, ZZ_0)).
pipeline([Step_1_1, Step_2_0], ZZ_1) :- (step(Step_1_1), step(Step_2_0), '\\='(Step_1_1, classification), '\\='(Step_2_0, classification), '\\='(Step_1_1, Step_2_0), operator(classification, ZZ_1)).
pipeline([Step_1_2, Step_2_1, Step_3_0], ZZ_2) :- (step(Step_1_2), step(Step_2_1), step(Step_3_0), '\\='(Step_1_2, classification), '\\='(Step_2_1, classification), '\\='(Step_3_0, classification), '\\='(Step_1_2, Step_2_1), '\\='(Step_1_2, Step_3_0), '\\='(Step_2_1, Step_3_0), operator(classification, ZZ_2)).
pipeline([Step_1_3, Step_2_2, Step_3_1, Step_4_0], ZZ_3) :- (step(Step_1_3), step(Step_2_2), step(Step_3_1), step(Step_4_0), '\\='(Step_1_3, classification), '\\='(Step_2_2, classification), '\\='(Step_3_1, classification), '\\='(Step_4_0, classification), '\\='(Step_1_3, Step_2_2), '\\='(Step_1_3, Step_3_1), '\\='(Step_1_3, Step_4_0), '\\='(Step_2_2, Step_3_1), '\\='(Step_2_2, Step_4_0), '\\='(Step_3_1, Step_4_0), operator(classification, ZZ_3)).
':=>'(p479872, sensitive_group([single])) :- true.
':=>'(p607358, sensitive_group(['div/dep/mar'])) :- true.
':=>'(p740917, sensitive_group(['mar/wid'])) :- true.
':=>'(p174726, sensitive_group([male])) :- true.
':=>'(p680260, sensitive_group([female])) :- true.
':=>'(p442111, sensitive_group([single, male])) :- true.
':=>'(p175134, sensitive_group([single, female])) :- true.
':=>'(p826594, sensitive_group(['div/dep/mar', male])) :- true.
':=>'(p954647, sensitive_group(['div/dep/mar', female])) :- true.
':=>'(p539242, sensitive_group(['mar/wid', male])) :- true.
':=>'(p340686, sensitive_group(['mar/wid', female])) :- true.

Checking Config
Exporting Config
Saving Graph
Exporting AutoML input
Exporting Space
Exporting Constraints
Input created for iteration Config(iteration=2, dataset=credit-g, metric=balanced_accuracy, fairnessMetric=demographic_parity_ratio, sensitiveFeatures=[personal_status, sex], mode=max, batchSize=999999, timeBudget=900, seed=42)
Here is the standard output/error of the command:

039be34f8ecfd28f355f5b080633c24f227886cd125095e5b694984289e07640
Here is the standard output/error of the command:

Here is the standard output/error of the command:

WARNING:root:No module named 'rpy2': FairAdapt will be unavailable. To install, run:
pip install 'aif360[FairAdapt]'
INFO:flaml.tune.searcher.blendsearch:No low-cost partial config given to the search algorithm. For cost-frugal search, consider providing low-cost values for cost-related hps via 'low_cost_partial_config'. More info can be found at https://microsoft.github.io/FLAML/docs/FAQ#about-low_cost_partial_config-in-tune
AutoML: starting optimization.
205
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.9981818181818183), 'balanced_accuracy': np.float64(0.4992857142857143), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 4.417226791381836, 'fit_time': np.float64(0.8549705505371094), 'score_time': np.float64(0.0065100669860839845), 'absolute_time': 1746692544.9330127, 'flatten_demographic_parity_ratio': '0.99_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
206
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 15, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.9394458712717888), 'balanced_accuracy': np.float64(0.5154761904761905), 'by_group': {'female_div/dep/mar': np.float64(0.96), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.96)}, 'status': 'success', 'total_time': 33.86393451690674, 'fit_time': np.float64(6.582001447677612), 'score_time': np.float64(0.08842964172363281), 'absolute_time': 1746692579.050432, 'flatten_demographic_parity_ratio': '0.95_0.97_0.88_0.89_1.0', 'flatten_balanced_accuracy': '0.53_0.53_0.52_0.49_0.5'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

207
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'prototype': np.str_('rebalancing_features_normalization_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0004906654357910156, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692579.296619}
208
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9567741935483871), 'balanced_accuracy': np.float64(0.5061904761904762), 'by_group': {'female_div/dep/mar': np.float64(0.99), 'male_div/sep': np.float64(0.96), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.99)}, 'status': 'success', 'total_time': 0.18480253219604492, 'fit_time': np.float64(0.01609010696411133), 'score_time': np.float64(0.0030944347381591797), 'absolute_time': 1746692579.7279377, 'flatten_demographic_parity_ratio': '0.9_1.0_1.0_0.98_0.9', 'flatten_balanced_accuracy': '0.51_0.5_0.5_0.51_0.51'}
209
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 3, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('SelectKBest'), 'k': 1}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.3146193027496338, 'fit_time': np.float64(0.037122678756713864), 'score_time': np.float64(0.0051116943359375), 'absolute_time': 1746692580.3088996, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
/usr/local/lib/python3.12/site-packages/sklearn/decomposition/_pca.py:648: RuntimeWarning: invalid value encountered in divide
  explained_variance_ratio_ = explained_variance_ / total_var
The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 6, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 6, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')} was NaN

210
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 6, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.505), 'by_group': {'female_div/dep/mar': np.float64(0.67), 'male_div/sep': np.float64(0.0), 'male_mar/wid': np.float64(0.0), 'male_single': np.float64(0.53)}, 'status': 'fail', 'total_time': 7.249759912490845, 'fit_time': np.float64(1.415774440765381), 'score_time': np.float64(0.008981418609619141), 'absolute_time': 1746692587.8448539, 'flatten_demographic_parity_ratio': 'nan_nan_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.5_0.5_0.51_0.51_0.5'}
211
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 3, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.5810110371053373), 'balanced_accuracy': np.float64(0.5676190476190477), 'by_group': {'female_div/dep/mar': np.float64(0.69), 'male_div/sep': np.float64(0.87), 'male_mar/wid': np.float64(0.74), 'male_single': np.float64(0.94)}, 'status': 'success', 'total_time': 21.376147985458374, 'fit_time': np.float64(4.234768199920654), 'score_time': np.float64(0.013377237319946288), 'absolute_time': 1746692609.4768662, 'flatten_demographic_parity_ratio': '0.93_0.19_0.72_0.39_0.67', 'flatten_balanced_accuracy': '0.54_0.54_0.6_0.55_0.61'}
212
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.454411495125863), 'balanced_accuracy': np.float64(0.5376190476190477), 'by_group': {'female_div/dep/mar': np.float64(0.63), 'male_div/sep': np.float64(0.57), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.85)}, 'status': 'success', 'total_time': 1.8323793411254883, 'fit_time': np.float64(0.34294471740722654), 'score_time': np.float64(0.004552984237670898), 'absolute_time': 1746692611.563983, 'flatten_demographic_parity_ratio': '0.32_0.47_0.49_0.32_0.68', 'flatten_balanced_accuracy': '0.52_0.52_0.54_0.58_0.52'}
213
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(50), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.5461916685955572), 'balanced_accuracy': np.float64(0.6430952380952382), 'by_group': {'female_div/dep/mar': np.float64(0.8), 'male_div/sep': np.float64(0.68), 'male_mar/wid': np.float64(0.76), 'male_single': np.float64(0.89)}, 'status': 'success', 'total_time': 5.905391693115234, 'fit_time': np.float64(1.1525502681732178), 'score_time': np.float64(0.004788637161254883), 'absolute_time': 1746692621.3717055, 'flatten_demographic_parity_ratio': '0.0_0.64_0.71_0.63_0.75', 'flatten_balanced_accuracy': '0.66_0.7_0.62_0.62_0.62'}
214
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9527272727272728), 'balanced_accuracy': np.float64(0.5247619047619048), 'by_group': {'female_div/dep/mar': np.float64(0.97), 'male_div/sep': np.float64(0.96), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.96)}, 'status': 'success', 'total_time': 16.327256202697754, 'fit_time': np.float64(2.7200241088867188), 'score_time': np.float64(0.00653681755065918), 'absolute_time': 1746692637.969946, 'flatten_demographic_parity_ratio': '0.96_0.9_1.0_0.9_1.0', 'flatten_balanced_accuracy': '0.54_0.57_0.5_0.52_0.5'}
215
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(50), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.41978159455223674), 'balanced_accuracy': np.float64(0.594047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.73), 'male_div/sep': np.float64(0.47), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.67)}, 'status': 'success', 'total_time': 0.8160881996154785, 'fit_time': np.float64(0.140137243270874), 'score_time': np.float64(0.0038158416748046873), 'absolute_time': 1746692639.0433195, 'flatten_demographic_parity_ratio': '0.33_0.39_0.45_0.64_0.29', 'flatten_balanced_accuracy': '0.65_0.65_0.55_0.52_0.6'}
/usr/local/lib/python3.12/site-packages/numpy/_core/_methods.py:194: RuntimeWarning: overflow encountered in multiply
  x = um.multiply(x, x, out=x)
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 9}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 9}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')} was NaN

216
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 9}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 19.47370481491089, 'fit_time': np.float64(3.192393398284912), 'score_time': np.float64(0.007137012481689453), 'absolute_time': 1746692658.8084762, 'flatten_demographic_parity_ratio': 'nan_nan_nan_nan_nan', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
217
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 14, 'weights': np.str_('distance')}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.8828321208909445), 'balanced_accuracy': np.float64(0.5307142857142857), 'by_group': {'female_div/dep/mar': np.float64(0.93), 'male_div/sep': np.float64(0.9), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.92)}, 'status': 'success', 'total_time': 0.5711202621459961, 'fit_time': np.float64(0.0014623641967773438), 'score_time': np.float64(0.05167694091796875), 'absolute_time': 1746692659.6411052, 'flatten_demographic_parity_ratio': '0.85_0.93_0.94_0.84_0.84', 'flatten_balanced_accuracy': '0.52_0.58_0.52_0.53_0.51'}
218
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('SelectKBest'), 'k': 9}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.5244835962000647), 'balanced_accuracy': np.float64(0.695952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.75), 'male_div/sep': np.float64(0.6), 'male_mar/wid': np.float64(0.79), 'male_single': np.float64(0.95)}, 'status': 'success', 'total_time': 0.7313768863677979, 'fit_time': np.float64(0.10836420059204102), 'score_time': np.float64(0.01042475700378418), 'absolute_time': 1746692660.678177, 'flatten_demographic_parity_ratio': '0.51_0.44_0.49_0.68_0.5', 'flatten_balanced_accuracy': '0.66_0.66_0.75_0.67_0.74'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 609, in objective
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_param_validation.py", line 216, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 431, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 517, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 5 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
5 fits failed with the following error:
Traceback (most recent call last):
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 866, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "/usr/local/lib/python3.12/site-packages/sklearn/base.py", line 1389, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 518, in fit
    Xt, yt = self._fit(X, y, routed_params, raw_params=params)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 430, in _fit
    X, fitted_transformer = fit_transform_one_cached(
                            ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/joblib/memory.py", line 312, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 1383, in _fit_transform_one
    res = transformer.fit_transform(X, y, **params.get("fit_transform", {}))
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_set_output.py", line 319, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 76, in fit_transform
    df_X, df_y = self._prepare_dataset(X, y, fit=True)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 37, in _prepare_dataset
    raise Exception("No sensitive features to mitigate")
Exception: No sensitive features to mitigate


219
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 13, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.04582691192626953, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692661.0312164}
220
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(50)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.5149993896484375, 'fit_time': np.float64(0.07289242744445801), 'score_time': np.float64(0.007692480087280273), 'absolute_time': 1746692661.8508127, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
221
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 20, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.6337264974404395), 'balanced_accuracy': np.float64(0.6685714285714285), 'by_group': {'female_div/dep/mar': np.float64(0.8), 'male_div/sep': np.float64(0.72), 'male_mar/wid': np.float64(0.95), 'male_single': np.float64(0.87)}, 'status': 'success', 'total_time': 1.1357243061065674, 'fit_time': np.float64(0.05773167610168457), 'score_time': np.float64(0.07501773834228516), 'absolute_time': 1746692667.1933525, 'flatten_demographic_parity_ratio': '0.23_0.85_0.75_0.77_0.57', 'flatten_balanced_accuracy': '0.67_0.68_0.68_0.64_0.67'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

222
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 5, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0004734992980957031, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692667.522484}
223
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_features_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.6486284189509995), 'balanced_accuracy': np.float64(0.6180952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.78), 'male_div/sep': np.float64(0.73), 'male_mar/wid': np.float64(0.91), 'male_single': np.float64(0.82)}, 'status': 'success', 'total_time': 0.8527028560638428, 'fit_time': np.float64(0.1441028118133545), 'score_time': np.float64(0.00570521354675293), 'absolute_time': 1746692668.6875315, 'flatten_demographic_parity_ratio': '0.7_0.78_0.59_0.68_0.5', 'flatten_balanced_accuracy': '0.63_0.61_0.62_0.6_0.63'}
224
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 21.06161117553711, 'fit_time': np.float64(4.186538934707642), 'score_time': np.float64(0.005650234222412109), 'absolute_time': 1746692690.0150084, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
225
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_split': 6, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.6183274160396017), 'balanced_accuracy': np.float64(0.577857142857143), 'by_group': {'female_div/dep/mar': np.float64(0.68), 'male_div/sep': np.float64(0.73), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.83)}, 'status': 'success', 'total_time': 0.9733459949493408, 'fit_time': np.float64(0.16074032783508302), 'score_time': np.float64(0.009605216979980468), 'absolute_time': 1746692691.27777, 'flatten_demographic_parity_ratio': '0.54_0.35_0.75_0.65_0.8', 'flatten_balanced_accuracy': '0.68_0.64_0.53_0.54_0.5'}
226
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.4227073891110589), 'balanced_accuracy': np.float64(0.6445238095238095), 'by_group': {'female_div/dep/mar': np.float64(0.77), 'male_div/sep': np.float64(0.51), 'male_mar/wid': np.float64(0.92), 'male_single': np.float64(0.67)}, 'status': 'success', 'total_time': 0.21972155570983887, 'fit_time': np.float64(0.01900320053100586), 'score_time': np.float64(0.004590606689453125), 'absolute_time': 1746692691.7649553, 'flatten_demographic_parity_ratio': '0.23_0.55_0.53_0.61_0.19', 'flatten_balanced_accuracy': '0.7_0.64_0.66_0.6_0.62'}
227
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 7}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.6394300126103405), 'balanced_accuracy': np.float64(0.5595238095238095), 'by_group': {'female_div/dep/mar': np.float64(0.72), 'male_div/sep': np.float64(0.84), 'male_mar/wid': np.float64(0.8), 'male_single': np.float64(0.76)}, 'status': 'success', 'total_time': 1.0802092552185059, 'fit_time': np.float64(0.17558012008666993), 'score_time': np.float64(0.004455280303955078), 'absolute_time': 1746692693.1159666, 'flatten_demographic_parity_ratio': '0.72_0.82_0.9_0.76_0.0', 'flatten_balanced_accuracy': '0.57_0.64_0.43_0.67_0.49'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

228
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 5, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0003943443298339844, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692693.3857183}
229
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.6079016897081413), 'balanced_accuracy': np.float64(0.6683333333333333), 'by_group': {'female_div/dep/mar': np.float64(0.67), 'male_div/sep': np.float64(0.94), 'male_mar/wid': np.float64(0.83), 'male_single': np.float64(0.76)}, 'status': 'success', 'total_time': 1.2785663604736328, 'fit_time': np.float64(0.2298288345336914), 'score_time': np.float64(0.005510854721069336), 'absolute_time': 1746692695.0246544, 'flatten_demographic_parity_ratio': '0.72_0.71_0.48_0.6_0.52', 'flatten_balanced_accuracy': '0.66_0.68_0.7_0.62_0.68'}
230
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.07714285714285715), 'balanced_accuracy': np.float64(0.5364285714285714), 'by_group': {'female_div/dep/mar': np.float64(0.54), 'male_div/sep': np.float64(0.28), 'male_mar/wid': np.float64(0.81), 'male_single': np.float64(0.54)}, 'status': 'success', 'total_time': 0.8258590698242188, 'fit_time': np.float64(0.13904185295104982), 'score_time': np.float64(0.005762958526611328), 'absolute_time': 1746692696.128622, 'flatten_demographic_parity_ratio': '0.0_0.13_0.26_0.0_0.0', 'flatten_balanced_accuracy': '0.51_0.57_0.57_0.51_0.53'}
231
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 4, 'n_estimators': np.int64(25)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.7239469619744849), 'balanced_accuracy': np.float64(0.5650000000000001), 'by_group': {'female_div/dep/mar': np.float64(0.87), 'male_div/sep': np.float64(0.83), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.76)}, 'status': 'success', 'total_time': 24.098889112472534, 'fit_time': np.float64(4.791708183288574), 'score_time': np.float64(0.006551885604858398), 'absolute_time': 1746692724.264881, 'flatten_demographic_parity_ratio': '0.8_0.68_0.73_0.78_0.63', 'flatten_balanced_accuracy': '0.59_0.58_0.55_0.55_0.56'}
232
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.6241735453486605), 'balanced_accuracy': np.float64(0.5966666666666667), 'by_group': {'female_div/dep/mar': np.float64(0.8), 'male_div/sep': np.float64(0.71), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.92)}, 'status': 'success', 'total_time': 0.791297435760498, 'fit_time': np.float64(0.13519043922424318), 'score_time': np.float64(0.004253244400024414), 'absolute_time': 1746692725.3816772, 'flatten_demographic_parity_ratio': '0.79_0.48_0.47_0.54_0.84', 'flatten_balanced_accuracy': '0.57_0.61_0.66_0.57_0.58'}
233
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 16, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.8489004251463352), 'balanced_accuracy': np.float64(0.6154761904761905), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.9), 'male_mar/wid': np.float64(0.95), 'male_single': np.float64(0.95)}, 'status': 'success', 'total_time': 0.22688078880310059, 'fit_time': np.float64(0.005076885223388672), 'score_time': np.float64(0.012600994110107422), 'absolute_time': 1746692725.8890111, 'flatten_demographic_parity_ratio': '0.79_0.88_0.91_0.92_0.74', 'flatten_balanced_accuracy': '0.66_0.64_0.51_0.65_0.62'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

234
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.00041604042053222656, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692726.1682668}
235
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(25), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.4004708624708625), 'balanced_accuracy': np.float64(0.6621428571428571), 'by_group': {'female_div/dep/mar': np.float64(0.7), 'male_div/sep': np.float64(0.4), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.9)}, 'status': 'success', 'total_time': 2.3824057579040527, 'fit_time': np.float64(0.45156006813049315), 'score_time': np.float64(0.0050391674041748045), 'absolute_time': 1746692728.8280919, 'flatten_demographic_parity_ratio': '0.16_0.42_0.6_0.51_0.32', 'flatten_balanced_accuracy': '0.64_0.66_0.71_0.62_0.68'}
236
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_features_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.7767765289738724), 'balanced_accuracy': np.float64(0.6080952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.81), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.9)}, 'status': 'success', 'total_time': 0.5709309577941895, 'fit_time': np.float64(0.09066944122314453), 'score_time': np.float64(0.004498338699340821), 'absolute_time': 1746692729.6757543, 'flatten_demographic_parity_ratio': '0.69_0.86_0.85_0.61_0.87', 'flatten_balanced_accuracy': '0.61_0.59_0.55_0.63_0.65'}
237
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.683076923076923), 'balanced_accuracy': np.float64(0.5123809523809524), 'by_group': {'female_div/dep/mar': np.float64(0.96), 'male_div/sep': np.float64(0.68), 'male_mar/wid': np.float64(0.8), 'male_single': np.float64(0.84)}, 'status': 'success', 'total_time': 11.14736557006836, 'fit_time': np.float64(2.200347423553467), 'score_time': np.float64(0.007910490036010742), 'absolute_time': 1746692745.2881825, 'flatten_demographic_parity_ratio': '0.42_1.0_0.0_1.0_1.0', 'flatten_balanced_accuracy': '0.55_0.5_0.51_0.5_0.5'}
238
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.6531335064593425), 'balanced_accuracy': np.float64(0.5385714285714286), 'by_group': {'female_div/dep/mar': np.float64(0.79), 'male_div/sep': np.float64(0.92), 'male_mar/wid': np.float64(0.79), 'male_single': np.float64(0.87)}, 'status': 'success', 'total_time': 10.30491328239441, 'fit_time': np.float64(2.034350347518921), 'score_time': np.float64(0.006258916854858398), 'absolute_time': 1746692755.8740911, 'flatten_demographic_parity_ratio': '0.85_0.4_0.78_0.65_0.59', 'flatten_balanced_accuracy': '0.59_0.56_0.46_0.53_0.56'}
239
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.44705976818880044), 'balanced_accuracy': np.float64(0.6314285714285715), 'by_group': {'female_div/dep/mar': np.float64(0.63), 'male_div/sep': np.float64(0.52), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.79)}, 'status': 'success', 'total_time': 0.8400352001190186, 'fit_time': np.float64(0.14504718780517578), 'score_time': np.float64(0.004280710220336914), 'absolute_time': 1746692756.9930177, 'flatten_demographic_parity_ratio': '0.33_0.51_0.57_0.66_0.16', 'flatten_balanced_accuracy': '0.67_0.62_0.63_0.63_0.62'}
240
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 14, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 3}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.6116572529785353), 'balanced_accuracy': np.float64(0.5719047619047618), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.9), 'male_mar/wid': np.float64(0.7), 'male_single': np.float64(0.88)}, 'status': 'success', 'total_time': 0.4351682662963867, 'fit_time': np.float64(0.044169044494628905), 'score_time': np.float64(0.015668249130249022), 'absolute_time': 1746692757.7096457, 'flatten_demographic_parity_ratio': '0.56_0.44_0.74_0.79_0.53', 'flatten_balanced_accuracy': '0.6_0.59_0.55_0.58_0.54'}
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 3}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_features_normalization_mitigation_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 3}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_features_normalization_mitigation_classification')} was NaN

241
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 3}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_features_normalization_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5757142857142857), 'by_group': {'female_div/dep/mar': np.float64(0.84), 'male_div/sep': np.float64(0.63), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.91)}, 'status': 'fail', 'total_time': 0.5686149597167969, 'fit_time': np.float64(0.07853989601135254), 'score_time': np.float64(0.0037393569946289062), 'absolute_time': 1746692758.5623078, 'flatten_demographic_parity_ratio': '0.65_0.6_nan_nan_nan', 'flatten_balanced_accuracy': '0.7_0.68_0.5_0.5_0.5'}
242
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 13, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.5447053407422071), 'balanced_accuracy': np.float64(0.6445238095238095), 'by_group': {'female_div/dep/mar': np.float64(0.75), 'male_div/sep': np.float64(0.64), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.82)}, 'status': 'success', 'total_time': 0.5345985889434814, 'fit_time': np.float64(0.07871785163879394), 'score_time': np.float64(0.007058143615722656), 'absolute_time': 1746692759.3826413, 'flatten_demographic_parity_ratio': '0.63_0.49_0.63_0.27_0.7', 'flatten_balanced_accuracy': '0.7_0.63_0.61_0.66_0.62'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 609, in objective
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_param_validation.py", line 216, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 431, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 517, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 5 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
5 fits failed with the following error:
Traceback (most recent call last):
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 866, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "/usr/local/lib/python3.12/site-packages/sklearn/base.py", line 1389, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 518, in fit
    Xt, yt = self._fit(X, y, routed_params, raw_params=params)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 430, in _fit
    X, fitted_transformer = fit_transform_one_cached(
                            ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/joblib/memory.py", line 312, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 1383, in _fit_transform_one
    res = transformer.fit_transform(X, y, **params.get("fit_transform", {}))
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_set_output.py", line 319, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 76, in fit_transform
    df_X, df_y = self._prepare_dataset(X, y, fit=True)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 37, in _prepare_dataset
    raise Exception("No sensitive features to mitigate")
Exception: No sensitive features to mitigate


243
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 7}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.023128032684326172, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692759.694746}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 609, in objective
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_param_validation.py", line 216, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 431, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 517, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 5 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
5 fits failed with the following error:
Traceback (most recent call last):
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 866, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "/usr/local/lib/python3.12/site-packages/sklearn/base.py", line 1389, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 518, in fit
    Xt, yt = self._fit(X, y, routed_params, raw_params=params)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 430, in _fit
    X, fitted_transformer = fit_transform_one_cached(
                            ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/joblib/memory.py", line 312, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 1383, in _fit_transform_one
    res = transformer.fit_transform(X, y, **params.get("fit_transform", {}))
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_set_output.py", line 319, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 76, in fit_transform
    df_X, df_y = self._prepare_dataset(X, y, fit=True)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 37, in _prepare_dataset
    raise Exception("No sensitive features to mitigate")
Exception: No sensitive features to mitigate


244
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(50), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.018570423126220703, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692760.0018682}
245
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.6278083324432373, 'fit_time': np.float64(0.10664901733398438), 'score_time': np.float64(0.002179718017578125), 'absolute_time': 1746692764.9921784, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
246
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.7660379032741637), 'balanced_accuracy': np.float64(0.615952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.85), 'male_div/sep': np.float64(0.89), 'male_mar/wid': np.float64(0.93), 'male_single': np.float64(0.87)}, 'status': 'success', 'total_time': 0.6674344539642334, 'fit_time': np.float64(0.11138176918029785), 'score_time': np.float64(0.0035986900329589844), 'absolute_time': 1746692765.9473844, 'flatten_demographic_parity_ratio': '0.65_0.78_0.78_0.8_0.82', 'flatten_balanced_accuracy': '0.67_0.61_0.61_0.64_0.55'}
247
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.6671907263908394), 'balanced_accuracy': np.float64(0.5616666666666668), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.82), 'male_mar/wid': np.float64(0.83), 'male_single': np.float64(0.87)}, 'status': 'success', 'total_time': 2.198467254638672, 'fit_time': np.float64(0.41559634208679197), 'score_time': np.float64(0.004861021041870117), 'absolute_time': 1746692768.4381673, 'flatten_demographic_parity_ratio': '0.69_0.76_0.56_0.87_0.46', 'flatten_balanced_accuracy': '0.57_0.57_0.58_0.5_0.59'}
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')} was NaN

248
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.13993239402770996, 'fit_time': np.float64(0.007636117935180664), 'score_time': np.float64(0.0027269840240478514), 'absolute_time': 1746692768.8700254, 'flatten_demographic_parity_ratio': 'nan_nan_nan_nan_nan', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
249
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 4, 'max_leaf_nodes': 2, 'min_samples_split': 5, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.5684469151155882), 'balanced_accuracy': np.float64(0.6711904761904762), 'by_group': {'female_div/dep/mar': np.float64(0.84), 'male_div/sep': np.float64(0.57), 'male_mar/wid': np.float64(0.83), 'male_single': np.float64(0.94)}, 'status': 'success', 'total_time': 0.24004411697387695, 'fit_time': np.float64(0.02390732765197754), 'score_time': np.float64(0.004797935485839844), 'absolute_time': 1746692769.4003341, 'flatten_demographic_parity_ratio': '0.5_0.65_0.33_0.76_0.61', 'flatten_balanced_accuracy': '0.65_0.69_0.69_0.64_0.69'}
250
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.4276967159824303), 'balanced_accuracy': np.float64(0.6597619047619048), 'by_group': {'female_div/dep/mar': np.float64(0.63), 'male_div/sep': np.float64(0.47), 'male_mar/wid': np.float64(0.89), 'male_single': np.float64(0.93)}, 'status': 'success', 'total_time': 1.0550236701965332, 'fit_time': np.float64(0.04038572311401367), 'score_time': np.float64(0.07276215553283691), 'absolute_time': 1746692770.747736, 'flatten_demographic_parity_ratio': '0.22_0.36_0.47_0.57_0.52', 'flatten_balanced_accuracy': '0.65_0.71_0.69_0.63_0.63'}
251
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 5, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9389691540430574), 'balanced_accuracy': np.float64(0.545952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.97), 'male_div/sep': np.float64(0.98), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.96)}, 'status': 'success', 'total_time': 0.5192611217498779, 'fit_time': np.float64(0.07625622749328613), 'score_time': np.float64(0.0055773258209228516), 'absolute_time': 1746692771.582929, 'flatten_demographic_parity_ratio': '0.94_0.92_0.96_0.91_0.97', 'flatten_balanced_accuracy': '0.55_0.53_0.53_0.58_0.53'}
252
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 4, 'min_samples_split': 5, 'n_estimators': np.int64(75)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9327272727272728), 'balanced_accuracy': np.float64(0.5288095238095238), 'by_group': {'female_div/dep/mar': np.float64(0.97), 'male_div/sep': np.float64(0.94), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.95)}, 'status': 'success', 'total_time': 15.336792469024658, 'fit_time': np.float64(3.0307144641876222), 'score_time': np.float64(0.011543846130371094), 'absolute_time': 1746692787.2248456, 'flatten_demographic_parity_ratio': '0.96_0.9_1.0_0.9_0.9', 'flatten_balanced_accuracy': '0.54_0.57_0.5_0.52_0.52'}
253
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.590401964098908), 'balanced_accuracy': np.float64(0.6611904761904761), 'by_group': {'female_div/dep/mar': np.float64(0.82), 'male_div/sep': np.float64(0.68), 'male_mar/wid': np.float64(0.81), 'male_single': np.float64(0.95)}, 'status': 'success', 'total_time': 1.7820229530334473, 'fit_time': np.float64(0.33243379592895506), 'score_time': np.float64(0.004582071304321289), 'absolute_time': 1746692793.5838685, 'flatten_demographic_parity_ratio': '0.19_0.62_0.79_0.7_0.66', 'flatten_balanced_accuracy': '0.65_0.71_0.68_0.63_0.64'}
254
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 13, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.8512137694845258), 'balanced_accuracy': np.float64(0.5473809523809524), 'by_group': {'female_div/dep/mar': np.float64(0.85), 'male_div/sep': np.float64(0.97), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.92)}, 'status': 'success', 'total_time': 0.2158372402191162, 'fit_time': np.float64(0.004522848129272461), 'score_time': np.float64(0.012285614013671875), 'absolute_time': 1746692794.1380386, 'flatten_demographic_parity_ratio': '0.89_0.85_0.81_0.87_0.84', 'flatten_balanced_accuracy': '0.56_0.5_0.54_0.6_0.54'}
255
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.6218986175115206), 'balanced_accuracy': np.float64(0.5404761904761906), 'by_group': {'female_div/dep/mar': np.float64(0.94), 'male_div/sep': np.float64(0.64), 'male_mar/wid': np.float64(0.8), 'male_single': np.float64(0.73)}, 'status': 'success', 'total_time': 13.840829372406006, 'fit_time': np.float64(2.7404422760009766), 'score_time': np.float64(0.006258201599121094), 'absolute_time': 1746692808.2786443, 'flatten_demographic_parity_ratio': '0.83_0.9_0.0_1.0_0.38', 'flatten_balanced_accuracy': '0.62_0.55_0.5_0.5_0.52'}
256
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.5422717343818262), 'balanced_accuracy': np.float64(0.5388095238095238), 'by_group': {'female_div/dep/mar': np.float64(0.8), 'male_div/sep': np.float64(0.58), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.65)}, 'status': 'success', 'total_time': 0.8691418170928955, 'fit_time': np.float64(0.14937739372253417), 'score_time': np.float64(0.004631471633911133), 'absolute_time': 1746692809.5121312, 'flatten_demographic_parity_ratio': '0.64_0.48_0.7_0.51_0.38', 'flatten_balanced_accuracy': '0.6_0.55_0.55_0.5_0.49'}
257
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 3, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.19801950454711914, 'fit_time': np.float64(0.015648841857910156), 'score_time': np.float64(0.004055500030517578), 'absolute_time': 1746692810.0694141, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

258
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 15, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0004291534423828125, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692810.4317994}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

259
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 5, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0003616809844970703, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692810.7929323}
260
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 3}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.5728011286632411), 'balanced_accuracy': np.float64(0.6371428571428572), 'by_group': {'female_div/dep/mar': np.float64(0.94), 'male_div/sep': np.float64(0.7), 'male_mar/wid': np.float64(0.77), 'male_single': np.float64(0.84)}, 'status': 'success', 'total_time': 0.9712607860565186, 'fit_time': np.float64(0.1583498477935791), 'score_time': np.float64(0.0035008907318115233), 'absolute_time': 1746692812.1299627, 'flatten_demographic_parity_ratio': '0.63_0.53_0.7_0.66_0.35', 'flatten_balanced_accuracy': '0.72_0.63_0.52_0.64_0.67'}
261
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.6704903018361261), 'balanced_accuracy': np.float64(0.5680952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.86), 'male_div/sep': np.float64(0.77), 'male_mar/wid': np.float64(0.94), 'male_single': np.float64(0.81)}, 'status': 'success', 'total_time': 0.5567748546600342, 'fit_time': np.float64(0.08796467781066894), 'score_time': np.float64(0.004219579696655274), 'absolute_time': 1746692817.657851, 'flatten_demographic_parity_ratio': '0.61_0.91_0.7_0.5_0.63', 'flatten_balanced_accuracy': '0.59_0.65_0.55_0.55_0.49'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

262
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 5, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.00043773651123046875, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692817.9787328}
263
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.4965856079404466), 'balanced_accuracy': np.float64(0.6485714285714285), 'by_group': {'female_div/dep/mar': np.float64(0.6), 'male_div/sep': np.float64(0.6), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.78)}, 'status': 'success', 'total_time': 1.2069952487945557, 'fit_time': np.float64(0.217946195602417), 'score_time': np.float64(0.004546451568603516), 'absolute_time': 1746692819.5015943, 'flatten_demographic_parity_ratio': '0.54_0.39_0.59_0.53_0.44', 'flatten_balanced_accuracy': '0.65_0.67_0.64_0.64_0.65'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

264
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.00046515464782714844, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692819.823298}
265
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 4, 'max_features': 4, 'max_leaf_nodes': 3, 'min_samples_split': 2, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.3576605578329716), 'balanced_accuracy': np.float64(0.6223809523809523), 'by_group': {'female_div/dep/mar': np.float64(0.86), 'male_div/sep': np.float64(0.48), 'male_mar/wid': np.float64(0.6), 'male_single': np.float64(0.84)}, 'status': 'success', 'total_time': 0.35564088821411133, 'fit_time': np.float64(0.046642398834228514), 'score_time': np.float64(0.004926109313964843), 'absolute_time': 1746692820.4983494, 'flatten_demographic_parity_ratio': '0.39_0.77_0.63_0.0_0.0', 'flatten_balanced_accuracy': '0.59_0.67_0.71_0.56_0.58'}
266
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 16, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.7476010758150046), 'balanced_accuracy': np.float64(0.655), 'by_group': {'female_div/dep/mar': np.float64(0.86), 'male_div/sep': np.float64(0.83), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.84)}, 'status': 'success', 'total_time': 0.32556891441345215, 'fit_time': np.float64(0.029227590560913085), 'score_time': np.float64(0.009350347518920898), 'absolute_time': 1746692821.1451812, 'flatten_demographic_parity_ratio': '0.86_0.89_0.73_0.78_0.48', 'flatten_balanced_accuracy': '0.67_0.71_0.69_0.52_0.69'}
267
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('adam')}, 'features': {'type': np.str_('SelectKBest'), 'k': 1}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.6405678609260952), 'balanced_accuracy': np.float64(0.6835714285714285), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.71), 'male_mar/wid': np.float64(0.76), 'male_single': np.float64(0.92)}, 'status': 'success', 'total_time': 1.0616042613983154, 'fit_time': np.float64(0.19248108863830565), 'score_time': np.float64(0.0023019790649414064), 'absolute_time': 1746692822.5228455, 'flatten_demographic_parity_ratio': '0.41_0.54_0.82_0.7_0.74', 'flatten_balanced_accuracy': '0.68_0.69_0.72_0.65_0.69'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

268
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_split': 6, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0004601478576660156, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692822.8430493}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

269
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 4, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('rebalancing_features_normalization_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0005307197570800781, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692827.7439651}
270
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 1}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.4438046612617902), 'balanced_accuracy': np.float64(0.665), 'by_group': {'female_div/dep/mar': np.float64(0.57), 'male_div/sep': np.float64(0.51), 'male_mar/wid': np.float64(0.59), 'male_single': np.float64(0.98)}, 'status': 'success', 'total_time': 1.4009482860565186, 'fit_time': np.float64(0.24001264572143555), 'score_time': np.float64(0.004720449447631836), 'absolute_time': 1746692829.4629118, 'flatten_demographic_parity_ratio': '0.27_0.4_0.48_0.51_0.56', 'flatten_balanced_accuracy': '0.63_0.67_0.68_0.65_0.7'}
271
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 9, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.8378720850967138), 'balanced_accuracy': np.float64(0.5292857142857144), 'by_group': {'female_div/dep/mar': np.float64(0.93), 'male_div/sep': np.float64(0.89), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.87)}, 'status': 'success', 'total_time': 8.848292350769043, 'fit_time': np.float64(1.642238712310791), 'score_time': np.float64(0.07236380577087402), 'absolute_time': 1746692838.6473072, 'flatten_demographic_parity_ratio': '1.0_0.79_0.72_0.89_0.78', 'flatten_balanced_accuracy': '0.5_0.6_0.54_0.49_0.52'}
272
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 6, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.5727179487179488), 'balanced_accuracy': np.float64(0.6300000000000001), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.57), 'male_mar/wid': np.float64(0.9), 'male_single': np.float64(0.92)}, 'status': 'success', 'total_time': 0.4680471420288086, 'fit_time': np.float64(0.03622560501098633), 'score_time': np.float64(0.014588546752929688), 'absolute_time': 1746692839.437081, 'flatten_demographic_parity_ratio': '0.41_0.51_0.72_0.63_0.58', 'flatten_balanced_accuracy': '0.64_0.63_0.67_0.62_0.59'}
273
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 1, 'max_leaf_nodes': 6, 'min_samples_split': 4, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.49388132564082543), 'balanced_accuracy': np.float64(0.6404761904761905), 'by_group': {'female_div/dep/mar': np.float64(0.77), 'male_div/sep': np.float64(0.55), 'male_mar/wid': np.float64(0.8), 'male_single': np.float64(0.88)}, 'status': 'success', 'total_time': 0.3080458641052246, 'fit_time': np.float64(0.03824615478515625), 'score_time': np.float64(0.004443740844726563), 'absolute_time': 1746692840.0738668, 'flatten_demographic_parity_ratio': '0.46_0.35_0.55_0.53_0.58', 'flatten_balanced_accuracy': '0.65_0.67_0.68_0.57_0.62'}
274
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 9, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.97925884546429), 'balanced_accuracy': np.float64(0.5066666666666666), 'by_group': {'female_div/dep/mar': np.float64(0.98), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.98)}, 'status': 'success', 'total_time': 14.711119413375854, 'fit_time': np.float64(1.024977684020996), 'score_time': np.float64(0.010087013244628906), 'absolute_time': 1746692855.115082, 'flatten_demographic_parity_ratio': '1.0_0.97_0.98_1.0_0.94', 'flatten_balanced_accuracy': '0.5_0.51_0.49_0.5_0.53'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

275
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_features_normalization_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0005519390106201172, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692855.4634523}
276
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(50), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.38239540276237527), 'balanced_accuracy': np.float64(0.5626190476190476), 'by_group': {'female_div/dep/mar': np.float64(0.76), 'male_div/sep': np.float64(0.44), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.58)}, 'status': 'success', 'total_time': 1.4927761554718018, 'fit_time': np.float64(0.27466526031494143), 'score_time': np.float64(0.004470920562744141), 'absolute_time': 1746692857.2922223, 'flatten_demographic_parity_ratio': '0.42_0.6_0.63_0.27_0.0', 'flatten_balanced_accuracy': '0.61_0.57_0.57_0.52_0.55'}
The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 16, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 1}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 16, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 1}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')} was NaN

277
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 16, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 1}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.14626765251159668, 'fit_time': np.float64(0.005854558944702148), 'score_time': np.float64(0.004201078414916992), 'absolute_time': 1746692857.8793874, 'flatten_demographic_parity_ratio': 'nan_nan_nan_nan_nan', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

278
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0003819465637207031, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692862.8003943}
279
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.5152037422037422), 'balanced_accuracy': np.float64(0.5095238095238096), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.56), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.7)}, 'status': 'success', 'total_time': 0.41336607933044434, 'fit_time': np.float64(0.0402946949005127), 'score_time': np.float64(0.013456201553344727), 'absolute_time': 1746692863.5420794, 'flatten_demographic_parity_ratio': '0.54_0.66_0.75_0.48_0.15', 'flatten_balanced_accuracy': '0.56_0.54_0.48_0.49_0.48'}
280
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 4, 'max_leaf_nodes': 2, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 2}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.22469258308410645, 'fit_time': np.float64(0.020269060134887697), 'score_time': np.float64(0.004447841644287109), 'absolute_time': 1746692864.1568027, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
281
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 3}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.817465981821524), 'balanced_accuracy': np.float64(0.5378571428571428), 'by_group': {'female_div/dep/mar': np.float64(0.86), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(0.9), 'male_single': np.float64(0.84)}, 'status': 'success', 'total_time': 0.3259294033050537, 'fit_time': np.float64(0.020014476776123048), 'score_time': np.float64(0.015032386779785157), 'absolute_time': 1746692864.8737786, 'flatten_demographic_parity_ratio': '0.91_0.77_0.78_0.74_0.89', 'flatten_balanced_accuracy': '0.53_0.56_0.52_0.55_0.52'}
282
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.518978494623656), 'balanced_accuracy': np.float64(0.6104761904761904), 'by_group': {'female_div/dep/mar': np.float64(0.69), 'male_div/sep': np.float64(0.52), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.9)}, 'status': 'success', 'total_time': 0.4355018138885498, 'fit_time': np.float64(0.012779664993286134), 'score_time': np.float64(0.02939434051513672), 'absolute_time': 1746692865.7032452, 'flatten_demographic_parity_ratio': '0.65_0.45_0.23_0.63_0.63', 'flatten_balanced_accuracy': '0.57_0.62_0.6_0.64_0.62'}
283
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 2, 'max_leaf_nodes': 6, 'min_samples_split': 4, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.2664639949798584, 'fit_time': np.float64(0.02998185157775879), 'score_time': np.float64(0.004055023193359375), 'absolute_time': 1746692866.4027905, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
284
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(25), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.5476073247635218), 'balanced_accuracy': np.float64(0.5138095238095238), 'by_group': {'female_div/dep/mar': np.float64(0.75), 'male_div/sep': np.float64(0.67), 'male_mar/wid': np.float64(0.86), 'male_single': np.float64(0.73)}, 'status': 'success', 'total_time': 10.7975914478302, 'fit_time': np.float64(1.6285398483276368), 'score_time': np.float64(0.006703662872314453), 'absolute_time': 1746692877.6001086, 'flatten_demographic_parity_ratio': '0.36_0.68_0.82_0.51_0.38', 'flatten_balanced_accuracy': '0.52_0.58_0.47_0.5_0.49'}
285
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.802914367792947), 'balanced_accuracy': np.float64(0.5928571428571429), 'by_group': {'female_div/dep/mar': np.float64(0.82), 'male_div/sep': np.float64(0.88), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.95)}, 'status': 'success', 'total_time': 1.0505030155181885, 'fit_time': np.float64(0.1852623462677002), 'score_time': np.float64(0.005504703521728516), 'absolute_time': 1746692883.8971813, 'flatten_demographic_parity_ratio': '0.74_1.0_0.74_0.85_0.69', 'flatten_balanced_accuracy': '0.65_0.5_0.59_0.61_0.61'}
286
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(10), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.5242061642061643), 'balanced_accuracy': np.float64(0.6680952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.85), 'male_div/sep': np.float64(0.54), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.83)}, 'status': 'success', 'total_time': 2.97739577293396, 'fit_time': np.float64(0.572364091873169), 'score_time': np.float64(0.004181051254272461), 'absolute_time': 1746692887.2163348, 'flatten_demographic_parity_ratio': '0.16_0.65_0.93_0.44_0.44', 'flatten_balanced_accuracy': '0.67_0.69_0.68_0.64_0.66'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

287
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 11, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.000400543212890625, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692887.556544}
288
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.7624623709642828), 'balanced_accuracy': np.float64(0.5414285714285714), 'by_group': {'female_div/dep/mar': np.float64(0.94), 'male_div/sep': np.float64(0.84), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.82)}, 'status': 'success', 'total_time': 4.5722880363464355, 'fit_time': np.float64(0.8855069160461426), 'score_time': np.float64(0.007857847213745116), 'absolute_time': 1746692892.468969, 'flatten_demographic_parity_ratio': '0.91_0.74_0.72_0.78_0.66', 'flatten_balanced_accuracy': '0.56_0.58_0.54_0.5_0.53'}
289
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 4}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.741103896103896), 'balanced_accuracy': np.float64(0.6823809523809523), 'by_group': {'female_div/dep/mar': np.float64(0.9), 'male_div/sep': np.float64(0.76), 'male_mar/wid': np.float64(0.94), 'male_single': np.float64(0.92)}, 'status': 'success', 'total_time': 0.2325277328491211, 'fit_time': np.float64(0.021961450576782227), 'score_time': np.float64(0.0050374031066894535), 'absolute_time': 1746692893.0540442, 'flatten_demographic_parity_ratio': '0.94_0.75_0.87_0.68_0.48', 'flatten_balanced_accuracy': '0.69_0.67_0.71_0.65_0.68'}
290
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 2, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9124977825436542), 'balanced_accuracy': np.float64(0.5607142857142857), 'by_group': {'female_div/dep/mar': np.float64(0.95), 'male_div/sep': np.float64(0.96), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.95)}, 'status': 'success', 'total_time': 0.18484878540039062, 'fit_time': np.float64(0.016496896743774414), 'score_time': np.float64(0.003054904937744141), 'absolute_time': 1746692893.5782695, 'flatten_demographic_parity_ratio': '0.96_0.89_0.95_0.8_0.96', 'flatten_balanced_accuracy': '0.63_0.57_0.53_0.56_0.52'}
291
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.6060208292968059), 'balanced_accuracy': np.float64(0.5964285714285714), 'by_group': {'female_div/dep/mar': np.float64(0.93), 'male_div/sep': np.float64(0.61), 'male_mar/wid': np.float64(0.78), 'male_single': np.float64(0.9)}, 'status': 'success', 'total_time': 4.1266608238220215, 'fit_time': np.float64(0.7926255702972412), 'score_time': np.float64(0.010082292556762695), 'absolute_time': 1746692898.0511475, 'flatten_demographic_parity_ratio': '0.56_0.51_0.71_0.52_0.73', 'flatten_balanced_accuracy': '0.67_0.6_0.63_0.55_0.53'}
292
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 19, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 9}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.4936104990899512), 'balanced_accuracy': np.float64(0.6407142857142857), 'by_group': {'female_div/dep/mar': np.float64(0.69), 'male_div/sep': np.float64(0.49), 'male_mar/wid': np.float64(0.92), 'male_single': np.float64(0.87)}, 'status': 'success', 'total_time': 0.5013930797576904, 'fit_time': np.float64(0.038346147537231444), 'score_time': np.float64(0.019937896728515626), 'absolute_time': 1746692898.901974, 'flatten_demographic_parity_ratio': '0.65_0.46_0.6_0.17_0.58', 'flatten_balanced_accuracy': '0.7_0.64_0.53_0.65_0.68'}
293
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 1, 'max_features': 4, 'max_leaf_nodes': 6, 'min_samples_split': 3, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 3}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.6756342109620798), 'balanced_accuracy': np.float64(0.5552380952380952), 'by_group': {'female_div/dep/mar': np.float64(0.85), 'male_div/sep': np.float64(0.83), 'male_mar/wid': np.float64(0.86), 'male_single': np.float64(0.77)}, 'status': 'success', 'total_time': 0.2556130886077881, 'fit_time': np.float64(0.026569509506225587), 'score_time': np.float64(0.004556131362915039), 'absolute_time': 1746692899.6268826, 'flatten_demographic_parity_ratio': '0.74_0.69_0.68_0.63_0.63', 'flatten_balanced_accuracy': '0.61_0.52_0.57_0.54_0.54'}
294
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.6982552453842255), 'balanced_accuracy': np.float64(0.6188095238095238), 'by_group': {'female_div/dep/mar': np.float64(0.8), 'male_div/sep': np.float64(0.85), 'male_mar/wid': np.float64(0.92), 'male_single': np.float64(0.75)}, 'status': 'success', 'total_time': 0.8377242088317871, 'fit_time': np.float64(0.13260445594787598), 'score_time': np.float64(0.00854954719543457), 'absolute_time': 1746692900.8810194, 'flatten_demographic_parity_ratio': '0.76_0.75_0.75_0.6_0.63', 'flatten_balanced_accuracy': '0.64_0.63_0.55_0.61_0.66'}
295
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.7380422710018657), 'balanced_accuracy': np.float64(0.5499999999999999), 'by_group': {'female_div/dep/mar': np.float64(0.84), 'male_div/sep': np.float64(0.81), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.76)}, 'status': 'success', 'total_time': 9.203413009643555, 'fit_time': np.float64(1.1837844848632812), 'score_time': np.float64(0.008902883529663086), 'absolute_time': 1746692915.3398018, 'flatten_demographic_parity_ratio': '0.86_0.74_0.77_0.51_0.81', 'flatten_balanced_accuracy': '0.6_0.58_0.54_0.51_0.52'}
296
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.7103614017373745), 'balanced_accuracy': np.float64(0.5404761904761906), 'by_group': {'female_div/dep/mar': np.float64(0.87), 'male_div/sep': np.float64(0.77), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.78)}, 'status': 'success', 'total_time': 5.991921663284302, 'fit_time': np.float64(1.169631052017212), 'score_time': np.float64(0.0065952777862548825), 'absolute_time': 1746692921.6946545, 'flatten_demographic_parity_ratio': '0.89_0.68_0.82_0.7_0.48', 'flatten_balanced_accuracy': '0.53_0.58_0.55_0.52_0.52'}
297
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 6, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 2}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.7886584953740916), 'balanced_accuracy': np.float64(0.6373809523809524), 'by_group': {'female_div/dep/mar': np.float64(0.91), 'male_div/sep': np.float64(0.88), 'male_mar/wid': np.float64(0.91), 'male_single': np.float64(0.88)}, 'status': 'success', 'total_time': 0.34911036491394043, 'fit_time': np.float64(0.00486149787902832), 'score_time': np.float64(0.012081480026245118), 'absolute_time': 1746692922.4000807, 'flatten_demographic_parity_ratio': '0.53_0.96_0.91_0.78_0.76', 'flatten_balanced_accuracy': '0.62_0.63_0.68_0.62_0.63'}
298
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_split': 5, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.2395036220550537, 'fit_time': np.float64(0.02146258354187012), 'score_time': np.float64(0.004587507247924805), 'absolute_time': 1746692922.988404, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
299
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 3}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.8229729827414836), 'balanced_accuracy': np.float64(0.5478571428571428), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.88), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.9)}, 'status': 'success', 'total_time': 0.28976011276245117, 'fit_time': np.float64(0.017165708541870116), 'score_time': np.float64(0.013216924667358399), 'absolute_time': 1746692923.6257353, 'flatten_demographic_parity_ratio': '0.85_0.86_0.76_0.78_0.86', 'flatten_balanced_accuracy': '0.51_0.58_0.56_0.54_0.54'}
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification')} was NaN

300
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5452380952380953), 'by_group': {'female_div/dep/mar': np.float64(0.82), 'male_div/sep': np.float64(0.59), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.88)}, 'status': 'fail', 'total_time': 0.42272496223449707, 'fit_time': np.float64(0.06126108169555664), 'score_time': np.float64(0.003851652145385742), 'absolute_time': 1746692924.399579, 'flatten_demographic_parity_ratio': '0.0_0.55_0.8_nan_0.95', 'flatten_balanced_accuracy': '0.52_0.67_0.54_0.5_0.5'}
301
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_split': 2, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('SelectKBest'), 'k': 3}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.96), 'balanced_accuracy': np.float64(0.509047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.98), 'male_div/sep': np.float64(0.96), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.99)}, 'status': 'success', 'total_time': 29.265809297561646, 'fit_time': np.float64(1.1050713539123536), 'score_time': np.float64(0.010367870330810547), 'absolute_time': 1746692958.925412, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_0.8_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.55_0.5'}
302
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 1, 'max_features': 4, 'max_leaf_nodes': 4, 'min_samples_split': 6, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9905882352941177), 'balanced_accuracy': np.float64(0.5059523809523809), 'by_group': {'female_div/dep/mar': np.float64(0.99), 'male_div/sep': np.float64(0.99), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 18.937223196029663, 'fit_time': np.float64(3.7533548355102537), 'score_time': np.float64(0.010016059875488282), 'absolute_time': 1746692978.2183743, 'flatten_demographic_parity_ratio': '0.95_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.53_0.5_0.5_0.5_0.5'}
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(50), 'solver': np.str_('sgd')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(50), 'solver': np.str_('sgd')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')} was NaN

303
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(50), 'solver': np.str_('sgd')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.7057209014892578, 'fit_time': np.float64(0.12180447578430176), 'score_time': np.float64(0.0023787975311279296), 'absolute_time': 1746692979.2789605, 'flatten_demographic_parity_ratio': 'nan_nan_nan_nan_nan', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
304
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.5101141853315767), 'balanced_accuracy': np.float64(0.6552380952380952), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.51), 'male_mar/wid': np.float64(0.91), 'male_single': np.float64(0.86)}, 'status': 'success', 'total_time': 1.3220338821411133, 'fit_time': np.float64(0.2418206214904785), 'score_time': np.float64(0.0040263175964355465), 'absolute_time': 1746692980.9581985, 'flatten_demographic_parity_ratio': '0.34_0.45_0.49_0.63_0.63', 'flatten_balanced_accuracy': '0.64_0.67_0.67_0.65_0.65'}
305
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 4, 'max_leaf_nodes': 6, 'min_samples_split': 5, 'n_estimators': np.int64(25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_features_normalization_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.46981902842919787), 'balanced_accuracy': np.float64(0.6761904761904761), 'by_group': {'female_div/dep/mar': np.float64(0.72), 'male_div/sep': np.float64(0.47), 'male_mar/wid': np.float64(0.8), 'male_single': np.float64(0.97)}, 'status': 'success', 'total_time': 0.4686732292175293, 'fit_time': np.float64(0.06647953987121583), 'score_time': np.float64(0.006249475479125977), 'absolute_time': 1746692981.7833648, 'flatten_demographic_parity_ratio': '0.37_0.43_0.54_0.58_0.42', 'flatten_balanced_accuracy': '0.64_0.68_0.7_0.68_0.68'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

306
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0004279613494873047, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692982.1396785}
307
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.62179836062189), 'balanced_accuracy': np.float64(0.5752380952380953), 'by_group': {'female_div/dep/mar': np.float64(0.9), 'male_div/sep': np.float64(0.68), 'male_mar/wid': np.float64(0.95), 'male_single': np.float64(0.88)}, 'status': 'success', 'total_time': 4.9238786697387695, 'fit_time': np.float64(0.8215213298797608), 'score_time': np.float64(0.05931386947631836), 'absolute_time': 1746692987.4184678, 'flatten_demographic_parity_ratio': '0.36_0.73_0.6_0.55_0.86', 'flatten_balanced_accuracy': '0.61_0.56_0.61_0.52_0.59'}
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')} was NaN

308
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5166666666666667), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(0.97), 'male_mar/wid': np.float64(0.9), 'male_single': np.float64(0.96)}, 'status': 'fail', 'total_time': 0.3171660900115967, 'fit_time': np.float64(0.04147505760192871), 'score_time': np.float64(0.0031659603118896484), 'absolute_time': 1746692988.0945344, 'flatten_demographic_parity_ratio': 'nan_nan_0.9_nan_nan', 'flatten_balanced_accuracy': '0.5_0.5_0.58_0.5_0.5'}
309
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.8228309305373527), 'balanced_accuracy': np.float64(0.5352380952380953), 'by_group': {'female_div/dep/mar': np.float64(0.93), 'male_div/sep': np.float64(0.84), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.92)}, 'status': 'success', 'total_time': 0.8234689235687256, 'fit_time': np.float64(0.004834890365600586), 'score_time': np.float64(0.080267333984375), 'absolute_time': 1746692994.249015, 'flatten_demographic_parity_ratio': '0.85_0.95_0.7_0.7_0.91', 'flatten_balanced_accuracy': '0.59_0.52_0.51_0.58_0.47'}
310
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 4, 'max_leaf_nodes': 2, 'min_samples_split': 6, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.6847667633917264), 'balanced_accuracy': np.float64(0.5533333333333333), 'by_group': {'female_div/dep/mar': np.float64(0.82), 'male_div/sep': np.float64(0.77), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.71)}, 'status': 'success', 'total_time': 0.6882479190826416, 'fit_time': np.float64(0.10749406814575195), 'score_time': np.float64(0.0082183837890625), 'absolute_time': 1746692995.3322086, 'flatten_demographic_parity_ratio': '0.77_0.67_0.74_0.65_0.59', 'flatten_balanced_accuracy': '0.61_0.57_0.55_0.52_0.51'}
311
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 9, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.7651760777170613), 'balanced_accuracy': np.float64(0.535952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.93), 'male_div/sep': np.float64(0.78), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.92)}, 'status': 'success', 'total_time': 0.14013671875, 'fit_time': np.float64(0.004744863510131836), 'score_time': np.float64(0.004128170013427734), 'absolute_time': 1746692995.8497546, 'flatten_demographic_parity_ratio': '0.68_0.95_0.7_0.7_0.8', 'flatten_balanced_accuracy': '0.62_0.54_0.52_0.54_0.46'}
312
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.484754765702134), 'balanced_accuracy': np.float64(0.5850000000000001), 'by_group': {'female_div/dep/mar': np.float64(0.69), 'male_div/sep': np.float64(0.66), 'male_mar/wid': np.float64(0.78), 'male_single': np.float64(0.87)}, 'status': 'success', 'total_time': 0.386249303817749, 'fit_time': np.float64(0.04803147315979004), 'score_time': np.float64(0.006500864028930664), 'absolute_time': 1746692996.6048484, 'flatten_demographic_parity_ratio': '0.5_0.56_0.55_0.63_0.19', 'flatten_balanced_accuracy': '0.57_0.53_0.66_0.56_0.6'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

313
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.000423431396484375, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692996.9751577}
314
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(50), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.41458646616541356), 'balanced_accuracy': np.float64(0.5864285714285715), 'by_group': {'female_div/dep/mar': np.float64(0.7), 'male_div/sep': np.float64(0.43), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.85)}, 'status': 'success', 'total_time': 0.8784406185150146, 'fit_time': np.float64(0.15345020294189454), 'score_time': np.float64(0.0038825035095214843), 'absolute_time': 1746692998.2197676, 'flatten_demographic_parity_ratio': '0.39_0.6_0.38_0.32_0.38', 'flatten_balanced_accuracy': '0.56_0.55_0.6_0.63_0.6'}
315
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.6164456869459829), 'balanced_accuracy': np.float64(0.5335714285714286), 'by_group': {'female_div/dep/mar': np.float64(0.82), 'male_div/sep': np.float64(0.67), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.68)}, 'status': 'success', 'total_time': 9.357340335845947, 'fit_time': np.float64(1.8420551776885987), 'score_time': np.float64(0.007762002944946289), 'absolute_time': 1746693007.9460645, 'flatten_demographic_parity_ratio': '0.85_0.6_0.72_0.51_0.41', 'flatten_balanced_accuracy': '0.56_0.55_0.54_0.51_0.5'}
316
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 3, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.8467959243477715), 'balanced_accuracy': np.float64(0.5540476190476189), 'by_group': {'female_div/dep/mar': np.float64(0.98), 'male_div/sep': np.float64(0.86), 'male_mar/wid': np.float64(0.95), 'male_single': np.float64(0.96)}, 'status': 'success', 'total_time': 0.2181398868560791, 'fit_time': np.float64(0.019410991668701173), 'score_time': np.float64(0.0041371345520019535), 'absolute_time': 1746693008.5349145, 'flatten_demographic_parity_ratio': '0.76_0.9_0.93_0.91_0.74', 'flatten_balanced_accuracy': '0.59_0.53_0.54_0.56_0.55'}
317
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(50), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.5824805076660079), 'balanced_accuracy': np.float64(0.5602380952380952), 'by_group': {'female_div/dep/mar': np.float64(0.93), 'male_div/sep': np.float64(0.71), 'male_mar/wid': np.float64(0.9), 'male_single': np.float64(0.69)}, 'status': 'success', 'total_time': 133.07021689414978, 'fit_time': np.float64(26.512627792358398), 'score_time': np.float64(0.061082649230957034), 'absolute_time': 1746693142.1140933, 'flatten_demographic_parity_ratio': '0.74_0.49_0.61_0.5_0.57', 'flatten_balanced_accuracy': '0.57_0.6_0.51_0.52_0.61'}
318
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 4, 'min_samples_split': 6, 'n_estimators': np.int64(25)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9948864490900888), 'balanced_accuracy': np.float64(0.5033333333333333), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.327970027923584, 'fit_time': np.float64(0.04065523147583008), 'score_time': np.float64(0.004981040954589844), 'absolute_time': 1746693148.4161212, 'flatten_demographic_parity_ratio': '1.0_0.98_1.0_0.99_1.0', 'flatten_balanced_accuracy': '0.5_0.51_0.5_0.51_0.5'}
319
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.5805088874259381), 'balanced_accuracy': np.float64(0.6178571428571429), 'by_group': {'female_div/dep/mar': np.float64(0.73), 'male_div/sep': np.float64(0.89), 'male_mar/wid': np.float64(0.72), 'male_single': np.float64(0.91)}, 'status': 'success', 'total_time': 1.1539676189422607, 'fit_time': np.float64(0.19773378372192382), 'score_time': np.float64(0.009115171432495118), 'absolute_time': 1746693149.9465196, 'flatten_demographic_parity_ratio': '0.7_0.35_0.77_0.62_0.47', 'flatten_balanced_accuracy': '0.64_0.6_0.62_0.57_0.66'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

320
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0004177093505859375, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693150.318742}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 609, in objective
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_param_validation.py", line 216, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 431, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 517, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 5 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
5 fits failed with the following error:
Traceback (most recent call last):
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 866, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "/usr/local/lib/python3.12/site-packages/sklearn/base.py", line 1389, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 518, in fit
    Xt, yt = self._fit(X, y, routed_params, raw_params=params)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 430, in _fit
    X, fitted_transformer = fit_transform_one_cached(
                            ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/joblib/memory.py", line 312, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 1383, in _fit_transform_one
    res = transformer.fit_transform(X, y, **params.get("fit_transform", {}))
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_set_output.py", line 319, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 76, in fit_transform
    df_X, df_y = self._prepare_dataset(X, y, fit=True)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 37, in _prepare_dataset
    raise Exception("No sensitive features to mitigate")
Exception: No sensitive features to mitigate


321
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.056134939193725586, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693150.7482214}
322
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(50), 'solver': np.str_('sgd')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.503932397877352), 'balanced_accuracy': np.float64(0.525), 'by_group': {'female_div/dep/mar': np.float64(0.87), 'male_div/sep': np.float64(0.55), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.67)}, 'status': 'success', 'total_time': 24.286664962768555, 'fit_time': np.float64(4.831840133666992), 'score_time': np.float64(0.005596160888671875), 'absolute_time': 1746693175.4079342, 'flatten_demographic_parity_ratio': '0.51_0.49_0.77_0.74_0.0', 'flatten_balanced_accuracy': '0.58_0.42_0.54_0.55_0.53'}
323
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.3387899502308569), 'balanced_accuracy': np.float64(0.5628571428571428), 'by_group': {'female_div/dep/mar': np.float64(0.81), 'male_div/sep': np.float64(0.35), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.67)}, 'status': 'success', 'total_time': 0.20512723922729492, 'fit_time': np.float64(0.01967196464538574), 'score_time': np.float64(0.0033138751983642577), 'absolute_time': 1746693175.9983165, 'flatten_demographic_parity_ratio': '0.54_0.36_0.58_0.21_0.0', 'flatten_balanced_accuracy': '0.63_0.58_0.56_0.5_0.55'}
324
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 2, 'n_estimators': np.int64(10)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9931542099284034), 'balanced_accuracy': np.float64(0.5066666666666666), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.99)}, 'status': 'success', 'total_time': 0.19041132926940918, 'fit_time': np.float64(0.014298534393310547), 'score_time': np.float64(0.004926156997680664), 'absolute_time': 1746693176.5623841, 'flatten_demographic_parity_ratio': '0.99_0.99_1.0_0.98_1.0', 'flatten_balanced_accuracy': '0.51_0.51_0.5_0.52_0.5'}
325
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 6, 'n_estimators': np.int64(50)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.4373844678693958), 'balanced_accuracy': np.float64(0.6769047619047618), 'by_group': {'female_div/dep/mar': np.float64(0.65), 'male_div/sep': np.float64(0.51), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.71)}, 'status': 'success', 'total_time': 0.5535266399383545, 'fit_time': np.float64(0.08296589851379395), 'score_time': np.float64(0.006478309631347656), 'absolute_time': 1746693182.7403357, 'flatten_demographic_parity_ratio': '0.28_0.39_0.63_0.55_0.35', 'flatten_balanced_accuracy': '0.71_0.71_0.69_0.62_0.66'}
326
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 20, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'prototype': np.str_('normalization_rebalancing_features_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.6919200817851655), 'balanced_accuracy': np.float64(0.5316666666666666), 'by_group': {'female_div/dep/mar': np.float64(0.85), 'male_div/sep': np.float64(0.75), 'male_mar/wid': np.float64(0.95), 'male_single': np.float64(0.74)}, 'status': 'success', 'total_time': 0.3456227779388428, 'fit_time': np.float64(0.03259553909301758), 'score_time': np.float64(0.009014225006103516), 'absolute_time': 1746693183.4668822, 'flatten_demographic_parity_ratio': '0.82_0.72_0.64_0.75_0.54', 'flatten_balanced_accuracy': '0.58_0.59_0.51_0.51_0.46'}
327
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.0), 'balanced_accuracy': np.float64(0.599047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.9), 'male_div/sep': np.float64(0.0), 'male_mar/wid': np.float64(0.15), 'male_single': np.float64(0.94)}, 'status': 'success', 'total_time': 0.9726853370666504, 'fit_time': np.float64(0.1710728168487549), 'score_time': np.float64(0.004419183731079102), 'absolute_time': 1746693184.8347397, 'flatten_demographic_parity_ratio': '0.0_0.0_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.61_0.63_0.59_0.61_0.55'}
The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')} was NaN

328
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5009523809523809), 'by_group': {'female_div/dep/mar': np.float64(0.36), 'male_div/sep': np.float64(0.0), 'male_mar/wid': np.float64(0.5), 'male_single': np.float64(0.25)}, 'status': 'fail', 'total_time': 4.349605083465576, 'fit_time': np.float64(0.8251102924346924), 'score_time': np.float64(0.015769100189208983), 'absolute_time': 1746693189.5671372, 'flatten_demographic_parity_ratio': '0.0_0.0_0.0_0.0_nan', 'flatten_balanced_accuracy': '0.5_0.49_0.5_0.5_0.5'}
329
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.1)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.8894776913989002), 'balanced_accuracy': np.float64(0.5278571428571428), 'by_group': {'female_div/dep/mar': np.float64(0.94), 'male_div/sep': np.float64(0.91), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.89)}, 'status': 'success', 'total_time': 3.165478467941284, 'fit_time': np.float64(0.5315406799316407), 'score_time': np.float64(0.04267029762268067), 'absolute_time': 1746693193.1234274, 'flatten_demographic_parity_ratio': '1.0_0.77_0.78_0.9_1.0', 'flatten_balanced_accuracy': '0.5_0.6_0.53_0.51_0.5'}
330
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 5, 'n_estimators': np.int64(25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.35134124755859375, 'fit_time': np.float64(0.04082841873168945), 'score_time': np.float64(0.007102394104003906), 'absolute_time': 1746693193.9437451, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
331
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.12851905822753906, 'fit_time': np.float64(0.005044126510620117), 'score_time': np.float64(0.002375888824462891), 'absolute_time': 1746693194.5517795, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')} was NaN

332
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5371428571428571), 'by_group': {'female_div/dep/mar': np.float64(0.9), 'male_div/sep': np.float64(0.85), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.81)}, 'status': 'fail', 'total_time': 11.309522151947021, 'fit_time': np.float64(2.2329076766967773), 'score_time': np.float64(0.008170127868652344), 'absolute_time': 1746693206.3186042, 'flatten_demographic_parity_ratio': '0.89_0.6_0.84_0.8_nan', 'flatten_balanced_accuracy': '0.53_0.55_0.54_0.56_0.5'}
333
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(25), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.7406336008924448), 'balanced_accuracy': np.float64(0.6652380952380952), 'by_group': {'female_div/dep/mar': np.float64(0.84), 'male_div/sep': np.float64(0.81), 'male_mar/wid': np.float64(0.88), 'male_single': np.float64(0.94)}, 'status': 'success', 'total_time': 0.6842172145843506, 'fit_time': np.float64(0.11476435661315917), 'score_time': np.float64(0.0035103797912597657), 'absolute_time': 1746693213.116033, 'flatten_demographic_parity_ratio': '0.6_0.8_0.88_0.79_0.63', 'flatten_balanced_accuracy': '0.66_0.68_0.7_0.63_0.66'}
334
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.0), 'balanced_accuracy': np.float64(0.5454761904761904), 'by_group': {'female_div/dep/mar': np.float64(0.91), 'male_div/sep': np.float64(0.0), 'male_mar/wid': np.float64(0.21), 'male_single': np.float64(0.85)}, 'status': 'success', 'total_time': 0.24472570419311523, 'fit_time': np.float64(0.02474498748779297), 'score_time': np.float64(0.003997802734375), 'absolute_time': 1746693213.7476308, 'flatten_demographic_parity_ratio': '0.0_0.0_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.55_0.54_0.55_0.58_0.52'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

335
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0004343986511230469, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693214.136957}
336
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 18, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.096624704956727), 'balanced_accuracy': np.float64(0.6461904761904762), 'by_group': {'female_div/dep/mar': np.float64(0.97), 'male_div/sep': np.float64(0.1), 'male_mar/wid': np.float64(0.88), 'male_single': np.float64(0.97)}, 'status': 'success', 'total_time': 0.515639066696167, 'fit_time': np.float64(0.06120939254760742), 'score_time': np.float64(0.006807994842529297), 'absolute_time': 1746693215.054192, 'flatten_demographic_parity_ratio': '0.0_0.0_0.31_0.18_0.0', 'flatten_balanced_accuracy': '0.69_0.64_0.62_0.67_0.61'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 609, in objective
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_param_validation.py", line 216, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 431, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 517, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 5 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
5 fits failed with the following error:
Traceback (most recent call last):
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 866, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "/usr/local/lib/python3.12/site-packages/sklearn/base.py", line 1389, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 518, in fit
    Xt, yt = self._fit(X, y, routed_params, raw_params=params)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 430, in _fit
    X, fitted_transformer = fit_transform_one_cached(
                            ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/joblib/memory.py", line 312, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 1383, in _fit_transform_one
    res = transformer.fit_transform(X, y, **params.get("fit_transform", {}))
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_set_output.py", line 319, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 76, in fit_transform
    df_X, df_y = self._prepare_dataset(X, y, fit=True)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 37, in _prepare_dataset
    raise Exception("No sensitive features to mitigate")
Exception: No sensitive features to mitigate


337
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('rebalancing_features_normalization_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.24217486381530762, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693215.689312}
338
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(25), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 6.302391529083252, 'fit_time': np.float64(1.2334383964538573), 'score_time': np.float64(0.006513166427612305), 'absolute_time': 1746693222.4156122, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
339
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9053767343832329), 'balanced_accuracy': np.float64(0.5083333333333333), 'by_group': {'female_div/dep/mar': np.float64(0.98), 'male_div/sep': np.float64(0.93), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.95)}, 'status': 'success', 'total_time': 0.5919456481933594, 'fit_time': np.float64(0.0990865707397461), 'score_time': np.float64(0.0023253440856933595), 'absolute_time': 1746693223.4061775, 'flatten_demographic_parity_ratio': '0.75_1.0_0.9_0.89_0.98', 'flatten_balanced_accuracy': '0.55_0.5_0.53_0.48_0.49'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

340
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.00035119056701660156, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693223.798712}
341
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.6096047321853774), 'balanced_accuracy': np.float64(0.6673809523809523), 'by_group': {'female_div/dep/mar': np.float64(0.82), 'male_div/sep': np.float64(0.7), 'male_mar/wid': np.float64(0.86), 'male_single': np.float64(0.94)}, 'status': 'success', 'total_time': 2.0862014293670654, 'fit_time': np.float64(0.3952756881713867), 'score_time': np.float64(0.0037808895111083986), 'absolute_time': 1746693231.9390175, 'flatten_demographic_parity_ratio': '0.34_0.67_0.67_0.78_0.58', 'flatten_balanced_accuracy': '0.68_0.69_0.65_0.65_0.66'}
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(50), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(50), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')} was NaN

342
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(50), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.515), 'by_group': {'female_div/dep/mar': np.float64(0.58), 'male_div/sep': np.float64(0.55), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.54)}, 'status': 'fail', 'total_time': 14.705018520355225, 'fit_time': np.float64(2.916488027572632), 'score_time': np.float64(0.005225706100463867), 'absolute_time': 1746693247.0408509, 'flatten_demographic_parity_ratio': 'nan_0.45_0.48_1.0_0.0', 'flatten_balanced_accuracy': '0.5_0.55_0.52_0.5_0.51'}
343
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 2}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.8139477738572884), 'balanced_accuracy': np.float64(0.6157142857142858), 'by_group': {'female_div/dep/mar': np.float64(0.94), 'male_div/sep': np.float64(0.82), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.91)}, 'status': 'success', 'total_time': 0.5291008949279785, 'fit_time': np.float64(0.0857656478881836), 'score_time': np.float64(0.0024245262145996095), 'absolute_time': 1746693247.9675515, 'flatten_demographic_parity_ratio': '0.95_0.64_0.79_0.86_0.84', 'flatten_balanced_accuracy': '0.64_0.59_0.62_0.62_0.6'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 609, in objective
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_param_validation.py", line 216, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 431, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 517, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 5 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
5 fits failed with the following error:
Traceback (most recent call last):
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 866, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "/usr/local/lib/python3.12/site-packages/sklearn/base.py", line 1389, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 518, in fit
    Xt, yt = self._fit(X, y, routed_params, raw_params=params)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 430, in _fit
    X, fitted_transformer = fit_transform_one_cached(
                            ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/joblib/memory.py", line 312, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 1383, in _fit_transform_one
    res = transformer.fit_transform(X, y, **params.get("fit_transform", {}))
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_set_output.py", line 319, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 76, in fit_transform
    df_X, df_y = self._prepare_dataset(X, y, fit=True)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 37, in _prepare_dataset
    raise Exception("No sensitive features to mitigate")
Exception: No sensitive features to mitigate


344
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.02021932601928711, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693248.3846166}
345
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 9, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.6640035542748941), 'balanced_accuracy': np.float64(0.5178571428571429), 'by_group': {'female_div/dep/mar': np.float64(0.78), 'male_div/sep': np.float64(0.82), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.73)}, 'status': 'success', 'total_time': 0.4762990474700928, 'fit_time': np.float64(0.06442384719848633), 'score_time': np.float64(0.005981159210205078), 'absolute_time': 1746693249.2594273, 'flatten_demographic_parity_ratio': '0.81_0.72_0.54_0.55_0.69', 'flatten_balanced_accuracy': '0.56_0.55_0.51_0.5_0.47'}
346
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.4933249659161147), 'balanced_accuracy': np.float64(0.6783333333333333), 'by_group': {'female_div/dep/mar': np.float64(0.77), 'male_div/sep': np.float64(0.58), 'male_mar/wid': np.float64(0.88), 'male_single': np.float64(0.96)}, 'status': 'success', 'total_time': 1.9418118000030518, 'fit_time': np.float64(0.3659323215484619), 'score_time': np.float64(0.004268503189086914), 'absolute_time': 1746693251.6737158, 'flatten_demographic_parity_ratio': '0.18_0.33_0.6_0.73_0.63', 'flatten_balanced_accuracy': '0.66_0.71_0.69_0.63_0.7'}
347
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.29200167624521073), 'balanced_accuracy': np.float64(0.5983333333333334), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.3), 'male_mar/wid': np.float64(0.52), 'male_single': np.float64(0.98)}, 'status': 'success', 'total_time': 0.6602375507354736, 'fit_time': np.float64(0.08553714752197265), 'score_time': np.float64(0.01700596809387207), 'absolute_time': 1746693252.7361968, 'flatten_demographic_parity_ratio': '0.55_0.17_0.56_0.18_0.0', 'flatten_balanced_accuracy': '0.59_0.59_0.64_0.57_0.61'}
348
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 20, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.6067117195988508), 'balanced_accuracy': np.float64(0.6738095238095239), 'by_group': {'female_div/dep/mar': np.float64(0.68), 'male_div/sep': np.float64(0.67), 'male_mar/wid': np.float64(0.92), 'male_single': np.float64(0.91)}, 'status': 'success', 'total_time': 0.25246596336364746, 'fit_time': np.float64(0.007690811157226562), 'score_time': np.float64(0.014031028747558594), 'absolute_time': 1746693253.395475, 'flatten_demographic_parity_ratio': '0.71_0.83_0.42_0.61_0.47', 'flatten_balanced_accuracy': '0.71_0.67_0.64_0.64_0.71'}
349
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 4, 'min_samples_split': 6, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.17710232734680176, 'fit_time': np.float64(0.014735174179077149), 'score_time': np.float64(0.0030350685119628906), 'absolute_time': 1746693259.7877111, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
350
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.7681160518948538), 'balanced_accuracy': np.float64(0.6276190476190476), 'by_group': {'female_div/dep/mar': np.float64(0.85), 'male_div/sep': np.float64(0.87), 'male_mar/wid': np.float64(0.91), 'male_single': np.float64(0.95)}, 'status': 'success', 'total_time': 4.756383657455444, 'fit_time': np.float64(0.9089571475982666), 'score_time': np.float64(0.006702804565429687), 'absolute_time': 1746693264.956625, 'flatten_demographic_parity_ratio': '0.83_0.72_0.8_0.85_0.63', 'flatten_balanced_accuracy': '0.63_0.69_0.61_0.57_0.63'}
351
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 3}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.6607079178667783), 'balanced_accuracy': np.float64(0.6526190476190477), 'by_group': {'female_div/dep/mar': np.float64(0.87), 'male_div/sep': np.float64(0.79), 'male_mar/wid': np.float64(0.84), 'male_single': np.float64(0.8)}, 'status': 'success', 'total_time': 0.9826617240905762, 'fit_time': np.float64(0.1544856071472168), 'score_time': np.float64(0.0057293415069580075), 'absolute_time': 1746693266.346085, 'flatten_demographic_parity_ratio': '0.56_0.69_0.72_0.61_0.71', 'flatten_balanced_accuracy': '0.68_0.66_0.67_0.59_0.66'}
352
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 3}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.7054610502968784), 'balanced_accuracy': np.float64(0.6566666666666667), 'by_group': {'female_div/dep/mar': np.float64(0.91), 'male_div/sep': np.float64(0.74), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.86)}, 'status': 'success', 'total_time': 0.4277627468109131, 'fit_time': np.float64(0.05108003616333008), 'score_time': np.float64(0.004630184173583985), 'absolute_time': 1746693267.325654, 'flatten_demographic_parity_ratio': '0.82_0.8_0.85_0.58_0.48', 'flatten_balanced_accuracy': '0.71_0.63_0.71_0.58_0.64'}
353
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9156455687306562), 'balanced_accuracy': np.float64(0.5442857142857143), 'by_group': {'female_div/dep/mar': np.float64(0.94), 'male_div/sep': np.float64(0.95), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.95)}, 'status': 'success', 'total_time': 0.18503808975219727, 'fit_time': np.float64(0.0022984981536865235), 'score_time': np.float64(0.010207414627075195), 'absolute_time': 1746693267.9253092, 'flatten_demographic_parity_ratio': '0.9_0.9_0.97_0.92_0.89', 'flatten_balanced_accuracy': '0.56_0.58_0.52_0.54_0.52'}
354
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 15, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.6592606139540578), 'balanced_accuracy': np.float64(0.5716666666666667), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.72), 'male_mar/wid': np.float64(0.93), 'male_single': np.float64(0.83)}, 'status': 'success', 'total_time': 0.32967448234558105, 'fit_time': np.float64(0.03776850700378418), 'score_time': np.float64(0.005014276504516602), 'absolute_time': 1746693268.6683323, 'flatten_demographic_parity_ratio': '0.45_0.66_0.97_0.74_0.48', 'flatten_balanced_accuracy': '0.58_0.61_0.58_0.56_0.54'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

355
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 4, 'max_leaf_nodes': 6, 'min_samples_split': 6, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0003733634948730469, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693269.0878406}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

356
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 3}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.00031304359436035156, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693269.5007694}
357
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 10, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.8588604261494005), 'balanced_accuracy': np.float64(0.5242857142857142), 'by_group': {'female_div/dep/mar': np.float64(0.9), 'male_div/sep': np.float64(0.93), 'male_mar/wid': np.float64(0.95), 'male_single': np.float64(0.93)}, 'status': 'success', 'total_time': 24.114686489105225, 'fit_time': np.float64(0.2895204067230225), 'score_time': np.float64(0.008104181289672852), 'absolute_time': 1746693299.7930665, 'flatten_demographic_parity_ratio': '0.85_0.9_0.84_0.84_0.86', 'flatten_balanced_accuracy': '0.52_0.51_0.53_0.55_0.51'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

358
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 17, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0004062652587890625, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693300.2100046}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 609, in objective
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_param_validation.py", line 216, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 431, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 517, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 5 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
5 fits failed with the following error:
Traceback (most recent call last):
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 866, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "/usr/local/lib/python3.12/site-packages/sklearn/base.py", line 1389, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 518, in fit
    Xt, yt = self._fit(X, y, routed_params, raw_params=params)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 430, in _fit
    X, fitted_transformer = fit_transform_one_cached(
                            ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/joblib/memory.py", line 312, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 1383, in _fit_transform_one
    res = transformer.fit_transform(X, y, **params.get("fit_transform", {}))
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_set_output.py", line 319, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 76, in fit_transform
    df_X, df_y = self._prepare_dataset(X, y, fit=True)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 37, in _prepare_dataset
    raise Exception("No sensitive features to mitigate")
Exception: No sensitive features to mitigate


359
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 7}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.048880577087402344, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693300.6720545}
360
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_split': 2, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.6505036710920303), 'balanced_accuracy': np.float64(0.5888095238095238), 'by_group': {'female_div/dep/mar': np.float64(0.81), 'male_div/sep': np.float64(0.79), 'male_mar/wid': np.float64(0.91), 'male_single': np.float64(0.79)}, 'status': 'success', 'total_time': 8.66872239112854, 'fit_time': np.float64(1.339182472229004), 'score_time': np.float64(0.013952064514160156), 'absolute_time': 1746693309.756749, 'flatten_demographic_parity_ratio': '0.36_0.66_0.79_0.76_0.69', 'flatten_balanced_accuracy': '0.58_0.61_0.56_0.61_0.58'}
361
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.6657974766008821), 'balanced_accuracy': np.float64(0.584047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.87), 'male_div/sep': np.float64(0.67), 'male_mar/wid': np.float64(0.92), 'male_single': np.float64(0.97)}, 'status': 'success', 'total_time': 1.4220519065856934, 'fit_time': np.float64(0.25745267868041993), 'score_time': np.float64(0.006501531600952149), 'absolute_time': 1746693311.5961392, 'flatten_demographic_parity_ratio': '0.74_0.58_0.82_0.54_0.64', 'flatten_balanced_accuracy': '0.55_0.6_0.62_0.61_0.54'}
362
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 8, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 3}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.8156169493096097), 'balanced_accuracy': np.float64(0.5347619047619048), 'by_group': {'female_div/dep/mar': np.float64(0.94), 'male_div/sep': np.float64(0.85), 'male_mar/wid': np.float64(0.94), 'male_single': np.float64(0.95)}, 'status': 'success', 'total_time': 7.0432374477386475, 'fit_time': np.float64(1.3717066287994384), 'score_time': np.float64(0.009452009201049804), 'absolute_time': 1746693319.060002, 'flatten_demographic_parity_ratio': '0.83_0.84_0.79_0.85_0.77', 'flatten_balanced_accuracy': '0.55_0.56_0.56_0.49_0.52'}
363
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.3662045593699207), 'balanced_accuracy': np.float64(0.6492857142857142), 'by_group': {'female_div/dep/mar': np.float64(0.85), 'male_div/sep': np.float64(0.39), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.79)}, 'status': 'success', 'total_time': 1.8922393321990967, 'fit_time': np.float64(0.339917516708374), 'score_time': np.float64(0.003641986846923828), 'absolute_time': 1746693321.384655, 'flatten_demographic_parity_ratio': '0.27_0.52_0.28_0.62_0.15', 'flatten_balanced_accuracy': '0.62_0.65_0.67_0.66_0.64'}
364
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_split': 6, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.6829306172108777), 'balanced_accuracy': np.float64(0.5395238095238095), 'by_group': {'female_div/dep/mar': np.float64(0.81), 'male_div/sep': np.float64(0.74), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.72)}, 'status': 'success', 'total_time': 7.947304964065552, 'fit_time': np.float64(1.557396125793457), 'score_time': np.float64(0.009893226623535156), 'absolute_time': 1746693329.7689707, 'flatten_demographic_parity_ratio': '0.82_0.68_0.67_0.51_0.74', 'flatten_balanced_accuracy': '0.57_0.57_0.54_0.5_0.52'}
365
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 6, 'min_samples_split': 4, 'n_estimators': np.int64(50)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.6220954311166693), 'balanced_accuracy': np.float64(0.684047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.8), 'male_div/sep': np.float64(0.65), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.93)}, 'status': 'success', 'total_time': 0.6086440086364746, 'fit_time': np.float64(0.09319252967834472), 'score_time': np.float64(0.007162237167358398), 'absolute_time': 1746693330.9798102, 'flatten_demographic_parity_ratio': '0.48_0.83_0.67_0.69_0.44', 'flatten_balanced_accuracy': '0.71_0.66_0.68_0.63_0.74'}
366
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_features_normalization_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.5995501047265752), 'balanced_accuracy': np.float64(0.6507142857142856), 'by_group': {'female_div/dep/mar': np.float64(0.85), 'male_div/sep': np.float64(0.69), 'male_mar/wid': np.float64(0.87), 'male_single': np.float64(0.87)}, 'status': 'success', 'total_time': 0.453768253326416, 'fit_time': np.float64(0.04961681365966797), 'score_time': np.float64(0.004106950759887695), 'absolute_time': 1746693337.7556639, 'flatten_demographic_parity_ratio': '0.37_0.95_0.59_0.68_0.41', 'flatten_balanced_accuracy': '0.67_0.64_0.63_0.62_0.7'}
367
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 4, 'max_leaf_nodes': 2, 'min_samples_split': 3, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.6660265576952307), 'balanced_accuracy': np.float64(0.6766666666666667), 'by_group': {'female_div/dep/mar': np.float64(0.87), 'male_div/sep': np.float64(0.67), 'male_mar/wid': np.float64(0.8), 'male_single': np.float64(0.97)}, 'status': 'success', 'total_time': 0.5158336162567139, 'fit_time': np.float64(0.07457060813903808), 'score_time': np.float64(0.007119989395141602), 'absolute_time': 1746693338.7091746, 'flatten_demographic_parity_ratio': '0.5_0.65_0.82_0.76_0.61', 'flatten_balanced_accuracy': '0.65_0.69_0.72_0.64_0.69'}
368
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 15, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 2}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.5009627894873796), 'balanced_accuracy': np.float64(0.5897619047619047), 'by_group': {'female_div/dep/mar': np.float64(0.74), 'male_div/sep': np.float64(0.59), 'male_mar/wid': np.float64(0.88), 'male_single': np.float64(0.75)}, 'status': 'success', 'total_time': 0.1515336036682129, 'fit_time': np.float64(0.0066983699798583984), 'score_time': np.float64(0.004555225372314453), 'absolute_time': 1746693339.2850547, 'flatten_demographic_parity_ratio': '0.56_0.76_0.4_0.52_0.27', 'flatten_balanced_accuracy': '0.59_0.6_0.62_0.57_0.56'}
369
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(50), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.4954176099130228), 'balanced_accuracy': np.float64(0.48571428571428577), 'by_group': {'female_div/dep/mar': np.float64(0.86), 'male_div/sep': np.float64(0.86), 'male_mar/wid': np.float64(0.79), 'male_single': np.float64(0.56)}, 'status': 'success', 'total_time': 1.6048178672790527, 'fit_time': np.float64(0.29695897102355956), 'score_time': np.float64(0.004881858825683594), 'absolute_time': 1746693341.3222916, 'flatten_demographic_parity_ratio': '0.45_0.4_0.37_0.61_0.65', 'flatten_balanced_accuracy': '0.49_0.51_0.5_0.46_0.47'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

370
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(10), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.00040149688720703125, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693341.7551928}
371
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_split': 2, 'n_estimators': np.int64(10)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_features_normalization_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.5207655217225695), 'balanced_accuracy': np.float64(0.6361904761904762), 'by_group': {'female_div/dep/mar': np.float64(0.75), 'male_div/sep': np.float64(0.57), 'male_mar/wid': np.float64(0.62), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.35521507263183594, 'fit_time': np.float64(0.050252342224121095), 'score_time': np.float64(0.0033998966217041017), 'absolute_time': 1746693342.5406108, 'flatten_demographic_parity_ratio': '0.61_0.51_0.67_0.45_0.36', 'flatten_balanced_accuracy': '0.62_0.61_0.65_0.65_0.65'}
372
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 10, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_rebalancing_features_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.7924226073154707), 'balanced_accuracy': np.float64(0.6554761904761904), 'by_group': {'female_div/dep/mar': np.float64(0.88), 'male_div/sep': np.float64(0.93), 'male_mar/wid': np.float64(0.87), 'male_single': np.float64(0.95)}, 'status': 'success', 'total_time': 0.3103785514831543, 'fit_time': np.float64(0.016806888580322265), 'score_time': np.float64(0.013908290863037109), 'absolute_time': 1746693343.2823157, 'flatten_demographic_parity_ratio': '0.76_0.85_0.75_0.79_0.81', 'flatten_balanced_accuracy': '0.67_0.69_0.67_0.63_0.62'}
373
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_features_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.5550357100953827), 'balanced_accuracy': np.float64(0.6716666666666666), 'by_group': {'female_div/dep/mar': np.float64(0.72), 'male_div/sep': np.float64(0.66), 'male_mar/wid': np.float64(0.94), 'male_single': np.float64(0.91)}, 'status': 'success', 'total_time': 2.533658266067505, 'fit_time': np.float64(0.4821016311645508), 'score_time': np.float64(0.00560612678527832), 'absolute_time': 1746693346.4370604, 'flatten_demographic_parity_ratio': '0.17_0.78_0.59_0.65_0.58', 'flatten_balanced_accuracy': '0.7_0.71_0.69_0.62_0.64'}
374
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 3, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.8718720199927658), 'balanced_accuracy': np.float64(0.516904761904762), 'by_group': {'female_div/dep/mar': np.float64(0.97), 'male_div/sep': np.float64(0.89), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.95)}, 'status': 'success', 'total_time': 0.2082676887512207, 'fit_time': np.float64(0.02039046287536621), 'score_time': np.float64(0.0032509803771972657), 'absolute_time': 1746693353.0766826, 'flatten_demographic_parity_ratio': '0.95_0.7_0.96_0.9_0.84', 'flatten_balanced_accuracy': '0.5_0.56_0.51_0.52_0.5'}
375
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(25), 'solver': np.str_('sgd')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.8637534520242081), 'balanced_accuracy': np.float64(0.5176190476190475), 'by_group': {'female_div/dep/mar': np.float64(0.86), 'male_div/sep': np.float64(0.92), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.92)}, 'status': 'success', 'total_time': 0.708289623260498, 'fit_time': np.float64(0.11694059371948243), 'score_time': np.float64(0.0035144805908203123), 'absolute_time': 1746693354.220733, 'flatten_demographic_parity_ratio': '0.9_0.85_0.89_0.79_0.89', 'flatten_balanced_accuracy': '0.49_0.54_0.49_0.52_0.55'}
376
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 10, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.37999291740576147), 'balanced_accuracy': np.float64(0.5735714285714286), 'by_group': {'female_div/dep/mar': np.float64(0.95), 'male_div/sep': np.float64(0.41), 'male_mar/wid': np.float64(0.84), 'male_single': np.float64(0.89)}, 'status': 'success', 'total_time': 0.47390031814575195, 'fit_time': np.float64(0.060047149658203125), 'score_time': np.float64(0.007989597320556641), 'absolute_time': 1746693355.1305518, 'flatten_demographic_parity_ratio': '0.34_0.3_0.76_0.19_0.32', 'flatten_balanced_accuracy': '0.58_0.53_0.58_0.58_0.6'}
377
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.6172159603902724), 'balanced_accuracy': np.float64(0.5373809523809523), 'by_group': {'female_div/dep/mar': np.float64(0.81), 'male_div/sep': np.float64(0.66), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.67)}, 'status': 'success', 'total_time': 17.858015298843384, 'fit_time': np.float64(3.5415284633636475), 'score_time': np.float64(0.005927610397338867), 'absolute_time': 1746693373.4267745, 'flatten_demographic_parity_ratio': '0.51_0.48_0.68_0.67_0.74', 'flatten_balanced_accuracy': '0.58_0.55_0.53_0.51_0.52'}
378
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_split': 2, 'n_estimators': np.int64(25)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.6971425420457679), 'balanced_accuracy': np.float64(0.5316666666666666), 'by_group': {'female_div/dep/mar': np.float64(0.85), 'male_div/sep': np.float64(0.73), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.76)}, 'status': 'success', 'total_time': 7.670684099197388, 'fit_time': np.float64(1.5068471431732178), 'score_time': np.float64(0.006739664077758789), 'absolute_time': 1746693381.537849, 'flatten_demographic_parity_ratio': '0.84_0.6_0.69_0.51_0.84', 'flatten_balanced_accuracy': '0.56_0.55_0.51_0.5_0.53'}
379
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9763302752293578), 'balanced_accuracy': np.float64(0.5054761904761904), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(0.98), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.99)}, 'status': 'success', 'total_time': 0.20488238334655762, 'fit_time': np.float64(0.016488313674926758), 'score_time': np.float64(0.005126094818115235), 'absolute_time': 1746693382.1832101, 'flatten_demographic_parity_ratio': '1.0_1.0_0.98_0.9_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.52_0.5'}
380
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 6, 'min_samples_split': 5, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9460773634967182), 'balanced_accuracy': np.float64(0.5242857142857142), 'by_group': {'female_div/dep/mar': np.float64(0.96), 'male_div/sep': np.float64(0.98), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.98)}, 'status': 'success', 'total_time': 0.2678534984588623, 'fit_time': np.float64(0.028796577453613283), 'score_time': np.float64(0.005431461334228516), 'absolute_time': 1746693382.8930743, 'flatten_demographic_parity_ratio': '0.99_0.9_0.95_0.94_0.95', 'flatten_balanced_accuracy': '0.5_0.53_0.55_0.52_0.52'}
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification')} was NaN

381
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.530952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.86), 'male_div/sep': np.float64(0.87), 'male_mar/wid': np.float64(0.95), 'male_single': np.float64(1.0)}, 'status': 'fail', 'total_time': 0.2523536682128906, 'fit_time': np.float64(0.02672877311706543), 'score_time': np.float64(0.004320812225341797), 'absolute_time': 1746693389.7213697, 'flatten_demographic_parity_ratio': '0.99_nan_0.72_nan_nan', 'flatten_balanced_accuracy': '0.5_0.5_0.66_0.5_0.5'}
382
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.6236847023943798), 'balanced_accuracy': np.float64(0.6526190476190477), 'by_group': {'female_div/dep/mar': np.float64(0.81), 'male_div/sep': np.float64(0.65), 'male_mar/wid': np.float64(0.95), 'male_single': np.float64(0.87)}, 'status': 'success', 'total_time': 0.8495795726776123, 'fit_time': np.float64(0.14647703170776366), 'score_time': np.float64(0.0044367313385009766), 'absolute_time': 1746693391.0135362, 'flatten_demographic_parity_ratio': '0.8_0.44_0.65_0.64_0.58', 'flatten_balanced_accuracy': '0.67_0.71_0.7_0.58_0.6'}
383
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(50), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 7}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.7185430639469389), 'balanced_accuracy': np.float64(0.625), 'by_group': {'female_div/dep/mar': np.float64(0.91), 'male_div/sep': np.float64(0.82), 'male_mar/wid': np.float64(0.84), 'male_single': np.float64(0.9)}, 'status': 'success', 'total_time': 87.29299569129944, 'fit_time': np.float64(17.40350422859192), 'score_time': np.float64(0.015373611450195312), 'absolute_time': 1746693478.7687523, 'flatten_demographic_parity_ratio': '0.85_0.54_0.8_0.88_0.53', 'flatten_balanced_accuracy': '0.58_0.71_0.66_0.68_0.5'}
AutoML: optimization done.
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
AutoML: miner done.
AutoML: export done.
Here is the standard output/error of the command:

Here is the standard output/error of the command:

Here is the standard output/error of the command:

hamlet_298113760
AutoML execution ended
