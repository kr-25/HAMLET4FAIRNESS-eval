Sensitive groups ready!
Theory ready!
Theory:
step(normalization) :- true.
step(features) :- true.
step(mitigation) :- true.
step(rebalancing) :- true.
step(classification) :- true.
operator(normalization, power_transformer) :- true.
operator(normalization, robust_scaler) :- true.
operator(normalization, standard) :- true.
operator(normalization, minmax) :- true.
operator(features, select_k_best) :- true.
operator(features, pca) :- true.
operator(mitigation, corr_remover) :- true.
operator(mitigation, lfr) :- true.
operator(rebalancing, near_miss) :- true.
operator(rebalancing, smote) :- true.
operator(classification, knn) :- true.
operator(classification, nn) :- true.
operator(classification, rf) :- true.
hyperparameter(robust_scaler, with_centering, choice) :- true.
hyperparameter(robust_scaler, with_scaling, choice) :- true.
hyperparameter(standard, with_mean, choice) :- true.
hyperparameter(standard, with_std, choice) :- true.
hyperparameter(select_k_best, k, randint) :- true.
hyperparameter(pca, n_components, randint) :- true.
hyperparameter(corr_remover, alpha, choice) :- true.
hyperparameter(lfr, n_prototypes, choice) :- true.
hyperparameter(lfr, reconstruct_weight, choice) :- true.
hyperparameter(lfr, fairness_weight, choice) :- true.
hyperparameter(near_miss, n_neighbors, randint) :- true.
hyperparameter(smote, k_neighbors, randint) :- true.
hyperparameter(knn, n_neighbors, randint) :- true.
hyperparameter(knn, weights, choice) :- true.
hyperparameter(knn, metric, choice) :- true.
hyperparameter(nn, n_hidden_layers, choice) :- true.
hyperparameter(nn, n_neurons, choice) :- true.
hyperparameter(nn, activation, choice) :- true.
hyperparameter(nn, solver, choice) :- true.
hyperparameter(nn, alpha, choice) :- true.
hyperparameter(nn, learning_rate, choice) :- true.
hyperparameter(rf, n_estimators, choice) :- true.
hyperparameter(rf, max_depth, randint) :- true.
hyperparameter(rf, max_features, randint) :- true.
hyperparameter(rf, min_samples_split, randint) :- true.
hyperparameter(rf, max_leaf_nodes, randint) :- true.
hyperparameter(rf, bootstrap, choice) :- true.
hyperparameter(rf, criterion, choice) :- true.
domain(robust_scaler, with_centering, [true, false]) :- true.
domain(robust_scaler, with_scaling, [true, false]) :- true.
domain(standard, with_mean, [true, false]) :- true.
domain(standard, with_std, [true, false]) :- true.
domain(select_k_best, k, [1, 10]) :- true.
domain(pca, n_components, [1, 8]) :- true.
domain(corr_remover, alpha, [0.25, 0.5, 0.75, 1.0]) :- true.
domain(lfr, n_prototypes, [10, 50, 100, 200]) :- true.
domain(lfr, reconstruct_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(lfr, fairness_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(near_miss, n_neighbors, [1, 4]) :- true.
domain(smote, k_neighbors, [5, 8]) :- true.
domain(knn, n_neighbors, [3, 20]) :- true.
domain(knn, weights, [uniform, distance]) :- true.
domain(knn, metric, [minkowski, euclidean, manhattan]) :- true.
domain(nn, n_hidden_layers, [1, 5, 10, 20]) :- true.
domain(nn, n_neurons, [5, 10, 25, 50]) :- true.
domain(nn, activation, [logistic, tanh, relu]) :- true.
domain(nn, solver, [lbfgs, sgd, adam]) :- true.
domain(nn, alpha, [0.0001, 0.001, 0.01, 0.00001]) :- true.
domain(nn, learning_rate, [constant, invscaling, adaptive]) :- true.
domain(rf, n_estimators, [10, 25, 50, 75, 100]) :- true.
domain(rf, max_depth, [1, 5]) :- true.
domain(rf, max_features, [1, 4]) :- true.
domain(rf, min_samples_split, [2, 6]) :- true.
domain(rf, max_leaf_nodes, [2, 6]) :- true.
domain(rf, bootstrap, [true, false]) :- true.
domain(rf, criterion, [gini, entropy]) :- true.
dataset(adult) :- true.
metric(balanced_accuracy) :- true.
fairness_metric(demographic_parity_ratio) :- true.
sensitive_feature(sex, ['Male', 'Female']) :- true.
sensitive_feature(race, ['Amer-Indian-Eskimo', 'Asian-Pac-Islander', 'Black', 'Other', 'White']) :- true.
':=>'(mc0, unbalanced_dataset) :- true.
pipeline([Step_1_0], ZZ_0) :- (step(Step_1_0), '\\='(Step_1_0, classification), operator(classification, ZZ_0)).
pipeline([Step_1_1, Step_2_0], ZZ_1) :- (step(Step_1_1), step(Step_2_0), '\\='(Step_1_1, classification), '\\='(Step_2_0, classification), '\\='(Step_1_1, Step_2_0), operator(classification, ZZ_1)).
pipeline([Step_1_2, Step_2_1, Step_3_0], ZZ_2) :- (step(Step_1_2), step(Step_2_1), step(Step_3_0), '\\='(Step_1_2, classification), '\\='(Step_2_1, classification), '\\='(Step_3_0, classification), '\\='(Step_1_2, Step_2_1), '\\='(Step_1_2, Step_3_0), '\\='(Step_2_1, Step_3_0), operator(classification, ZZ_2)).
pipeline([Step_1_3, Step_2_2, Step_3_1, Step_4_0], ZZ_3) :- (step(Step_1_3), step(Step_2_2), step(Step_3_1), step(Step_4_0), '\\='(Step_1_3, classification), '\\='(Step_2_2, classification), '\\='(Step_3_1, classification), '\\='(Step_4_0, classification), '\\='(Step_1_3, Step_2_2), '\\='(Step_1_3, Step_3_1), '\\='(Step_1_3, Step_4_0), '\\='(Step_2_2, Step_3_1), '\\='(Step_2_2, Step_4_0), '\\='(Step_3_1, Step_4_0), operator(classification, ZZ_3)).
':=>'(p141797, sensitive_group(['Male'])) :- true.
':=>'(p759484, sensitive_group(['Female'])) :- true.
':=>'(p818136, sensitive_group(['Amer-Indian-Eskimo'])) :- true.
':=>'(p391456, sensitive_group(['Asian-Pac-Islander'])) :- true.
':=>'(p982953, sensitive_group(['Black'])) :- true.
':=>'(p617364, sensitive_group(['Other'])) :- true.
':=>'(p313908, sensitive_group(['White'])) :- true.
':=>'(p790418, sensitive_group(['Male', 'Amer-Indian-Eskimo'])) :- true.
':=>'(p932614, sensitive_group(['Male', 'Asian-Pac-Islander'])) :- true.
':=>'(p633287, sensitive_group(['Male', 'Black'])) :- true.
':=>'(p499635, sensitive_group(['Male', 'Other'])) :- true.
':=>'(p541165, sensitive_group(['Male', 'White'])) :- true.
':=>'(p184737, sensitive_group(['Female', 'Amer-Indian-Eskimo'])) :- true.
':=>'(p488599, sensitive_group(['Female', 'Asian-Pac-Islander'])) :- true.
':=>'(p371512, sensitive_group(['Female', 'Black'])) :- true.
':=>'(p328402, sensitive_group(['Female', 'Other'])) :- true.
':=>'(p103205, sensitive_group(['Female', 'White'])) :- true.

Checking Config
Exporting Config
Saving Graph
Exporting AutoML input
Exporting Space
Exporting Constraints
Input created for iteration Config(iteration=1, dataset=adult, metric=balanced_accuracy, fairnessMetric=demographic_parity_ratio, sensitiveFeatures=[sex, race], mode=max, batchSize=999999, timeBudget=3600, seed=42)
Here is the standard output/error of the command:

b175f798c6cd34dc4fdafd43121ec0b07345c776da5fcb84142e313fb5b277ab
Here is the standard output/error of the command:

Here is the standard output/error of the command:

WARNING:root:No module named 'rpy2': FairAdapt will be unavailable. To install, run:
pip install 'aif360[FairAdapt]'
INFO:flaml.tune.searcher.blendsearch:No low-cost partial config given to the search algorithm. For cost-frugal search, consider providing low-cost values for cost-related hps via 'low_cost_partial_config'. More info can be found at https://microsoft.github.io/FLAML/docs/FAQ#about-low_cost_partial_config-in-tune
AutoML: starting optimization.
1
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 4, 'max_leaf_nodes': 4, 'min_samples_split': 5, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.3058025604297844), 'balanced_accuracy': np.float64(0.6870577813477474), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.37), 'Asian-Pac-Islander_Male': np.float64(0.73), 'Black_Female': np.float64(0.44), 'Black_Male': np.float64(0.8), 'White_Female': np.float64(0.5), 'White_Male': np.float64(0.98)}, 'status': 'success', 'total_time': 150.00614404678345, 'fit_time': np.float64(29.87507300376892), 'score_time': np.float64(0.037332677841186525), 'absolute_time': 1746726029.7988348, 'flatten_demographic_parity_ratio': '0.44_0.68_0.06_0.25_0.1', 'flatten_balanced_accuracy': '0.67_0.6_0.7_0.73_0.73'}
2
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 8, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 3}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.12940059412643748), 'balanced_accuracy': np.float64(0.6852705800677538), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.34), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.13), 'Black_Male': np.float64(0.43), 'White_Female': np.float64(0.24), 'White_Male': np.float64(0.73)}, 'status': 'success', 'total_time': 5.779723882675171, 'fit_time': np.float64(0.029416608810424804), 'score_time': np.float64(0.5348350524902343), 'absolute_time': 1746726035.6295917, 'flatten_demographic_parity_ratio': '0.12_0.07_0.08_0.14_0.23', 'flatten_balanced_accuracy': '0.61_0.74_0.75_0.69_0.63'}
3
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 6, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.35676051252314805), 'balanced_accuracy': np.float64(0.520965370664285), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.81), 'Asian-Pac-Islander_Male': np.float64(0.97), 'Black_Female': np.float64(0.66), 'Black_Male': np.float64(0.99), 'White_Female': np.float64(0.36), 'White_Male': np.float64(0.56)}, 'status': 'success', 'total_time': 4.311248540878296, 'fit_time': np.float64(0.1520289421081543), 'score_time': np.float64(0.32735414505004884), 'absolute_time': 1746726039.9913075, 'flatten_demographic_parity_ratio': '0.35_0.34_0.34_0.4_0.36', 'flatten_balanced_accuracy': '0.52_0.53_0.52_0.52_0.53'}
4
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 3, 'max_leaf_nodes': 4, 'min_samples_split': 2, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.2376712353162509), 'balanced_accuracy': np.float64(0.6658849204631444), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.79), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.3), 'Black_Male': np.float64(0.47), 'White_Female': np.float64(0.24), 'White_Male': np.float64(0.5)}, 'status': 'success', 'total_time': 8.778474807739258, 'fit_time': np.float64(1.6581807613372803), 'score_time': np.float64(0.022181606292724608), 'absolute_time': 1746726048.822502, 'flatten_demographic_parity_ratio': '0.23_0.24_0.23_0.28_0.21', 'flatten_balanced_accuracy': '0.66_0.68_0.67_0.66_0.66'}
5
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.18872288298459836), 'balanced_accuracy': np.float64(0.7880539368087296), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.43), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.19), 'Black_Male': np.float64(0.54), 'White_Female': np.float64(0.26), 'White_Male': np.float64(0.87)}, 'status': 'success', 'total_time': 122.14684081077576, 'fit_time': np.float64(24.313189792633057), 'score_time': np.float64(0.03755440711975098), 'absolute_time': 1746726171.0227022, 'flatten_demographic_parity_ratio': '0.2_0.16_0.18_0.25_0.16', 'flatten_balanced_accuracy': '0.79_0.78_0.78_0.8_0.79'}
6
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 4, 'max_leaf_nodes': 4, 'min_samples_split': 3, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.6226683990225281), 'balanced_accuracy': np.float64(0.5938565737943085), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.73), 'Asian-Pac-Islander_Male': np.float64(0.84), 'Black_Female': np.float64(0.86), 'Black_Male': np.float64(0.79), 'White_Female': np.float64(0.84), 'White_Male': np.float64(0.85)}, 'status': 'success', 'total_time': 55.66781044006348, 'fit_time': np.float64(11.00570101737976), 'score_time': np.float64(0.03898615837097168), 'absolute_time': 1746726227.542982, 'flatten_demographic_parity_ratio': '0.62_0.6_0.88_0.63_0.38', 'flatten_balanced_accuracy': '0.6_0.64_0.6_0.63_0.5'}
7
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 4, 'max_leaf_nodes': 6, 'min_samples_split': 2, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.5079201560946754), 'balanced_accuracy': np.float64(0.5658865696099732), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.82), 'Asian-Pac-Islander_Male': np.float64(0.84), 'Black_Female': np.float64(0.73), 'Black_Male': np.float64(0.65), 'White_Female': np.float64(0.77), 'White_Male': np.float64(0.75)}, 'status': 'success', 'total_time': 116.3100106716156, 'fit_time': np.float64(23.13646492958069), 'score_time': np.float64(0.03824491500854492), 'absolute_time': 1746726343.9096653, 'flatten_demographic_parity_ratio': '0.48_0.5_0.13_0.66_0.78', 'flatten_balanced_accuracy': '0.47_0.61_0.73_0.51_0.51'}
8
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 4, 'max_leaf_nodes': 3, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.5941660873613155), 'balanced_accuracy': np.float64(0.5111778490780583), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.79), 'Asian-Pac-Islander_Male': np.float64(0.83), 'Black_Female': np.float64(0.89), 'Black_Male': np.float64(0.74), 'White_Female': np.float64(0.86), 'White_Male': np.float64(0.85)}, 'status': 'success', 'total_time': 33.03716707229614, 'fit_time': np.float64(6.474789047241211), 'score_time': np.float64(0.0393639087677002), 'absolute_time': 1746726377.005139, 'flatten_demographic_parity_ratio': '0.41_0.76_0.63_0.55_0.62', 'flatten_balanced_accuracy': '0.52_0.51_0.51_0.5_0.51'}
9
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 4, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.5322501935397144), 'balanced_accuracy': np.float64(0.5084827440909512), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.73), 'Asian-Pac-Islander_Male': np.float64(0.92), 'Black_Female': np.float64(0.79), 'Black_Male': np.float64(0.56), 'White_Female': np.float64(0.86), 'White_Male': np.float64(0.84)}, 'status': 'success', 'total_time': 18.810482263565063, 'fit_time': np.float64(3.652859926223755), 'score_time': np.float64(0.02784285545349121), 'absolute_time': 1746726395.8739295, 'flatten_demographic_parity_ratio': '0.34_0.14_0.69_0.75_0.74', 'flatten_balanced_accuracy': '0.51_0.5_0.51_0.51_0.51'}
10
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 16, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.17418499286369477), 'balanced_accuracy': np.float64(0.656348551170668), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.88), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.33), 'Black_Male': np.float64(0.56), 'White_Female': np.float64(0.17), 'White_Male': np.float64(0.25)}, 'status': 'success', 'total_time': 3.4196712970733643, 'fit_time': np.float64(0.24431519508361815), 'score_time': np.float64(0.19150538444519044), 'absolute_time': 1746726399.3518214, 'flatten_demographic_parity_ratio': '0.14_0.17_0.2_0.19_0.17', 'flatten_balanced_accuracy': '0.65_0.66_0.65_0.67_0.66'}
The result for {'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_split': 6, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_split': 6, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')} was NaN

11
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_split': 6, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5096514780595108), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.94), 'Asian-Pac-Islander_Male': np.float64(0.94), 'Black_Female': np.float64(0.82), 'Black_Male': np.float64(0.66), 'White_Female': np.float64(0.86), 'White_Male': np.float64(0.82)}, 'status': 'fail', 'total_time': 36.42627215385437, 'fit_time': np.float64(6.869377613067627), 'score_time': np.float64(0.03520979881286621), 'absolute_time': 1746726435.8376784, 'flatten_demographic_parity_ratio': '0.61_nan_0.68_0.68_0.62', 'flatten_balanced_accuracy': '0.53_0.5_0.52_0.5_0.5'}
12
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.503741156377161), 'balanced_accuracy': np.float64(0.5091969624594698), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.89), 'Asian-Pac-Islander_Male': np.float64(0.87), 'Black_Female': np.float64(0.71), 'Black_Male': np.float64(0.58), 'White_Female': np.float64(0.74), 'White_Male': np.float64(0.71)}, 'status': 'success', 'total_time': 84.41717171669006, 'fit_time': np.float64(13.146010875701904), 'score_time': np.float64(0.05134177207946777), 'absolute_time': 1746726520.314523, 'flatten_demographic_parity_ratio': '0.39_0.71_0.56_0.6_0.25', 'flatten_balanced_accuracy': '0.53_0.5_0.52_0.5_0.5'}
13
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 4, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.6075026659276762), 'balanced_accuracy': np.float64(0.5125786261147111), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.83), 'Asian-Pac-Islander_Male': np.float64(0.92), 'Black_Female': np.float64(0.83), 'Black_Male': np.float64(0.68), 'White_Female': np.float64(0.82), 'White_Male': np.float64(0.8)}, 'status': 'success', 'total_time': 98.20800423622131, 'fit_time': np.float64(19.508800315856934), 'score_time': np.float64(0.04107999801635742), 'absolute_time': 1746726618.583841, 'flatten_demographic_parity_ratio': '0.39_0.79_0.7_0.55_0.61', 'flatten_balanced_accuracy': '0.51_0.51_0.52_0.51_0.51'}
14
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.011917845514529143), 'balanced_accuracy': np.float64(0.7426354641992484), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.01), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.01), 'Black_Male': np.float64(0.47), 'White_Female': np.float64(0.02), 'White_Male': np.float64(0.84)}, 'status': 'success', 'total_time': 1.5834109783172607, 'fit_time': np.float64(0.22181134223937987), 'score_time': np.float64(0.010443925857543945), 'absolute_time': 1746726620.9191146, 'flatten_demographic_parity_ratio': '0.0_0.02_0.0_0.02_0.02', 'flatten_balanced_accuracy': '0.73_0.74_0.73_0.76_0.75'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

15
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 6, 'min_samples_split': 2, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'Asian-Pac-Islander_Female': -inf, 'Asian-Pac-Islander_Male': -inf, 'Black_Female': -inf, 'Black_Male': -inf, 'White_Female': -inf, 'White_Male': -inf}, 'status': 'fail', 'total_time': 0.0005252361297607422, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746726620.9815767}
16
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 3}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.07337498109126647), 'balanced_accuracy': np.float64(0.7010402978055661), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.16), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.07), 'Black_Male': np.float64(0.34), 'White_Female': np.float64(0.14), 'White_Male': np.float64(0.67)}, 'status': 'success', 'total_time': 137.90270233154297, 'fit_time': np.float64(27.271436500549317), 'score_time': np.float64(0.12480449676513672), 'absolute_time': 1746726758.9469955, 'flatten_demographic_parity_ratio': '0.04_0.05_0.03_0.03_0.22', 'flatten_balanced_accuracy': '0.72_0.71_0.72_0.71_0.65'}
17
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 7, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.16083424890571377), 'balanced_accuracy': np.float64(0.731797223922227), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.41), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.16), 'Black_Male': np.float64(0.44), 'White_Female': np.float64(0.29), 'White_Male': np.float64(0.77)}, 'status': 'success', 'total_time': 3.544079065322876, 'fit_time': np.float64(0.16045632362365722), 'score_time': np.float64(0.24501481056213378), 'absolute_time': 1746726762.5525546, 'flatten_demographic_parity_ratio': '0.19_0.13_0.17_0.2_0.11', 'flatten_balanced_accuracy': '0.71_0.75_0.73_0.73_0.74'}
18
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 2, 'max_leaf_nodes': 6, 'min_samples_split': 2, 'n_estimators': np.int64(75)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.03233984371193929), 'balanced_accuracy': np.float64(0.7824888166435142), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.06), 'Asian-Pac-Islander_Male': np.float64(0.96), 'Black_Female': np.float64(0.04), 'Black_Male': np.float64(0.49), 'White_Female': np.float64(0.09), 'White_Male': np.float64(0.99)}, 'status': 'success', 'total_time': 7.944429159164429, 'fit_time': np.float64(1.486474370956421), 'score_time': np.float64(0.025141239166259766), 'absolute_time': 1746726770.5578086, 'flatten_demographic_parity_ratio': '0.04_0.03_0.04_0.02_0.02', 'flatten_balanced_accuracy': '0.78_0.78_0.78_0.79_0.78'}
19
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.1055493860755721), 'balanced_accuracy': np.float64(0.7684281347363362), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.31), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.11), 'Black_Male': np.float64(0.45), 'White_Female': np.float64(0.24), 'White_Male': np.float64(0.75)}, 'status': 'success', 'total_time': 86.68547320365906, 'fit_time': np.float64(17.228618812561034), 'score_time': np.float64(0.01540827751159668), 'absolute_time': 1746726857.307587, 'flatten_demographic_parity_ratio': '0.13_0.1_0.1_0.1_0.09', 'flatten_balanced_accuracy': '0.78_0.77_0.77_0.77_0.76'}
20
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 6, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.5804181465104596), 'balanced_accuracy': np.float64(0.48802185227018774), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.66), 'Asian-Pac-Islander_Male': np.float64(0.65), 'Black_Female': np.float64(0.72), 'Black_Male': np.float64(1.0), 'White_Female': np.float64(0.68), 'White_Male': np.float64(0.74)}, 'status': 'success', 'total_time': 22.132701635360718, 'fit_time': np.float64(4.307823038101196), 'score_time': np.float64(0.03325839042663574), 'absolute_time': 1746726879.521903, 'flatten_demographic_parity_ratio': '0.67_0.39_0.67_0.7_0.47', 'flatten_balanced_accuracy': '0.47_0.49_0.48_0.5_0.49'}
Timeout
21
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(25), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'Asian-Pac-Islander_Female': -inf, 'Asian-Pac-Islander_Male': -inf, 'Black_Female': -inf, 'Black_Male': -inf, 'White_Female': -inf, 'White_Male': -inf}, 'status': 'fail', 'total_time': 900.0024304389954, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746727779.5885725}
22
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 7}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.1456466194845916), 'balanced_accuracy': np.float64(0.8036253536720451), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.35), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.15), 'Black_Male': np.float64(0.57), 'White_Female': np.float64(0.24), 'White_Male': np.float64(0.87)}, 'status': 'success', 'total_time': 131.01068139076233, 'fit_time': np.float64(26.098012924194336), 'score_time': np.float64(0.016859102249145507), 'absolute_time': 1746727911.4607189, 'flatten_demographic_parity_ratio': '0.17_0.11_0.15_0.16_0.14', 'flatten_balanced_accuracy': '0.81_0.8_0.8_0.81_0.8'}
23
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.0), 'balanced_accuracy': np.float64(0.49989496473960954), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.0), 'Asian-Pac-Islander_Male': np.float64(0.0), 'Black_Female': np.float64(0.2), 'Black_Male': np.float64(0.2), 'White_Female': np.float64(0.27), 'White_Male': np.float64(0.46)}, 'status': 'success', 'total_time': 245.85250663757324, 'fit_time': np.float64(44.32229056358337), 'score_time': np.float64(2.3887304782867433), 'absolute_time': 1746728157.3840125, 'flatten_demographic_parity_ratio': '0.0_0.0_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

24
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'Asian-Pac-Islander_Female': -inf, 'Asian-Pac-Islander_Male': -inf, 'Black_Female': -inf, 'Black_Male': -inf, 'White_Female': -inf, 'White_Male': -inf}, 'status': 'fail', 'total_time': 0.00045108795166015625, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746728157.4543135}
25
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.05093832364294683), 'balanced_accuracy': np.float64(0.7459434033665727), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.25), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.05), 'Black_Male': np.float64(0.34), 'White_Female': np.float64(0.2), 'White_Male': np.float64(0.72)}, 'status': 'success', 'total_time': 24.10296320915222, 'fit_time': np.float64(4.7427483081817625), 'score_time': np.float64(0.012257909774780274), 'absolute_time': 1746728181.6235328, 'flatten_demographic_parity_ratio': '0.03_0.04_0.04_0.05_0.09', 'flatten_balanced_accuracy': '0.74_0.74_0.75_0.74_0.75'}
26
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 5, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.6124256776136245), 'balanced_accuracy': np.float64(0.5346032527462748), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.77), 'Asian-Pac-Islander_Male': np.float64(0.93), 'Black_Female': np.float64(0.81), 'Black_Male': np.float64(1.0), 'White_Female': np.float64(0.62), 'White_Male': np.float64(0.79)}, 'status': 'success', 'total_time': 1.2287766933441162, 'fit_time': np.float64(0.1404932975769043), 'score_time': np.float64(0.02516512870788574), 'absolute_time': 1746728182.9239352, 'flatten_demographic_parity_ratio': '0.6_0.59_0.64_0.65_0.58', 'flatten_balanced_accuracy': '0.53_0.54_0.53_0.53_0.54'}
27
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 6, 'n_estimators': np.int64(100)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.7157146928687719), 'balanced_accuracy': np.float64(0.5067221046760018), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.83), 'Asian-Pac-Islander_Male': np.float64(0.83), 'Black_Female': np.float64(0.94), 'Black_Male': np.float64(0.83), 'White_Female': np.float64(0.92), 'White_Male': np.float64(0.91)}, 'status': 'success', 'total_time': 56.36853504180908, 'fit_time': np.float64(11.126494216918946), 'score_time': np.float64(0.0478935718536377), 'absolute_time': 1746728239.3640835, 'flatten_demographic_parity_ratio': '0.75_0.78_0.67_0.6_0.77', 'flatten_balanced_accuracy': '0.51_0.5_0.5_0.51_0.51'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

28
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 15, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'Asian-Pac-Islander_Female': -inf, 'Asian-Pac-Islander_Male': -inf, 'Black_Female': -inf, 'Black_Male': -inf, 'White_Female': -inf, 'White_Male': -inf}, 'status': 'fail', 'total_time': 0.00043964385986328125, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746728239.4393618}
29
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 4, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_features_normalization_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.05972001616348732), 'balanced_accuracy': np.float64(0.7381659928967623), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.08), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.07), 'Black_Male': np.float64(0.46), 'White_Female': np.float64(0.1), 'White_Male': np.float64(0.8)}, 'status': 'success', 'total_time': 10.890113592147827, 'fit_time': np.float64(2.051550054550171), 'score_time': np.float64(0.028429317474365234), 'absolute_time': 1746728250.4018302, 'flatten_demographic_parity_ratio': '0.08_0.1_0.05_0.03_0.05', 'flatten_balanced_accuracy': '0.73_0.73_0.74_0.74_0.75'}
30
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.33381277220138766), 'balanced_accuracy': np.float64(0.7184623790922207), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.8), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.39), 'Black_Male': np.float64(0.36), 'White_Female': np.float64(0.33), 'White_Male': np.float64(0.47)}, 'status': 'success', 'total_time': 16.317997694015503, 'fit_time': np.float64(1.1178083419799805), 'score_time': np.float64(1.0539906024932861), 'absolute_time': 1746728267.71027, 'flatten_demographic_parity_ratio': '0.35_0.31_0.35_0.35_0.3', 'flatten_balanced_accuracy': '0.71_0.72_0.72_0.72_0.71'}
31
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 4, 'max_leaf_nodes': 3, 'min_samples_split': 4, 'n_estimators': np.int64(25)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.5506358854862905), 'balanced_accuracy': np.float64(0.5025000272155626), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.9), 'Asian-Pac-Islander_Male': np.float64(0.91), 'Black_Female': np.float64(0.77), 'Black_Male': np.float64(0.65), 'White_Female': np.float64(0.83), 'White_Male': np.float64(0.81)}, 'status': 'success', 'total_time': 33.81467533111572, 'fit_time': np.float64(6.657911348342895), 'score_time': np.float64(0.026500844955444337), 'absolute_time': 1746728301.6021564, 'flatten_demographic_parity_ratio': '0.35_0.62_0.56_0.51_0.72', 'flatten_balanced_accuracy': '0.49_0.5_0.52_0.5_0.51'}
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(10), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(10), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')} was NaN

32
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(10), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5), 'by_group': {'Asian-Pac-Islander_Female': np.float64(1.0), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(1.0), 'Black_Male': np.float64(1.0), 'White_Female': np.float64(1.0), 'White_Male': np.float64(1.0)}, 'status': 'fail', 'total_time': 18.902223587036133, 'fit_time': np.float64(3.4473567485809324), 'score_time': np.float64(0.12525463104248047), 'absolute_time': 1746728320.587136, 'flatten_demographic_parity_ratio': 'nan_nan_nan_nan_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
33
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 4, 'max_leaf_nodes': 3, 'min_samples_split': 6, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.7029626522832336), 'balanced_accuracy': np.float64(0.511192160163788), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.86), 'Asian-Pac-Islander_Male': np.float64(0.88), 'Black_Female': np.float64(0.92), 'Black_Male': np.float64(0.84), 'White_Female': np.float64(0.91), 'White_Male': np.float64(0.89)}, 'status': 'success', 'total_time': 21.221726417541504, 'fit_time': np.float64(4.126433038711548), 'score_time': np.float64(0.03238964080810547), 'absolute_time': 1746728341.9127388, 'flatten_demographic_parity_ratio': '0.87_0.64_0.77_0.56_0.67', 'flatten_balanced_accuracy': '0.52_0.51_0.52_0.49_0.51'}
34
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 9}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.3070541297996475), 'balanced_accuracy': np.float64(0.7784097470011012), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.48), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.32), 'Black_Male': np.float64(0.53), 'White_Female': np.float64(0.37), 'White_Male': np.float64(0.79)}, 'status': 'success', 'total_time': 326.4592795372009, 'fit_time': np.float64(64.85441379547119), 'score_time': np.float64(0.1702718734741211), 'absolute_time': 1746728668.4567056, 'flatten_demographic_parity_ratio': '0.31_0.3_0.3_0.33_0.3', 'flatten_balanced_accuracy': '0.77_0.77_0.78_0.79_0.77'}
35
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 11, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.1530226756909888), 'balanced_accuracy': np.float64(0.7466734365124662), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.35), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.15), 'Black_Male': np.float64(0.41), 'White_Female': np.float64(0.26), 'White_Male': np.float64(0.74)}, 'status': 'success', 'total_time': 3.563272714614868, 'fit_time': np.float64(0.11231417655944824), 'score_time': np.float64(0.26468515396118164), 'absolute_time': 1746728672.111313, 'flatten_demographic_parity_ratio': '0.19_0.14_0.15_0.14_0.14', 'flatten_balanced_accuracy': '0.72_0.74_0.76_0.76_0.74'}
36
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 6, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.3843354223574922), 'balanced_accuracy': np.float64(0.6730781431789664), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.4), 'Asian-Pac-Islander_Male': np.float64(0.85), 'Black_Female': np.float64(0.5), 'Black_Male': np.float64(0.82), 'White_Female': np.float64(0.55), 'White_Male': np.float64(0.99)}, 'status': 'success', 'total_time': 137.64883494377136, 'fit_time': np.float64(27.413977336883544), 'score_time': np.float64(0.032359886169433597), 'absolute_time': 1746728809.8465037, 'flatten_demographic_parity_ratio': '0.24_0.42_0.35_0.59_0.32', 'flatten_balanced_accuracy': '0.66_0.67_0.71_0.7_0.63'}
37
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.13738762330724233), 'balanced_accuracy': np.float64(0.7742502161271972), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.24), 'Asian-Pac-Islander_Male': np.float64(0.99), 'Black_Female': np.float64(0.14), 'Black_Male': np.float64(0.57), 'White_Female': np.float64(0.25), 'White_Male': np.float64(0.91)}, 'status': 'success', 'total_time': 13.272802591323853, 'fit_time': np.float64(2.580325984954834), 'score_time': np.float64(0.009832143783569336), 'absolute_time': 1746728823.2117126, 'flatten_demographic_parity_ratio': '0.14_0.12_0.14_0.15_0.14', 'flatten_balanced_accuracy': '0.77_0.77_0.78_0.78_0.77'}
38
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(10), 'solver': np.str_('adam')}, 'features': {'type': np.str_('SelectKBest'), 'k': 3}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.6545804640727443), 'balanced_accuracy': np.float64(0.5092301779469391), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.97), 'Asian-Pac-Islander_Male': np.float64(0.89), 'Black_Female': np.float64(0.79), 'Black_Male': np.float64(0.65), 'White_Female': np.float64(0.81), 'White_Male': np.float64(0.79)}, 'status': 'success', 'total_time': 36.28471374511719, 'fit_time': np.float64(4.9324541091918945), 'score_time': np.float64(0.027608728408813475), 'absolute_time': 1746728859.59952, 'flatten_demographic_parity_ratio': '0.38_0.31_0.85_0.93_0.8', 'flatten_balanced_accuracy': '0.53_0.51_0.51_0.5_0.5'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 609, in objective
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_param_validation.py", line 216, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 431, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 517, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 5 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
5 fits failed with the following error:
Traceback (most recent call last):
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 866, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "/usr/local/lib/python3.12/site-packages/sklearn/base.py", line 1389, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 518, in fit
    Xt, yt = self._fit(X, y, routed_params, raw_params=params)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 430, in _fit
    X, fitted_transformer = fit_transform_one_cached(
                            ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/joblib/memory.py", line 312, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 1383, in _fit_transform_one
    res = transformer.fit_transform(X, y, **params.get("fit_transform", {}))
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_set_output.py", line 319, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 76, in fit_transform
    df_X, df_y = self._prepare_dataset(X, y, fit=True)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 37, in _prepare_dataset
    raise Exception("No sensitive features to mitigate")
Exception: No sensitive features to mitigate


39
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'Asian-Pac-Islander_Female': -inf, 'Asian-Pac-Islander_Male': -inf, 'Black_Female': -inf, 'Black_Male': -inf, 'White_Female': -inf, 'White_Male': -inf}, 'status': 'fail', 'total_time': 1.2870533466339111, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746728862.2160757}
40
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.6453325478168109), 'balanced_accuracy': np.float64(0.5273323446214777), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.9), 'Asian-Pac-Islander_Male': np.float64(0.79), 'Black_Female': np.float64(0.94), 'Black_Male': np.float64(0.71), 'White_Female': np.float64(0.93), 'White_Male': np.float64(0.65)}, 'status': 'success', 'total_time': 12.070081233978271, 'fit_time': np.float64(1.6131799221038818), 'score_time': np.float64(0.3698172092437744), 'absolute_time': 1746728874.3796203, 'flatten_demographic_parity_ratio': '0.67_0.63_0.67_0.64_0.61', 'flatten_balanced_accuracy': '0.52_0.54_0.51_0.54_0.52'}
41
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 4, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.020189644320076895), 'balanced_accuracy': np.float64(0.7021554062130402), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.05), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.02), 'Black_Male': np.float64(0.26), 'White_Female': np.float64(0.03), 'White_Male': np.float64(0.49)}, 'status': 'success', 'total_time': 4.061938524246216, 'fit_time': np.float64(0.7200787544250489), 'score_time': np.float64(0.018854475021362303), 'absolute_time': 1746728878.5464206, 'flatten_demographic_parity_ratio': '0.02_0.03_0.02_0.02_0.01', 'flatten_balanced_accuracy': '0.7_0.7_0.71_0.7_0.7'}
42
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.10099559764952826), 'balanced_accuracy': np.float64(0.7383950107803582), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.19), 'Asian-Pac-Islander_Male': np.float64(0.98), 'Black_Female': np.float64(0.11), 'Black_Male': np.float64(0.44), 'White_Female': np.float64(0.26), 'White_Male': np.float64(0.95)}, 'status': 'success', 'total_time': 72.02159857749939, 'fit_time': np.float64(14.323146772384643), 'score_time': np.float64(0.014243888854980468), 'absolute_time': 1746728950.6685796, 'flatten_demographic_parity_ratio': '0.18_0.06_0.08_0.11_0.08', 'flatten_balanced_accuracy': '0.73_0.74_0.74_0.75_0.73'}
43
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 8, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.6806048624915654), 'balanced_accuracy': np.float64(0.5696479534288327), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.76), 'Asian-Pac-Islander_Male': np.float64(0.88), 'Black_Female': np.float64(0.85), 'Black_Male': np.float64(0.88), 'White_Female': np.float64(0.71), 'White_Male': np.float64(1.0)}, 'status': 'success', 'total_time': 1.5599555969238281, 'fit_time': np.float64(0.1508619785308838), 'score_time': np.float64(0.054107952117919925), 'absolute_time': 1746728952.3341737, 'flatten_demographic_parity_ratio': '0.56_0.73_0.7_0.71_0.7', 'flatten_balanced_accuracy': '0.57_0.57_0.57_0.57_0.57'}
44
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 7, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_features_normalization_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.09210225153515425), 'balanced_accuracy': np.float64(0.7577897674051641), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.51), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.09), 'Black_Male': np.float64(0.4), 'White_Female': np.float64(0.21), 'White_Male': np.float64(0.73)}, 'status': 'success', 'total_time': 15.041436910629272, 'fit_time': np.float64(0.1889962673187256), 'score_time': np.float64(1.397536563873291), 'absolute_time': 1746728967.4788728, 'flatten_demographic_parity_ratio': '0.1_0.09_0.1_0.11_0.06', 'flatten_balanced_accuracy': '0.75_0.76_0.76_0.76_0.76'}
45
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.44942042665084203), 'balanced_accuracy': np.float64(0.7510673466573913), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.63), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.49), 'Black_Male': np.float64(0.58), 'White_Female': np.float64(0.56), 'White_Male': np.float64(0.86)}, 'status': 'success', 'total_time': 270.2402687072754, 'fit_time': np.float64(53.93833155632019), 'score_time': np.float64(0.04232292175292969), 'absolute_time': 1746729237.8226779, 'flatten_demographic_parity_ratio': '0.59_0.17_0.29_0.55_0.65', 'flatten_balanced_accuracy': '0.7_0.78_0.8_0.77_0.7'}
46
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 14, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.16059419050348048), 'balanced_accuracy': np.float64(0.7363379607403877), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.43), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.16), 'Black_Male': np.float64(0.39), 'White_Female': np.float64(0.3), 'White_Male': np.float64(0.71)}, 'status': 'success', 'total_time': 5.025576114654541, 'fit_time': np.float64(0.12403054237365722), 'score_time': np.float64(0.3996901988983154), 'absolute_time': 1746729242.9675927, 'flatten_demographic_parity_ratio': '0.19_0.15_0.18_0.13_0.15', 'flatten_balanced_accuracy': '0.71_0.74_0.73_0.76_0.74'}
47
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.5299156487485028), 'balanced_accuracy': np.float64(0.5005440830020186), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.65), 'Asian-Pac-Islander_Male': np.float64(0.64), 'Black_Female': np.float64(0.8), 'Black_Male': np.float64(0.88), 'White_Female': np.float64(0.75), 'White_Male': np.float64(0.78)}, 'status': 'success', 'total_time': 145.07182002067566, 'fit_time': np.float64(28.852851486206056), 'score_time': np.float64(0.03565964698791504), 'absolute_time': 1746729389.2721064, 'flatten_demographic_parity_ratio': '0.76_0.32_0.44_0.49_0.63', 'flatten_balanced_accuracy': '0.52_0.5_0.49_0.5_0.5'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

48
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'Asian-Pac-Islander_Female': -inf, 'Asian-Pac-Islander_Male': -inf, 'Black_Female': -inf, 'Black_Male': -inf, 'White_Female': -inf, 'White_Male': -inf}, 'status': 'fail', 'total_time': 0.00045800209045410156, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746729389.3892174}
49
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 1}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.2429414790595013), 'balanced_accuracy': np.float64(0.5759113500170017), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.36), 'Asian-Pac-Islander_Male': np.float64(0.86), 'Black_Female': np.float64(0.26), 'Black_Male': np.float64(0.53), 'White_Female': np.float64(0.42), 'White_Male': np.float64(0.8)}, 'status': 'success', 'total_time': 15.861317873001099, 'fit_time': np.float64(0.019828271865844727), 'score_time': np.float64(1.5443454265594483), 'absolute_time': 1746729405.3511102, 'flatten_demographic_parity_ratio': '0.17_0.38_0.3_0.07_0.29', 'flatten_balanced_accuracy': '0.57_0.59_0.59_0.54_0.59'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

50
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_features_mitigation_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'Asian-Pac-Islander_Female': -inf, 'Asian-Pac-Islander_Male': -inf, 'Black_Female': -inf, 'Black_Male': -inf, 'White_Female': -inf, 'White_Male': -inf}, 'status': 'fail', 'total_time': 0.000415802001953125, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746729405.456628}
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')} was NaN

51
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5104228055732489), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.9), 'Asian-Pac-Islander_Male': np.float64(0.89), 'Black_Female': np.float64(0.77), 'Black_Male': np.float64(0.65), 'White_Female': np.float64(0.78), 'White_Male': np.float64(0.75)}, 'status': 'fail', 'total_time': 31.05119276046753, 'fit_time': np.float64(6.100877952575684), 'score_time': np.float64(0.030714893341064455), 'absolute_time': 1746729436.611069, 'flatten_demographic_parity_ratio': '0.84_0.42_0.36_nan_0.81', 'flatten_balanced_accuracy': '0.52_0.51_0.51_0.5_0.51'}
52
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(50), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 3}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.169037066470567), 'balanced_accuracy': np.float64(0.7252816874649136), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.36), 'Asian-Pac-Islander_Male': np.float64(0.99), 'Black_Female': np.float64(0.18), 'Black_Male': np.float64(0.62), 'White_Female': np.float64(0.32), 'White_Male': np.float64(0.9)}, 'status': 'success', 'total_time': 74.84316563606262, 'fit_time': np.float64(14.386634016036988), 'score_time': np.float64(0.23431992530822754), 'absolute_time': 1746729511.5582101, 'flatten_demographic_parity_ratio': '0.12_0.12_0.13_0.1_0.37', 'flatten_balanced_accuracy': '0.74_0.73_0.74_0.74_0.68'}
AutoML: optimization done.
AutoML: miner done.
AutoML: export done.
Here is the standard output/error of the command:

Here is the standard output/error of the command:

Here is the standard output/error of the command:

hamlet_401015883
AutoML execution ended
