Sensitive groups ready!
Theory ready!
Theory:
step(normalization) :- true.
step(features) :- true.
step(mitigation) :- true.
step(rebalancing) :- true.
step(classification) :- true.
operator(normalization, power_transformer) :- true.
operator(normalization, robust_scaler) :- true.
operator(normalization, standard) :- true.
operator(normalization, minmax) :- true.
operator(features, select_k_best) :- true.
operator(features, pca) :- true.
operator(mitigation, corr_remover) :- true.
operator(mitigation, lfr) :- true.
operator(rebalancing, near_miss) :- true.
operator(rebalancing, smote) :- true.
operator(classification, knn) :- true.
operator(classification, nn) :- true.
operator(classification, rf) :- true.
hyperparameter(robust_scaler, with_centering, choice) :- true.
hyperparameter(robust_scaler, with_scaling, choice) :- true.
hyperparameter(standard, with_mean, choice) :- true.
hyperparameter(standard, with_std, choice) :- true.
hyperparameter(select_k_best, k, randint) :- true.
hyperparameter(pca, n_components, randint) :- true.
hyperparameter(corr_remover, alpha, choice) :- true.
hyperparameter(lfr, n_prototypes, choice) :- true.
hyperparameter(lfr, reconstruct_weight, choice) :- true.
hyperparameter(lfr, fairness_weight, choice) :- true.
hyperparameter(near_miss, n_neighbors, randint) :- true.
hyperparameter(smote, k_neighbors, randint) :- true.
hyperparameter(knn, n_neighbors, randint) :- true.
hyperparameter(knn, weights, choice) :- true.
hyperparameter(knn, metric, choice) :- true.
hyperparameter(nn, n_hidden_layers, choice) :- true.
hyperparameter(nn, n_neurons, choice) :- true.
hyperparameter(nn, activation, choice) :- true.
hyperparameter(nn, solver, choice) :- true.
hyperparameter(nn, alpha, choice) :- true.
hyperparameter(nn, learning_rate, choice) :- true.
hyperparameter(rf, n_estimators, choice) :- true.
hyperparameter(rf, max_depth, randint) :- true.
hyperparameter(rf, max_features, randint) :- true.
hyperparameter(rf, min_samples_split, randint) :- true.
hyperparameter(rf, max_leaf_nodes, randint) :- true.
hyperparameter(rf, bootstrap, choice) :- true.
hyperparameter(rf, criterion, choice) :- true.
domain(robust_scaler, with_centering, [true, false]) :- true.
domain(robust_scaler, with_scaling, [true, false]) :- true.
domain(standard, with_mean, [true, false]) :- true.
domain(standard, with_std, [true, false]) :- true.
domain(select_k_best, k, [1, 10]) :- true.
domain(pca, n_components, [1, 8]) :- true.
domain(corr_remover, alpha, [0.25, 0.5, 0.75, 1.0]) :- true.
domain(lfr, n_prototypes, [10, 50, 100, 200]) :- true.
domain(lfr, reconstruct_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(lfr, fairness_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(near_miss, n_neighbors, [1, 4]) :- true.
domain(smote, k_neighbors, [5, 8]) :- true.
domain(knn, n_neighbors, [3, 20]) :- true.
domain(knn, weights, [uniform, distance]) :- true.
domain(knn, metric, [minkowski, euclidean, manhattan]) :- true.
domain(nn, n_hidden_layers, [1, 5, 10, 20]) :- true.
domain(nn, n_neurons, [5, 10, 25, 50]) :- true.
domain(nn, activation, [logistic, tanh, relu]) :- true.
domain(nn, solver, [lbfgs, sgd, adam]) :- true.
domain(nn, alpha, [0.0001, 0.001, 0.01, 0.00001]) :- true.
domain(nn, learning_rate, [constant, invscaling, adaptive]) :- true.
domain(rf, n_estimators, [10, 25, 50, 75, 100]) :- true.
domain(rf, max_depth, [1, 5]) :- true.
domain(rf, max_features, [1, 4]) :- true.
domain(rf, min_samples_split, [2, 6]) :- true.
domain(rf, max_leaf_nodes, [2, 6]) :- true.
domain(rf, bootstrap, [true, false]) :- true.
domain(rf, criterion, [gini, entropy]) :- true.
':=>'(c1, mandatory([mitigation], classification)) :- true.
':=>'(c3, mandatory_order([mitigation, features], classification)) :- true.
':=>'(c4, mandatory_order([mitigation, normalization], classification)) :- true.
':=>'(c5, mandatory([normalization], knn)) :- true.
':=>'(c6, mandatory([normalization], nn)) :- true.
dataset('credit-g') :- true.
metric(balanced_accuracy) :- true.
fairness_metric(demographic_parity_ratio) :- true.
sensitive_feature(personal_status, [single, 'div/dep/mar', 'mar/wid']) :- true.
sensitive_feature(sex, [male, female]) :- true.
':=>'(mc0, unbalanced_dataset) :- true.
pipeline([Step_1_0], ZZ_0) :- (step(Step_1_0), '\\='(Step_1_0, classification), operator(classification, ZZ_0)).
pipeline([Step_1_1, Step_2_0], ZZ_1) :- (step(Step_1_1), step(Step_2_0), '\\='(Step_1_1, classification), '\\='(Step_2_0, classification), '\\='(Step_1_1, Step_2_0), operator(classification, ZZ_1)).
pipeline([Step_1_2, Step_2_1, Step_3_0], ZZ_2) :- (step(Step_1_2), step(Step_2_1), step(Step_3_0), '\\='(Step_1_2, classification), '\\='(Step_2_1, classification), '\\='(Step_3_0, classification), '\\='(Step_1_2, Step_2_1), '\\='(Step_1_2, Step_3_0), '\\='(Step_2_1, Step_3_0), operator(classification, ZZ_2)).
pipeline([Step_1_3, Step_2_2, Step_3_1, Step_4_0], ZZ_3) :- (step(Step_1_3), step(Step_2_2), step(Step_3_1), step(Step_4_0), '\\='(Step_1_3, classification), '\\='(Step_2_2, classification), '\\='(Step_3_1, classification), '\\='(Step_4_0, classification), '\\='(Step_1_3, Step_2_2), '\\='(Step_1_3, Step_3_1), '\\='(Step_1_3, Step_4_0), '\\='(Step_2_2, Step_3_1), '\\='(Step_2_2, Step_4_0), '\\='(Step_3_1, Step_4_0), operator(classification, ZZ_3)).
':=>'(p171319, sensitive_group([single])) :- true.
':=>'(p988550, sensitive_group(['div/dep/mar'])) :- true.
':=>'(p819478, sensitive_group(['mar/wid'])) :- true.
':=>'(p231884, sensitive_group([male])) :- true.
':=>'(p170656, sensitive_group([female])) :- true.
':=>'(p264791, sensitive_group([single, male])) :- true.
':=>'(p142027, sensitive_group([single, female])) :- true.
':=>'(p552145, sensitive_group(['div/dep/mar', male])) :- true.
':=>'(p861271, sensitive_group(['div/dep/mar', female])) :- true.
':=>'(p201319, sensitive_group(['mar/wid', male])) :- true.
':=>'(p13027, sensitive_group(['mar/wid', female])) :- true.
':=>'(p614501, pipeline([], knn)) :- true.
':=>'(p437602, pipeline([], knn)) :- true.
':=>'(p620376, pipeline([], nn)) :- true.
':=>'(p37791, pipeline([], nn)) :- true.
':=>'(p41983, pipeline([], rf)) :- true.
':=>'(p399778, pipeline([normalization], knn)) :- true.
':=>'(p685855, pipeline([normalization], nn)) :- true.
':=>'(p289236, pipeline([normalization], rf)) :- true.
':=>'(p914577, pipeline([features], knn)) :- true.
':=>'(p555229, pipeline([features], knn)) :- true.
':=>'(p416695, pipeline([features], nn)) :- true.
':=>'(p408209, pipeline([features], nn)) :- true.
':=>'(p648208, pipeline([features], rf)) :- true.
':=>'(p302447, pipeline([mitigation], knn)) :- true.
':=>'(p873060, pipeline([mitigation], nn)) :- true.
':=>'(p438581, pipeline([rebalancing], knn)) :- true.
':=>'(p620031, pipeline([rebalancing], knn)) :- true.
':=>'(p26598, pipeline([rebalancing], nn)) :- true.
':=>'(p431644, pipeline([rebalancing], nn)) :- true.
':=>'(p428559, pipeline([rebalancing], rf)) :- true.
':=>'(p463818, pipeline([normalization, features], knn)) :- true.
':=>'(p887579, pipeline([normalization, features], nn)) :- true.
':=>'(p704302, pipeline([normalization, features], rf)) :- true.
':=>'(p41582, pipeline([normalization, mitigation], knn)) :- true.
':=>'(p272714, pipeline([normalization, mitigation], nn)) :- true.
':=>'(p979433, pipeline([normalization, mitigation], rf)) :- true.
':=>'(p226252, pipeline([normalization, rebalancing], knn)) :- true.
':=>'(p487044, pipeline([normalization, rebalancing], nn)) :- true.
':=>'(p805781, pipeline([normalization, rebalancing], rf)) :- true.
':=>'(p294975, pipeline([features, normalization], knn)) :- true.
':=>'(p772489, pipeline([features, normalization], nn)) :- true.
':=>'(p776512, pipeline([features, normalization], rf)) :- true.
':=>'(p193993, pipeline([features, mitigation], knn)) :- true.
':=>'(p124500, pipeline([features, mitigation], knn)) :- true.
':=>'(p385217, pipeline([features, mitigation], nn)) :- true.
':=>'(p255419, pipeline([features, mitigation], nn)) :- true.
':=>'(p767106, pipeline([features, mitigation], rf)) :- true.
':=>'(p568744, pipeline([features, rebalancing], knn)) :- true.
':=>'(p438800, pipeline([features, rebalancing], knn)) :- true.
':=>'(p508230, pipeline([features, rebalancing], nn)) :- true.
':=>'(p70785, pipeline([features, rebalancing], nn)) :- true.
':=>'(p962375, pipeline([features, rebalancing], rf)) :- true.
':=>'(p289426, pipeline([mitigation, features], knn)) :- true.
':=>'(p204393, pipeline([mitigation, features], nn)) :- true.
':=>'(p164576, pipeline([mitigation, rebalancing], knn)) :- true.
':=>'(p333970, pipeline([mitigation, rebalancing], nn)) :- true.
':=>'(p297776, pipeline([rebalancing, normalization], knn)) :- true.
':=>'(p81502, pipeline([rebalancing, normalization], nn)) :- true.
':=>'(p266644, pipeline([rebalancing, normalization], rf)) :- true.
':=>'(p223438, pipeline([rebalancing, features], knn)) :- true.
':=>'(p498835, pipeline([rebalancing, features], knn)) :- true.
':=>'(p325595, pipeline([rebalancing, features], nn)) :- true.
':=>'(p701648, pipeline([rebalancing, features], nn)) :- true.
':=>'(p137117, pipeline([rebalancing, features], rf)) :- true.
':=>'(p636113, pipeline([rebalancing, mitigation], knn)) :- true.
':=>'(p18688, pipeline([rebalancing, mitigation], nn)) :- true.
':=>'(p814983, pipeline([normalization, features, mitigation], knn)) :- true.
':=>'(p2565, pipeline([normalization, features, mitigation], knn)) :- true.
':=>'(p93723, pipeline([normalization, features, mitigation], nn)) :- true.
':=>'(p76334, pipeline([normalization, features, mitigation], nn)) :- true.
':=>'(p48724, pipeline([normalization, features, mitigation], rf)) :- true.
':=>'(p499124, pipeline([normalization, features, mitigation], rf)) :- true.
':=>'(p984454, pipeline([normalization, features, rebalancing], knn)) :- true.
':=>'(p854204, pipeline([normalization, features, rebalancing], nn)) :- true.
':=>'(p609812, pipeline([normalization, features, rebalancing], rf)) :- true.
':=>'(p11808, pipeline([normalization, mitigation, features], knn)) :- true.
':=>'(p776064, pipeline([normalization, mitigation, features], nn)) :- true.
':=>'(p892190, pipeline([normalization, mitigation, features], rf)) :- true.
':=>'(p971927, pipeline([normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p802808, pipeline([normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p396481, pipeline([normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p906689, pipeline([normalization, rebalancing, features], knn)) :- true.
':=>'(p153575, pipeline([normalization, rebalancing, features], nn)) :- true.
':=>'(p37550, pipeline([normalization, rebalancing, features], rf)) :- true.
':=>'(p731779, pipeline([normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p4876, pipeline([normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p494357, pipeline([normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p816548, pipeline([features, normalization, mitigation], knn)) :- true.
':=>'(p322055, pipeline([features, normalization, mitigation], knn)) :- true.
':=>'(p521655, pipeline([features, normalization, mitigation], nn)) :- true.
':=>'(p454500, pipeline([features, normalization, mitigation], nn)) :- true.
':=>'(p211328, pipeline([features, normalization, mitigation], rf)) :- true.
':=>'(p2463, pipeline([features, normalization, mitigation], rf)) :- true.
':=>'(p535633, pipeline([features, normalization, rebalancing], knn)) :- true.
':=>'(p329754, pipeline([features, normalization, rebalancing], nn)) :- true.
':=>'(p514548, pipeline([features, normalization, rebalancing], rf)) :- true.
':=>'(p355648, pipeline([features, mitigation, normalization], knn)) :- true.
':=>'(p607752, pipeline([features, mitigation, normalization], nn)) :- true.
':=>'(p178694, pipeline([features, mitigation, normalization], rf)) :- true.
':=>'(p722742, pipeline([features, mitigation, rebalancing], knn)) :- true.
':=>'(p64124, pipeline([features, mitigation, rebalancing], knn)) :- true.
':=>'(p376773, pipeline([features, mitigation, rebalancing], nn)) :- true.
':=>'(p454694, pipeline([features, mitigation, rebalancing], nn)) :- true.
':=>'(p318787, pipeline([features, mitigation, rebalancing], rf)) :- true.
':=>'(p971421, pipeline([features, rebalancing, normalization], knn)) :- true.
':=>'(p469693, pipeline([features, rebalancing, normalization], nn)) :- true.
':=>'(p535214, pipeline([features, rebalancing, normalization], rf)) :- true.
':=>'(p736318, pipeline([features, rebalancing, mitigation], knn)) :- true.
':=>'(p236701, pipeline([features, rebalancing, mitigation], knn)) :- true.
':=>'(p296453, pipeline([features, rebalancing, mitigation], nn)) :- true.
':=>'(p47545, pipeline([features, rebalancing, mitigation], nn)) :- true.
':=>'(p898898, pipeline([features, rebalancing, mitigation], rf)) :- true.
':=>'(p677034, pipeline([mitigation, features, rebalancing], knn)) :- true.
':=>'(p49529, pipeline([mitigation, features, rebalancing], nn)) :- true.
':=>'(p39482, pipeline([mitigation, rebalancing, features], knn)) :- true.
':=>'(p609850, pipeline([mitigation, rebalancing, features], nn)) :- true.
':=>'(p999818, pipeline([rebalancing, normalization, features], knn)) :- true.
':=>'(p185802, pipeline([rebalancing, normalization, features], nn)) :- true.
':=>'(p251112, pipeline([rebalancing, normalization, features], rf)) :- true.
':=>'(p687902, pipeline([rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p95461, pipeline([rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p347583, pipeline([rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p462737, pipeline([rebalancing, features, normalization], knn)) :- true.
':=>'(p471469, pipeline([rebalancing, features, normalization], nn)) :- true.
':=>'(p142000, pipeline([rebalancing, features, normalization], rf)) :- true.
':=>'(p971998, pipeline([rebalancing, features, mitigation], knn)) :- true.
':=>'(p914475, pipeline([rebalancing, features, mitigation], knn)) :- true.
':=>'(p872668, pipeline([rebalancing, features, mitigation], nn)) :- true.
':=>'(p765102, pipeline([rebalancing, features, mitigation], nn)) :- true.
':=>'(p167628, pipeline([rebalancing, features, mitigation], rf)) :- true.
':=>'(p488518, pipeline([rebalancing, mitigation, features], knn)) :- true.
':=>'(p927450, pipeline([rebalancing, mitigation, features], nn)) :- true.
':=>'(p319737, pipeline([normalization, features, mitigation, rebalancing], knn)) :- true.
':=>'(p734268, pipeline([normalization, features, mitigation, rebalancing], knn)) :- true.
':=>'(p314922, pipeline([normalization, features, mitigation, rebalancing], nn)) :- true.
':=>'(p151161, pipeline([normalization, features, mitigation, rebalancing], nn)) :- true.
':=>'(p431199, pipeline([normalization, features, mitigation, rebalancing], rf)) :- true.
':=>'(p818499, pipeline([normalization, features, mitigation, rebalancing], rf)) :- true.
':=>'(p391777, pipeline([normalization, features, rebalancing, mitigation], knn)) :- true.
':=>'(p717386, pipeline([normalization, features, rebalancing, mitigation], knn)) :- true.
':=>'(p962250, pipeline([normalization, features, rebalancing, mitigation], nn)) :- true.
':=>'(p714044, pipeline([normalization, features, rebalancing, mitigation], nn)) :- true.
':=>'(p787190, pipeline([normalization, features, rebalancing, mitigation], rf)) :- true.
':=>'(p618356, pipeline([normalization, features, rebalancing, mitigation], rf)) :- true.
':=>'(p714597, pipeline([normalization, mitigation, features, rebalancing], knn)) :- true.
':=>'(p5909, pipeline([normalization, mitigation, features, rebalancing], nn)) :- true.
':=>'(p873770, pipeline([normalization, mitigation, features, rebalancing], rf)) :- true.
':=>'(p915455, pipeline([normalization, mitigation, rebalancing, features], knn)) :- true.
':=>'(p685753, pipeline([normalization, mitigation, rebalancing, features], nn)) :- true.
':=>'(p635397, pipeline([normalization, mitigation, rebalancing, features], rf)) :- true.
':=>'(p650740, pipeline([normalization, rebalancing, features, mitigation], knn)) :- true.
':=>'(p824973, pipeline([normalization, rebalancing, features, mitigation], knn)) :- true.
':=>'(p407502, pipeline([normalization, rebalancing, features, mitigation], nn)) :- true.
':=>'(p711359, pipeline([normalization, rebalancing, features, mitigation], nn)) :- true.
':=>'(p414255, pipeline([normalization, rebalancing, features, mitigation], rf)) :- true.
':=>'(p664871, pipeline([normalization, rebalancing, features, mitigation], rf)) :- true.
':=>'(p988588, pipeline([normalization, rebalancing, mitigation, features], knn)) :- true.
':=>'(p281575, pipeline([normalization, rebalancing, mitigation, features], nn)) :- true.
':=>'(p443777, pipeline([normalization, rebalancing, mitigation, features], rf)) :- true.
':=>'(p898286, pipeline([features, normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p731695, pipeline([features, normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p438858, pipeline([features, normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p265193, pipeline([features, normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p352679, pipeline([features, normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p686117, pipeline([features, normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p774776, pipeline([features, normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p117982, pipeline([features, normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p826095, pipeline([features, normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p413511, pipeline([features, normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p620652, pipeline([features, normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p246977, pipeline([features, normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p780164, pipeline([features, mitigation, normalization, rebalancing], knn)) :- true.
':=>'(p489681, pipeline([features, mitigation, normalization, rebalancing], nn)) :- true.
':=>'(p641846, pipeline([features, mitigation, normalization, rebalancing], rf)) :- true.
':=>'(p607934, pipeline([features, mitigation, rebalancing, normalization], knn)) :- true.
':=>'(p852401, pipeline([features, mitigation, rebalancing, normalization], nn)) :- true.
':=>'(p910743, pipeline([features, mitigation, rebalancing, normalization], rf)) :- true.
':=>'(p524645, pipeline([features, rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p311035, pipeline([features, rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p3479, pipeline([features, rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p833892, pipeline([features, rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p767469, pipeline([features, rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p731022, pipeline([features, rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p769863, pipeline([features, rebalancing, mitigation, normalization], knn)) :- true.
':=>'(p934605, pipeline([features, rebalancing, mitigation, normalization], nn)) :- true.
':=>'(p381456, pipeline([features, rebalancing, mitigation, normalization], rf)) :- true.
':=>'(p364666, pipeline([rebalancing, normalization, features, mitigation], knn)) :- true.
':=>'(p498050, pipeline([rebalancing, normalization, features, mitigation], knn)) :- true.
':=>'(p907609, pipeline([rebalancing, normalization, features, mitigation], nn)) :- true.
':=>'(p17573, pipeline([rebalancing, normalization, features, mitigation], nn)) :- true.
':=>'(p782942, pipeline([rebalancing, normalization, features, mitigation], rf)) :- true.
':=>'(p90947, pipeline([rebalancing, normalization, features, mitigation], rf)) :- true.
':=>'(p926798, pipeline([rebalancing, normalization, mitigation, features], knn)) :- true.
':=>'(p463760, pipeline([rebalancing, normalization, mitigation, features], nn)) :- true.
':=>'(p385665, pipeline([rebalancing, normalization, mitigation, features], rf)) :- true.
':=>'(p819604, pipeline([rebalancing, features, normalization, mitigation], knn)) :- true.
':=>'(p742936, pipeline([rebalancing, features, normalization, mitigation], knn)) :- true.
':=>'(p634840, pipeline([rebalancing, features, normalization, mitigation], nn)) :- true.
':=>'(p597464, pipeline([rebalancing, features, normalization, mitigation], nn)) :- true.
':=>'(p109414, pipeline([rebalancing, features, normalization, mitigation], rf)) :- true.
':=>'(p649991, pipeline([rebalancing, features, normalization, mitigation], rf)) :- true.
':=>'(p612362, pipeline([rebalancing, features, mitigation, normalization], knn)) :- true.
':=>'(p269055, pipeline([rebalancing, features, mitigation, normalization], nn)) :- true.
':=>'(p766526, pipeline([rebalancing, features, mitigation, normalization], rf)) :- true.

Checking Config
Exporting Config
Saving Graph
Exporting AutoML input
Exporting Space
Exporting Constraints
Input created for iteration Config(iteration=2, dataset=credit-g, metric=balanced_accuracy, fairnessMetric=demographic_parity_ratio, sensitiveFeatures=[personal_status, sex], mode=max, batchSize=999999, timeBudget=900, seed=42)
Here is the standard output/error of the command:

5d8c9390ee3a3c59dc0ac930ae90d92a23cb76bb715a185bc7c46a10e512b8b9
Here is the standard output/error of the command:

Here is the standard output/error of the command:

WARNING:root:No module named 'rpy2': FairAdapt will be unavailable. To install, run:
pip install 'aif360[FairAdapt]'
INFO:flaml.tune.searcher.blendsearch:No low-cost partial config given to the search algorithm. For cost-frugal search, consider providing low-cost values for cost-related hps via 'low_cost_partial_config'. More info can be found at https://microsoft.github.io/FLAML/docs/FAQ#about-low_cost_partial_config-in-tune
Trying to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Added successfully: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Trying to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: normalization == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
AutoML: starting optimization.
106
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(10), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.7154526322712176), 'balanced_accuracy': np.float64(0.5488095238095239), 'by_group': {'female_div/dep/mar': np.float64(0.86), 'male_div/sep': np.float64(0.77), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.76)}, 'status': 'success', 'total_time': 5.073736667633057, 'fit_time': np.float64(0.9871784687042237), 'score_time': np.float64(0.005878591537475586), 'absolute_time': 1746705470.509776, 'flatten_demographic_parity_ratio': '0.83_0.6_0.7_0.71_0.74', 'flatten_balanced_accuracy': '0.62_0.56_0.53_0.52_0.52'}
107
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 4, 'max_features': 4, 'max_leaf_nodes': 2, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.7723403762394587), 'balanced_accuracy': np.float64(0.5316666666666666), 'by_group': {'female_div/dep/mar': np.float64(0.87), 'male_div/sep': np.float64(0.84), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.79)}, 'status': 'success', 'total_time': 7.062814712524414, 'fit_time': np.float64(1.3834017276763917), 'score_time': np.float64(0.0067999839782714845), 'absolute_time': 1746705477.7264638, 'flatten_demographic_parity_ratio': '0.84_0.6_0.91_0.71_0.81', 'flatten_balanced_accuracy': '0.56_0.55_0.52_0.52_0.5'}
108
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.7682374960311492), 'balanced_accuracy': np.float64(0.5142857142857142), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.91), 'male_mar/wid': np.float64(0.85), 'male_single': np.float64(0.91)}, 'status': 'success', 'total_time': 51.57404041290283, 'fit_time': np.float64(1.3345428943634032), 'score_time': np.float64(0.005781126022338867), 'absolute_time': 1746705529.4587605, 'flatten_demographic_parity_ratio': '0.56_0.71_0.84_0.84_0.89', 'flatten_balanced_accuracy': '0.44_0.56_0.54_0.54_0.49'}
109
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 15, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.7967557267927443), 'balanced_accuracy': np.float64(0.55), 'by_group': {'female_div/dep/mar': np.float64(0.8), 'male_div/sep': np.float64(0.98), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.88)}, 'status': 'success', 'total_time': 0.7367119789123535, 'fit_time': np.float64(0.005975151062011718), 'score_time': np.float64(0.05766291618347168), 'absolute_time': 1746705530.3259323, 'flatten_demographic_parity_ratio': '0.74_0.82_0.83_0.76_0.84', 'flatten_balanced_accuracy': '0.56_0.53_0.53_0.59_0.54'}
110
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.1)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9927272727272728), 'balanced_accuracy': np.float64(0.5076190476190476), 'by_group': {'female_div/dep/mar': np.float64(0.99), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.99)}, 'status': 'success', 'total_time': 6.846103191375732, 'fit_time': np.float64(1.3382229328155517), 'score_time': np.float64(0.006533432006835938), 'absolute_time': 1746705537.3053045, 'flatten_demographic_parity_ratio': '0.96_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.54_0.5_0.5_0.5_0.5'}
111
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 16, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.383871085644218), 'balanced_accuracy': np.float64(0.6564285714285714), 'by_group': {'female_div/dep/mar': np.float64(0.95), 'male_div/sep': np.float64(0.41), 'male_mar/wid': np.float64(0.89), 'male_single': np.float64(0.91)}, 'status': 'success', 'total_time': 0.4362146854400635, 'fit_time': np.float64(0.030813980102539062), 'score_time': np.float64(0.014589691162109375), 'absolute_time': 1746705537.877718, 'flatten_demographic_parity_ratio': '0.0_0.19_0.78_0.95_0.0', 'flatten_balanced_accuracy': '0.67_0.7_0.64_0.66_0.62'}
112
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 19, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.6675406672180866), 'balanced_accuracy': np.float64(0.6180952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.76), 'male_div/sep': np.float64(0.9), 'male_mar/wid': np.float64(0.89), 'male_single': np.float64(0.84)}, 'status': 'success', 'total_time': 0.2345271110534668, 'fit_time': np.float64(0.007007741928100586), 'score_time': np.float64(0.012531614303588868), 'absolute_time': 1746705538.2466414, 'flatten_demographic_parity_ratio': '0.63_0.63_0.71_0.58_0.78', 'flatten_balanced_accuracy': '0.63_0.64_0.59_0.64_0.6'}
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')} was NaN

113
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 32.533459424972534, 'fit_time': np.float64(1.3423867225646973), 'score_time': np.float64(0.006703853607177734), 'absolute_time': 1746705570.9157443, 'flatten_demographic_parity_ratio': 'nan_nan_nan_nan_nan', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
114
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 3}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.24407634470792364), 'balanced_accuracy': np.float64(0.5800000000000001), 'by_group': {'female_div/dep/mar': np.float64(0.86), 'male_div/sep': np.float64(0.24), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.77)}, 'status': 'success', 'total_time': 0.5848202705383301, 'fit_time': np.float64(0.09108800888061523), 'score_time': np.float64(0.005040359497070312), 'absolute_time': 1746705573.5987132, 'flatten_demographic_parity_ratio': '0.28_0.36_0.26_0.33_0.0', 'flatten_balanced_accuracy': '0.63_0.58_0.6_0.53_0.55'}
115
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.7135307449215978), 'balanced_accuracy': np.float64(0.6211904761904762), 'by_group': {'female_div/dep/mar': np.float64(0.91), 'male_div/sep': np.float64(0.73), 'male_mar/wid': np.float64(0.88), 'male_single': np.float64(0.97)}, 'status': 'success', 'total_time': 0.8372724056243896, 'fit_time': np.float64(0.14595460891723633), 'score_time': np.float64(0.003335380554199219), 'absolute_time': 1746705574.5725029, 'flatten_demographic_parity_ratio': '0.69_0.8_0.51_0.97_0.6', 'flatten_balanced_accuracy': '0.59_0.66_0.63_0.58_0.64'}
116
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 5.916064262390137, 'fit_time': np.float64(1.1491307735443115), 'score_time': np.float64(0.009985971450805663), 'absolute_time': 1746705580.6282737, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 13, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 13, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')} was NaN

117
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 13, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5009523809523809), 'by_group': {'female_div/dep/mar': np.float64(0.3), 'male_div/sep': np.float64(0.0), 'male_mar/wid': np.float64(0.67), 'male_single': np.float64(0.33)}, 'status': 'fail', 'total_time': 13.733540534973145, 'fit_time': np.float64(0.8539892673492432), 'score_time': np.float64(0.007930278778076172), 'absolute_time': 1746705594.5009706, 'flatten_demographic_parity_ratio': 'nan_0.0_nan_0.0_0.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.49_0.51'}
118
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('adam')}, 'features': {'type': np.str_('SelectKBest'), 'k': 2}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.6639381172850696), 'balanced_accuracy': np.float64(0.6664285714285715), 'by_group': {'female_div/dep/mar': np.float64(0.86), 'male_div/sep': np.float64(0.81), 'male_mar/wid': np.float64(0.82), 'male_single': np.float64(0.92)}, 'status': 'success', 'total_time': 0.7657802104949951, 'fit_time': np.float64(0.1306926727294922), 'score_time': np.float64(0.003449869155883789), 'absolute_time': 1746705595.4072394, 'flatten_demographic_parity_ratio': '0.55_0.87_0.74_0.68_0.48', 'flatten_balanced_accuracy': '0.68_0.65_0.73_0.61_0.67'}
119
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.27405120707752284), 'balanced_accuracy': np.float64(0.4976190476190476), 'by_group': {'female_div/dep/mar': np.float64(0.7), 'male_div/sep': np.float64(0.62), 'male_mar/wid': np.float64(0.34), 'male_single': np.float64(0.75)}, 'status': 'success', 'total_time': 45.42580962181091, 'fit_time': np.float64(1.305781316757202), 'score_time': np.float64(0.0056377887725830075), 'absolute_time': 1746705640.9753926, 'flatten_demographic_parity_ratio': '0.69_0.19_0.0_0.11_0.39', 'flatten_balanced_accuracy': '0.57_0.42_0.45_0.57_0.47'}
120
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 5, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.6201708594595956), 'balanced_accuracy': np.float64(0.5659523809523809), 'by_group': {'female_div/dep/mar': np.float64(0.8), 'male_div/sep': np.float64(0.82), 'male_mar/wid': np.float64(0.84), 'male_single': np.float64(0.8)}, 'status': 'success', 'total_time': 0.5789332389831543, 'fit_time': np.float64(0.017587614059448243), 'score_time': np.float64(0.04284610748291016), 'absolute_time': 1746705641.7013686, 'flatten_demographic_parity_ratio': '0.6_0.68_0.71_0.63_0.48', 'flatten_balanced_accuracy': '0.57_0.55_0.63_0.54_0.54'}
121
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 2, 'max_features': 4, 'max_leaf_nodes': 3, 'min_samples_split': 6, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('PCA'), 'n_components': 3}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.8075911193124778), 'balanced_accuracy': np.float64(0.5457142857142856), 'by_group': {'female_div/dep/mar': np.float64(0.92), 'male_div/sep': np.float64(0.88), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.84)}, 'status': 'success', 'total_time': 5.256742477416992, 'fit_time': np.float64(1.0166507244110108), 'score_time': np.float64(0.010202884674072266), 'absolute_time': 1746705647.103547, 'flatten_demographic_parity_ratio': '0.84_0.74_0.87_0.84_0.74', 'flatten_balanced_accuracy': '0.56_0.57_0.54_0.54_0.51'}
/usr/local/lib/python3.12/site-packages/numpy/_core/_methods.py:194: RuntimeWarning: overflow encountered in multiply
  x = um.multiply(x, x, out=x)
/usr/local/lib/python3.12/site-packages/numpy/_core/_methods.py:205: RuntimeWarning: overflow encountered in reduce
  ret = umr_sum(x, axis, dtype, out, keepdims=keepdims, where=where)
122
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 4, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9835529608006673), 'balanced_accuracy': np.float64(0.5128571428571428), 'by_group': {'female_div/dep/mar': np.float64(0.99), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.98)}, 'status': 'success', 'total_time': 5.308955669403076, 'fit_time': np.float64(1.02546968460083), 'score_time': np.float64(0.010849094390869141), 'absolute_time': 1746705654.780278, 'flatten_demographic_parity_ratio': '0.96_1.0_1.0_1.0_0.95', 'flatten_balanced_accuracy': '0.54_0.5_0.5_0.5_0.52'}
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

123
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.49071428571428577), 'by_group': {'female_div/dep/mar': np.float64(0.51), 'male_div/sep': np.float64(0.81), 'male_mar/wid': np.float64(0.09), 'male_single': np.float64(0.9)}, 'status': 'fail', 'total_time': 18.166286945343018, 'fit_time': np.float64(1.1340479373931884), 'score_time': np.float64(0.005526256561279297), 'absolute_time': 1746705673.102217, 'flatten_demographic_parity_ratio': 'nan_nan_0.0_nan_0.18', 'flatten_balanced_accuracy': '0.5_0.5_0.47_0.5_0.48'}
/usr/local/lib/python3.12/site-packages/numpy/_core/_methods.py:194: RuntimeWarning: overflow encountered in multiply
  x = um.multiply(x, x, out=x)
124
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.7575312760633861), 'balanced_accuracy': np.float64(0.5116666666666666), 'by_group': {'female_div/dep/mar': np.float64(0.97), 'male_div/sep': np.float64(0.78), 'male_mar/wid': np.float64(0.86), 'male_single': np.float64(0.96)}, 'status': 'success', 'total_time': 6.486886739730835, 'fit_time': np.float64(1.1426202774047851), 'score_time': np.float64(0.06265997886657715), 'absolute_time': 1746705679.7353265, 'flatten_demographic_parity_ratio': '0.96_1.0_0.0_0.88_0.94', 'flatten_balanced_accuracy': '0.54_0.5_0.47_0.52_0.53'}
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')} was NaN

125
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 5.232640981674194, 'fit_time': np.float64(1.0213605403900146), 'score_time': np.float64(0.005504465103149414), 'absolute_time': 1746705685.1347787, 'flatten_demographic_parity_ratio': 'nan_nan_nan_nan_nan', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 12, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 2}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 12, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 2}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')} was NaN

126
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 12, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 2}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5011904761904762), 'by_group': {'female_div/dep/mar': np.float64(0.52), 'male_div/sep': np.float64(0.25), 'male_mar/wid': np.float64(0.64), 'male_single': np.float64(0.25)}, 'status': 'fail', 'total_time': 8.020633935928345, 'fit_time': np.float64(1.1357300758361817), 'score_time': np.float64(0.009725236892700195), 'absolute_time': 1746705693.3048987, 'flatten_demographic_parity_ratio': '0.0_0.0_nan_0.0_0.0', 'flatten_balanced_accuracy': '0.51_0.5_0.5_0.49_0.5'}
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')} was NaN

127
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5104761904761904), 'by_group': {'female_div/dep/mar': np.float64(0.67), 'male_div/sep': np.float64(0.44), 'male_mar/wid': np.float64(0.58), 'male_single': np.float64(0.74)}, 'status': 'fail', 'total_time': 30.512028455734253, 'fit_time': np.float64(0.8621913433074951), 'score_time': np.float64(0.006852197647094727), 'absolute_time': 1746705723.9675643, 'flatten_demographic_parity_ratio': '0.36_nan_0.0_0.32_0.41', 'flatten_balanced_accuracy': '0.53_0.5_0.49_0.52_0.5'}
128
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 14, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9097355109119813), 'balanced_accuracy': np.float64(0.5280952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.94), 'male_div/sep': np.float64(0.94), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.92)}, 'status': 'success', 'total_time': 5.030405759811401, 'fit_time': np.float64(0.9619223594665527), 'score_time': np.float64(0.01576986312866211), 'absolute_time': 1746705729.1510031, 'flatten_demographic_parity_ratio': '0.89_0.76_1.0_0.9_1.0', 'flatten_balanced_accuracy': '0.56_0.56_0.5_0.52_0.5'}
129
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.694138249596685), 'balanced_accuracy': np.float64(0.5871428571428571), 'by_group': {'female_div/dep/mar': np.float64(0.8), 'male_div/sep': np.float64(0.86), 'male_mar/wid': np.float64(0.9), 'male_single': np.float64(0.82)}, 'status': 'success', 'total_time': 1.4094161987304688, 'fit_time': np.float64(0.2589282989501953), 'score_time': np.float64(0.003918313980102539), 'absolute_time': 1746705730.71329, 'flatten_demographic_parity_ratio': '0.93_0.79_0.69_0.59_0.48', 'flatten_balanced_accuracy': '0.57_0.64_0.59_0.52_0.61'}
130
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9302680197762164), 'balanced_accuracy': np.float64(0.5135714285714286), 'by_group': {'female_div/dep/mar': np.float64(0.98), 'male_div/sep': np.float64(0.94), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.4088883399963379, 'fit_time': np.float64(0.05625739097595215), 'score_time': np.float64(0.005477428436279297), 'absolute_time': 1746705733.4450293, 'flatten_demographic_parity_ratio': '0.9_0.97_0.98_0.9_0.9', 'flatten_balanced_accuracy': '0.5_0.52_0.51_0.51_0.53'}
131
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 6, 'min_samples_split': 2, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9160880696364568), 'balanced_accuracy': np.float64(0.5233333333333333), 'by_group': {'female_div/dep/mar': np.float64(0.96), 'male_div/sep': np.float64(0.94), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.98)}, 'status': 'success', 'total_time': 0.20818614959716797, 'fit_time': np.float64(0.018740177154541016), 'score_time': np.float64(0.003945350646972656), 'absolute_time': 1746705733.8093383, 'flatten_demographic_parity_ratio': '0.9_0.94_0.97_0.8_0.97', 'flatten_balanced_accuracy': '0.55_0.51_0.51_0.51_0.53'}
132
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(50), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.5777386770935158), 'balanced_accuracy': np.float64(0.6416666666666668), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.58), 'male_mar/wid': np.float64(0.95), 'male_single': np.float64(0.83)}, 'status': 'success', 'total_time': 3.260453939437866, 'fit_time': np.float64(0.6115921974182129), 'score_time': np.float64(0.004244232177734375), 'absolute_time': 1746705737.2306392, 'flatten_demographic_parity_ratio': '0.7_0.34_0.82_0.52_0.52', 'flatten_balanced_accuracy': '0.67_0.69_0.59_0.59_0.67'}
133
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 13, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 9}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9689908256880735), 'balanced_accuracy': np.float64(0.5028571428571429), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(0.98), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.97)}, 'status': 'success', 'total_time': 42.82061290740967, 'fit_time': np.float64(1.0265184402465821), 'score_time': np.float64(0.00833897590637207), 'absolute_time': 1746705780.2105758, 'flatten_demographic_parity_ratio': '1.0_1.0_0.94_0.9_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.51_0.5'}
134
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 17, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.94348623853211), 'balanced_accuracy': np.float64(0.5219047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.97), 'male_div/sep': np.float64(0.96), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.95)}, 'status': 'success', 'total_time': 5.4641547203063965, 'fit_time': np.float64(1.0507158279418944), 'score_time': np.float64(0.013971471786499023), 'absolute_time': 1746705785.8291998, 'flatten_demographic_parity_ratio': '1.0_0.9_0.97_0.9_0.94', 'flatten_balanced_accuracy': '0.5_0.57_0.5_0.51_0.53'}
135
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(50), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.2341728541728542), 'balanced_accuracy': np.float64(0.6085714285714285), 'by_group': {'female_div/dep/mar': np.float64(0.93), 'male_div/sep': np.float64(0.23), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.82)}, 'status': 'success', 'total_time': 4.961714744567871, 'fit_time': np.float64(0.9675513744354248), 'score_time': np.float64(0.0049723625183105465), 'absolute_time': 1746705790.9518387, 'flatten_demographic_parity_ratio': '0.17_0.26_0.6_0.15_0.0', 'flatten_balanced_accuracy': '0.65_0.62_0.61_0.59_0.58'}
136
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.6601748733966758), 'balanced_accuracy': np.float64(0.5461904761904762), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.85), 'male_mar/wid': np.float64(0.89), 'male_single': np.float64(0.8)}, 'status': 'success', 'total_time': 5.433605670928955, 'fit_time': np.float64(1.058848762512207), 'score_time': np.float64(0.006597375869750977), 'absolute_time': 1746705796.5470614, 'flatten_demographic_parity_ratio': '0.56_0.74_0.61_0.77_0.63', 'flatten_balanced_accuracy': '0.5_0.59_0.53_0.55_0.55'}
137
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 6, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.7313979808667587), 'balanced_accuracy': np.float64(0.4819047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.81), 'male_div/sep': np.float64(0.79), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.79)}, 'status': 'success', 'total_time': 5.071291923522949, 'fit_time': np.float64(0.9681143283843994), 'score_time': np.float64(0.017241477966308594), 'absolute_time': 1746705801.7776687, 'flatten_demographic_parity_ratio': '0.87_0.68_0.79_0.32_1.0', 'flatten_balanced_accuracy': '0.56_0.45_0.48_0.42_0.5'}
138
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9689908256880735), 'balanced_accuracy': np.float64(0.5066666666666666), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(0.98), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.98)}, 'status': 'success', 'total_time': 6.265638113021851, 'fit_time': np.float64(1.225784921646118), 'score_time': np.float64(0.0057599544525146484), 'absolute_time': 1746705808.251155, 'flatten_demographic_parity_ratio': '1.0_1.0_0.97_0.9_0.97', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.51_0.52'}
139
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.4837367534637451, 'fit_time': np.float64(0.06957383155822754), 'score_time': np.float64(0.005875730514526367), 'absolute_time': 1746705811.0386653, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
140
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.7549647781524716), 'balanced_accuracy': np.float64(0.5514285714285714), 'by_group': {'female_div/dep/mar': np.float64(0.87), 'male_div/sep': np.float64(0.86), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.78)}, 'status': 'success', 'total_time': 19.276055574417114, 'fit_time': np.float64(3.448832607269287), 'score_time': np.float64(0.008012056350708008), 'absolute_time': 1746705830.478264, 'flatten_demographic_parity_ratio': '0.84_0.74_0.67_0.78_0.74', 'flatten_balanced_accuracy': '0.56_0.58_0.53_0.56_0.52'}
141
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 14, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.7136021505376344), 'balanced_accuracy': np.float64(0.6276190476190476), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.75), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.9)}, 'status': 'success', 'total_time': 0.2812819480895996, 'fit_time': np.float64(0.009567832946777344), 'score_time': np.float64(0.01664566993713379), 'absolute_time': 1746705830.9220538, 'flatten_demographic_parity_ratio': '0.62_0.7_0.9_0.63_0.71', 'flatten_balanced_accuracy': '0.62_0.63_0.64_0.63_0.6'}
142
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.7540688939085548), 'balanced_accuracy': np.float64(0.5488095238095237), 'by_group': {'female_div/dep/mar': np.float64(0.88), 'male_div/sep': np.float64(0.84), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.8)}, 'status': 'success', 'total_time': 7.713277816772461, 'fit_time': np.float64(1.5121729373931885), 'score_time': np.float64(0.008891582489013672), 'absolute_time': 1746705838.8008983, 'flatten_demographic_parity_ratio': '0.84_0.56_0.83_0.8_0.74', 'flatten_balanced_accuracy': '0.56_0.57_0.54_0.56_0.51'}
143
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': 4, 'min_samples_split': 5, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.1)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9562135112593829), 'balanced_accuracy': np.float64(0.5278571428571428), 'by_group': {'female_div/dep/mar': np.float64(0.97), 'male_div/sep': np.float64(0.98), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.96)}, 'status': 'success', 'total_time': 5.998310327529907, 'fit_time': np.float64(1.1704408168792724), 'score_time': np.float64(0.0076568603515625), 'absolute_time': 1746705844.9653447, 'flatten_demographic_parity_ratio': '0.96_0.9_0.97_1.0_0.94', 'flatten_balanced_accuracy': '0.54_0.57_0.5_0.5_0.53'}
144
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 9, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.6061264289763846), 'balanced_accuracy': np.float64(0.5402380952380954), 'by_group': {'female_div/dep/mar': np.float64(0.74), 'male_div/sep': np.float64(0.73), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.73)}, 'status': 'success', 'total_time': 0.2213916778564453, 'fit_time': np.float64(0.007158613204956055), 'score_time': np.float64(0.011052894592285156), 'absolute_time': 1746705845.3556213, 'flatten_demographic_parity_ratio': '0.56_0.75_0.69_0.59_0.44', 'flatten_balanced_accuracy': '0.52_0.56_0.55_0.53_0.55'}
145
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.893262823902697), 'balanced_accuracy': np.float64(0.5404761904761906), 'by_group': {'female_div/dep/mar': np.float64(0.94), 'male_div/sep': np.float64(0.93), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.95)}, 'status': 'success', 'total_time': 0.28639698028564453, 'fit_time': np.float64(0.03220620155334473), 'score_time': np.float64(0.0047950267791748045), 'absolute_time': 1746705845.8085964, 'flatten_demographic_parity_ratio': '0.89_0.89_0.83_0.9_0.97', 'flatten_balanced_accuracy': '0.57_0.57_0.55_0.51_0.5'}
146
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 9, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.746748670631498), 'balanced_accuracy': np.float64(0.6366666666666666), 'by_group': {'female_div/dep/mar': np.float64(0.9), 'male_div/sep': np.float64(0.77), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.95)}, 'status': 'success', 'total_time': 0.23421168327331543, 'fit_time': np.float64(0.005173921585083008), 'score_time': np.float64(0.013003396987915038), 'absolute_time': 1746705846.2668295, 'flatten_demographic_parity_ratio': '0.61_0.56_0.79_0.83_0.94', 'flatten_balanced_accuracy': '0.61_0.67_0.64_0.62_0.65'}
147
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 13, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.5013005733407818), 'balanced_accuracy': np.float64(0.6828571428571427), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.5), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.98)}, 'status': 'success', 'total_time': 0.6702842712402344, 'fit_time': np.float64(0.07729640007019042), 'score_time': np.float64(0.01181640625), 'absolute_time': 1746705849.5482712, 'flatten_demographic_parity_ratio': '0.49_0.14_0.55_0.63_0.69', 'flatten_balanced_accuracy': '0.67_0.69_0.66_0.71_0.68'}
148
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_split': 6, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('SelectKBest'), 'k': 7}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.5356916478017395), 'balanced_accuracy': np.float64(0.5361904761904761), 'by_group': {'female_div/dep/mar': np.float64(0.85), 'male_div/sep': np.float64(0.59), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.65)}, 'status': 'success', 'total_time': 62.199445486068726, 'fit_time': np.float64(6.0221656322479244), 'score_time': np.float64(0.00795440673828125), 'absolute_time': 1746705911.9242013, 'flatten_demographic_parity_ratio': '0.49_0.6_0.67_0.78_0.14', 'flatten_balanced_accuracy': '0.54_0.55_0.54_0.54_0.52'}
149
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.7314926900584796), 'balanced_accuracy': np.float64(0.589047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.94), 'male_div/sep': np.float64(0.79), 'male_mar/wid': np.float64(0.92), 'male_single': np.float64(0.93)}, 'status': 'success', 'total_time': 0.4364910125732422, 'fit_time': np.float64(0.06585249900817872), 'score_time': np.float64(0.003162240982055664), 'absolute_time': 1746705912.5346234, 'flatten_demographic_parity_ratio': '0.56_0.68_0.77_0.82_0.83', 'flatten_balanced_accuracy': '0.62_0.59_0.58_0.6_0.55'}
150
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.613605260848999, 'fit_time': np.float64(0.10178213119506836), 'score_time': np.float64(0.003141450881958008), 'absolute_time': 1746705913.3222325, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
151
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(75)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.7613605958355458), 'balanced_accuracy': np.float64(0.5433333333333333), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.95), 'male_mar/wid': np.float64(0.85), 'male_single': np.float64(0.85)}, 'status': 'success', 'total_time': 7.388423681259155, 'fit_time': np.float64(1.4441592216491699), 'score_time': np.float64(0.009552240371704102), 'absolute_time': 1746705920.8867629, 'flatten_demographic_parity_ratio': '0.68_0.74_0.88_0.82_0.69', 'flatten_balanced_accuracy': '0.55_0.59_0.52_0.54_0.51'}
152
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9219786759236299), 'balanced_accuracy': np.float64(0.5116666666666666), 'by_group': {'female_div/dep/mar': np.float64(0.95), 'male_div/sep': np.float64(0.95), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.93)}, 'status': 'success', 'total_time': 5.7187700271606445, 'fit_time': np.float64(1.0915159225463866), 'score_time': np.float64(0.01827554702758789), 'absolute_time': 1746705926.786725, 'flatten_demographic_parity_ratio': '1.0_0.81_0.96_0.9_0.94', 'flatten_balanced_accuracy': '0.5_0.51_0.5_0.51_0.54'}
153
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(50), 'solver': np.str_('sgd')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9131587433972754), 'balanced_accuracy': np.float64(0.5178571428571428), 'by_group': {'female_div/dep/mar': np.float64(0.97), 'male_div/sep': np.float64(0.96), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.95)}, 'status': 'success', 'total_time': 7.479214668273926, 'fit_time': np.float64(1.4716147422790526), 'score_time': np.float64(0.004158687591552734), 'absolute_time': 1746705934.4469109, 'flatten_demographic_parity_ratio': '0.98_0.81_0.94_0.92_0.92', 'flatten_balanced_accuracy': '0.51_0.51_0.53_0.51_0.53'}
154
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 7, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.6152579715366601), 'balanced_accuracy': np.float64(0.6023809523809524), 'by_group': {'female_div/dep/mar': np.float64(0.76), 'male_div/sep': np.float64(0.65), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.82)}, 'status': 'success', 'total_time': 0.15383553504943848, 'fit_time': np.float64(0.006614828109741211), 'score_time': np.float64(0.004477262496948242), 'absolute_time': 1746705937.4770935, 'flatten_demographic_parity_ratio': '0.36_0.89_0.81_0.48_0.54', 'flatten_balanced_accuracy': '0.64_0.59_0.62_0.62_0.54'}
155
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 4, 'max_features': 4, 'max_leaf_nodes': 4, 'min_samples_split': 6, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9768418126216292), 'balanced_accuracy': np.float64(0.5197619047619048), 'by_group': {'female_div/dep/mar': np.float64(0.98), 'male_div/sep': np.float64(0.99), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.98)}, 'status': 'success', 'total_time': 1.3018782138824463, 'fit_time': np.float64(0.22769737243652344), 'score_time': np.float64(0.008995151519775391), 'absolute_time': 1746705938.9579985, 'flatten_demographic_parity_ratio': '0.95_1.0_1.0_0.93_1.0', 'flatten_balanced_accuracy': '0.52_0.5_0.5_0.58_0.5'}
156
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 9, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.8325882352941176), 'balanced_accuracy': np.float64(0.5123809523809524), 'by_group': {'female_div/dep/mar': np.float64(0.97), 'male_div/sep': np.float64(0.83), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.91)}, 'status': 'success', 'total_time': 5.383811712265015, 'fit_time': np.float64(1.028031349182129), 'score_time': np.float64(0.016716623306274415), 'absolute_time': 1746705944.5239108, 'flatten_demographic_parity_ratio': '0.95_1.0_0.9_0.93_0.38', 'flatten_balanced_accuracy': '0.55_0.5_0.5_0.51_0.5'}
157
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.055384615384615386), 'balanced_accuracy': np.float64(0.5349999999999999), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.06), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.76)}, 'status': 'success', 'total_time': 0.5431616306304932, 'fit_time': np.float64(0.08602890968322754), 'score_time': np.float64(0.0034560203552246095), 'absolute_time': 1746705945.282242, 'flatten_demographic_parity_ratio': '0.0_0.0_0.28_0.0_0.0', 'flatten_balanced_accuracy': '0.57_0.53_0.55_0.5_0.52'}
158
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 4, 'max_features': 4, 'max_leaf_nodes': 2, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.5879738866987213), 'balanced_accuracy': np.float64(0.5404761904761904), 'by_group': {'female_div/dep/mar': np.float64(0.72), 'male_div/sep': np.float64(0.62), 'male_mar/wid': np.float64(0.78), 'male_single': np.float64(0.82)}, 'status': 'success', 'total_time': 4.597250699996948, 'fit_time': np.float64(0.8871137142181397), 'score_time': np.float64(0.008370923995971679), 'absolute_time': 1746705950.0966299, 'flatten_demographic_parity_ratio': '0.0_0.74_0.68_0.78_0.74', 'flatten_balanced_accuracy': '0.5_0.58_0.53_0.56_0.53'}
159
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 2, 'max_features': 4, 'max_leaf_nodes': 4, 'min_samples_split': 6, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.5892532613585245), 'balanced_accuracy': np.float64(0.536904761904762), 'by_group': {'female_div/dep/mar': np.float64(0.87), 'male_div/sep': np.float64(0.82), 'male_mar/wid': np.float64(0.7), 'male_single': np.float64(0.81)}, 'status': 'success', 'total_time': 4.680023670196533, 'fit_time': np.float64(0.9046671390533447), 'score_time': np.float64(0.008716297149658204), 'absolute_time': 1746705954.9629266, 'flatten_demographic_parity_ratio': '0.69_0.56_0.54_0.42_0.74', 'flatten_balanced_accuracy': '0.57_0.53_0.5_0.56_0.52'}
The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 9, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 9, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')} was NaN

160
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 9, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.4988095238095238), 'by_group': {'female_div/dep/mar': np.float64(0.97), 'male_div/sep': np.float64(0.0), 'male_mar/wid': np.float64(0.45), 'male_single': np.float64(0.42)}, 'status': 'fail', 'total_time': 17.249687671661377, 'fit_time': np.float64(0.9447620391845704), 'score_time': np.float64(0.014212417602539062), 'absolute_time': 1746705972.3991876, 'flatten_demographic_parity_ratio': 'nan_nan_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.5_0.5_0.51_0.49_0.5'}
161
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 13, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 7}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.9580895570475991), 'balanced_accuracy': np.float64(0.5102380952380953), 'by_group': {'female_div/dep/mar': np.float64(0.99), 'male_div/sep': np.float64(0.97), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.97)}, 'status': 'success', 'total_time': 21.248828649520874, 'fit_time': np.float64(0.6419589996337891), 'score_time': np.float64(0.01684565544128418), 'absolute_time': 1746705993.888324, 'flatten_demographic_parity_ratio': '1.0_0.99_0.97_0.86_0.97', 'flatten_balanced_accuracy': '0.5_0.5_0.49_0.54_0.52'}
162
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 4, 'min_samples_split': 2, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('SelectKBest'), 'k': 2}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.7792624022286512), 'balanced_accuracy': np.float64(0.5802380952380952), 'by_group': {'female_div/dep/mar': np.float64(0.97), 'male_div/sep': np.float64(0.81), 'male_mar/wid': np.float64(0.92), 'male_single': np.float64(0.94)}, 'status': 'success', 'total_time': 0.6451971530914307, 'fit_time': np.float64(0.09980640411376954), 'score_time': np.float64(0.0070933341979980465), 'absolute_time': 1746705994.7862518, 'flatten_demographic_parity_ratio': '0.66_0.85_0.83_0.71_0.84', 'flatten_balanced_accuracy': '0.62_0.57_0.54_0.61_0.57'}
163
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.7927831056863315), 'balanced_accuracy': np.float64(0.5352380952380952), 'by_group': {'female_div/dep/mar': np.float64(0.95), 'male_div/sep': np.float64(0.89), 'male_mar/wid': np.float64(0.92), 'male_single': np.float64(0.85)}, 'status': 'success', 'total_time': 5.3366312980651855, 'fit_time': np.float64(1.029709815979004), 'score_time': np.float64(0.011266183853149415), 'absolute_time': 1746706000.3137336, 'flatten_demographic_parity_ratio': '0.84_0.73_0.75_0.9_0.74', 'flatten_balanced_accuracy': '0.56_0.56_0.52_0.51_0.52'}
164
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_split': 6, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.7052394857124067), 'balanced_accuracy': np.float64(0.5338095238095237), 'by_group': {'female_div/dep/mar': np.float64(0.85), 'male_div/sep': np.float64(0.77), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.75)}, 'status': 'success', 'total_time': 6.031710386276245, 'fit_time': np.float64(1.1767555713653564), 'score_time': np.float64(0.007806921005249023), 'absolute_time': 1746706006.5414503, 'flatten_demographic_parity_ratio': '0.82_0.6_0.86_0.51_0.74', 'flatten_balanced_accuracy': '0.57_0.55_0.53_0.5_0.52'}
165
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 6, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.740842837882773), 'balanced_accuracy': np.float64(0.555952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.86), 'male_div/sep': np.float64(0.83), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.75)}, 'status': 'success', 'total_time': 6.34271502494812, 'fit_time': np.float64(1.2371528625488282), 'score_time': np.float64(0.008418750762939454), 'absolute_time': 1746706015.6548483, 'flatten_demographic_parity_ratio': '0.8_0.78_0.69_0.7_0.74', 'flatten_balanced_accuracy': '0.59_0.6_0.55_0.52_0.52'}
166
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 6, 'min_samples_split': 6, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.7475627920477959), 'balanced_accuracy': np.float64(0.5552380952380952), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.92), 'male_mar/wid': np.float64(0.89), 'male_single': np.float64(0.83)}, 'status': 'success', 'total_time': 3.824928045272827, 'fit_time': np.float64(0.7354223251342773), 'score_time': np.float64(0.007851886749267577), 'absolute_time': 1746706019.673762, 'flatten_demographic_parity_ratio': '0.84_0.56_0.82_0.78_0.74', 'flatten_balanced_accuracy': '0.56_0.6_0.55_0.55_0.51'}
167
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 3}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9617180984153462), 'balanced_accuracy': np.float64(0.5276190476190477), 'by_group': {'female_div/dep/mar': np.float64(0.97), 'male_div/sep': np.float64(0.98), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.97)}, 'status': 'success', 'total_time': 17.321081399917603, 'fit_time': np.float64(1.2316431522369384), 'score_time': np.float64(0.007099533081054687), 'absolute_time': 1746706037.1863651, 'flatten_demographic_parity_ratio': '0.96_0.9_1.0_1.0_0.94', 'flatten_balanced_accuracy': '0.54_0.57_0.5_0.5_0.53'}
168
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.6018471392155602), 'balanced_accuracy': np.float64(0.6507142857142856), 'by_group': {'female_div/dep/mar': np.float64(0.85), 'male_div/sep': np.float64(0.61), 'male_mar/wid': np.float64(0.87), 'male_single': np.float64(0.88)}, 'status': 'success', 'total_time': 0.7545583248138428, 'fit_time': np.float64(0.129170560836792), 'score_time': np.float64(0.0034464359283447265), 'absolute_time': 1746706038.1361241, 'flatten_demographic_parity_ratio': '0.44_0.42_0.9_0.68_0.57', 'flatten_balanced_accuracy': '0.61_0.65_0.66_0.67_0.66'}
169
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.5305237080282952), 'balanced_accuracy': np.float64(0.5145238095238096), 'by_group': {'female_div/dep/mar': np.float64(0.79), 'male_div/sep': np.float64(0.63), 'male_mar/wid': np.float64(0.93), 'male_single': np.float64(0.66)}, 'status': 'success', 'total_time': 11.50721788406372, 'fit_time': np.float64(2.2725327968597413), 'score_time': np.float64(0.007469558715820312), 'absolute_time': 1746706049.833081, 'flatten_demographic_parity_ratio': '0.36_0.65_0.9_0.36_0.38', 'flatten_balanced_accuracy': '0.53_0.58_0.5_0.48_0.49'}
170
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(2.0)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9526387809049914), 'balanced_accuracy': np.float64(0.5185714285714285), 'by_group': {'female_div/dep/mar': np.float64(0.99), 'male_div/sep': np.float64(0.97), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.96)}, 'status': 'success', 'total_time': 6.437575340270996, 'fit_time': np.float64(1.258410882949829), 'score_time': np.float64(0.007217216491699219), 'absolute_time': 1746706059.4109552, 'flatten_demographic_parity_ratio': '0.95_1.0_0.97_0.9_0.94', 'flatten_balanced_accuracy': '0.54_0.5_0.5_0.52_0.53'}
171
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(50), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9615179316096747), 'balanced_accuracy': np.float64(0.5171428571428571), 'by_group': {'female_div/dep/mar': np.float64(0.99), 'male_div/sep': np.float64(0.98), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.96)}, 'status': 'success', 'total_time': 11.406030893325806, 'fit_time': np.float64(2.2543039321899414), 'score_time': np.float64(0.006537199020385742), 'absolute_time': 1746706071.014337, 'flatten_demographic_parity_ratio': '0.97_1.0_1.0_0.89_0.94', 'flatten_balanced_accuracy': '0.53_0.5_0.5_0.52_0.53'}
172
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 6, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.24877124183006538), 'balanced_accuracy': np.float64(0.6702380952380953), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(0.25), 'male_mar/wid': np.float64(0.85), 'male_single': np.float64(0.93)}, 'status': 'success', 'total_time': 0.6495497226715088, 'fit_time': np.float64(0.0931922435760498), 'score_time': np.float64(0.004818105697631836), 'absolute_time': 1746706071.8613489, 'flatten_demographic_parity_ratio': '0.0_0.18_0.72_0.34_0.0', 'flatten_balanced_accuracy': '0.71_0.68_0.7_0.64_0.62'}
173
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 10, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 9}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9752774370799194), 'balanced_accuracy': np.float64(0.5111904761904762), 'by_group': {'female_div/dep/mar': np.float64(0.98), 'male_div/sep': np.float64(0.99), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.98)}, 'status': 'success', 'total_time': 7.972118139266968, 'fit_time': np.float64(0.9552953243255615), 'score_time': np.float64(0.0167055606842041), 'absolute_time': 1746706080.0314605, 'flatten_demographic_parity_ratio': '0.89_1.0_0.99_1.0_1.0', 'flatten_balanced_accuracy': '0.56_0.5_0.5_0.5_0.5'}
174
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(50), 'solver': np.str_('adam')}, 'features': {'type': np.str_('SelectKBest'), 'k': 7}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.3441557364691693), 'balanced_accuracy': np.float64(0.655), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.39), 'male_mar/wid': np.float64(0.92), 'male_single': np.float64(0.89)}, 'status': 'success', 'total_time': 1.222109317779541, 'fit_time': np.float64(0.22109041213989258), 'score_time': np.float64(0.004145765304565429), 'absolute_time': 1746706081.449806, 'flatten_demographic_parity_ratio': '0.2_0.15_0.72_0.48_0.17', 'flatten_balanced_accuracy': '0.68_0.65_0.68_0.63_0.64'}
175
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 6, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9689908256880735), 'balanced_accuracy': np.float64(0.5166666666666666), 'by_group': {'female_div/dep/mar': np.float64(0.98), 'male_div/sep': np.float64(0.98), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.97)}, 'status': 'success', 'total_time': 5.882174015045166, 'fit_time': np.float64(1.1409157752990722), 'score_time': np.float64(0.010424327850341798), 'absolute_time': 1746706087.5346384, 'flatten_demographic_parity_ratio': '1.0_0.9_0.97_1.0_0.97', 'flatten_balanced_accuracy': '0.5_0.56_0.5_0.5_0.52'}
176
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 6, 'min_samples_split': 2, 'n_estimators': np.int64(75)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.7044014839831563), 'balanced_accuracy': np.float64(0.555952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.87), 'male_div/sep': np.float64(0.75), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.77)}, 'status': 'success', 'total_time': 6.656353712081909, 'fit_time': np.float64(1.2992083072662353), 'score_time': np.float64(0.009167671203613281), 'absolute_time': 1746706094.3988059, 'flatten_demographic_parity_ratio': '0.83_0.74_0.82_0.6_0.53', 'flatten_balanced_accuracy': '0.62_0.57_0.53_0.5_0.55'}
177
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 16, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.02846153846153846), 'balanced_accuracy': np.float64(0.6273809523809524), 'by_group': {'female_div/dep/mar': np.float64(0.97), 'male_div/sep': np.float64(0.03), 'male_mar/wid': np.float64(0.77), 'male_single': np.float64(0.95)}, 'status': 'success', 'total_time': 1.0483698844909668, 'fit_time': np.float64(0.06172256469726563), 'score_time': np.float64(0.07059011459350586), 'absolute_time': 1746706095.6492682, 'flatten_demographic_parity_ratio': '0.0_0.14_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.66_0.69_0.56_0.62_0.61'}
178
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 2, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.5187965367965368), 'balanced_accuracy': np.float64(0.6054761904761905), 'by_group': {'female_div/dep/mar': np.float64(0.75), 'male_div/sep': np.float64(0.63), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.84)}, 'status': 'success', 'total_time': 0.4019436836242676, 'fit_time': np.float64(0.0561215877532959), 'score_time': np.float64(0.003943157196044922), 'absolute_time': 1746706096.3189065, 'flatten_demographic_parity_ratio': '0.45_0.9_0.3_0.54_0.4', 'flatten_balanced_accuracy': '0.61_0.56_0.59_0.64_0.62'}
179
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.2251785714285714), 'balanced_accuracy': np.float64(0.6285714285714286), 'by_group': {'female_div/dep/mar': np.float64(0.68), 'male_div/sep': np.float64(0.23), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.65)}, 'status': 'success', 'total_time': 1.2199628353118896, 'fit_time': np.float64(0.21124939918518065), 'score_time': np.float64(0.008615827560424805), 'absolute_time': 1746706100.5874205, 'flatten_demographic_parity_ratio': '0.0_0.12_0.48_0.41_0.12', 'flatten_balanced_accuracy': '0.68_0.61_0.65_0.58_0.62'}
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')} was NaN

180
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.49952380952380954), 'by_group': {'female_div/dep/mar': np.float64(0.67), 'male_div/sep': np.float64(0.0), 'male_mar/wid': np.float64(0.0), 'male_single': np.float64(0.62)}, 'status': 'fail', 'total_time': 0.3855717182159424, 'fit_time': np.float64(0.054077768325805665), 'score_time': np.float64(0.003596973419189453), 'absolute_time': 1746706101.2310061, 'flatten_demographic_parity_ratio': 'nan_0.0_nan_0.0_0.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
181
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.7290561310052284), 'balanced_accuracy': np.float64(0.5426190476190476), 'by_group': {'female_div/dep/mar': np.float64(0.88), 'male_div/sep': np.float64(0.83), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.76)}, 'status': 'success', 'total_time': 17.944353580474854, 'fit_time': np.float64(1.1894213676452636), 'score_time': np.float64(0.007119226455688477), 'absolute_time': 1746706119.3793464, 'flatten_demographic_parity_ratio': '0.84_0.48_0.83_0.76_0.74', 'flatten_balanced_accuracy': '0.56_0.54_0.53_0.56_0.52'}
182
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_split': 4, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.7098382949115327), 'balanced_accuracy': np.float64(0.5497619047619048), 'by_group': {'female_div/dep/mar': np.float64(0.88), 'male_div/sep': np.float64(0.77), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.75)}, 'status': 'success', 'total_time': 21.533081769943237, 'fit_time': np.float64(3.7874867916107178), 'score_time': np.float64(0.008858299255371094), 'absolute_time': 1746706141.1190763, 'flatten_demographic_parity_ratio': '0.83_0.74_0.52_0.72_0.74', 'flatten_balanced_accuracy': '0.62_0.58_0.51_0.53_0.51'}
183
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 6, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.5165044408730323), 'balanced_accuracy': np.float64(0.5385714285714286), 'by_group': {'female_div/dep/mar': np.float64(0.85), 'male_div/sep': np.float64(0.55), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.67)}, 'status': 'success', 'total_time': 14.36731767654419, 'fit_time': np.float64(2.842133140563965), 'score_time': np.float64(0.008671140670776368), 'absolute_time': 1746706155.7058895, 'flatten_demographic_parity_ratio': '0.42_0.74_0.72_0.54_0.16', 'flatten_balanced_accuracy': '0.55_0.58_0.54_0.5_0.53'}
184
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.0), 'balanced_accuracy': np.float64(0.5830952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.96), 'male_div/sep': np.float64(0.0), 'male_mar/wid': np.float64(0.11), 'male_single': np.float64(0.97)}, 'status': 'success', 'total_time': 0.36359477043151855, 'fit_time': np.float64(0.0504307746887207), 'score_time': np.float64(0.0036230564117431642), 'absolute_time': 1746706156.2769535, 'flatten_demographic_parity_ratio': '0.0_0.0_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.61_0.56_0.57_0.6_0.57'}
185
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 6, 'min_samples_split': 4, 'n_estimators': np.int64(75)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.11391532165644773), 'balanced_accuracy': np.float64(0.6361904761904762), 'by_group': {'female_div/dep/mar': np.float64(0.47), 'male_div/sep': np.float64(0.11), 'male_mar/wid': np.float64(0.32), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.9473204612731934, 'fit_time': np.float64(0.1577676773071289), 'score_time': np.float64(0.008523273468017577), 'absolute_time': 1746706157.432275, 'flatten_demographic_parity_ratio': '0.13_0.11_0.22_0.11_0.0', 'flatten_balanced_accuracy': '0.63_0.6_0.61_0.68_0.66'}
186
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 6, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.40101028602539424), 'balanced_accuracy': np.float64(0.6042857142857143), 'by_group': {'female_div/dep/mar': np.float64(0.77), 'male_div/sep': np.float64(0.46), 'male_mar/wid': np.float64(0.95), 'male_single': np.float64(0.92)}, 'status': 'success', 'total_time': 0.3999776840209961, 'fit_time': np.float64(0.0578035831451416), 'score_time': np.float64(0.003647136688232422), 'absolute_time': 1746706161.265008, 'flatten_demographic_parity_ratio': '0.58_0.56_0.73_0.0_0.14', 'flatten_balanced_accuracy': '0.62_0.58_0.59_0.62_0.6'}
187
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_split': 2, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.4738377321603127), 'balanced_accuracy': np.float64(0.6073809523809524), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.47), 'male_mar/wid': np.float64(0.95), 'male_single': np.float64(0.85)}, 'status': 'success', 'total_time': 0.39879703521728516, 'fit_time': np.float64(0.052081727981567384), 'score_time': np.float64(0.005315351486206055), 'absolute_time': 1746706161.8789124, 'flatten_demographic_parity_ratio': '0.45_0.84_0.6_0.13_0.35', 'flatten_balanced_accuracy': '0.61_0.52_0.66_0.59_0.65'}
188
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 11, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.708832751488414), 'balanced_accuracy': np.float64(0.5004761904761904), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.84), 'male_mar/wid': np.float64(0.92), 'male_single': np.float64(0.81)}, 'status': 'success', 'total_time': 6.46870231628418, 'fit_time': np.float64(1.2428048133850098), 'score_time': np.float64(0.021054697036743165), 'absolute_time': 1746706168.559766, 'flatten_demographic_parity_ratio': '0.61_0.84_0.8_0.59_0.71', 'flatten_balanced_accuracy': '0.51_0.53_0.53_0.41_0.52'}
189
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 4, 'max_leaf_nodes': 6, 'min_samples_split': 5, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.6782550920124437), 'balanced_accuracy': np.float64(0.605952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.95), 'male_div/sep': np.float64(0.68), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.95)}, 'status': 'success', 'total_time': 0.7347390651702881, 'fit_time': np.float64(0.11547365188598632), 'score_time': np.float64(0.007709074020385742), 'absolute_time': 1746706169.5081382, 'flatten_demographic_parity_ratio': '0.49_0.79_0.75_0.95_0.42', 'flatten_balanced_accuracy': '0.65_0.6_0.57_0.62_0.58'}
/usr/local/lib/python3.12/site-packages/numpy/_core/_methods.py:194: RuntimeWarning: overflow encountered in multiply
  x = um.multiply(x, x, out=x)
/usr/local/lib/python3.12/site-packages/numpy/_core/_methods.py:205: RuntimeWarning: overflow encountered in reduce
  ret = umr_sum(x, axis, dtype, out, keepdims=keepdims, where=where)
190
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 9, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.5)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.8964016309887869), 'balanced_accuracy': np.float64(0.5159523809523809), 'by_group': {'female_div/dep/mar': np.float64(0.95), 'male_div/sep': np.float64(0.93), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.9)}, 'status': 'success', 'total_time': 4.7489542961120605, 'fit_time': np.float64(0.84620041847229), 'score_time': np.float64(0.043367433547973636), 'absolute_time': 1746706174.4718127, 'flatten_demographic_parity_ratio': '1.0_1.0_0.74_1.0_0.74', 'flatten_balanced_accuracy': '0.5_0.5_0.55_0.5_0.53'}
191
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.22527860696517416), 'balanced_accuracy': np.float64(0.641904761904762), 'by_group': {'female_div/dep/mar': np.float64(0.9), 'male_div/sep': np.float64(0.23), 'male_mar/wid': np.float64(0.9), 'male_single': np.float64(0.87)}, 'status': 'success', 'total_time': 1.4051101207733154, 'fit_time': np.float64(0.2565861701965332), 'score_time': np.float64(0.00445404052734375), 'absolute_time': 1746706176.09424, 'flatten_demographic_parity_ratio': '0.18_0.3_0.49_0.16_0.0', 'flatten_balanced_accuracy': '0.65_0.68_0.61_0.64_0.64'}
/usr/local/lib/python3.12/site-packages/numpy/_core/_methods.py:194: RuntimeWarning: overflow encountered in multiply
  x = um.multiply(x, x, out=x)
192
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(10), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.7067560081643391), 'balanced_accuracy': np.float64(0.5397619047619047), 'by_group': {'female_div/dep/mar': np.float64(0.84), 'male_div/sep': np.float64(0.76), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.76)}, 'status': 'success', 'total_time': 5.1467201709747314, 'fit_time': np.float64(1.0003830909729003), 'score_time': np.float64(0.007272052764892578), 'absolute_time': 1746706181.45937, 'flatten_demographic_parity_ratio': '0.88_0.68_0.84_0.54_0.59', 'flatten_balanced_accuracy': '0.55_0.58_0.54_0.5_0.52'}
193
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 11, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.474778662198017), 'balanced_accuracy': np.float64(0.6095238095238095), 'by_group': {'female_div/dep/mar': np.float64(0.7), 'male_div/sep': np.float64(0.53), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.77)}, 'status': 'success', 'total_time': 1.0268919467926025, 'fit_time': np.float64(0.0648648738861084), 'score_time': np.float64(0.0722109317779541), 'absolute_time': 1746706182.7069716, 'flatten_demographic_parity_ratio': '0.0_0.33_0.71_0.65_0.68', 'flatten_balanced_accuracy': '0.62_0.65_0.63_0.55_0.6'}
194
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 6, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 2}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.846230974142469), 'balanced_accuracy': np.float64(0.5066666666666666), 'by_group': {'female_div/dep/mar': np.float64(0.92), 'male_div/sep': np.float64(0.89), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.85)}, 'status': 'success', 'total_time': 22.046653032302856, 'fit_time': np.float64(0.6107011318206788), 'score_time': np.float64(0.00765080451965332), 'absolute_time': 1746706208.045323, 'flatten_demographic_parity_ratio': '0.95_0.57_0.94_0.78_1.0', 'flatten_balanced_accuracy': '0.54_0.51_0.51_0.47_0.5'}
195
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(10), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9767741935483871), 'balanced_accuracy': np.float64(0.5009523809523809), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(0.98), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.498157262802124, 'fit_time': np.float64(0.07651681900024414), 'score_time': np.float64(0.003963947296142578), 'absolute_time': 1746706208.767059, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_0.9_0.98', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.51'}
196
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 8, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.7821056491723348), 'balanced_accuracy': np.float64(0.645952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.88), 'male_div/sep': np.float64(0.84), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.96)}, 'status': 'success', 'total_time': 0.23292946815490723, 'fit_time': np.float64(0.006499004364013672), 'score_time': np.float64(0.01198277473449707), 'absolute_time': 1746706209.2266874, 'flatten_demographic_parity_ratio': '0.95_0.81_0.5_0.79_0.87', 'flatten_balanced_accuracy': '0.68_0.66_0.64_0.63_0.62'}
197
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 2}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9414678899082569), 'balanced_accuracy': np.float64(0.5166666666666666), 'by_group': {'female_div/dep/mar': np.float64(0.98), 'male_div/sep': np.float64(0.96), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.94)}, 'status': 'success', 'total_time': 6.743760108947754, 'fit_time': np.float64(1.1569682598114013), 'score_time': np.float64(0.008146715164184571), 'absolute_time': 1746706216.190896, 'flatten_demographic_parity_ratio': '1.0_1.0_0.92_0.89_0.9', 'flatten_balanced_accuracy': '0.5_0.5_0.52_0.52_0.54'}
198
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 13, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.8804657616201232), 'balanced_accuracy': np.float64(0.5307142857142857), 'by_group': {'female_div/dep/mar': np.float64(0.92), 'male_div/sep': np.float64(0.95), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.91)}, 'status': 'success', 'total_time': 0.40587902069091797, 'fit_time': np.float64(0.004417896270751953), 'score_time': np.float64(0.031311559677124026), 'absolute_time': 1746706216.8242195, 'flatten_demographic_parity_ratio': '0.84_0.89_0.89_0.83_0.95', 'flatten_balanced_accuracy': '0.53_0.55_0.52_0.53_0.52'}
199
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(50), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9747863960707998), 'balanced_accuracy': np.float64(0.5119047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.98), 'male_div/sep': np.float64(0.99), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.97)}, 'status': 'success', 'total_time': 17.98937726020813, 'fit_time': np.float64(1.1406618118286134), 'score_time': np.float64(0.006735086441040039), 'absolute_time': 1746706235.0386512, 'flatten_demographic_parity_ratio': '0.96_1.0_1.0_1.0_0.91', 'flatten_balanced_accuracy': '0.54_0.5_0.5_0.5_0.52'}
200
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.31284151326789383), 'balanced_accuracy': np.float64(0.6197619047619047), 'by_group': {'female_div/dep/mar': np.float64(0.75), 'male_div/sep': np.float64(0.39), 'male_mar/wid': np.float64(0.4), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.30725908279418945, 'fit_time': np.float64(0.039580154418945315), 'score_time': np.float64(0.0037922382354736326), 'absolute_time': 1746706235.5708272, 'flatten_demographic_parity_ratio': '0.15_0.14_0.38_0.64_0.26', 'flatten_balanced_accuracy': '0.67_0.59_0.6_0.62_0.62'}
201
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.7866483796731233), 'balanced_accuracy': np.float64(0.5507142857142856), 'by_group': {'female_div/dep/mar': np.float64(0.91), 'male_div/sep': np.float64(0.87), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.82)}, 'status': 'success', 'total_time': 5.505780458450317, 'fit_time': np.float64(1.0702044486999511), 'score_time': np.float64(0.00909719467163086), 'absolute_time': 1746706241.302284, 'flatten_demographic_parity_ratio': '0.84_0.74_0.82_0.79_0.74', 'flatten_balanced_accuracy': '0.56_0.58_0.54_0.56_0.52'}
202
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.5679336626676077), 'balanced_accuracy': np.float64(0.660952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.93), 'male_div/sep': np.float64(0.59), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.85)}, 'status': 'success', 'total_time': 2.5050785541534424, 'fit_time': np.float64(0.4786230087280273), 'score_time': np.float64(0.0037461280822753905), 'absolute_time': 1746706247.2457676, 'flatten_demographic_parity_ratio': '0.18_0.63_0.83_0.77_0.44', 'flatten_balanced_accuracy': '0.65_0.67_0.68_0.67_0.63'}
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')} was NaN

203
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5002380952380953), 'by_group': {'female_div/dep/mar': np.float64(0.97), 'male_div/sep': np.float64(0.54), 'male_mar/wid': np.float64(0.76), 'male_single': np.float64(0.75)}, 'status': 'fail', 'total_time': 6.609234809875488, 'fit_time': np.float64(1.2946621894836425), 'score_time': np.float64(0.006754159927368164), 'absolute_time': 1746706254.0861754, 'flatten_demographic_parity_ratio': '0.51_nan_0.47_0.67_0.0', 'flatten_balanced_accuracy': '0.48_0.5_0.5_0.5_0.52'}
204
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 17, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.7086764705882352), 'balanced_accuracy': np.float64(0.5245238095238095), 'by_group': {'female_div/dep/mar': np.float64(0.91), 'male_div/sep': np.float64(0.71), 'male_mar/wid': np.float64(0.99), 'male_single': np.float64(0.9)}, 'status': 'success', 'total_time': 0.31540679931640625, 'fit_time': np.float64(0.03567109107971191), 'score_time': np.float64(0.00550990104675293), 'absolute_time': 1746706254.635299, 'flatten_demographic_parity_ratio': '0.68_0.74_0.56_0.78_0.78', 'flatten_balanced_accuracy': '0.56_0.51_0.52_0.51_0.52'}
205
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 3, 'n_estimators': np.int64(75)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.7173211241288466), 'balanced_accuracy': np.float64(0.5440476190476191), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.77), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.81)}, 'status': 'success', 'total_time': 6.722720146179199, 'fit_time': np.float64(1.3094959735870362), 'score_time': np.float64(0.010155248641967773), 'absolute_time': 1746706261.5918984, 'flatten_demographic_parity_ratio': '0.91_0.74_0.72_0.71_0.51', 'flatten_balanced_accuracy': '0.54_0.59_0.54_0.52_0.53'}
206
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.7011833449925514), 'balanced_accuracy': np.float64(0.6192857142857143), 'by_group': {'female_div/dep/mar': np.float64(0.72), 'male_div/sep': np.float64(0.97), 'male_mar/wid': np.float64(0.9), 'male_single': np.float64(0.85)}, 'status': 'success', 'total_time': 2.78122878074646, 'fit_time': np.float64(0.5338178634643554), 'score_time': np.float64(0.003814697265625), 'absolute_time': 1746706264.6071596, 'flatten_demographic_parity_ratio': '0.85_0.75_0.5_0.74_0.67', 'flatten_balanced_accuracy': '0.61_0.61_0.62_0.62_0.64'}
207
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 3, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.6722882565575613), 'balanced_accuracy': np.float64(0.5926190476190476), 'by_group': {'female_div/dep/mar': np.float64(0.76), 'male_div/sep': np.float64(0.78), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.95)}, 'status': 'success', 'total_time': 0.8011143207550049, 'fit_time': np.float64(0.006477260589599609), 'score_time': np.float64(0.06577000617980958), 'absolute_time': 1746706265.6426713, 'flatten_demographic_parity_ratio': '0.77_0.75_0.48_0.76_0.6', 'flatten_balanced_accuracy': '0.57_0.59_0.57_0.64_0.58'}
208
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_split': 4, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('PCA'), 'n_components': 3}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.37775296918503776), 'balanced_accuracy': np.float64(0.5869047619047618), 'by_group': {'female_div/dep/mar': np.float64(0.92), 'male_div/sep': np.float64(0.38), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.79)}, 'status': 'success', 'total_time': 0.6136345863342285, 'fit_time': np.float64(0.09868111610412597), 'score_time': np.float64(0.00484919548034668), 'absolute_time': 1746706266.492321, 'flatten_demographic_parity_ratio': '0.45_0.55_0.59_0.16_0.14', 'flatten_balanced_accuracy': '0.65_0.6_0.57_0.56_0.56'}
209
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 2, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.6624159021406728), 'balanced_accuracy': np.float64(0.5445238095238096), 'by_group': {'female_div/dep/mar': np.float64(0.87), 'male_div/sep': np.float64(0.7), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.74)}, 'status': 'success', 'total_time': 14.010809898376465, 'fit_time': np.float64(2.5497364521026613), 'score_time': np.float64(0.007251548767089844), 'absolute_time': 1746706280.7438636, 'flatten_demographic_parity_ratio': '0.45_0.74_0.85_0.71_0.56', 'flatten_balanced_accuracy': '0.54_0.57_0.55_0.52_0.55'}
210
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.954260031507738), 'balanced_accuracy': np.float64(0.5133333333333333), 'by_group': {'female_div/dep/mar': np.float64(0.98), 'male_div/sep': np.float64(0.97), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.96)}, 'status': 'success', 'total_time': 16.545294761657715, 'fit_time': np.float64(1.0636499404907227), 'score_time': np.float64(0.006934499740600586), 'absolute_time': 1746706300.9351962, 'flatten_demographic_parity_ratio': '0.97_1.0_0.95_1.0_0.84', 'flatten_balanced_accuracy': '0.53_0.5_0.51_0.5_0.53'}
211
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9689908256880735), 'balanced_accuracy': np.float64(0.5078571428571428), 'by_group': {'female_div/dep/mar': np.float64(0.99), 'male_div/sep': np.float64(0.98), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.97)}, 'status': 'success', 'total_time': 6.439346075057983, 'fit_time': np.float64(1.2589833736419678), 'score_time': np.float64(0.007263326644897461), 'absolute_time': 1746706307.6165886, 'flatten_demographic_parity_ratio': '1.0_1.0_0.97_0.9_0.97', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.52_0.52'}
212
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('SelectKBest'), 'k': 9}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9689908256880735), 'balanced_accuracy': np.float64(0.5199999999999999), 'by_group': {'female_div/dep/mar': np.float64(0.98), 'male_div/sep': np.float64(0.98), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.97)}, 'status': 'success', 'total_time': 14.020879745483398, 'fit_time': np.float64(1.040915298461914), 'score_time': np.float64(0.010044336318969727), 'absolute_time': 1746706321.8763428, 'flatten_demographic_parity_ratio': '1.0_0.9_1.0_1.0_0.94', 'flatten_balanced_accuracy': '0.5_0.57_0.5_0.5_0.53'}
213
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 7.8306825160980225, 'fit_time': np.float64(1.0336461067199707), 'score_time': np.float64(0.006562519073486328), 'absolute_time': 1746706329.951732, 'flatten_demographic_parity_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
214
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.6971733525214368), 'balanced_accuracy': np.float64(0.5285714285714286), 'by_group': {'female_div/dep/mar': np.float64(0.91), 'male_div/sep': np.float64(0.73), 'male_mar/wid': np.float64(0.9), 'male_single': np.float64(0.81)}, 'status': 'success', 'total_time': 4.663221836090088, 'fit_time': np.float64(0.904503583908081), 'score_time': np.float64(0.0058365345001220705), 'absolute_time': 1746706334.8592548, 'flatten_demographic_parity_ratio': '0.95_0.45_0.5_0.84_0.74', 'flatten_balanced_accuracy': '0.53_0.55_0.49_0.54_0.54'}
215
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 20, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.10172916666666668), 'balanced_accuracy': np.float64(0.6657142857142857), 'by_group': {'female_div/dep/mar': np.float64(0.68), 'male_div/sep': np.float64(0.1), 'male_mar/wid': np.float64(0.88), 'male_single': np.float64(0.91)}, 'status': 'success', 'total_time': 1.141319990158081, 'fit_time': np.float64(0.06767888069152832), 'score_time': np.float64(0.07286982536315918), 'absolute_time': 1746706336.2444398, 'flatten_demographic_parity_ratio': '0.0_0.0_0.18_0.16_0.17', 'flatten_balanced_accuracy': '0.65_0.68_0.68_0.63_0.7'}
216
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 4, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 3}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.8340471948389361), 'balanced_accuracy': np.float64(0.6078571428571429), 'by_group': {'female_div/dep/mar': np.float64(0.92), 'male_div/sep': np.float64(0.83), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.95)}, 'status': 'success', 'total_time': 0.22603178024291992, 'fit_time': np.float64(0.021091365814208986), 'score_time': np.float64(0.004242229461669922), 'absolute_time': 1746706336.7178905, 'flatten_demographic_parity_ratio': '0.9_0.8_0.85_0.78_0.84', 'flatten_balanced_accuracy': '0.68_0.61_0.54_0.63_0.57'}
217
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 15, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(2.0)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.9721045210034294), 'balanced_accuracy': np.float64(0.5088095238095238), 'by_group': {'female_div/dep/mar': np.float64(0.98), 'male_div/sep': np.float64(0.99), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.98)}, 'status': 'success', 'total_time': 5.828597545623779, 'fit_time': np.float64(1.0738940238952637), 'score_time': np.float64(0.056425857543945315), 'absolute_time': 1746706342.7941427, 'flatten_demographic_parity_ratio': '0.89_1.0_0.97_1.0_1.0', 'flatten_balanced_accuracy': '0.54_0.5_0.5_0.5_0.5'}
218
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.7779874510871357), 'balanced_accuracy': np.float64(0.6176190476190476), 'by_group': {'female_div/dep/mar': np.float64(0.92), 'male_div/sep': np.float64(0.89), 'male_mar/wid': np.float64(0.92), 'male_single': np.float64(0.91)}, 'status': 'success', 'total_time': 0.8226137161254883, 'fit_time': np.float64(0.0039642333984375), 'score_time': np.float64(0.0780820369720459), 'absolute_time': 1746706347.2019508, 'flatten_demographic_parity_ratio': '0.63_0.93_0.82_0.76_0.74', 'flatten_balanced_accuracy': '0.63_0.67_0.6_0.6_0.6'}
219
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.7990855725901553), 'balanced_accuracy': np.float64(0.5192857142857144), 'by_group': {'female_div/dep/mar': np.float64(0.94), 'male_div/sep': np.float64(0.83), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.86)}, 'status': 'success', 'total_time': 4.835455417633057, 'fit_time': np.float64(0.8779474258422851), 'score_time': np.float64(0.04885091781616211), 'absolute_time': 1746706352.2811246, 'flatten_demographic_parity_ratio': '0.92_0.9_0.8_0.78_0.59', 'flatten_balanced_accuracy': '0.53_0.56_0.49_0.55_0.47'}
220
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(25), 'solver': np.str_('sgd')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.07125000000000001), 'balanced_accuracy': np.float64(0.5035714285714286), 'by_group': {'female_div/dep/mar': np.float64(0.45), 'male_div/sep': np.float64(0.62), 'male_mar/wid': np.float64(0.2), 'male_single': np.float64(0.59)}, 'status': 'success', 'total_time': 1.0392630100250244, 'fit_time': np.float64(0.18525147438049316), 'score_time': np.float64(0.0036817073822021486), 'absolute_time': 1746706353.5658765, 'flatten_demographic_parity_ratio': '0.0_0.0_0.0_0.0_0.36', 'flatten_balanced_accuracy': '0.52_0.49_0.46_0.5_0.54'}
221
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 3, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.5425717703349282), 'balanced_accuracy': np.float64(0.6307142857142858), 'by_group': {'female_div/dep/mar': np.float64(0.88), 'male_div/sep': np.float64(0.54), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.84)}, 'status': 'success', 'total_time': 0.48604583740234375, 'fit_time': np.float64(0.06551384925842285), 'score_time': np.float64(0.0045395374298095705), 'absolute_time': 1746706354.3056633, 'flatten_demographic_parity_ratio': '0.65_0.33_0.68_0.71_0.35', 'flatten_balanced_accuracy': '0.64_0.67_0.64_0.6_0.6'}
222
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.5425135909176657), 'balanced_accuracy': np.float64(0.5397619047619047), 'by_group': {'female_div/dep/mar': np.float64(0.84), 'male_div/sep': np.float64(0.74), 'male_mar/wid': np.float64(0.73), 'male_single': np.float64(0.81)}, 'status': 'success', 'total_time': 22.021857738494873, 'fit_time': np.float64(1.4961183071136475), 'score_time': np.float64(0.00593113899230957), 'absolute_time': 1746706376.5811093, 'flatten_demographic_parity_ratio': '0.87_0.45_0.48_0.18_0.74', 'flatten_balanced_accuracy': '0.56_0.55_0.5_0.56_0.52'}
AutoML: optimization done.
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
AutoML: miner done.
AutoML: export done.
Here is the standard output/error of the command:

Here is the standard output/error of the command:

Here is the standard output/error of the command:

hamlet_1492564686
AutoML execution ended
