Sensitive groups ready!
Theory ready!
Theory:
step(normalization) :- true.
step(features) :- true.
step(mitigation) :- true.
step(rebalancing) :- true.
step(classification) :- true.
operator(normalization, power_transformer) :- true.
operator(normalization, robust_scaler) :- true.
operator(normalization, standard) :- true.
operator(normalization, minmax) :- true.
operator(features, select_k_best) :- true.
operator(features, pca) :- true.
operator(mitigation, corr_remover) :- true.
operator(mitigation, lfr) :- true.
operator(rebalancing, near_miss) :- true.
operator(rebalancing, smote) :- true.
operator(classification, knn) :- true.
operator(classification, nn) :- true.
operator(classification, rf) :- true.
hyperparameter(robust_scaler, with_centering, choice) :- true.
hyperparameter(robust_scaler, with_scaling, choice) :- true.
hyperparameter(standard, with_mean, choice) :- true.
hyperparameter(standard, with_std, choice) :- true.
hyperparameter(select_k_best, k, randint) :- true.
hyperparameter(pca, n_components, randint) :- true.
hyperparameter(corr_remover, alpha, choice) :- true.
hyperparameter(lfr, n_prototypes, choice) :- true.
hyperparameter(lfr, reconstruct_weight, choice) :- true.
hyperparameter(lfr, fairness_weight, choice) :- true.
hyperparameter(near_miss, n_neighbors, randint) :- true.
hyperparameter(smote, k_neighbors, randint) :- true.
hyperparameter(knn, n_neighbors, randint) :- true.
hyperparameter(knn, weights, choice) :- true.
hyperparameter(knn, metric, choice) :- true.
hyperparameter(nn, n_hidden_layers, choice) :- true.
hyperparameter(nn, n_neurons, choice) :- true.
hyperparameter(nn, activation, choice) :- true.
hyperparameter(nn, solver, choice) :- true.
hyperparameter(nn, alpha, choice) :- true.
hyperparameter(nn, learning_rate, choice) :- true.
hyperparameter(rf, n_estimators, choice) :- true.
hyperparameter(rf, max_depth, randint) :- true.
hyperparameter(rf, max_features, randint) :- true.
hyperparameter(rf, min_samples_split, randint) :- true.
hyperparameter(rf, max_leaf_nodes, randint) :- true.
hyperparameter(rf, bootstrap, choice) :- true.
hyperparameter(rf, criterion, choice) :- true.
domain(robust_scaler, with_centering, [true, false]) :- true.
domain(robust_scaler, with_scaling, [true, false]) :- true.
domain(standard, with_mean, [true, false]) :- true.
domain(standard, with_std, [true, false]) :- true.
domain(select_k_best, k, [1, 10]) :- true.
domain(pca, n_components, [1, 8]) :- true.
domain(corr_remover, alpha, [0.25, 0.5, 0.75, 1.0]) :- true.
domain(lfr, n_prototypes, [10, 50, 100, 200]) :- true.
domain(lfr, reconstruct_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(lfr, fairness_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(near_miss, n_neighbors, [1, 4]) :- true.
domain(smote, k_neighbors, [5, 8]) :- true.
domain(knn, n_neighbors, [3, 20]) :- true.
domain(knn, weights, [uniform, distance]) :- true.
domain(knn, metric, [minkowski, euclidean, manhattan]) :- true.
domain(nn, n_hidden_layers, [1, 5, 10, 20]) :- true.
domain(nn, n_neurons, [5, 10, 25, 50]) :- true.
domain(nn, activation, [logistic, tanh, relu]) :- true.
domain(nn, solver, [lbfgs, sgd, adam]) :- true.
domain(nn, alpha, [0.0001, 0.001, 0.01, 0.00001]) :- true.
domain(nn, learning_rate, [constant, invscaling, adaptive]) :- true.
domain(rf, n_estimators, [10, 25, 50, 75, 100]) :- true.
domain(rf, max_depth, [1, 5]) :- true.
domain(rf, max_features, [1, 4]) :- true.
domain(rf, min_samples_split, [2, 6]) :- true.
domain(rf, max_leaf_nodes, [2, 6]) :- true.
domain(rf, bootstrap, [true, false]) :- true.
domain(rf, criterion, [gini, entropy]) :- true.
':=>'(c1, mandatory([mitigation], classification)) :- true.
':=>'(c3, mandatory_order([mitigation, features], classification)) :- true.
':=>'(c4, mandatory_order([mitigation, normalization], classification)) :- true.
':=>'(c5, mandatory([normalization], knn)) :- true.
':=>'(c6, mandatory([normalization], nn)) :- true.
dataset(adult) :- true.
metric(balanced_accuracy) :- true.
fairness_metric(demographic_parity_ratio) :- true.
sensitive_feature(sex, ['Male', 'Female']) :- true.
sensitive_feature(race, ['Amer-Indian-Eskimo', 'Asian-Pac-Islander', 'Black', 'Other', 'White']) :- true.
':=>'(mc0, unbalanced_dataset) :- true.
pipeline([Step_1_0], ZZ_0) :- (step(Step_1_0), '\\='(Step_1_0, classification), operator(classification, ZZ_0)).
pipeline([Step_1_1, Step_2_0], ZZ_1) :- (step(Step_1_1), step(Step_2_0), '\\='(Step_1_1, classification), '\\='(Step_2_0, classification), '\\='(Step_1_1, Step_2_0), operator(classification, ZZ_1)).
pipeline([Step_1_2, Step_2_1, Step_3_0], ZZ_2) :- (step(Step_1_2), step(Step_2_1), step(Step_3_0), '\\='(Step_1_2, classification), '\\='(Step_2_1, classification), '\\='(Step_3_0, classification), '\\='(Step_1_2, Step_2_1), '\\='(Step_1_2, Step_3_0), '\\='(Step_2_1, Step_3_0), operator(classification, ZZ_2)).
pipeline([Step_1_3, Step_2_2, Step_3_1, Step_4_0], ZZ_3) :- (step(Step_1_3), step(Step_2_2), step(Step_3_1), step(Step_4_0), '\\='(Step_1_3, classification), '\\='(Step_2_2, classification), '\\='(Step_3_1, classification), '\\='(Step_4_0, classification), '\\='(Step_1_3, Step_2_2), '\\='(Step_1_3, Step_3_1), '\\='(Step_1_3, Step_4_0), '\\='(Step_2_2, Step_3_1), '\\='(Step_2_2, Step_4_0), '\\='(Step_3_1, Step_4_0), operator(classification, ZZ_3)).
':=>'(p596949, sensitive_group(['Male'])) :- true.
':=>'(p581784, sensitive_group(['Female'])) :- true.
':=>'(p660721, sensitive_group(['Amer-Indian-Eskimo'])) :- true.
':=>'(p408618, sensitive_group(['Asian-Pac-Islander'])) :- true.
':=>'(p735093, sensitive_group(['Black'])) :- true.
':=>'(p150231, sensitive_group(['Other'])) :- true.
':=>'(p660627, sensitive_group(['White'])) :- true.
':=>'(p213593, sensitive_group(['Male', 'Amer-Indian-Eskimo'])) :- true.
':=>'(p669868, sensitive_group(['Male', 'Asian-Pac-Islander'])) :- true.
':=>'(p438210, sensitive_group(['Male', 'Black'])) :- true.
':=>'(p3123, sensitive_group(['Male', 'Other'])) :- true.
':=>'(p814827, sensitive_group(['Male', 'White'])) :- true.
':=>'(p269877, sensitive_group(['Female', 'Amer-Indian-Eskimo'])) :- true.
':=>'(p703601, sensitive_group(['Female', 'Asian-Pac-Islander'])) :- true.
':=>'(p846303, sensitive_group(['Female', 'Black'])) :- true.
':=>'(p64903, sensitive_group(['Female', 'Other'])) :- true.
':=>'(p29180, sensitive_group(['Female', 'White'])) :- true.
':=>'(p140457, pipeline([], knn)) :- true.
':=>'(p866480, pipeline([], knn)) :- true.
':=>'(p593337, pipeline([], nn)) :- true.
':=>'(p488540, pipeline([], nn)) :- true.
':=>'(p885446, pipeline([], rf)) :- true.
':=>'(p574666, pipeline([normalization], knn)) :- true.
':=>'(p374461, pipeline([normalization], nn)) :- true.
':=>'(p479766, pipeline([normalization], rf)) :- true.
':=>'(p743042, pipeline([features], knn)) :- true.
':=>'(p700987, pipeline([features], knn)) :- true.
':=>'(p66602, pipeline([features], nn)) :- true.
':=>'(p163273, pipeline([features], nn)) :- true.
':=>'(p556058, pipeline([features], rf)) :- true.
':=>'(p709432, pipeline([mitigation], knn)) :- true.
':=>'(p737125, pipeline([mitigation], nn)) :- true.
':=>'(p348347, pipeline([rebalancing], knn)) :- true.
':=>'(p648426, pipeline([rebalancing], knn)) :- true.
':=>'(p953795, pipeline([rebalancing], nn)) :- true.
':=>'(p28412, pipeline([rebalancing], nn)) :- true.
':=>'(p749330, pipeline([rebalancing], rf)) :- true.
':=>'(p164475, pipeline([normalization, features], knn)) :- true.
':=>'(p778902, pipeline([normalization, features], nn)) :- true.
':=>'(p88210, pipeline([normalization, features], rf)) :- true.
':=>'(p243538, pipeline([normalization, mitigation], knn)) :- true.
':=>'(p68930, pipeline([normalization, mitigation], nn)) :- true.
':=>'(p161819, pipeline([normalization, mitigation], rf)) :- true.
':=>'(p85282, pipeline([normalization, rebalancing], knn)) :- true.
':=>'(p208628, pipeline([normalization, rebalancing], nn)) :- true.
':=>'(p71731, pipeline([normalization, rebalancing], rf)) :- true.
':=>'(p916195, pipeline([features, normalization], knn)) :- true.
':=>'(p371824, pipeline([features, normalization], nn)) :- true.
':=>'(p720034, pipeline([features, normalization], rf)) :- true.
':=>'(p85615, pipeline([features, mitigation], knn)) :- true.
':=>'(p873790, pipeline([features, mitigation], knn)) :- true.
':=>'(p151124, pipeline([features, mitigation], nn)) :- true.
':=>'(p719135, pipeline([features, mitigation], nn)) :- true.
':=>'(p428181, pipeline([features, mitigation], rf)) :- true.
':=>'(p960554, pipeline([features, rebalancing], knn)) :- true.
':=>'(p425520, pipeline([features, rebalancing], knn)) :- true.
':=>'(p521838, pipeline([features, rebalancing], nn)) :- true.
':=>'(p566307, pipeline([features, rebalancing], nn)) :- true.
':=>'(p454904, pipeline([features, rebalancing], rf)) :- true.
':=>'(p222857, pipeline([mitigation, features], knn)) :- true.
':=>'(p57214, pipeline([mitigation, features], nn)) :- true.
':=>'(p993422, pipeline([mitigation, rebalancing], knn)) :- true.
':=>'(p192778, pipeline([mitigation, rebalancing], nn)) :- true.
':=>'(p667380, pipeline([rebalancing, normalization], knn)) :- true.
':=>'(p100207, pipeline([rebalancing, normalization], nn)) :- true.
':=>'(p361050, pipeline([rebalancing, normalization], rf)) :- true.
':=>'(p502919, pipeline([rebalancing, features], knn)) :- true.
':=>'(p246363, pipeline([rebalancing, features], knn)) :- true.
':=>'(p987216, pipeline([rebalancing, features], nn)) :- true.
':=>'(p278230, pipeline([rebalancing, features], nn)) :- true.
':=>'(p256712, pipeline([rebalancing, features], rf)) :- true.
':=>'(p809057, pipeline([rebalancing, mitigation], knn)) :- true.
':=>'(p165604, pipeline([rebalancing, mitigation], nn)) :- true.
':=>'(p911668, pipeline([normalization, features, mitigation], knn)) :- true.
':=>'(p973468, pipeline([normalization, features, mitigation], knn)) :- true.
':=>'(p253750, pipeline([normalization, features, mitigation], nn)) :- true.
':=>'(p791432, pipeline([normalization, features, mitigation], nn)) :- true.
':=>'(p846150, pipeline([normalization, features, mitigation], rf)) :- true.
':=>'(p169522, pipeline([normalization, features, mitigation], rf)) :- true.
':=>'(p726720, pipeline([normalization, features, rebalancing], knn)) :- true.
':=>'(p992654, pipeline([normalization, features, rebalancing], nn)) :- true.
':=>'(p1401, pipeline([normalization, features, rebalancing], rf)) :- true.
':=>'(p48809, pipeline([normalization, mitigation, features], knn)) :- true.
':=>'(p192995, pipeline([normalization, mitigation, features], nn)) :- true.
':=>'(p215455, pipeline([normalization, mitigation, features], rf)) :- true.
':=>'(p590965, pipeline([normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p143560, pipeline([normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p616558, pipeline([normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p386873, pipeline([normalization, rebalancing, features], knn)) :- true.
':=>'(p295346, pipeline([normalization, rebalancing, features], nn)) :- true.
':=>'(p385239, pipeline([normalization, rebalancing, features], rf)) :- true.
':=>'(p958662, pipeline([normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p768895, pipeline([normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p499421, pipeline([normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p371601, pipeline([features, normalization, mitigation], knn)) :- true.
':=>'(p394547, pipeline([features, normalization, mitigation], knn)) :- true.
':=>'(p448853, pipeline([features, normalization, mitigation], nn)) :- true.
':=>'(p252484, pipeline([features, normalization, mitigation], nn)) :- true.
':=>'(p706137, pipeline([features, normalization, mitigation], rf)) :- true.
':=>'(p661228, pipeline([features, normalization, mitigation], rf)) :- true.
':=>'(p926646, pipeline([features, normalization, rebalancing], knn)) :- true.
':=>'(p762144, pipeline([features, normalization, rebalancing], nn)) :- true.
':=>'(p641579, pipeline([features, normalization, rebalancing], rf)) :- true.
':=>'(p722856, pipeline([features, mitigation, normalization], knn)) :- true.
':=>'(p58667, pipeline([features, mitigation, normalization], nn)) :- true.
':=>'(p46006, pipeline([features, mitigation, normalization], rf)) :- true.
':=>'(p416533, pipeline([features, mitigation, rebalancing], knn)) :- true.
':=>'(p775828, pipeline([features, mitigation, rebalancing], knn)) :- true.
':=>'(p620276, pipeline([features, mitigation, rebalancing], nn)) :- true.
':=>'(p703151, pipeline([features, mitigation, rebalancing], nn)) :- true.
':=>'(p981027, pipeline([features, mitigation, rebalancing], rf)) :- true.
':=>'(p281924, pipeline([features, rebalancing, normalization], knn)) :- true.
':=>'(p972703, pipeline([features, rebalancing, normalization], nn)) :- true.
':=>'(p143432, pipeline([features, rebalancing, normalization], rf)) :- true.
':=>'(p139327, pipeline([features, rebalancing, mitigation], knn)) :- true.
':=>'(p293027, pipeline([features, rebalancing, mitigation], knn)) :- true.
':=>'(p581072, pipeline([features, rebalancing, mitigation], nn)) :- true.
':=>'(p190589, pipeline([features, rebalancing, mitigation], nn)) :- true.
':=>'(p98044, pipeline([features, rebalancing, mitigation], rf)) :- true.
':=>'(p463867, pipeline([mitigation, features, rebalancing], knn)) :- true.
':=>'(p671206, pipeline([mitigation, features, rebalancing], nn)) :- true.
':=>'(p807490, pipeline([mitigation, rebalancing, features], knn)) :- true.
':=>'(p737954, pipeline([mitigation, rebalancing, features], nn)) :- true.
':=>'(p600854, pipeline([rebalancing, normalization, features], knn)) :- true.
':=>'(p351697, pipeline([rebalancing, normalization, features], nn)) :- true.
':=>'(p27044, pipeline([rebalancing, normalization, features], rf)) :- true.
':=>'(p380833, pipeline([rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p356873, pipeline([rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p1853, pipeline([rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p328499, pipeline([rebalancing, features, normalization], knn)) :- true.
':=>'(p405870, pipeline([rebalancing, features, normalization], nn)) :- true.
':=>'(p194273, pipeline([rebalancing, features, normalization], rf)) :- true.
':=>'(p981783, pipeline([rebalancing, features, mitigation], knn)) :- true.
':=>'(p710689, pipeline([rebalancing, features, mitigation], knn)) :- true.
':=>'(p954185, pipeline([rebalancing, features, mitigation], nn)) :- true.
':=>'(p213843, pipeline([rebalancing, features, mitigation], nn)) :- true.
':=>'(p750397, pipeline([rebalancing, features, mitigation], rf)) :- true.
':=>'(p760774, pipeline([rebalancing, mitigation, features], knn)) :- true.
':=>'(p882423, pipeline([rebalancing, mitigation, features], nn)) :- true.
':=>'(p602804, pipeline([normalization, features, mitigation, rebalancing], knn)) :- true.
':=>'(p736624, pipeline([normalization, features, mitigation, rebalancing], knn)) :- true.
':=>'(p202921, pipeline([normalization, features, mitigation, rebalancing], nn)) :- true.
':=>'(p362285, pipeline([normalization, features, mitigation, rebalancing], nn)) :- true.
':=>'(p53670, pipeline([normalization, features, mitigation, rebalancing], rf)) :- true.
':=>'(p748358, pipeline([normalization, features, mitigation, rebalancing], rf)) :- true.
':=>'(p661064, pipeline([normalization, features, rebalancing, mitigation], knn)) :- true.
':=>'(p749805, pipeline([normalization, features, rebalancing, mitigation], knn)) :- true.
':=>'(p120413, pipeline([normalization, features, rebalancing, mitigation], nn)) :- true.
':=>'(p60184, pipeline([normalization, features, rebalancing, mitigation], nn)) :- true.
':=>'(p748208, pipeline([normalization, features, rebalancing, mitigation], rf)) :- true.
':=>'(p412699, pipeline([normalization, features, rebalancing, mitigation], rf)) :- true.
':=>'(p785743, pipeline([normalization, mitigation, features, rebalancing], knn)) :- true.
':=>'(p103176, pipeline([normalization, mitigation, features, rebalancing], nn)) :- true.
':=>'(p870102, pipeline([normalization, mitigation, features, rebalancing], rf)) :- true.
':=>'(p488975, pipeline([normalization, mitigation, rebalancing, features], knn)) :- true.
':=>'(p793134, pipeline([normalization, mitigation, rebalancing, features], nn)) :- true.
':=>'(p601099, pipeline([normalization, mitigation, rebalancing, features], rf)) :- true.
':=>'(p465685, pipeline([normalization, rebalancing, features, mitigation], knn)) :- true.
':=>'(p740121, pipeline([normalization, rebalancing, features, mitigation], knn)) :- true.
':=>'(p880372, pipeline([normalization, rebalancing, features, mitigation], nn)) :- true.
':=>'(p456623, pipeline([normalization, rebalancing, features, mitigation], nn)) :- true.
':=>'(p685347, pipeline([normalization, rebalancing, features, mitigation], rf)) :- true.
':=>'(p245835, pipeline([normalization, rebalancing, features, mitigation], rf)) :- true.
':=>'(p247003, pipeline([normalization, rebalancing, mitigation, features], knn)) :- true.
':=>'(p375414, pipeline([normalization, rebalancing, mitigation, features], nn)) :- true.
':=>'(p154481, pipeline([normalization, rebalancing, mitigation, features], rf)) :- true.
':=>'(p380848, pipeline([features, normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p120278, pipeline([features, normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p269519, pipeline([features, normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p47321, pipeline([features, normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p664846, pipeline([features, normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p890708, pipeline([features, normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p541686, pipeline([features, normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p209905, pipeline([features, normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p939217, pipeline([features, normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p830214, pipeline([features, normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p770614, pipeline([features, normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p722201, pipeline([features, normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p313396, pipeline([features, mitigation, normalization, rebalancing], knn)) :- true.
':=>'(p798731, pipeline([features, mitigation, normalization, rebalancing], nn)) :- true.
':=>'(p726022, pipeline([features, mitigation, normalization, rebalancing], rf)) :- true.
':=>'(p488187, pipeline([features, mitigation, rebalancing, normalization], knn)) :- true.
':=>'(p673428, pipeline([features, mitigation, rebalancing, normalization], nn)) :- true.
':=>'(p116866, pipeline([features, mitigation, rebalancing, normalization], rf)) :- true.
':=>'(p711242, pipeline([features, rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p324095, pipeline([features, rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p966224, pipeline([features, rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p350304, pipeline([features, rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p793130, pipeline([features, rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p384110, pipeline([features, rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p831070, pipeline([features, rebalancing, mitigation, normalization], knn)) :- true.
':=>'(p767203, pipeline([features, rebalancing, mitigation, normalization], nn)) :- true.
':=>'(p498522, pipeline([features, rebalancing, mitigation, normalization], rf)) :- true.
':=>'(p806409, pipeline([rebalancing, normalization, features, mitigation], knn)) :- true.
':=>'(p390518, pipeline([rebalancing, normalization, features, mitigation], knn)) :- true.
':=>'(p376132, pipeline([rebalancing, normalization, features, mitigation], nn)) :- true.
':=>'(p11279, pipeline([rebalancing, normalization, features, mitigation], nn)) :- true.
':=>'(p658701, pipeline([rebalancing, normalization, features, mitigation], rf)) :- true.
':=>'(p965433, pipeline([rebalancing, normalization, features, mitigation], rf)) :- true.
':=>'(p594673, pipeline([rebalancing, normalization, mitigation, features], knn)) :- true.
':=>'(p401849, pipeline([rebalancing, normalization, mitigation, features], nn)) :- true.
':=>'(p872041, pipeline([rebalancing, normalization, mitigation, features], rf)) :- true.
':=>'(p635601, pipeline([rebalancing, features, normalization, mitigation], knn)) :- true.
':=>'(p399292, pipeline([rebalancing, features, normalization, mitigation], knn)) :- true.
':=>'(p600502, pipeline([rebalancing, features, normalization, mitigation], nn)) :- true.
':=>'(p847454, pipeline([rebalancing, features, normalization, mitigation], nn)) :- true.
':=>'(p156874, pipeline([rebalancing, features, normalization, mitigation], rf)) :- true.
':=>'(p601126, pipeline([rebalancing, features, normalization, mitigation], rf)) :- true.
':=>'(p783834, pipeline([rebalancing, features, mitigation, normalization], knn)) :- true.
':=>'(p345997, pipeline([rebalancing, features, mitigation, normalization], nn)) :- true.
':=>'(p596975, pipeline([rebalancing, features, mitigation, normalization], rf)) :- true.

Checking Config
Exporting Config
Saving Graph
Exporting AutoML input
Exporting Space
Exporting Constraints
Input created for iteration Config(iteration=4, dataset=adult, metric=balanced_accuracy, fairnessMetric=demographic_parity_ratio, sensitiveFeatures=[sex, race], mode=max, batchSize=999999, timeBudget=900, seed=42)
Here is the standard output/error of the command:

733c14e2a46534b684b52e409831c0897431ec2b266f06457c37ba3fc0521bbc
Here is the standard output/error of the command:

Here is the standard output/error of the command:

WARNING:root:No module named 'rpy2': FairAdapt will be unavailable. To install, run:
pip install 'aif360[FairAdapt]'
INFO:flaml.tune.searcher.blendsearch:No low-cost partial config given to the search algorithm. For cost-frugal search, consider providing low-cost values for cost-related hps via 'low_cost_partial_config'. More info can be found at https://microsoft.github.io/FLAML/docs/FAQ#about-low_cost_partial_config-in-tune
Trying to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Added successfully: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Trying to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: normalization == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
AutoML: starting optimization.
The result for {'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 1, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 2, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 3}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 1, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 2, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 3}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')} was NaN

81
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 1, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 2, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 3}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5114924791476604), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.86), 'Asian-Pac-Islander_Male': np.float64(0.92), 'Black_Female': np.float64(0.81), 'Black_Male': np.float64(0.6), 'White_Female': np.float64(0.89), 'White_Male': np.float64(0.84)}, 'status': 'fail', 'total_time': 21.114365339279175, 'fit_time': np.float64(2.7853872776031494), 'score_time': np.float64(0.02342362403869629), 'absolute_time': 1746716377.1267936, 'flatten_demographic_parity_ratio': '0.56_0.69_0.6_0.54_nan', 'flatten_balanced_accuracy': '0.52_0.51_0.52_0.51_0.5'}
The result for {'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

82
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5039002730101925), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.4), 'Asian-Pac-Islander_Male': np.float64(0.5), 'Black_Female': np.float64(0.25), 'Black_Male': np.float64(0.16), 'White_Female': np.float64(0.38), 'White_Male': np.float64(0.74)}, 'status': 'fail', 'total_time': 22.394403219223022, 'fit_time': np.float64(4.369463300704956), 'score_time': np.float64(0.02955350875854492), 'absolute_time': 1746716399.6469488, 'flatten_demographic_parity_ratio': 'nan_0.33_nan_0.0_nan', 'flatten_balanced_accuracy': '0.5_0.52_0.5_0.5_0.5'}
83
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 6, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'demographic_parity_ratio': np.float64(0.7613227781332547), 'balanced_accuracy': np.float64(0.507811697059925), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.92), 'Asian-Pac-Islander_Male': np.float64(0.94), 'Black_Female': np.float64(0.93), 'Black_Male': np.float64(0.76), 'White_Female': np.float64(0.97), 'White_Male': np.float64(0.93)}, 'status': 'success', 'total_time': 28.783276319503784, 'fit_time': np.float64(5.619990110397339), 'score_time': np.float64(0.04264516830444336), 'absolute_time': 1746716428.5660412, 'flatten_demographic_parity_ratio': '0.76_0.74_0.77_0.8_0.73', 'flatten_balanced_accuracy': '0.51_0.51_0.51_0.5_0.51'}
The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

84
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.4993237938402979), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.45), 'Asian-Pac-Islander_Male': np.float64(0.49), 'Black_Female': np.float64(0.9), 'Black_Male': np.float64(0.67), 'White_Female': np.float64(0.49), 'White_Male': np.float64(0.54)}, 'status': 'fail', 'total_time': 38.32741045951843, 'fit_time': np.float64(3.260151815414429), 'score_time': np.float64(2.178808164596558), 'absolute_time': 1746716467.033291, 'flatten_demographic_parity_ratio': 'nan_0.0_nan_0.35_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
85
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 5, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.5797185303783967), 'balanced_accuracy': np.float64(0.537973305144329), 'by_group': {'Asian-Pac-Islander_Female': np.float64(1.0), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.79), 'Black_Male': np.float64(0.98), 'White_Female': np.float64(0.6), 'White_Male': np.float64(0.58)}, 'status': 'success', 'total_time': 4.97827935218811, 'fit_time': np.float64(0.255447244644165), 'score_time': np.float64(0.3431066036224365), 'absolute_time': 1746716472.1570191, 'flatten_demographic_parity_ratio': '0.59_0.57_0.59_0.59_0.57', 'flatten_balanced_accuracy': '0.54_0.55_0.53_0.54_0.53'}
86
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 4, 'max_leaf_nodes': 3, 'min_samples_split': 5, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.5130493044048224), 'balanced_accuracy': np.float64(0.5116432512833811), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.95), 'Asian-Pac-Islander_Male': np.float64(0.87), 'Black_Female': np.float64(0.68), 'Black_Male': np.float64(0.51), 'White_Female': np.float64(0.72), 'White_Male': np.float64(0.69)}, 'status': 'success', 'total_time': 23.799469709396362, 'fit_time': np.float64(4.661790227890014), 'score_time': np.float64(0.022756195068359374), 'absolute_time': 1746716496.1115556, 'flatten_demographic_parity_ratio': '0.55_0.33_0.8_0.64_0.25', 'flatten_balanced_accuracy': '0.53_0.5_0.51_0.51_0.5'}
The result for {'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 6, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 6, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

87
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 6, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5), 'by_group': {'Asian-Pac-Islander_Female': -inf, 'Asian-Pac-Islander_Male': -inf, 'Black_Female': -inf, 'Black_Male': -inf, 'White_Female': -inf, 'White_Male': -inf}, 'status': 'fail', 'total_time': 18.968069791793823, 'fit_time': np.float64(3.687226390838623), 'score_time': np.float64(0.028872156143188478), 'absolute_time': 1746716515.227083, 'flatten_demographic_parity_ratio': 'nan_nan_nan_nan_nan', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
88
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 6, 'min_samples_split': 3, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('SelectKBest'), 'k': 2}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.044642071654444074), 'balanced_accuracy': np.float64(0.6875549200353357), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.05), 'Asian-Pac-Islander_Male': np.float64(0.17), 'Black_Female': np.float64(0.07), 'Black_Male': np.float64(0.14), 'White_Female': np.float64(0.1), 'White_Male': np.float64(1.0)}, 'status': 'success', 'total_time': 1.8659119606018066, 'fit_time': np.float64(0.2797717571258545), 'score_time': np.float64(0.01790895462036133), 'absolute_time': 1746716517.2506757, 'flatten_demographic_parity_ratio': '0.06_0.08_0.04_0.04_0.0', 'flatten_balanced_accuracy': '0.69_0.69_0.7_0.68_0.68'}
89
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 16, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.27716588204663967), 'balanced_accuracy': np.float64(0.7336895667782112), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.54), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.3), 'Black_Male': np.float64(0.4), 'White_Female': np.float64(0.28), 'White_Male': np.float64(0.42)}, 'status': 'success', 'total_time': 36.81050705909729, 'fit_time': np.float64(2.8824330806732177), 'score_time': np.float64(2.208366870880127), 'absolute_time': 1746716555.862676, 'flatten_demographic_parity_ratio': '0.27_0.27_0.27_0.31_0.27', 'flatten_balanced_accuracy': '0.72_0.74_0.74_0.74_0.73'}
The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 3, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 3, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')} was NaN

90
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 3, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.500114382737865), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.62), 'Asian-Pac-Islander_Male': np.float64(0.72), 'Black_Female': np.float64(0.88), 'Black_Male': np.float64(0.76), 'White_Female': np.float64(0.85), 'White_Male': np.float64(0.82)}, 'status': 'fail', 'total_time': 131.79236268997192, 'fit_time': np.float64(7.896905708312988), 'score_time': np.float64(2.864402008056641), 'absolute_time': 1746716687.809734, 'flatten_demographic_parity_ratio': 'nan_0.54_nan_0.25_nan', 'flatten_balanced_accuracy': '0.5_0.51_0.5_0.49_0.5'}
The result for {'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

91
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.49998499624906223), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.0), 'Asian-Pac-Islander_Male': np.float64(0.0), 'Black_Female': np.float64(0.0), 'Black_Male': np.float64(0.0), 'White_Female': np.float64(1.0), 'White_Male': np.float64(0.0)}, 'status': 'fail', 'total_time': 17.58171319961548, 'fit_time': np.float64(3.4089510440826416), 'score_time': np.float64(0.030973434448242188), 'absolute_time': 1746716705.5591362, 'flatten_demographic_parity_ratio': 'nan_nan_0.0_nan_nan', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
The result for {'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 2, 'n_estimators': np.int64(100)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(2.0)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 2, 'n_estimators': np.int64(100)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(2.0)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

92
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 2, 'n_estimators': np.int64(100)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(2.0)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5), 'by_group': {'Asian-Pac-Islander_Female': -inf, 'Asian-Pac-Islander_Male': -inf, 'Black_Female': -inf, 'Black_Male': -inf, 'White_Female': -inf, 'White_Male': -inf}, 'status': 'fail', 'total_time': 18.87282133102417, 'fit_time': np.float64(3.630768871307373), 'score_time': np.float64(0.038985157012939455), 'absolute_time': 1746716724.584691, 'flatten_demographic_parity_ratio': 'nan_nan_nan_nan_nan', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
93
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.19585050042212582), 'balanced_accuracy': np.float64(0.6116862735009251), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.86), 'Asian-Pac-Islander_Male': np.float64(0.89), 'Black_Female': np.float64(0.84), 'Black_Male': np.float64(1.0), 'White_Female': np.float64(0.2), 'White_Male': np.float64(0.83)}, 'status': 'success', 'total_time': 1.358630895614624, 'fit_time': np.float64(0.19886560440063478), 'score_time': np.float64(0.010091590881347656), 'absolute_time': 1746716726.0969565, 'flatten_demographic_parity_ratio': '0.19_0.21_0.18_0.19_0.2', 'flatten_balanced_accuracy': '0.61_0.62_0.61_0.62_0.6'}
94
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 20, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 2}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.10250715687686444), 'balanced_accuracy': np.float64(0.6132590313019596), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.18), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.12), 'Black_Male': np.float64(0.52), 'White_Female': np.float64(0.23), 'White_Male': np.float64(0.77)}, 'status': 'success', 'total_time': 3.334298849105835, 'fit_time': np.float64(0.03545889854431152), 'score_time': np.float64(0.28567094802856446), 'absolute_time': 1746716729.586691, 'flatten_demographic_parity_ratio': '0.09_0.15_0.11_0.07_0.08', 'flatten_balanced_accuracy': '0.61_0.61_0.62_0.62_0.61'}
95
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(50), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.8254713310398912), 'balanced_accuracy': np.float64(0.5100122765940369), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.92), 'Asian-Pac-Islander_Male': np.float64(0.91), 'Black_Female': np.float64(0.95), 'Black_Male': np.float64(0.84), 'White_Female': np.float64(0.92), 'White_Male': np.float64(0.91)}, 'status': 'success', 'total_time': 32.70448446273804, 'fit_time': np.float64(6.268089485168457), 'score_time': np.float64(0.09557228088378907), 'absolute_time': 1746716762.4467993, 'flatten_demographic_parity_ratio': '0.74_0.83_0.75_0.81_1.0', 'flatten_balanced_accuracy': '0.53_0.51_0.51_0.51_0.5'}
The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 18, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 18, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')} was NaN

96
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 18, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5049645467293874), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.08), 'Asian-Pac-Islander_Male': np.float64(0.25), 'Black_Female': np.float64(0.04), 'Black_Male': np.float64(0.06), 'White_Female': np.float64(0.29), 'White_Male': np.float64(0.56)}, 'status': 'fail', 'total_time': 44.753220081329346, 'fit_time': np.float64(4.0699340343475345), 'score_time': np.float64(2.408488082885742), 'absolute_time': 1746716807.3622613, 'flatten_demographic_parity_ratio': '0.0_0.0_0.15_0.0_nan', 'flatten_balanced_accuracy': '0.5_0.5_0.52_0.5_0.5'}
97
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.4205139717755147), 'balanced_accuracy': np.float64(0.5107107309807256), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.93), 'Asian-Pac-Islander_Male': np.float64(0.86), 'Black_Female': np.float64(0.6), 'Black_Male': np.float64(0.42), 'White_Female': np.float64(0.67), 'White_Male': np.float64(0.63)}, 'status': 'success', 'total_time': 29.521453857421875, 'fit_time': np.float64(5.345323467254639), 'score_time': np.float64(0.024414777755737305), 'absolute_time': 1746716838.9139528, 'flatten_demographic_parity_ratio': '0.49_0.25_0.64_0.46_0.26', 'flatten_balanced_accuracy': '0.53_0.5_0.52_0.51_0.5'}
98
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': 6, 'min_samples_split': 6, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.0), 'balanced_accuracy': np.float64(0.5436383435522165), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.24), 'Asian-Pac-Islander_Male': np.float64(0.87), 'Black_Female': np.float64(0.17), 'Black_Male': np.float64(0.58), 'White_Female': np.float64(0.0), 'White_Male': np.float64(0.69)}, 'status': 'success', 'total_time': 1.838258981704712, 'fit_time': np.float64(0.2624972343444824), 'score_time': np.float64(0.02223935127258301), 'absolute_time': 1746716840.9327204, 'flatten_demographic_parity_ratio': '0.0_0.0_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.54_0.54_0.55_0.55_0.54'}
99
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 4, 'max_leaf_nodes': 2, 'min_samples_split': 6, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.009088465640842588), 'balanced_accuracy': np.float64(0.6881068051785386), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.98), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.82), 'Black_Male': np.float64(0.99), 'White_Female': np.float64(0.01), 'White_Male': np.float64(0.61)}, 'status': 'success', 'total_time': 6.221567869186401, 'fit_time': np.float64(1.1570633888244628), 'score_time': np.float64(0.01554555892944336), 'absolute_time': 1746716847.336895, 'flatten_demographic_parity_ratio': '0.01_0.01_0.01_0.01_0.01', 'flatten_balanced_accuracy': '0.67_0.7_0.7_0.67_0.7'}
100
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 4, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.5901190286834153), 'balanced_accuracy': np.float64(0.5133584909720351), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.95), 'Asian-Pac-Islander_Male': np.float64(0.98), 'Black_Female': np.float64(0.83), 'Black_Male': np.float64(0.59), 'White_Female': np.float64(0.86), 'White_Male': np.float64(0.82)}, 'status': 'success', 'total_time': 93.45228433609009, 'fit_time': np.float64(18.570089864730836), 'score_time': np.float64(0.03308572769165039), 'absolute_time': 1746716940.9793115, 'flatten_demographic_parity_ratio': '0.47_0.54_0.59_0.67_0.68', 'flatten_balanced_accuracy': '0.52_0.51_0.52_0.51_0.51'}
The result for {'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_split': 3, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_split': 3, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

101
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_split': 3, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5001350337827505), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.0), 'Asian-Pac-Islander_Male': np.float64(0.0), 'Black_Female': np.float64(0.0), 'Black_Male': np.float64(0.0), 'White_Female': np.float64(0.0), 'White_Male': np.float64(1.0)}, 'status': 'fail', 'total_time': 14.280649423599243, 'fit_time': np.float64(2.7381052017211913), 'score_time': np.float64(0.03979048728942871), 'absolute_time': 1746716955.4241393, 'flatten_demographic_parity_ratio': 'nan_nan_nan_0.0_0.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
102
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.7039687673767323), 'balanced_accuracy': np.float64(0.512170529043229), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.79), 'Asian-Pac-Islander_Male': np.float64(0.86), 'Black_Female': np.float64(0.97), 'Black_Male': np.float64(0.83), 'White_Female': np.float64(0.94), 'White_Male': np.float64(0.92)}, 'status': 'success', 'total_time': 37.35007333755493, 'fit_time': np.float64(7.343784952163697), 'score_time': np.float64(0.04264683723449707), 'absolute_time': 1746716992.9365604, 'flatten_demographic_parity_ratio': '0.73_0.64_0.66_0.71_0.77', 'flatten_balanced_accuracy': '0.53_0.5_0.51_0.5_0.51'}
103
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.7182565666738833), 'balanced_accuracy': np.float64(0.5089507569455212), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.81), 'Asian-Pac-Islander_Male': np.float64(0.8), 'Black_Female': np.float64(0.99), 'Black_Male': np.float64(0.86), 'White_Female': np.float64(0.93), 'White_Male': np.float64(0.92)}, 'status': 'success', 'total_time': 14.465616941452026, 'fit_time': np.float64(2.770847797393799), 'score_time': np.float64(0.0343022346496582), 'absolute_time': 1746717007.5697, 'flatten_demographic_parity_ratio': '0.74_0.78_0.59_0.76_0.71', 'flatten_balanced_accuracy': '0.53_0.51_0.49_0.51_0.5'}
The result for {'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 3, 'n_estimators': np.int64(100)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.5)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_features_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 3, 'n_estimators': np.int64(100)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.5)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_features_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

104
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 3, 'n_estimators': np.int64(100)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.5)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_features_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5), 'by_group': {'Asian-Pac-Islander_Female': -inf, 'Asian-Pac-Islander_Male': -inf, 'Black_Female': -inf, 'Black_Male': -inf, 'White_Female': -inf, 'White_Male': -inf}, 'status': 'fail', 'total_time': 24.747236013412476, 'fit_time': np.float64(4.818083715438843), 'score_time': np.float64(0.03887286186218262), 'absolute_time': 1746717032.4846425, 'flatten_demographic_parity_ratio': 'nan_nan_nan_nan_nan', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
The result for {'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

105
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5), 'by_group': {'Asian-Pac-Islander_Female': -inf, 'Asian-Pac-Islander_Male': -inf, 'Black_Female': -inf, 'Black_Male': -inf, 'White_Female': -inf, 'White_Male': -inf}, 'status': 'fail', 'total_time': 2.4151968955993652, 'fit_time': np.float64(0.40351290702819825), 'score_time': np.float64(0.01267833709716797), 'absolute_time': 1746717036.9056017, 'flatten_demographic_parity_ratio': 'nan_nan_nan_nan_nan', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 3, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 3, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')} was NaN

106
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 3, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5000149609974456), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.25), 'Asian-Pac-Islander_Male': np.float64(0.0), 'Black_Female': np.float64(0.0), 'Black_Male': np.float64(0.25), 'White_Female': np.float64(0.3), 'White_Male': np.float64(0.48)}, 'status': 'fail', 'total_time': 80.14995646476746, 'fit_time': np.float64(4.604533386230469), 'score_time': np.float64(0.9678844928741455), 'absolute_time': 1746717117.2248163, 'flatten_demographic_parity_ratio': '0.0_0.0_nan_0.0_0.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
107
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 6, 'min_samples_split': 6, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.39457811360326467), 'balanced_accuracy': np.float64(0.7325801751150985), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.71), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.44), 'Black_Male': np.float64(0.62), 'White_Female': np.float64(0.4), 'White_Male': np.float64(0.93)}, 'status': 'success', 'total_time': 22.940184354782104, 'fit_time': np.float64(4.48062801361084), 'score_time': np.float64(0.02752079963684082), 'absolute_time': 1746717140.337016, 'flatten_demographic_parity_ratio': '0.42_0.32_0.39_0.44_0.41', 'flatten_balanced_accuracy': '0.73_0.73_0.73_0.74_0.73'}
108
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.05798627572811342), 'balanced_accuracy': np.float64(0.7625296695322624), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.25), 'Asian-Pac-Islander_Male': np.float64(0.98), 'Black_Female': np.float64(0.11), 'Black_Male': np.float64(0.7), 'White_Female': np.float64(0.06), 'White_Male': np.float64(0.99)}, 'status': 'success', 'total_time': 3.1304547786712646, 'fit_time': np.float64(0.5504332542419433), 'score_time': np.float64(0.010283708572387695), 'absolute_time': 1746717143.6408777, 'flatten_demographic_parity_ratio': '0.04_0.07_0.06_0.07_0.05', 'flatten_balanced_accuracy': '0.76_0.76_0.76_0.77_0.76'}
109
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 16, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.2679810282433602), 'balanced_accuracy': np.float64(0.704054789068578), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.89), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.53), 'Black_Male': np.float64(0.7), 'White_Female': np.float64(0.27), 'White_Male': np.float64(0.38)}, 'status': 'success', 'total_time': 24.590343236923218, 'fit_time': np.float64(2.0810925483703615), 'score_time': np.float64(1.3898894309997558), 'absolute_time': 1746717168.405184, 'flatten_demographic_parity_ratio': '0.26_0.29_0.26_0.26_0.27', 'flatten_balanced_accuracy': '0.7_0.71_0.71_0.71_0.7'}
110
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': 4, 'min_samples_split': 2, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification')}
{'demographic_parity_ratio': np.float64(0.49722339947346683), 'balanced_accuracy': np.float64(0.508360186479677), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.91), 'Asian-Pac-Islander_Male': np.float64(0.89), 'Black_Female': np.float64(0.71), 'Black_Male': np.float64(0.57), 'White_Female': np.float64(0.73), 'White_Male': np.float64(0.7)}, 'status': 'success', 'total_time': 58.85613560676575, 'fit_time': np.float64(11.639093446731568), 'score_time': np.float64(0.040484619140625), 'absolute_time': 1746717227.4333696, 'flatten_demographic_parity_ratio': '0.69_0.52_0.36_0.62_0.3', 'flatten_balanced_accuracy': '0.52_0.51_0.51_0.5_0.5'}
111
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_features_mitigation_classification')}
{'demographic_parity_ratio': np.float64(8.413967185527977e-05), 'balanced_accuracy': np.float64(0.7206714510326943), 'by_group': {'Asian-Pac-Islander_Female': np.float64(1.0), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.27), 'Black_Male': np.float64(0.98), 'White_Female': np.float64(0.0), 'White_Male': np.float64(0.59)}, 'status': 'success', 'total_time': 2.039330005645752, 'fit_time': np.float64(0.3096316814422607), 'score_time': np.float64(0.02290830612182617), 'absolute_time': 1746717229.6462274, 'flatten_demographic_parity_ratio': '0.0_0.0_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.73_0.71_0.72_0.72_0.72'}
Timeout
112
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(50), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'Asian-Pac-Islander_Female': -inf, 'Asian-Pac-Islander_Male': -inf, 'Black_Female': -inf, 'Black_Male': -inf, 'White_Female': -inf, 'White_Male': -inf}, 'status': 'fail', 'total_time': 900.1704437732697, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746718129.9927187}
AutoML: optimization done.
AutoML: miner done.
AutoML: export done.
Here is the standard output/error of the command:

Here is the standard output/error of the command:

Here is the standard output/error of the command:

hamlet_895413091
AutoML execution ended
