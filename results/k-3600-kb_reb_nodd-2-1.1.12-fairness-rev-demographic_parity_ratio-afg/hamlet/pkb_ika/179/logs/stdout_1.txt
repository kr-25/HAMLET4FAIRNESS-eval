Sensitive groups ready!
Theory ready!
Theory:
step(normalization) :- true.
step(features) :- true.
step(mitigation) :- true.
step(rebalancing) :- true.
step(classification) :- true.
operator(normalization, power_transformer) :- true.
operator(normalization, robust_scaler) :- true.
operator(normalization, standard) :- true.
operator(normalization, minmax) :- true.
operator(features, select_k_best) :- true.
operator(features, pca) :- true.
operator(mitigation, corr_remover) :- true.
operator(mitigation, lfr) :- true.
operator(rebalancing, near_miss) :- true.
operator(rebalancing, smote) :- true.
operator(classification, knn) :- true.
operator(classification, nn) :- true.
operator(classification, rf) :- true.
hyperparameter(robust_scaler, with_centering, choice) :- true.
hyperparameter(robust_scaler, with_scaling, choice) :- true.
hyperparameter(standard, with_mean, choice) :- true.
hyperparameter(standard, with_std, choice) :- true.
hyperparameter(select_k_best, k, randint) :- true.
hyperparameter(pca, n_components, randint) :- true.
hyperparameter(corr_remover, alpha, choice) :- true.
hyperparameter(lfr, n_prototypes, choice) :- true.
hyperparameter(lfr, reconstruct_weight, choice) :- true.
hyperparameter(lfr, fairness_weight, choice) :- true.
hyperparameter(near_miss, n_neighbors, randint) :- true.
hyperparameter(smote, k_neighbors, randint) :- true.
hyperparameter(knn, n_neighbors, randint) :- true.
hyperparameter(knn, weights, choice) :- true.
hyperparameter(knn, metric, choice) :- true.
hyperparameter(nn, n_hidden_layers, choice) :- true.
hyperparameter(nn, n_neurons, choice) :- true.
hyperparameter(nn, activation, choice) :- true.
hyperparameter(nn, solver, choice) :- true.
hyperparameter(nn, alpha, choice) :- true.
hyperparameter(nn, learning_rate, choice) :- true.
hyperparameter(rf, n_estimators, choice) :- true.
hyperparameter(rf, max_depth, randint) :- true.
hyperparameter(rf, max_features, randint) :- true.
hyperparameter(rf, min_samples_split, randint) :- true.
hyperparameter(rf, max_leaf_nodes, randint) :- true.
hyperparameter(rf, bootstrap, choice) :- true.
hyperparameter(rf, criterion, choice) :- true.
domain(robust_scaler, with_centering, [true, false]) :- true.
domain(robust_scaler, with_scaling, [true, false]) :- true.
domain(standard, with_mean, [true, false]) :- true.
domain(standard, with_std, [true, false]) :- true.
domain(select_k_best, k, [1, 10]) :- true.
domain(pca, n_components, [1, 8]) :- true.
domain(corr_remover, alpha, [0.25, 0.5, 0.75, 1.0]) :- true.
domain(lfr, n_prototypes, [10, 50, 100, 200]) :- true.
domain(lfr, reconstruct_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(lfr, fairness_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(near_miss, n_neighbors, [1, 4]) :- true.
domain(smote, k_neighbors, [5, 8]) :- true.
domain(knn, n_neighbors, [3, 20]) :- true.
domain(knn, weights, [uniform, distance]) :- true.
domain(knn, metric, [minkowski, euclidean, manhattan]) :- true.
domain(nn, n_hidden_layers, [1, 5, 10, 20]) :- true.
domain(nn, n_neurons, [5, 10, 25, 50]) :- true.
domain(nn, activation, [logistic, tanh, relu]) :- true.
domain(nn, solver, [lbfgs, sgd, adam]) :- true.
domain(nn, alpha, [0.0001, 0.001, 0.01, 0.00001]) :- true.
domain(nn, learning_rate, [constant, invscaling, adaptive]) :- true.
domain(rf, n_estimators, [10, 25, 50, 75, 100]) :- true.
domain(rf, max_depth, [1, 5]) :- true.
domain(rf, max_features, [1, 4]) :- true.
domain(rf, min_samples_split, [2, 6]) :- true.
domain(rf, max_leaf_nodes, [2, 6]) :- true.
domain(rf, bootstrap, [true, false]) :- true.
domain(rf, criterion, [gini, entropy]) :- true.
':=>'(c1, mandatory([mitigation], classification)) :- true.
':=>'(c3, mandatory_order([mitigation, features], classification)) :- true.
':=>'(c4, mandatory_order([mitigation, normalization], classification)) :- true.
':=>'(c5, mandatory([normalization], knn)) :- true.
':=>'(c6, mandatory([normalization], nn)) :- true.
dataset(adult) :- true.
metric(balanced_accuracy) :- true.
fairness_metric(demographic_parity_ratio) :- true.
sensitive_feature(sex, ['Male', 'Female']) :- true.
sensitive_feature(race, ['Amer-Indian-Eskimo', 'Asian-Pac-Islander', 'Black', 'Other', 'White']) :- true.
':=>'(mc0, unbalanced_dataset) :- true.
pipeline([Step_1_0], ZZ_0) :- (step(Step_1_0), '\\='(Step_1_0, classification), operator(classification, ZZ_0)).
pipeline([Step_1_1, Step_2_0], ZZ_1) :- (step(Step_1_1), step(Step_2_0), '\\='(Step_1_1, classification), '\\='(Step_2_0, classification), '\\='(Step_1_1, Step_2_0), operator(classification, ZZ_1)).
pipeline([Step_1_2, Step_2_1, Step_3_0], ZZ_2) :- (step(Step_1_2), step(Step_2_1), step(Step_3_0), '\\='(Step_1_2, classification), '\\='(Step_2_1, classification), '\\='(Step_3_0, classification), '\\='(Step_1_2, Step_2_1), '\\='(Step_1_2, Step_3_0), '\\='(Step_2_1, Step_3_0), operator(classification, ZZ_2)).
pipeline([Step_1_3, Step_2_2, Step_3_1, Step_4_0], ZZ_3) :- (step(Step_1_3), step(Step_2_2), step(Step_3_1), step(Step_4_0), '\\='(Step_1_3, classification), '\\='(Step_2_2, classification), '\\='(Step_3_1, classification), '\\='(Step_4_0, classification), '\\='(Step_1_3, Step_2_2), '\\='(Step_1_3, Step_3_1), '\\='(Step_1_3, Step_4_0), '\\='(Step_2_2, Step_3_1), '\\='(Step_2_2, Step_4_0), '\\='(Step_3_1, Step_4_0), operator(classification, ZZ_3)).
':=>'(p862596, sensitive_group(['Male'])) :- true.
':=>'(p515875, sensitive_group(['Female'])) :- true.
':=>'(p375914, sensitive_group(['Amer-Indian-Eskimo'])) :- true.
':=>'(p645265, sensitive_group(['Asian-Pac-Islander'])) :- true.
':=>'(p738155, sensitive_group(['Black'])) :- true.
':=>'(p301582, sensitive_group(['Other'])) :- true.
':=>'(p774961, sensitive_group(['White'])) :- true.
':=>'(p703899, sensitive_group(['Male', 'Amer-Indian-Eskimo'])) :- true.
':=>'(p771031, sensitive_group(['Male', 'Asian-Pac-Islander'])) :- true.
':=>'(p924487, sensitive_group(['Male', 'Black'])) :- true.
':=>'(p563531, sensitive_group(['Male', 'Other'])) :- true.
':=>'(p176846, sensitive_group(['Male', 'White'])) :- true.
':=>'(p427567, sensitive_group(['Female', 'Amer-Indian-Eskimo'])) :- true.
':=>'(p192704, sensitive_group(['Female', 'Asian-Pac-Islander'])) :- true.
':=>'(p767393, sensitive_group(['Female', 'Black'])) :- true.
':=>'(p491307, sensitive_group(['Female', 'Other'])) :- true.
':=>'(p129317, sensitive_group(['Female', 'White'])) :- true.
':=>'(p227616, pipeline([], knn)) :- true.
':=>'(p713564, pipeline([], knn)) :- true.
':=>'(p631458, pipeline([], nn)) :- true.
':=>'(p940777, pipeline([], nn)) :- true.
':=>'(p778944, pipeline([], rf)) :- true.
':=>'(p365001, pipeline([normalization], knn)) :- true.
':=>'(p506331, pipeline([normalization], nn)) :- true.
':=>'(p679029, pipeline([normalization], rf)) :- true.
':=>'(p321932, pipeline([features], knn)) :- true.
':=>'(p892926, pipeline([features], knn)) :- true.
':=>'(p798756, pipeline([features], nn)) :- true.
':=>'(p936135, pipeline([features], nn)) :- true.
':=>'(p693115, pipeline([features], rf)) :- true.
':=>'(p604312, pipeline([mitigation], knn)) :- true.
':=>'(p783680, pipeline([mitigation], nn)) :- true.
':=>'(p313040, pipeline([rebalancing], knn)) :- true.
':=>'(p916811, pipeline([rebalancing], knn)) :- true.
':=>'(p910959, pipeline([rebalancing], nn)) :- true.
':=>'(p881914, pipeline([rebalancing], nn)) :- true.
':=>'(p812147, pipeline([rebalancing], rf)) :- true.
':=>'(p855495, pipeline([normalization, features], knn)) :- true.
':=>'(p19829, pipeline([normalization, features], nn)) :- true.
':=>'(p620417, pipeline([normalization, features], rf)) :- true.
':=>'(p265996, pipeline([normalization, mitigation], knn)) :- true.
':=>'(p987035, pipeline([normalization, mitigation], nn)) :- true.
':=>'(p411148, pipeline([normalization, mitigation], rf)) :- true.
':=>'(p318472, pipeline([normalization, rebalancing], knn)) :- true.
':=>'(p597381, pipeline([normalization, rebalancing], nn)) :- true.
':=>'(p670282, pipeline([normalization, rebalancing], rf)) :- true.
':=>'(p964483, pipeline([features, normalization], knn)) :- true.
':=>'(p369557, pipeline([features, normalization], nn)) :- true.
':=>'(p26326, pipeline([features, normalization], rf)) :- true.
':=>'(p165404, pipeline([features, mitigation], knn)) :- true.
':=>'(p740750, pipeline([features, mitigation], knn)) :- true.
':=>'(p15778, pipeline([features, mitigation], nn)) :- true.
':=>'(p951758, pipeline([features, mitigation], nn)) :- true.
':=>'(p446101, pipeline([features, mitigation], rf)) :- true.
':=>'(p785011, pipeline([features, rebalancing], knn)) :- true.
':=>'(p429354, pipeline([features, rebalancing], knn)) :- true.
':=>'(p687630, pipeline([features, rebalancing], nn)) :- true.
':=>'(p932266, pipeline([features, rebalancing], nn)) :- true.
':=>'(p202325, pipeline([features, rebalancing], rf)) :- true.
':=>'(p536001, pipeline([mitigation, features], knn)) :- true.
':=>'(p329714, pipeline([mitigation, features], nn)) :- true.
':=>'(p37423, pipeline([mitigation, rebalancing], knn)) :- true.
':=>'(p954586, pipeline([mitigation, rebalancing], nn)) :- true.
':=>'(p887135, pipeline([rebalancing, normalization], knn)) :- true.
':=>'(p784346, pipeline([rebalancing, normalization], nn)) :- true.
':=>'(p492095, pipeline([rebalancing, normalization], rf)) :- true.
':=>'(p320477, pipeline([rebalancing, features], knn)) :- true.
':=>'(p553198, pipeline([rebalancing, features], knn)) :- true.
':=>'(p746038, pipeline([rebalancing, features], nn)) :- true.
':=>'(p99618, pipeline([rebalancing, features], nn)) :- true.
':=>'(p319353, pipeline([rebalancing, features], rf)) :- true.
':=>'(p150263, pipeline([rebalancing, mitigation], knn)) :- true.
':=>'(p949637, pipeline([rebalancing, mitigation], nn)) :- true.
':=>'(p675870, pipeline([normalization, features, mitigation], knn)) :- true.
':=>'(p879155, pipeline([normalization, features, mitigation], knn)) :- true.
':=>'(p745798, pipeline([normalization, features, mitigation], nn)) :- true.
':=>'(p109430, pipeline([normalization, features, mitigation], nn)) :- true.
':=>'(p854796, pipeline([normalization, features, mitigation], rf)) :- true.
':=>'(p797472, pipeline([normalization, features, mitigation], rf)) :- true.
':=>'(p667218, pipeline([normalization, features, rebalancing], knn)) :- true.
':=>'(p813113, pipeline([normalization, features, rebalancing], nn)) :- true.
':=>'(p443036, pipeline([normalization, features, rebalancing], rf)) :- true.
':=>'(p253874, pipeline([normalization, mitigation, features], knn)) :- true.
':=>'(p316159, pipeline([normalization, mitigation, features], nn)) :- true.
':=>'(p483563, pipeline([normalization, mitigation, features], rf)) :- true.
':=>'(p313944, pipeline([normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p737094, pipeline([normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p400184, pipeline([normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p837034, pipeline([normalization, rebalancing, features], knn)) :- true.
':=>'(p96489, pipeline([normalization, rebalancing, features], nn)) :- true.
':=>'(p489338, pipeline([normalization, rebalancing, features], rf)) :- true.
':=>'(p468502, pipeline([normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p902640, pipeline([normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p808175, pipeline([normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p388554, pipeline([features, normalization, mitigation], knn)) :- true.
':=>'(p900490, pipeline([features, normalization, mitigation], knn)) :- true.
':=>'(p172229, pipeline([features, normalization, mitigation], nn)) :- true.
':=>'(p801612, pipeline([features, normalization, mitigation], nn)) :- true.
':=>'(p75714, pipeline([features, normalization, mitigation], rf)) :- true.
':=>'(p381032, pipeline([features, normalization, mitigation], rf)) :- true.
':=>'(p696294, pipeline([features, normalization, rebalancing], knn)) :- true.
':=>'(p5476, pipeline([features, normalization, rebalancing], nn)) :- true.
':=>'(p81079, pipeline([features, normalization, rebalancing], rf)) :- true.
':=>'(p194697, pipeline([features, mitigation, normalization], knn)) :- true.
':=>'(p542492, pipeline([features, mitigation, normalization], nn)) :- true.
':=>'(p663197, pipeline([features, mitigation, normalization], rf)) :- true.
':=>'(p825220, pipeline([features, mitigation, rebalancing], knn)) :- true.
':=>'(p866706, pipeline([features, mitigation, rebalancing], knn)) :- true.
':=>'(p960703, pipeline([features, mitigation, rebalancing], nn)) :- true.
':=>'(p899280, pipeline([features, mitigation, rebalancing], nn)) :- true.
':=>'(p309843, pipeline([features, mitigation, rebalancing], rf)) :- true.
':=>'(p447192, pipeline([features, rebalancing, normalization], knn)) :- true.
':=>'(p803418, pipeline([features, rebalancing, normalization], nn)) :- true.
':=>'(p180921, pipeline([features, rebalancing, normalization], rf)) :- true.
':=>'(p717977, pipeline([features, rebalancing, mitigation], knn)) :- true.
':=>'(p32320, pipeline([features, rebalancing, mitigation], knn)) :- true.
':=>'(p454109, pipeline([features, rebalancing, mitigation], nn)) :- true.
':=>'(p473700, pipeline([features, rebalancing, mitigation], nn)) :- true.
':=>'(p869622, pipeline([features, rebalancing, mitigation], rf)) :- true.
':=>'(p37072, pipeline([mitigation, features, rebalancing], knn)) :- true.
':=>'(p798302, pipeline([mitigation, features, rebalancing], nn)) :- true.
':=>'(p100474, pipeline([mitigation, rebalancing, features], knn)) :- true.
':=>'(p730699, pipeline([mitigation, rebalancing, features], nn)) :- true.
':=>'(p4673, pipeline([rebalancing, normalization, features], knn)) :- true.
':=>'(p624026, pipeline([rebalancing, normalization, features], nn)) :- true.
':=>'(p445688, pipeline([rebalancing, normalization, features], rf)) :- true.
':=>'(p752052, pipeline([rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p592392, pipeline([rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p401777, pipeline([rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p414962, pipeline([rebalancing, features, normalization], knn)) :- true.
':=>'(p189522, pipeline([rebalancing, features, normalization], nn)) :- true.
':=>'(p589383, pipeline([rebalancing, features, normalization], rf)) :- true.
':=>'(p566723, pipeline([rebalancing, features, mitigation], knn)) :- true.
':=>'(p450937, pipeline([rebalancing, features, mitigation], knn)) :- true.
':=>'(p173406, pipeline([rebalancing, features, mitigation], nn)) :- true.
':=>'(p556463, pipeline([rebalancing, features, mitigation], nn)) :- true.
':=>'(p915815, pipeline([rebalancing, features, mitigation], rf)) :- true.
':=>'(p84389, pipeline([rebalancing, mitigation, features], knn)) :- true.
':=>'(p697789, pipeline([rebalancing, mitigation, features], nn)) :- true.
':=>'(p280178, pipeline([normalization, features, mitigation, rebalancing], knn)) :- true.
':=>'(p71817, pipeline([normalization, features, mitigation, rebalancing], knn)) :- true.
':=>'(p359936, pipeline([normalization, features, mitigation, rebalancing], nn)) :- true.
':=>'(p794424, pipeline([normalization, features, mitigation, rebalancing], nn)) :- true.
':=>'(p509499, pipeline([normalization, features, mitigation, rebalancing], rf)) :- true.
':=>'(p983456, pipeline([normalization, features, mitigation, rebalancing], rf)) :- true.
':=>'(p957061, pipeline([normalization, features, rebalancing, mitigation], knn)) :- true.
':=>'(p252585, pipeline([normalization, features, rebalancing, mitigation], knn)) :- true.
':=>'(p504612, pipeline([normalization, features, rebalancing, mitigation], nn)) :- true.
':=>'(p520909, pipeline([normalization, features, rebalancing, mitigation], nn)) :- true.
':=>'(p79054, pipeline([normalization, features, rebalancing, mitigation], rf)) :- true.
':=>'(p420474, pipeline([normalization, features, rebalancing, mitigation], rf)) :- true.
':=>'(p920912, pipeline([normalization, mitigation, features, rebalancing], knn)) :- true.
':=>'(p590846, pipeline([normalization, mitigation, features, rebalancing], nn)) :- true.
':=>'(p822157, pipeline([normalization, mitigation, features, rebalancing], rf)) :- true.
':=>'(p460015, pipeline([normalization, mitigation, rebalancing, features], knn)) :- true.
':=>'(p826467, pipeline([normalization, mitigation, rebalancing, features], nn)) :- true.
':=>'(p705108, pipeline([normalization, mitigation, rebalancing, features], rf)) :- true.
':=>'(p459817, pipeline([normalization, rebalancing, features, mitigation], knn)) :- true.
':=>'(p251157, pipeline([normalization, rebalancing, features, mitigation], knn)) :- true.
':=>'(p848412, pipeline([normalization, rebalancing, features, mitigation], nn)) :- true.
':=>'(p351300, pipeline([normalization, rebalancing, features, mitigation], nn)) :- true.
':=>'(p545028, pipeline([normalization, rebalancing, features, mitigation], rf)) :- true.
':=>'(p889125, pipeline([normalization, rebalancing, features, mitigation], rf)) :- true.
':=>'(p181318, pipeline([normalization, rebalancing, mitigation, features], knn)) :- true.
':=>'(p230002, pipeline([normalization, rebalancing, mitigation, features], nn)) :- true.
':=>'(p272766, pipeline([normalization, rebalancing, mitigation, features], rf)) :- true.
':=>'(p766589, pipeline([features, normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p558234, pipeline([features, normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p953305, pipeline([features, normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p355687, pipeline([features, normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p939447, pipeline([features, normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p806383, pipeline([features, normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p466797, pipeline([features, normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p43264, pipeline([features, normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p520154, pipeline([features, normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p260280, pipeline([features, normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p389707, pipeline([features, normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p708095, pipeline([features, normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p434655, pipeline([features, mitigation, normalization, rebalancing], knn)) :- true.
':=>'(p708335, pipeline([features, mitigation, normalization, rebalancing], nn)) :- true.
':=>'(p416768, pipeline([features, mitigation, normalization, rebalancing], rf)) :- true.
':=>'(p34621, pipeline([features, mitigation, rebalancing, normalization], knn)) :- true.
':=>'(p268160, pipeline([features, mitigation, rebalancing, normalization], nn)) :- true.
':=>'(p936939, pipeline([features, mitigation, rebalancing, normalization], rf)) :- true.
':=>'(p459962, pipeline([features, rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p273624, pipeline([features, rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p66433, pipeline([features, rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p341931, pipeline([features, rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p118354, pipeline([features, rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p250707, pipeline([features, rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p513148, pipeline([features, rebalancing, mitigation, normalization], knn)) :- true.
':=>'(p63607, pipeline([features, rebalancing, mitigation, normalization], nn)) :- true.
':=>'(p875553, pipeline([features, rebalancing, mitigation, normalization], rf)) :- true.
':=>'(p310816, pipeline([rebalancing, normalization, features, mitigation], knn)) :- true.
':=>'(p5350, pipeline([rebalancing, normalization, features, mitigation], knn)) :- true.
':=>'(p823319, pipeline([rebalancing, normalization, features, mitigation], nn)) :- true.
':=>'(p221934, pipeline([rebalancing, normalization, features, mitigation], nn)) :- true.
':=>'(p755664, pipeline([rebalancing, normalization, features, mitigation], rf)) :- true.
':=>'(p285446, pipeline([rebalancing, normalization, features, mitigation], rf)) :- true.
':=>'(p283435, pipeline([rebalancing, normalization, mitigation, features], knn)) :- true.
':=>'(p145169, pipeline([rebalancing, normalization, mitigation, features], nn)) :- true.
':=>'(p437590, pipeline([rebalancing, normalization, mitigation, features], rf)) :- true.
':=>'(p231452, pipeline([rebalancing, features, normalization, mitigation], knn)) :- true.
':=>'(p724407, pipeline([rebalancing, features, normalization, mitigation], knn)) :- true.
':=>'(p697358, pipeline([rebalancing, features, normalization, mitigation], nn)) :- true.
':=>'(p5567, pipeline([rebalancing, features, normalization, mitigation], nn)) :- true.
':=>'(p818394, pipeline([rebalancing, features, normalization, mitigation], rf)) :- true.
':=>'(p135453, pipeline([rebalancing, features, normalization, mitigation], rf)) :- true.
':=>'(p50306, pipeline([rebalancing, features, mitigation, normalization], knn)) :- true.
':=>'(p848932, pipeline([rebalancing, features, mitigation, normalization], nn)) :- true.
':=>'(p661760, pipeline([rebalancing, features, mitigation, normalization], rf)) :- true.

Checking Config
Exporting Config
Saving Graph
Exporting AutoML input
Exporting Space
Exporting Constraints
Input created for iteration Config(iteration=1, dataset=adult, metric=balanced_accuracy, fairnessMetric=demographic_parity_ratio, sensitiveFeatures=[sex, race], mode=max, batchSize=999999, timeBudget=900, seed=42)
Here is the standard output/error of the command:

b469981eae27f58581a48fa5b56cbf1e55b8ac6bf12852710e4d04b01b1441be
Here is the standard output/error of the command:

Here is the standard output/error of the command:

WARNING:root:No module named 'rpy2': FairAdapt will be unavailable. To install, run:
pip install 'aif360[FairAdapt]'
INFO:flaml.tune.searcher.blendsearch:No low-cost partial config given to the search algorithm. For cost-frugal search, consider providing low-cost values for cost-related hps via 'low_cost_partial_config'. More info can be found at https://microsoft.github.io/FLAML/docs/FAQ#about-low_cost_partial_config-in-tune
Trying to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Added successfully: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Trying to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: normalization == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
AutoML: starting optimization.
1
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 3, 'max_leaf_nodes': 4, 'min_samples_split': 2, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.2376712353162509), 'balanced_accuracy': np.float64(0.6658849204631444), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.79), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.3), 'Black_Male': np.float64(0.47), 'White_Female': np.float64(0.24), 'White_Male': np.float64(0.5)}, 'status': 'success', 'total_time': 8.860021114349365, 'fit_time': np.float64(1.667578125), 'score_time': np.float64(0.024683141708374025), 'absolute_time': 1746712946.1313674, 'flatten_demographic_parity_ratio': '0.23_0.24_0.23_0.28_0.21', 'flatten_balanced_accuracy': '0.66_0.68_0.67_0.66_0.66'}
2
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 15, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.06643532240852085), 'balanced_accuracy': np.float64(0.7691635626182125), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.16), 'Asian-Pac-Islander_Male': np.float64(0.99), 'Black_Female': np.float64(0.07), 'Black_Male': np.float64(0.36), 'White_Female': np.float64(0.25), 'White_Male': np.float64(0.8)}, 'status': 'success', 'total_time': 30.04759907722473, 'fit_time': np.float64(0.07449145317077636), 'score_time': np.float64(2.935798454284668), 'absolute_time': 1746712976.9965358, 'flatten_demographic_parity_ratio': '0.04_0.07_0.07_0.08_0.07', 'flatten_balanced_accuracy': '0.76_0.77_0.77_0.77_0.77'}
The result for {'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_split': 6, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_split': 6, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

3
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_split': 6, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.49998499399759905), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.0), 'Asian-Pac-Islander_Male': np.float64(0.0), 'Black_Female': np.float64(0.0), 'Black_Male': np.float64(0.0), 'White_Female': np.float64(0.0), 'White_Male': np.float64(1.0)}, 'status': 'fail', 'total_time': 122.44669342041016, 'fit_time': np.float64(24.375706958770753), 'score_time': np.float64(0.03102731704711914), 'absolute_time': 1746713099.4987135, 'flatten_demographic_parity_ratio': 'nan_nan_nan_0.0_nan', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 15, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 7}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 15, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 7}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')} was NaN

4
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 15, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 7}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5000299467528805), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.0), 'Asian-Pac-Islander_Male': np.float64(0.0), 'Black_Female': np.float64(0.0), 'Black_Male': np.float64(0.0), 'White_Female': np.float64(0.78), 'White_Male': np.float64(0.5)}, 'status': 'fail', 'total_time': 135.8620409965515, 'fit_time': np.float64(18.072681760787965), 'score_time': np.float64(1.3357156753540038), 'absolute_time': 1746713235.4138029, 'flatten_demographic_parity_ratio': 'nan_nan_0.0_0.0_nan', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
5
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.7436690623126714), 'balanced_accuracy': np.float64(0.5112552537740667), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.91), 'Asian-Pac-Islander_Male': np.float64(0.89), 'Black_Female': np.float64(0.92), 'Black_Male': np.float64(0.83), 'White_Female': np.float64(0.93), 'White_Male': np.float64(0.91)}, 'status': 'success', 'total_time': 104.27701497077942, 'fit_time': np.float64(20.700695514678955), 'score_time': np.float64(0.0537905216217041), 'absolute_time': 1746713339.7468567, 'flatten_demographic_parity_ratio': '0.79_0.73_0.69_0.8_0.71', 'flatten_balanced_accuracy': '0.53_0.51_0.51_0.5_0.5'}
6
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_split': 2, 'n_estimators': np.int64(25)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.49460732300163396), 'balanced_accuracy': np.float64(0.5069376824945392), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.9), 'Asian-Pac-Islander_Male': np.float64(0.85), 'Black_Female': np.float64(0.69), 'Black_Male': np.float64(0.58), 'White_Female': np.float64(0.68), 'White_Male': np.float64(0.67)}, 'status': 'success', 'total_time': 21.816393852233887, 'fit_time': np.float64(4.256713151931763), 'score_time': np.float64(0.027681779861450196), 'absolute_time': 1746713361.6278136, 'flatten_demographic_parity_ratio': '0.44_0.58_0.85_0.35_0.26', 'flatten_balanced_accuracy': '0.52_0.5_0.51_0.51_0.49'}
The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 3, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 3, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')} was NaN

7
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 3, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.4985235890531988), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.11), 'Asian-Pac-Islander_Male': np.float64(0.16), 'Black_Female': np.float64(0.49), 'Black_Male': np.float64(0.25), 'White_Female': np.float64(0.48), 'White_Male': np.float64(0.53)}, 'status': 'fail', 'total_time': 146.94304943084717, 'fit_time': np.float64(26.293823099136354), 'score_time': np.float64(1.523159646987915), 'absolute_time': 1746713508.6287165, 'flatten_demographic_parity_ratio': '0.43_0.0_nan_0.0_0.0', 'flatten_balanced_accuracy': '0.49_0.5_0.5_0.5_0.5'}
8
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 6, 'min_samples_split': 3, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.6284820202293271), 'balanced_accuracy': np.float64(0.4880718062679808), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.89), 'Asian-Pac-Islander_Male': np.float64(0.82), 'Black_Female': np.float64(0.66), 'Black_Male': np.float64(0.9), 'White_Female': np.float64(0.68), 'White_Male': np.float64(0.71)}, 'status': 'success', 'total_time': 42.952369689941406, 'fit_time': np.float64(8.443262720108033), 'score_time': np.float64(0.050190973281860354), 'absolute_time': 1746713551.639153, 'flatten_demographic_parity_ratio': '0.65_0.68_0.61_0.54_0.67', 'flatten_balanced_accuracy': '0.48_0.49_0.48_0.5_0.49'}
9
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 6, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.7302644830428499), 'balanced_accuracy': np.float64(0.5265508757156315), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.84), 'Asian-Pac-Islander_Male': np.float64(0.86), 'Black_Female': np.float64(0.83), 'Black_Male': np.float64(1.0), 'White_Female': np.float64(0.75), 'White_Male': np.float64(0.8)}, 'status': 'success', 'total_time': 1.4444694519042969, 'fit_time': np.float64(0.14920496940612793), 'score_time': np.float64(0.04333038330078125), 'absolute_time': 1746713553.1427865, 'flatten_demographic_parity_ratio': '0.69_0.67_0.76_0.8_0.74', 'flatten_balanced_accuracy': '0.52_0.53_0.53_0.52_0.53'}
The result for {'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_split': 4, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_split': 4, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

10
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_split': 4, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5), 'by_group': {'Asian-Pac-Islander_Female': -inf, 'Asian-Pac-Islander_Male': -inf, 'Black_Female': -inf, 'Black_Male': -inf, 'White_Female': -inf, 'White_Male': -inf}, 'status': 'fail', 'total_time': 36.52551007270813, 'fit_time': np.float64(7.198512268066406), 'score_time': np.float64(0.027588701248168944), 'absolute_time': 1746713590.3848732, 'flatten_demographic_parity_ratio': 'nan_nan_nan_nan_nan', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
The result for {'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 4, 'max_leaf_nodes': 6, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 4, 'max_leaf_nodes': 6, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

11
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 4, 'max_leaf_nodes': 6, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.5), 'by_group': {'Asian-Pac-Islander_Female': -inf, 'Asian-Pac-Islander_Male': -inf, 'Black_Female': -inf, 'Black_Male': -inf, 'White_Female': -inf, 'White_Male': -inf}, 'status': 'fail', 'total_time': 40.16904282569885, 'fit_time': np.float64(7.915259885787964), 'score_time': np.float64(0.03364076614379883), 'absolute_time': 1746713630.6138124, 'flatten_demographic_parity_ratio': 'nan_nan_nan_nan_nan', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 6, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 6, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

12
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 6, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': -inf, 'balanced_accuracy': np.float64(0.49998499399759905), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.0), 'Asian-Pac-Islander_Male': np.float64(0.0), 'Black_Female': np.float64(0.0), 'Black_Male': np.float64(0.0), 'White_Female': np.float64(0.0), 'White_Male': np.float64(1.0)}, 'status': 'fail', 'total_time': 124.95164585113525, 'fit_time': np.float64(10.761517238616943), 'score_time': np.float64(2.0018599033355713), 'absolute_time': 1746713755.6292367, 'flatten_demographic_parity_ratio': 'nan_nan_nan_0.0_nan', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
13
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 9}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.6565964365192849), 'balanced_accuracy': np.float64(0.5082569897256978), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.77), 'Asian-Pac-Islander_Male': np.float64(0.82), 'Black_Female': np.float64(0.94), 'Black_Male': np.float64(0.75), 'White_Female': np.float64(0.94), 'White_Male': np.float64(0.91)}, 'status': 'success', 'total_time': 174.6703200340271, 'fit_time': np.float64(12.886111211776733), 'score_time': np.float64(0.027669239044189452), 'absolute_time': 1746713930.367092, 'flatten_demographic_parity_ratio': '0.79_0.56_0.6_0.66_0.67', 'flatten_balanced_accuracy': '0.51_0.51_0.5_0.51_0.51'}
AutoML: optimization done.
AutoML: miner done.
AutoML: export done.
Here is the standard output/error of the command:

Here is the standard output/error of the command:

Here is the standard output/error of the command:

hamlet_339504119
AutoML execution ended
