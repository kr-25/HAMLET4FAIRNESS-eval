Sensitive groups ready!
Theory ready!
Theory:
step(normalization) :- true.
step(features) :- true.
step(mitigation) :- true.
step(rebalancing) :- true.
step(classification) :- true.
operator(normalization, power_transformer) :- true.
operator(normalization, robust_scaler) :- true.
operator(normalization, standard) :- true.
operator(normalization, minmax) :- true.
operator(features, select_k_best) :- true.
operator(features, pca) :- true.
operator(mitigation, corr_remover) :- true.
operator(mitigation, lfr) :- true.
operator(rebalancing, near_miss) :- true.
operator(rebalancing, smote) :- true.
operator(classification, knn) :- true.
operator(classification, nn) :- true.
operator(classification, rf) :- true.
hyperparameter(robust_scaler, with_centering, choice) :- true.
hyperparameter(robust_scaler, with_scaling, choice) :- true.
hyperparameter(standard, with_mean, choice) :- true.
hyperparameter(standard, with_std, choice) :- true.
hyperparameter(select_k_best, k, randint) :- true.
hyperparameter(pca, n_components, randint) :- true.
hyperparameter(corr_remover, alpha, choice) :- true.
hyperparameter(lfr, n_prototypes, choice) :- true.
hyperparameter(lfr, reconstruct_weight, choice) :- true.
hyperparameter(lfr, fairness_weight, choice) :- true.
hyperparameter(near_miss, n_neighbors, randint) :- true.
hyperparameter(smote, k_neighbors, randint) :- true.
hyperparameter(knn, n_neighbors, randint) :- true.
hyperparameter(knn, weights, choice) :- true.
hyperparameter(knn, metric, choice) :- true.
hyperparameter(nn, n_hidden_layers, choice) :- true.
hyperparameter(nn, n_neurons, choice) :- true.
hyperparameter(nn, activation, choice) :- true.
hyperparameter(nn, solver, choice) :- true.
hyperparameter(nn, alpha, choice) :- true.
hyperparameter(nn, learning_rate, choice) :- true.
hyperparameter(rf, n_estimators, choice) :- true.
hyperparameter(rf, max_depth, randint) :- true.
hyperparameter(rf, max_features, randint) :- true.
hyperparameter(rf, min_samples_split, randint) :- true.
hyperparameter(rf, max_leaf_nodes, randint) :- true.
hyperparameter(rf, bootstrap, choice) :- true.
hyperparameter(rf, criterion, choice) :- true.
domain(robust_scaler, with_centering, [true, false]) :- true.
domain(robust_scaler, with_scaling, [true, false]) :- true.
domain(standard, with_mean, [true, false]) :- true.
domain(standard, with_std, [true, false]) :- true.
domain(select_k_best, k, [1, 10]) :- true.
domain(pca, n_components, [1, 8]) :- true.
domain(corr_remover, alpha, [0.25, 0.5, 0.75, 1.0]) :- true.
domain(lfr, n_prototypes, [10, 50, 100, 200]) :- true.
domain(lfr, reconstruct_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(lfr, fairness_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(near_miss, n_neighbors, [1, 4]) :- true.
domain(smote, k_neighbors, [5, 8]) :- true.
domain(knn, n_neighbors, [3, 20]) :- true.
domain(knn, weights, [uniform, distance]) :- true.
domain(knn, metric, [minkowski, euclidean, manhattan]) :- true.
domain(nn, n_hidden_layers, [1, 5, 10, 20]) :- true.
domain(nn, n_neurons, [5, 10, 25, 50]) :- true.
domain(nn, activation, [logistic, tanh, relu]) :- true.
domain(nn, solver, [lbfgs, sgd, adam]) :- true.
domain(nn, alpha, [0.0001, 0.001, 0.01, 0.00001]) :- true.
domain(nn, learning_rate, [constant, invscaling, adaptive]) :- true.
domain(rf, n_estimators, [10, 25, 50, 75, 100]) :- true.
domain(rf, max_depth, [1, 5]) :- true.
domain(rf, max_features, [1, 4]) :- true.
domain(rf, min_samples_split, [2, 6]) :- true.
domain(rf, max_leaf_nodes, [2, 6]) :- true.
domain(rf, bootstrap, [true, false]) :- true.
domain(rf, criterion, [gini, entropy]) :- true.
':=>'(c1, mandatory([mitigation], classification)) :- true.
':=>'(c3, mandatory_order([mitigation, features], classification)) :- true.
':=>'(c4, mandatory_order([mitigation, normalization], classification)) :- true.
':=>'(c5, mandatory([normalization], knn)) :- true.
':=>'(c6, mandatory([normalization], nn)) :- true.
dataset(compass) :- true.
metric(balanced_accuracy) :- true.
fairness_metric(demographic_parity_ratio) :- true.
sensitive_feature(sex, [0, 1]) :- true.
sensitive_feature(race, [0, 1, 2, 3, 4, 5]) :- true.
pipeline([Step_1_0], ZZ_0) :- (step(Step_1_0), '\\='(Step_1_0, classification), operator(classification, ZZ_0)).
pipeline([Step_1_1, Step_2_0], ZZ_1) :- (step(Step_1_1), step(Step_2_0), '\\='(Step_1_1, classification), '\\='(Step_2_0, classification), '\\='(Step_1_1, Step_2_0), operator(classification, ZZ_1)).
pipeline([Step_1_2, Step_2_1, Step_3_0], ZZ_2) :- (step(Step_1_2), step(Step_2_1), step(Step_3_0), '\\='(Step_1_2, classification), '\\='(Step_2_1, classification), '\\='(Step_3_0, classification), '\\='(Step_1_2, Step_2_1), '\\='(Step_1_2, Step_3_0), '\\='(Step_2_1, Step_3_0), operator(classification, ZZ_2)).
pipeline([Step_1_3, Step_2_2, Step_3_1, Step_4_0], ZZ_3) :- (step(Step_1_3), step(Step_2_2), step(Step_3_1), step(Step_4_0), '\\='(Step_1_3, classification), '\\='(Step_2_2, classification), '\\='(Step_3_1, classification), '\\='(Step_4_0, classification), '\\='(Step_1_3, Step_2_2), '\\='(Step_1_3, Step_3_1), '\\='(Step_1_3, Step_4_0), '\\='(Step_2_2, Step_3_1), '\\='(Step_2_2, Step_4_0), '\\='(Step_3_1, Step_4_0), operator(classification, ZZ_3)).
':=>'(p734032, sensitive_group([0])) :- true.
':=>'(p75791, sensitive_group([1])) :- true.
':=>'(p732487, sensitive_group([0])) :- true.
':=>'(p33991, sensitive_group([1])) :- true.
':=>'(p322543, sensitive_group([2])) :- true.
':=>'(p156714, sensitive_group([3])) :- true.
':=>'(p742776, sensitive_group([4])) :- true.
':=>'(p38471, sensitive_group([5])) :- true.
':=>'(p201848, sensitive_group([0, 0])) :- true.
':=>'(p172519, sensitive_group([0, 1])) :- true.
':=>'(p213491, sensitive_group([0, 2])) :- true.
':=>'(p146897, sensitive_group([0, 3])) :- true.
':=>'(p638987, sensitive_group([0, 4])) :- true.
':=>'(p251670, sensitive_group([0, 5])) :- true.
':=>'(p624040, sensitive_group([1, 0])) :- true.
':=>'(p521227, sensitive_group([1, 1])) :- true.
':=>'(p366912, sensitive_group([1, 2])) :- true.
':=>'(p718910, sensitive_group([1, 3])) :- true.
':=>'(p419493, sensitive_group([1, 4])) :- true.
':=>'(p772836, sensitive_group([1, 5])) :- true.
':=>'(p553479, pipeline([], knn)) :- true.
':=>'(p125015, pipeline([], knn)) :- true.
':=>'(p43583, pipeline([], nn)) :- true.
':=>'(p799592, pipeline([], nn)) :- true.
':=>'(p50708, pipeline([], rf)) :- true.
':=>'(p307061, pipeline([normalization], knn)) :- true.
':=>'(p473912, pipeline([normalization], nn)) :- true.
':=>'(p69126, pipeline([normalization], rf)) :- true.
':=>'(p185437, pipeline([features], knn)) :- true.
':=>'(p631625, pipeline([features], knn)) :- true.
':=>'(p656914, pipeline([features], nn)) :- true.
':=>'(p850756, pipeline([features], nn)) :- true.
':=>'(p206078, pipeline([features], rf)) :- true.
':=>'(p270640, pipeline([mitigation], knn)) :- true.
':=>'(p189550, pipeline([mitigation], nn)) :- true.
':=>'(p692311, pipeline([rebalancing], knn)) :- true.
':=>'(p123015, pipeline([rebalancing], knn)) :- true.
':=>'(p256525, pipeline([rebalancing], nn)) :- true.
':=>'(p110437, pipeline([rebalancing], nn)) :- true.
':=>'(p48108, pipeline([rebalancing], rf)) :- true.
':=>'(p163616, pipeline([normalization, features], knn)) :- true.
':=>'(p98986, pipeline([normalization, features], nn)) :- true.
':=>'(p772295, pipeline([normalization, features], rf)) :- true.
':=>'(p186955, pipeline([normalization, mitigation], knn)) :- true.
':=>'(p117620, pipeline([normalization, mitigation], nn)) :- true.
':=>'(p191336, pipeline([normalization, mitigation], rf)) :- true.
':=>'(p120418, pipeline([normalization, rebalancing], knn)) :- true.
':=>'(p837309, pipeline([normalization, rebalancing], nn)) :- true.
':=>'(p479931, pipeline([normalization, rebalancing], rf)) :- true.
':=>'(p880828, pipeline([features, normalization], knn)) :- true.
':=>'(p560279, pipeline([features, normalization], nn)) :- true.
':=>'(p416742, pipeline([features, normalization], rf)) :- true.
':=>'(p462198, pipeline([features, mitigation], knn)) :- true.
':=>'(p734641, pipeline([features, mitigation], knn)) :- true.
':=>'(p913718, pipeline([features, mitigation], nn)) :- true.
':=>'(p555790, pipeline([features, mitigation], nn)) :- true.
':=>'(p216760, pipeline([features, mitigation], rf)) :- true.
':=>'(p92833, pipeline([features, rebalancing], knn)) :- true.
':=>'(p57549, pipeline([features, rebalancing], knn)) :- true.
':=>'(p431277, pipeline([features, rebalancing], nn)) :- true.
':=>'(p454295, pipeline([features, rebalancing], nn)) :- true.
':=>'(p546576, pipeline([features, rebalancing], rf)) :- true.
':=>'(p355262, pipeline([mitigation, features], knn)) :- true.
':=>'(p259540, pipeline([mitigation, features], nn)) :- true.
':=>'(p475904, pipeline([mitigation, rebalancing], knn)) :- true.
':=>'(p6815, pipeline([mitigation, rebalancing], nn)) :- true.
':=>'(p171105, pipeline([rebalancing, normalization], knn)) :- true.
':=>'(p452035, pipeline([rebalancing, normalization], nn)) :- true.
':=>'(p72518, pipeline([rebalancing, normalization], rf)) :- true.
':=>'(p101486, pipeline([rebalancing, features], knn)) :- true.
':=>'(p583705, pipeline([rebalancing, features], knn)) :- true.
':=>'(p362323, pipeline([rebalancing, features], nn)) :- true.
':=>'(p729251, pipeline([rebalancing, features], nn)) :- true.
':=>'(p707983, pipeline([rebalancing, features], rf)) :- true.
':=>'(p356492, pipeline([rebalancing, mitigation], knn)) :- true.
':=>'(p448748, pipeline([rebalancing, mitigation], nn)) :- true.
':=>'(p371591, pipeline([normalization, features, mitigation], knn)) :- true.
':=>'(p966566, pipeline([normalization, features, mitigation], knn)) :- true.
':=>'(p823917, pipeline([normalization, features, mitigation], nn)) :- true.
':=>'(p108036, pipeline([normalization, features, mitigation], nn)) :- true.
':=>'(p450964, pipeline([normalization, features, mitigation], rf)) :- true.
':=>'(p16553, pipeline([normalization, features, mitigation], rf)) :- true.
':=>'(p376661, pipeline([normalization, features, rebalancing], knn)) :- true.
':=>'(p705335, pipeline([normalization, features, rebalancing], nn)) :- true.
':=>'(p80178, pipeline([normalization, features, rebalancing], rf)) :- true.
':=>'(p641063, pipeline([normalization, mitigation, features], knn)) :- true.
':=>'(p519983, pipeline([normalization, mitigation, features], nn)) :- true.
':=>'(p683986, pipeline([normalization, mitigation, features], rf)) :- true.
':=>'(p988673, pipeline([normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p215281, pipeline([normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p68858, pipeline([normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p284972, pipeline([normalization, rebalancing, features], knn)) :- true.
':=>'(p229447, pipeline([normalization, rebalancing, features], nn)) :- true.
':=>'(p476151, pipeline([normalization, rebalancing, features], rf)) :- true.
':=>'(p751594, pipeline([normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p978232, pipeline([normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p127739, pipeline([normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p539708, pipeline([features, normalization, mitigation], knn)) :- true.
':=>'(p498981, pipeline([features, normalization, mitigation], knn)) :- true.
':=>'(p371193, pipeline([features, normalization, mitigation], nn)) :- true.
':=>'(p844419, pipeline([features, normalization, mitigation], nn)) :- true.
':=>'(p135313, pipeline([features, normalization, mitigation], rf)) :- true.
':=>'(p824044, pipeline([features, normalization, mitigation], rf)) :- true.
':=>'(p179532, pipeline([features, normalization, rebalancing], knn)) :- true.
':=>'(p396650, pipeline([features, normalization, rebalancing], nn)) :- true.
':=>'(p979508, pipeline([features, normalization, rebalancing], rf)) :- true.
':=>'(p842233, pipeline([features, mitigation, normalization], knn)) :- true.
':=>'(p483690, pipeline([features, mitigation, normalization], nn)) :- true.
':=>'(p814499, pipeline([features, mitigation, normalization], rf)) :- true.
':=>'(p669819, pipeline([features, mitigation, rebalancing], knn)) :- true.
':=>'(p587128, pipeline([features, mitigation, rebalancing], knn)) :- true.
':=>'(p150657, pipeline([features, mitigation, rebalancing], nn)) :- true.
':=>'(p59707, pipeline([features, mitigation, rebalancing], nn)) :- true.
':=>'(p474909, pipeline([features, mitigation, rebalancing], rf)) :- true.
':=>'(p110283, pipeline([features, rebalancing, normalization], knn)) :- true.
':=>'(p450655, pipeline([features, rebalancing, normalization], nn)) :- true.
':=>'(p989031, pipeline([features, rebalancing, normalization], rf)) :- true.
':=>'(p323638, pipeline([features, rebalancing, mitigation], knn)) :- true.
':=>'(p827994, pipeline([features, rebalancing, mitigation], knn)) :- true.
':=>'(p102847, pipeline([features, rebalancing, mitigation], nn)) :- true.
':=>'(p510190, pipeline([features, rebalancing, mitigation], nn)) :- true.
':=>'(p298332, pipeline([features, rebalancing, mitigation], rf)) :- true.
':=>'(p376069, pipeline([mitigation, features, rebalancing], knn)) :- true.
':=>'(p232838, pipeline([mitigation, features, rebalancing], nn)) :- true.
':=>'(p942869, pipeline([mitigation, rebalancing, features], knn)) :- true.
':=>'(p2198, pipeline([mitigation, rebalancing, features], nn)) :- true.
':=>'(p696280, pipeline([rebalancing, normalization, features], knn)) :- true.
':=>'(p608857, pipeline([rebalancing, normalization, features], nn)) :- true.
':=>'(p171483, pipeline([rebalancing, normalization, features], rf)) :- true.
':=>'(p282791, pipeline([rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p83384, pipeline([rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p924287, pipeline([rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p95719, pipeline([rebalancing, features, normalization], knn)) :- true.
':=>'(p910427, pipeline([rebalancing, features, normalization], nn)) :- true.
':=>'(p62977, pipeline([rebalancing, features, normalization], rf)) :- true.
':=>'(p514122, pipeline([rebalancing, features, mitigation], knn)) :- true.
':=>'(p906036, pipeline([rebalancing, features, mitigation], knn)) :- true.
':=>'(p295821, pipeline([rebalancing, features, mitigation], nn)) :- true.
':=>'(p900260, pipeline([rebalancing, features, mitigation], nn)) :- true.
':=>'(p625290, pipeline([rebalancing, features, mitigation], rf)) :- true.
':=>'(p847331, pipeline([rebalancing, mitigation, features], knn)) :- true.
':=>'(p460015, pipeline([rebalancing, mitigation, features], nn)) :- true.
':=>'(p717386, pipeline([normalization, features, mitigation, rebalancing], knn)) :- true.
':=>'(p390654, pipeline([normalization, features, mitigation, rebalancing], knn)) :- true.
':=>'(p345672, pipeline([normalization, features, mitigation, rebalancing], nn)) :- true.
':=>'(p876819, pipeline([normalization, features, mitigation, rebalancing], nn)) :- true.
':=>'(p403271, pipeline([normalization, features, mitigation, rebalancing], rf)) :- true.
':=>'(p867455, pipeline([normalization, features, mitigation, rebalancing], rf)) :- true.
':=>'(p969283, pipeline([normalization, features, rebalancing, mitigation], knn)) :- true.
':=>'(p406403, pipeline([normalization, features, rebalancing, mitigation], knn)) :- true.
':=>'(p12172, pipeline([normalization, features, rebalancing, mitigation], nn)) :- true.
':=>'(p388437, pipeline([normalization, features, rebalancing, mitigation], nn)) :- true.
':=>'(p336399, pipeline([normalization, features, rebalancing, mitigation], rf)) :- true.
':=>'(p373103, pipeline([normalization, features, rebalancing, mitigation], rf)) :- true.
':=>'(p817828, pipeline([normalization, mitigation, features, rebalancing], knn)) :- true.
':=>'(p407428, pipeline([normalization, mitigation, features, rebalancing], nn)) :- true.
':=>'(p43691, pipeline([normalization, mitigation, features, rebalancing], rf)) :- true.
':=>'(p741582, pipeline([normalization, mitigation, rebalancing, features], knn)) :- true.
':=>'(p843529, pipeline([normalization, mitigation, rebalancing, features], nn)) :- true.
':=>'(p421685, pipeline([normalization, mitigation, rebalancing, features], rf)) :- true.
':=>'(p47014, pipeline([normalization, rebalancing, features, mitigation], knn)) :- true.
':=>'(p407916, pipeline([normalization, rebalancing, features, mitigation], knn)) :- true.
':=>'(p451779, pipeline([normalization, rebalancing, features, mitigation], nn)) :- true.
':=>'(p7786, pipeline([normalization, rebalancing, features, mitigation], nn)) :- true.
':=>'(p531144, pipeline([normalization, rebalancing, features, mitigation], rf)) :- true.
':=>'(p810252, pipeline([normalization, rebalancing, features, mitigation], rf)) :- true.
':=>'(p454936, pipeline([normalization, rebalancing, mitigation, features], knn)) :- true.
':=>'(p81678, pipeline([normalization, rebalancing, mitigation, features], nn)) :- true.
':=>'(p431271, pipeline([normalization, rebalancing, mitigation, features], rf)) :- true.
':=>'(p439824, pipeline([features, normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p986126, pipeline([features, normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p102728, pipeline([features, normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p759576, pipeline([features, normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p582410, pipeline([features, normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p956063, pipeline([features, normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p89136, pipeline([features, normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p571064, pipeline([features, normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p42985, pipeline([features, normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p420434, pipeline([features, normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p705879, pipeline([features, normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p901920, pipeline([features, normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p679505, pipeline([features, mitigation, normalization, rebalancing], knn)) :- true.
':=>'(p295736, pipeline([features, mitigation, normalization, rebalancing], nn)) :- true.
':=>'(p281423, pipeline([features, mitigation, normalization, rebalancing], rf)) :- true.
':=>'(p779795, pipeline([features, mitigation, rebalancing, normalization], knn)) :- true.
':=>'(p897037, pipeline([features, mitigation, rebalancing, normalization], nn)) :- true.
':=>'(p204616, pipeline([features, mitigation, rebalancing, normalization], rf)) :- true.
':=>'(p96637, pipeline([features, rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p398823, pipeline([features, rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p991699, pipeline([features, rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p797525, pipeline([features, rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p584902, pipeline([features, rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p42820, pipeline([features, rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p496330, pipeline([features, rebalancing, mitigation, normalization], knn)) :- true.
':=>'(p565806, pipeline([features, rebalancing, mitigation, normalization], nn)) :- true.
':=>'(p292303, pipeline([features, rebalancing, mitigation, normalization], rf)) :- true.
':=>'(p77234, pipeline([rebalancing, normalization, features, mitigation], knn)) :- true.
':=>'(p235863, pipeline([rebalancing, normalization, features, mitigation], knn)) :- true.
':=>'(p317196, pipeline([rebalancing, normalization, features, mitigation], nn)) :- true.
':=>'(p395953, pipeline([rebalancing, normalization, features, mitigation], nn)) :- true.
':=>'(p525185, pipeline([rebalancing, normalization, features, mitigation], rf)) :- true.
':=>'(p305007, pipeline([rebalancing, normalization, features, mitigation], rf)) :- true.
':=>'(p431808, pipeline([rebalancing, normalization, mitigation, features], knn)) :- true.
':=>'(p803839, pipeline([rebalancing, normalization, mitigation, features], nn)) :- true.
':=>'(p382532, pipeline([rebalancing, normalization, mitigation, features], rf)) :- true.
':=>'(p496047, pipeline([rebalancing, features, normalization, mitigation], knn)) :- true.
':=>'(p108933, pipeline([rebalancing, features, normalization, mitigation], knn)) :- true.
':=>'(p575317, pipeline([rebalancing, features, normalization, mitigation], nn)) :- true.
':=>'(p42300, pipeline([rebalancing, features, normalization, mitigation], nn)) :- true.
':=>'(p760720, pipeline([rebalancing, features, normalization, mitigation], rf)) :- true.
':=>'(p318777, pipeline([rebalancing, features, normalization, mitigation], rf)) :- true.
':=>'(p633543, pipeline([rebalancing, features, mitigation, normalization], knn)) :- true.
':=>'(p903586, pipeline([rebalancing, features, mitigation, normalization], nn)) :- true.
':=>'(p373375, pipeline([rebalancing, features, mitigation, normalization], rf)) :- true.

Checking Config
Exporting Config
Saving Graph
Exporting AutoML input
Exporting Space
Exporting Constraints
Input created for iteration Config(iteration=1, dataset=compass, metric=balanced_accuracy, fairnessMetric=demographic_parity_ratio, sensitiveFeatures=[sex, race], mode=max, batchSize=999999, timeBudget=900, seed=42)
Here is the standard output/error of the command:

107707cad90bcfc6c1ec22b4525b8712338f2022f23be25eef6bf13cf207fc1f
Here is the standard output/error of the command:

Here is the standard output/error of the command:

WARNING:root:No module named 'rpy2': FairAdapt will be unavailable. To install, run:
pip install 'aif360[FairAdapt]'
INFO:flaml.tune.searcher.blendsearch:No low-cost partial config given to the search algorithm. For cost-frugal search, consider providing low-cost values for cost-related hps via 'low_cost_partial_config'. More info can be found at https://microsoft.github.io/FLAML/docs/FAQ#about-low_cost_partial_config-in-tune
Trying to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Added successfully: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Trying to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: normalization == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
AutoML: starting optimization.
1
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 3, 'max_leaf_nodes': 4, 'min_samples_split': 2, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.4437026493850242), 'balanced_accuracy': np.float64(0.6868281492474073), 'by_group': {'0_0': np.float64(0.71), '0_2': np.float64(0.66), '0_3': np.float64(0.44), '1_0': np.float64(1.0), '1_2': np.float64(0.69), '1_3': np.float64(0.66), '1_5': np.float64(0.63)}, 'status': 'success', 'total_time': 6.505154848098755, 'fit_time': np.float64(1.2412235260009765), 'score_time': np.float64(0.014319086074829101), 'absolute_time': 1746708694.3803504, 'flatten_demographic_parity_ratio': '0.42_0.4_0.46_0.48_0.46', 'flatten_balanced_accuracy': '0.68_0.7_0.69_0.69_0.67'}
2
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 15, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.2323286607359519), 'balanced_accuracy': np.float64(0.6656167307347565), 'by_group': {'0_0': np.float64(0.47), '0_2': np.float64(0.49), '0_3': np.float64(0.25), '1_0': np.float64(1.0), '1_2': np.float64(0.61), '1_3': np.float64(0.44), '1_5': np.float64(0.51)}, 'status': 'success', 'total_time': 9.676463842391968, 'fit_time': np.float64(0.03129067420959473), 'score_time': np.float64(0.9341936111450195), 'absolute_time': 1746708704.827313, 'flatten_demographic_parity_ratio': '0.18_0.18_0.33_0.14_0.34', 'flatten_balanced_accuracy': '0.67_0.66_0.65_0.68_0.66'}
3
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_split': 6, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.6617299942545366), 'balanced_accuracy': np.float64(0.6232198832649185), 'by_group': {'0_0': np.float64(0.82), '0_2': np.float64(0.91), '0_3': np.float64(0.7), '1_0': np.float64(0.98), '1_2': np.float64(0.85), '1_3': np.float64(0.78), '1_5': np.float64(0.81)}, 'status': 'success', 'total_time': 28.564315795898438, 'fit_time': np.float64(5.649852848052978), 'score_time': np.float64(0.016874408721923827), 'absolute_time': 1746708733.4199464, 'flatten_demographic_parity_ratio': '0.56_0.68_0.81_0.53_0.73', 'flatten_balanced_accuracy': '0.65_0.62_0.61_0.61_0.61'}
4
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 15, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 7}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.17040549394549737), 'balanced_accuracy': np.float64(0.5161259390195657), 'by_group': {'0_0': np.float64(0.68), '0_2': np.float64(0.79), '0_3': np.float64(0.25), '1_0': np.float64(0.8), '1_2': np.float64(0.66), '1_3': np.float64(0.68), '1_5': np.float64(0.74)}, 'status': 'success', 'total_time': 137.99393033981323, 'fit_time': np.float64(7.151121807098389), 'score_time': np.float64(0.2330775737762451), 'absolute_time': 1746708871.4408207, 'flatten_demographic_parity_ratio': '0.0_0.27_0.0_0.58_0.0', 'flatten_balanced_accuracy': '0.51_0.53_0.52_0.51_0.51'}
5
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.5523107423645883), 'balanced_accuracy': np.float64(0.6366176035546823), 'by_group': {'0_0': np.float64(0.75), '0_2': np.float64(0.8), '0_3': np.float64(0.58), '1_0': np.float64(1.0), '1_2': np.float64(0.8), '1_3': np.float64(0.71), '1_5': np.float64(0.74)}, 'status': 'success', 'total_time': 63.078219413757324, 'fit_time': np.float64(12.517517328262329), 'score_time': np.float64(0.03456282615661621), 'absolute_time': 1746708934.5471969, 'flatten_demographic_parity_ratio': '0.48_0.56_0.69_0.75_0.28', 'flatten_balanced_accuracy': '0.63_0.64_0.62_0.62_0.67'}
6
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_split': 2, 'n_estimators': np.int64(25)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.6518075416593783), 'balanced_accuracy': np.float64(0.6018455892251271), 'by_group': {'0_0': np.float64(0.82), '0_2': np.float64(0.91), '0_3': np.float64(0.69), '1_0': np.float64(0.99), '1_2': np.float64(0.87), '1_3': np.float64(0.79), '1_5': np.float64(0.82)}, 'status': 'success', 'total_time': 38.76003432273865, 'fit_time': np.float64(7.694159364700317), 'score_time': np.float64(0.014544439315795899), 'absolute_time': 1746708973.340482, 'flatten_demographic_parity_ratio': '0.99_0.65_0.76_0.54_0.32', 'flatten_balanced_accuracy': '0.51_0.63_0.63_0.61_0.64'}
7
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 3, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.2721291679680017), 'balanced_accuracy': np.float64(0.5084783411171979), 'by_group': {'0_0': np.float64(0.74), '0_2': np.float64(0.75), '0_3': np.float64(0.62), '1_0': np.float64(0.8), '1_2': np.float64(0.83), '1_3': np.float64(0.68), '1_5': np.float64(0.47)}, 'status': 'success', 'total_time': 52.33313989639282, 'fit_time': np.float64(10.05660285949707), 'score_time': np.float64(0.19227004051208496), 'absolute_time': 1746709025.704714, 'flatten_demographic_parity_ratio': '0.48_0.0_0.26_0.11_0.52', 'flatten_balanced_accuracy': '0.51_0.51_0.51_0.5_0.51'}
8
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 6, 'min_samples_split': 3, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.531829438062568), 'balanced_accuracy': np.float64(0.6340723415231164), 'by_group': {'0_0': np.float64(0.75), '0_2': np.float64(0.83), '0_3': np.float64(0.58), '1_0': np.float64(1.0), '1_2': np.float64(0.83), '1_3': np.float64(0.73), '1_5': np.float64(0.72)}, 'status': 'success', 'total_time': 25.356687784194946, 'fit_time': np.float64(4.99502739906311), 'score_time': np.float64(0.023409509658813478), 'absolute_time': 1746709051.0949051, 'flatten_demographic_parity_ratio': '0.42_0.55_0.71_0.64_0.34', 'flatten_balanced_accuracy': '0.64_0.64_0.62_0.63_0.64'}
9
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 6, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.3701899941782948), 'balanced_accuracy': np.float64(0.6478985598961098), 'by_group': {'0_0': np.float64(0.58), '0_2': np.float64(0.54), '0_3': np.float64(0.37), '1_0': np.float64(1.0), '1_2': np.float64(0.68), '1_3': np.float64(0.64), '1_5': np.float64(0.59)}, 'status': 'success', 'total_time': 1.7813150882720947, 'fit_time': np.float64(0.12694997787475587), 'score_time': np.float64(0.10005626678466797), 'absolute_time': 1746709052.9073968, 'flatten_demographic_parity_ratio': '0.38_0.4_0.4_0.39_0.28', 'flatten_balanced_accuracy': '0.66_0.64_0.65_0.65_0.64'}
10
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 3, 'max_leaf_nodes': 4, 'min_samples_split': 6, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.567388292190047), 'balanced_accuracy': np.float64(0.633173985639223), 'by_group': {'0_0': np.float64(0.76), '0_2': np.float64(0.84), '0_3': np.float64(0.59), '1_0': np.float64(1.0), '1_2': np.float64(0.83), '1_3': np.float64(0.73), '1_5': np.float64(0.74)}, 'status': 'success', 'total_time': 48.72922372817993, 'fit_time': np.float64(5.639341402053833), 'score_time': np.float64(0.014721870422363281), 'absolute_time': 1746709102.3713672, 'flatten_demographic_parity_ratio': '0.5_0.53_0.7_0.62_0.5', 'flatten_balanced_accuracy': '0.65_0.65_0.62_0.62_0.63'}
11
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 6, 'n_estimators': np.int64(100)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.4841831886089146), 'balanced_accuracy': np.float64(0.6214671907268364), 'by_group': {'0_0': np.float64(0.73), '0_2': np.float64(0.83), '0_3': np.float64(0.53), '1_0': np.float64(1.0), '1_2': np.float64(0.82), '1_3': np.float64(0.73), '1_5': np.float64(0.72)}, 'status': 'success', 'total_time': 36.74659705162048, 'fit_time': np.float64(7.276515245437622), 'score_time': np.float64(0.022095394134521485), 'absolute_time': 1746709139.1533818, 'flatten_demographic_parity_ratio': '0.44_0.39_0.71_0.53_0.35', 'flatten_balanced_accuracy': '0.63_0.63_0.63_0.6_0.63'}
12
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 6, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.2936278049125788), 'balanced_accuracy': np.float64(0.5080226462971621), 'by_group': {'0_0': np.float64(0.65), '0_2': np.float64(0.67), '0_3': np.float64(0.42), '1_0': np.float64(0.8), '1_2': np.float64(0.69), '1_3': np.float64(0.78), '1_5': np.float64(0.65)}, 'status': 'success', 'total_time': 78.51951885223389, 'fit_time': np.float64(9.926399278640748), 'score_time': np.float64(0.12490658760070801), 'absolute_time': 1746709217.7103415, 'flatten_demographic_parity_ratio': '0.71_0.0_0.42_0.0_0.35', 'flatten_balanced_accuracy': '0.5_0.5_0.51_0.52_0.5'}
13
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 4, 'min_samples_split': 6, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 2}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.5988411090114306), 'balanced_accuracy': np.float64(0.6315482892874279), 'by_group': {'0_0': np.float64(0.76), '0_2': np.float64(0.84), '0_3': np.float64(0.66), '1_0': np.float64(1.0), '1_2': np.float64(0.83), '1_3': np.float64(0.76), '1_5': np.float64(0.75)}, 'status': 'success', 'total_time': 130.7035002708435, 'fit_time': np.float64(10.432196426391602), 'score_time': np.float64(0.022121715545654296), 'absolute_time': 1746709348.4498487, 'flatten_demographic_parity_ratio': '0.44_0.55_0.71_0.57_0.72', 'flatten_balanced_accuracy': '0.63_0.64_0.63_0.64_0.61'}
14
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 4, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 6, 'n_estimators': np.int64(75)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.6520528296962487), 'balanced_accuracy': np.float64(0.6292931261641934), 'by_group': {'0_0': np.float64(0.79), '0_2': np.float64(0.88), '0_3': np.float64(0.69), '1_0': np.float64(1.0), '1_2': np.float64(0.89), '1_3': np.float64(0.75), '1_5': np.float64(0.8)}, 'status': 'success', 'total_time': 60.29096055030823, 'fit_time': np.float64(11.986431694030761), 'score_time': np.float64(0.020189905166625978), 'absolute_time': 1746709408.7806675, 'flatten_demographic_parity_ratio': '0.74_0.54_0.71_0.76_0.51', 'flatten_balanced_accuracy': '0.63_0.64_0.62_0.62_0.63'}
15
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 6, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.5304636907342688), 'balanced_accuracy': np.float64(0.6323218357916593), 'by_group': {'0_0': np.float64(0.78), '0_2': np.float64(0.85), '0_3': np.float64(0.62), '1_0': np.float64(1.0), '1_2': np.float64(0.84), '1_3': np.float64(0.74), '1_5': np.float64(0.72)}, 'status': 'success', 'total_time': 111.31129813194275, 'fit_time': np.float64(13.137963676452637), 'score_time': np.float64(0.013840961456298827), 'absolute_time': 1746709520.137449, 'flatten_demographic_parity_ratio': '0.43_0.54_0.77_0.61_0.31', 'flatten_balanced_accuracy': '0.64_0.64_0.62_0.62_0.64'}
16
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 19, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.3463904253361271), 'balanced_accuracy': np.float64(0.6785238161401382), 'by_group': {'0_0': np.float64(0.55), '0_2': np.float64(0.54), '0_3': np.float64(0.35), '1_0': np.float64(1.0), '1_2': np.float64(0.72), '1_3': np.float64(0.7), '1_5': np.float64(0.72)}, 'status': 'success', 'total_time': 2.1881587505340576, 'fit_time': np.float64(0.13907179832458497), 'score_time': np.float64(0.1337282180786133), 'absolute_time': 1746709522.3677444, 'flatten_demographic_parity_ratio': '0.28_0.42_0.49_0.42_0.13', 'flatten_balanced_accuracy': '0.68_0.69_0.67_0.68_0.68'}
17
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 4, 'max_features': 4, 'max_leaf_nodes': 3, 'min_samples_split': 4, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('PCA'), 'n_components': 3}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.5596425088862335), 'balanced_accuracy': np.float64(0.6284934404235122), 'by_group': {'0_0': np.float64(0.74), '0_2': np.float64(0.85), '0_3': np.float64(0.62), '1_0': np.float64(1.0), '1_2': np.float64(0.84), '1_3': np.float64(0.73), '1_5': np.float64(0.74)}, 'status': 'success', 'total_time': 34.200886964797974, 'fit_time': np.float64(6.7824913501739506), 'score_time': np.float64(0.014783287048339843), 'absolute_time': 1746709556.6116273, 'flatten_demographic_parity_ratio': '0.44_0.56_0.71_0.74_0.35', 'flatten_balanced_accuracy': '0.63_0.64_0.63_0.62_0.62'}
18
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 6, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('SelectKBest'), 'k': 9}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.5297115297054347), 'balanced_accuracy': np.float64(0.6289043707394035), 'by_group': {'0_0': np.float64(0.74), '0_2': np.float64(0.85), '0_3': np.float64(0.58), '1_0': np.float64(0.99), '1_2': np.float64(0.8), '1_3': np.float64(0.72), '1_5': np.float64(0.74)}, 'status': 'success', 'total_time': 117.87801432609558, 'fit_time': np.float64(8.696229219436646), 'score_time': np.float64(0.020975780487060548), 'absolute_time': 1746709675.3003547, 'flatten_demographic_parity_ratio': '0.41_0.65_0.7_0.57_0.33', 'flatten_balanced_accuracy': '0.65_0.61_0.63_0.62_0.64'}
AutoML: optimization done.
AutoML: miner done.
AutoML: export done.
Here is the standard output/error of the command:

Here is the standard output/error of the command:

Here is the standard output/error of the command:

hamlet_334225012
AutoML execution ended
