Sensitive groups ready!
Theory ready!
Theory:
step(normalization) :- true.
step(features) :- true.
step(mitigation) :- true.
step(rebalancing) :- true.
step(classification) :- true.
operator(normalization, power_transformer) :- true.
operator(normalization, robust_scaler) :- true.
operator(normalization, standard) :- true.
operator(normalization, minmax) :- true.
operator(features, select_k_best) :- true.
operator(features, pca) :- true.
operator(mitigation, corr_remover) :- true.
operator(mitigation, lfr) :- true.
operator(rebalancing, near_miss) :- true.
operator(rebalancing, smote) :- true.
operator(classification, knn) :- true.
operator(classification, nn) :- true.
operator(classification, rf) :- true.
hyperparameter(robust_scaler, with_centering, choice) :- true.
hyperparameter(robust_scaler, with_scaling, choice) :- true.
hyperparameter(standard, with_mean, choice) :- true.
hyperparameter(standard, with_std, choice) :- true.
hyperparameter(select_k_best, k, randint) :- true.
hyperparameter(pca, n_components, randint) :- true.
hyperparameter(corr_remover, alpha, choice) :- true.
hyperparameter(lfr, n_prototypes, choice) :- true.
hyperparameter(lfr, reconstruct_weight, choice) :- true.
hyperparameter(lfr, fairness_weight, choice) :- true.
hyperparameter(near_miss, n_neighbors, randint) :- true.
hyperparameter(smote, k_neighbors, randint) :- true.
hyperparameter(knn, n_neighbors, randint) :- true.
hyperparameter(knn, weights, choice) :- true.
hyperparameter(knn, metric, choice) :- true.
hyperparameter(nn, n_hidden_layers, choice) :- true.
hyperparameter(nn, n_neurons, choice) :- true.
hyperparameter(nn, activation, choice) :- true.
hyperparameter(nn, solver, choice) :- true.
hyperparameter(nn, alpha, choice) :- true.
hyperparameter(nn, learning_rate, choice) :- true.
hyperparameter(rf, n_estimators, choice) :- true.
hyperparameter(rf, max_depth, randint) :- true.
hyperparameter(rf, max_features, randint) :- true.
hyperparameter(rf, min_samples_split, randint) :- true.
hyperparameter(rf, max_leaf_nodes, randint) :- true.
hyperparameter(rf, bootstrap, choice) :- true.
hyperparameter(rf, criterion, choice) :- true.
domain(robust_scaler, with_centering, [true, false]) :- true.
domain(robust_scaler, with_scaling, [true, false]) :- true.
domain(standard, with_mean, [true, false]) :- true.
domain(standard, with_std, [true, false]) :- true.
domain(select_k_best, k, [1, 10]) :- true.
domain(pca, n_components, [1, 8]) :- true.
domain(corr_remover, alpha, [0.25, 0.5, 0.75, 1.0]) :- true.
domain(lfr, n_prototypes, [10, 50, 100, 200]) :- true.
domain(lfr, reconstruct_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(lfr, fairness_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(near_miss, n_neighbors, [1, 4]) :- true.
domain(smote, k_neighbors, [5, 8]) :- true.
domain(knn, n_neighbors, [3, 20]) :- true.
domain(knn, weights, [uniform, distance]) :- true.
domain(knn, metric, [minkowski, euclidean, manhattan]) :- true.
domain(nn, n_hidden_layers, [1, 5, 10, 20]) :- true.
domain(nn, n_neurons, [5, 10, 25, 50]) :- true.
domain(nn, activation, [logistic, tanh, relu]) :- true.
domain(nn, solver, [lbfgs, sgd, adam]) :- true.
domain(nn, alpha, [0.0001, 0.001, 0.01, 0.00001]) :- true.
domain(nn, learning_rate, [constant, invscaling, adaptive]) :- true.
domain(rf, n_estimators, [10, 25, 50, 75, 100]) :- true.
domain(rf, max_depth, [1, 5]) :- true.
domain(rf, max_features, [1, 4]) :- true.
domain(rf, min_samples_split, [2, 6]) :- true.
domain(rf, max_leaf_nodes, [2, 6]) :- true.
domain(rf, bootstrap, [true, false]) :- true.
domain(rf, criterion, [gini, entropy]) :- true.
':=>'(c1, mandatory([mitigation], classification)) :- true.
':=>'(c3, mandatory_order([mitigation, features], classification)) :- true.
':=>'(c4, mandatory_order([mitigation, normalization], classification)) :- true.
':=>'(c5, mandatory([normalization], knn)) :- true.
':=>'(c6, mandatory([normalization], nn)) :- true.
dataset(compass) :- true.
metric(balanced_accuracy) :- true.
fairness_metric(demographic_parity_ratio) :- true.
sensitive_feature(sex, [0, 1]) :- true.
sensitive_feature(race, [0, 1, 2, 3, 4, 5]) :- true.
pipeline([Step_1_0], ZZ_0) :- (step(Step_1_0), '\\='(Step_1_0, classification), operator(classification, ZZ_0)).
pipeline([Step_1_1, Step_2_0], ZZ_1) :- (step(Step_1_1), step(Step_2_0), '\\='(Step_1_1, classification), '\\='(Step_2_0, classification), '\\='(Step_1_1, Step_2_0), operator(classification, ZZ_1)).
pipeline([Step_1_2, Step_2_1, Step_3_0], ZZ_2) :- (step(Step_1_2), step(Step_2_1), step(Step_3_0), '\\='(Step_1_2, classification), '\\='(Step_2_1, classification), '\\='(Step_3_0, classification), '\\='(Step_1_2, Step_2_1), '\\='(Step_1_2, Step_3_0), '\\='(Step_2_1, Step_3_0), operator(classification, ZZ_2)).
pipeline([Step_1_3, Step_2_2, Step_3_1, Step_4_0], ZZ_3) :- (step(Step_1_3), step(Step_2_2), step(Step_3_1), step(Step_4_0), '\\='(Step_1_3, classification), '\\='(Step_2_2, classification), '\\='(Step_3_1, classification), '\\='(Step_4_0, classification), '\\='(Step_1_3, Step_2_2), '\\='(Step_1_3, Step_3_1), '\\='(Step_1_3, Step_4_0), '\\='(Step_2_2, Step_3_1), '\\='(Step_2_2, Step_4_0), '\\='(Step_3_1, Step_4_0), operator(classification, ZZ_3)).
':=>'(p615920, sensitive_group([0])) :- true.
':=>'(p561303, sensitive_group([1])) :- true.
':=>'(p448013, sensitive_group([0])) :- true.
':=>'(p80069, sensitive_group([1])) :- true.
':=>'(p319259, sensitive_group([2])) :- true.
':=>'(p167149, sensitive_group([3])) :- true.
':=>'(p199299, sensitive_group([4])) :- true.
':=>'(p953682, sensitive_group([5])) :- true.
':=>'(p468992, sensitive_group([0, 0])) :- true.
':=>'(p609054, sensitive_group([0, 1])) :- true.
':=>'(p801267, sensitive_group([0, 2])) :- true.
':=>'(p126702, sensitive_group([0, 3])) :- true.
':=>'(p602057, sensitive_group([0, 4])) :- true.
':=>'(p998761, sensitive_group([0, 5])) :- true.
':=>'(p300633, sensitive_group([1, 0])) :- true.
':=>'(p608007, sensitive_group([1, 1])) :- true.
':=>'(p929765, sensitive_group([1, 2])) :- true.
':=>'(p689127, sensitive_group([1, 3])) :- true.
':=>'(p518271, sensitive_group([1, 4])) :- true.
':=>'(p220023, sensitive_group([1, 5])) :- true.
':=>'(p514902, pipeline([], knn)) :- true.
':=>'(p706319, pipeline([], knn)) :- true.
':=>'(p200403, pipeline([], nn)) :- true.
':=>'(p650489, pipeline([], nn)) :- true.
':=>'(p978772, pipeline([], rf)) :- true.
':=>'(p242169, pipeline([normalization], knn)) :- true.
':=>'(p135722, pipeline([normalization], nn)) :- true.
':=>'(p984316, pipeline([normalization], rf)) :- true.
':=>'(p518140, pipeline([features], knn)) :- true.
':=>'(p755369, pipeline([features], knn)) :- true.
':=>'(p406265, pipeline([features], nn)) :- true.
':=>'(p789719, pipeline([features], nn)) :- true.
':=>'(p524371, pipeline([features], rf)) :- true.
':=>'(p104653, pipeline([mitigation], knn)) :- true.
':=>'(p841137, pipeline([mitigation], nn)) :- true.
':=>'(p499129, pipeline([rebalancing], knn)) :- true.
':=>'(p953295, pipeline([rebalancing], knn)) :- true.
':=>'(p362246, pipeline([rebalancing], nn)) :- true.
':=>'(p626612, pipeline([rebalancing], nn)) :- true.
':=>'(p246579, pipeline([rebalancing], rf)) :- true.
':=>'(p943618, pipeline([normalization, features], knn)) :- true.
':=>'(p870369, pipeline([normalization, features], nn)) :- true.
':=>'(p518209, pipeline([normalization, features], rf)) :- true.
':=>'(p891506, pipeline([normalization, mitigation], knn)) :- true.
':=>'(p335661, pipeline([normalization, mitigation], nn)) :- true.
':=>'(p782843, pipeline([normalization, mitigation], rf)) :- true.
':=>'(p45693, pipeline([normalization, rebalancing], knn)) :- true.
':=>'(p660859, pipeline([normalization, rebalancing], nn)) :- true.
':=>'(p585074, pipeline([normalization, rebalancing], rf)) :- true.
':=>'(p866015, pipeline([features, normalization], knn)) :- true.
':=>'(p95140, pipeline([features, normalization], nn)) :- true.
':=>'(p329089, pipeline([features, normalization], rf)) :- true.
':=>'(p648118, pipeline([features, mitigation], knn)) :- true.
':=>'(p178818, pipeline([features, mitigation], knn)) :- true.
':=>'(p543163, pipeline([features, mitigation], nn)) :- true.
':=>'(p187432, pipeline([features, mitigation], nn)) :- true.
':=>'(p532598, pipeline([features, mitigation], rf)) :- true.
':=>'(p233052, pipeline([features, rebalancing], knn)) :- true.
':=>'(p24112, pipeline([features, rebalancing], knn)) :- true.
':=>'(p187363, pipeline([features, rebalancing], nn)) :- true.
':=>'(p197302, pipeline([features, rebalancing], nn)) :- true.
':=>'(p989544, pipeline([features, rebalancing], rf)) :- true.
':=>'(p544910, pipeline([mitigation, features], knn)) :- true.
':=>'(p674002, pipeline([mitigation, features], nn)) :- true.
':=>'(p475738, pipeline([mitigation, rebalancing], knn)) :- true.
':=>'(p560183, pipeline([mitigation, rebalancing], nn)) :- true.
':=>'(p711994, pipeline([rebalancing, normalization], knn)) :- true.
':=>'(p143256, pipeline([rebalancing, normalization], nn)) :- true.
':=>'(p262625, pipeline([rebalancing, normalization], rf)) :- true.
':=>'(p57547, pipeline([rebalancing, features], knn)) :- true.
':=>'(p550043, pipeline([rebalancing, features], knn)) :- true.
':=>'(p270388, pipeline([rebalancing, features], nn)) :- true.
':=>'(p496337, pipeline([rebalancing, features], nn)) :- true.
':=>'(p617175, pipeline([rebalancing, features], rf)) :- true.
':=>'(p255896, pipeline([rebalancing, mitigation], knn)) :- true.
':=>'(p435428, pipeline([rebalancing, mitigation], nn)) :- true.
':=>'(p48471, pipeline([normalization, features, mitigation], knn)) :- true.
':=>'(p443187, pipeline([normalization, features, mitigation], knn)) :- true.
':=>'(p622210, pipeline([normalization, features, mitigation], nn)) :- true.
':=>'(p515194, pipeline([normalization, features, mitigation], nn)) :- true.
':=>'(p670735, pipeline([normalization, features, mitigation], rf)) :- true.
':=>'(p268917, pipeline([normalization, features, mitigation], rf)) :- true.
':=>'(p635569, pipeline([normalization, features, rebalancing], knn)) :- true.
':=>'(p395106, pipeline([normalization, features, rebalancing], nn)) :- true.
':=>'(p892539, pipeline([normalization, features, rebalancing], rf)) :- true.
':=>'(p79944, pipeline([normalization, mitigation, features], knn)) :- true.
':=>'(p796452, pipeline([normalization, mitigation, features], nn)) :- true.
':=>'(p222014, pipeline([normalization, mitigation, features], rf)) :- true.
':=>'(p77121, pipeline([normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p295715, pipeline([normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p893592, pipeline([normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p374125, pipeline([normalization, rebalancing, features], knn)) :- true.
':=>'(p735648, pipeline([normalization, rebalancing, features], nn)) :- true.
':=>'(p727370, pipeline([normalization, rebalancing, features], rf)) :- true.
':=>'(p370393, pipeline([normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p84126, pipeline([normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p930497, pipeline([normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p276408, pipeline([features, normalization, mitigation], knn)) :- true.
':=>'(p54746, pipeline([features, normalization, mitigation], knn)) :- true.
':=>'(p919159, pipeline([features, normalization, mitigation], nn)) :- true.
':=>'(p344158, pipeline([features, normalization, mitigation], nn)) :- true.
':=>'(p400339, pipeline([features, normalization, mitigation], rf)) :- true.
':=>'(p871448, pipeline([features, normalization, mitigation], rf)) :- true.
':=>'(p901543, pipeline([features, normalization, rebalancing], knn)) :- true.
':=>'(p322467, pipeline([features, normalization, rebalancing], nn)) :- true.
':=>'(p238961, pipeline([features, normalization, rebalancing], rf)) :- true.
':=>'(p872660, pipeline([features, mitigation, normalization], knn)) :- true.
':=>'(p618105, pipeline([features, mitigation, normalization], nn)) :- true.
':=>'(p355317, pipeline([features, mitigation, normalization], rf)) :- true.
':=>'(p456111, pipeline([features, mitigation, rebalancing], knn)) :- true.
':=>'(p170583, pipeline([features, mitigation, rebalancing], knn)) :- true.
':=>'(p696791, pipeline([features, mitigation, rebalancing], nn)) :- true.
':=>'(p464992, pipeline([features, mitigation, rebalancing], nn)) :- true.
':=>'(p383853, pipeline([features, mitigation, rebalancing], rf)) :- true.
':=>'(p703474, pipeline([features, rebalancing, normalization], knn)) :- true.
':=>'(p478100, pipeline([features, rebalancing, normalization], nn)) :- true.
':=>'(p278399, pipeline([features, rebalancing, normalization], rf)) :- true.
':=>'(p73278, pipeline([features, rebalancing, mitigation], knn)) :- true.
':=>'(p383305, pipeline([features, rebalancing, mitigation], knn)) :- true.
':=>'(p771134, pipeline([features, rebalancing, mitigation], nn)) :- true.
':=>'(p96666, pipeline([features, rebalancing, mitigation], nn)) :- true.
':=>'(p752724, pipeline([features, rebalancing, mitigation], rf)) :- true.
':=>'(p875836, pipeline([mitigation, features, rebalancing], knn)) :- true.
':=>'(p165999, pipeline([mitigation, features, rebalancing], nn)) :- true.
':=>'(p809676, pipeline([mitigation, rebalancing, features], knn)) :- true.
':=>'(p980222, pipeline([mitigation, rebalancing, features], nn)) :- true.
':=>'(p723125, pipeline([rebalancing, normalization, features], knn)) :- true.
':=>'(p533812, pipeline([rebalancing, normalization, features], nn)) :- true.
':=>'(p277317, pipeline([rebalancing, normalization, features], rf)) :- true.
':=>'(p952017, pipeline([rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p594561, pipeline([rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p870728, pipeline([rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p202969, pipeline([rebalancing, features, normalization], knn)) :- true.
':=>'(p449173, pipeline([rebalancing, features, normalization], nn)) :- true.
':=>'(p785746, pipeline([rebalancing, features, normalization], rf)) :- true.
':=>'(p348377, pipeline([rebalancing, features, mitigation], knn)) :- true.
':=>'(p44168, pipeline([rebalancing, features, mitigation], knn)) :- true.
':=>'(p834993, pipeline([rebalancing, features, mitigation], nn)) :- true.
':=>'(p415472, pipeline([rebalancing, features, mitigation], nn)) :- true.
':=>'(p517791, pipeline([rebalancing, features, mitigation], rf)) :- true.
':=>'(p248539, pipeline([rebalancing, mitigation, features], knn)) :- true.
':=>'(p172611, pipeline([rebalancing, mitigation, features], nn)) :- true.
':=>'(p278759, pipeline([normalization, features, mitigation, rebalancing], knn)) :- true.
':=>'(p425396, pipeline([normalization, features, mitigation, rebalancing], knn)) :- true.
':=>'(p239783, pipeline([normalization, features, mitigation, rebalancing], nn)) :- true.
':=>'(p621841, pipeline([normalization, features, mitigation, rebalancing], nn)) :- true.
':=>'(p418304, pipeline([normalization, features, mitigation, rebalancing], rf)) :- true.
':=>'(p725240, pipeline([normalization, features, mitigation, rebalancing], rf)) :- true.
':=>'(p141755, pipeline([normalization, features, rebalancing, mitigation], knn)) :- true.
':=>'(p906, pipeline([normalization, features, rebalancing, mitigation], knn)) :- true.
':=>'(p680320, pipeline([normalization, features, rebalancing, mitigation], nn)) :- true.
':=>'(p820729, pipeline([normalization, features, rebalancing, mitigation], nn)) :- true.
':=>'(p40050, pipeline([normalization, features, rebalancing, mitigation], rf)) :- true.
':=>'(p795025, pipeline([normalization, features, rebalancing, mitigation], rf)) :- true.
':=>'(p856313, pipeline([normalization, mitigation, features, rebalancing], knn)) :- true.
':=>'(p299010, pipeline([normalization, mitigation, features, rebalancing], nn)) :- true.
':=>'(p311508, pipeline([normalization, mitigation, features, rebalancing], rf)) :- true.
':=>'(p646594, pipeline([normalization, mitigation, rebalancing, features], knn)) :- true.
':=>'(p222338, pipeline([normalization, mitigation, rebalancing, features], nn)) :- true.
':=>'(p838143, pipeline([normalization, mitigation, rebalancing, features], rf)) :- true.
':=>'(p672260, pipeline([normalization, rebalancing, features, mitigation], knn)) :- true.
':=>'(p98167, pipeline([normalization, rebalancing, features, mitigation], knn)) :- true.
':=>'(p924824, pipeline([normalization, rebalancing, features, mitigation], nn)) :- true.
':=>'(p882198, pipeline([normalization, rebalancing, features, mitigation], nn)) :- true.
':=>'(p833238, pipeline([normalization, rebalancing, features, mitigation], rf)) :- true.
':=>'(p165874, pipeline([normalization, rebalancing, features, mitigation], rf)) :- true.
':=>'(p228416, pipeline([normalization, rebalancing, mitigation, features], knn)) :- true.
':=>'(p898741, pipeline([normalization, rebalancing, mitigation, features], nn)) :- true.
':=>'(p948251, pipeline([normalization, rebalancing, mitigation, features], rf)) :- true.
':=>'(p225714, pipeline([features, normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p207890, pipeline([features, normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p146685, pipeline([features, normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p819657, pipeline([features, normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p447076, pipeline([features, normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p13292, pipeline([features, normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p950595, pipeline([features, normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p706356, pipeline([features, normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p151405, pipeline([features, normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p811969, pipeline([features, normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p403399, pipeline([features, normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p763699, pipeline([features, normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p303806, pipeline([features, mitigation, normalization, rebalancing], knn)) :- true.
':=>'(p735090, pipeline([features, mitigation, normalization, rebalancing], nn)) :- true.
':=>'(p387582, pipeline([features, mitigation, normalization, rebalancing], rf)) :- true.
':=>'(p99078, pipeline([features, mitigation, rebalancing, normalization], knn)) :- true.
':=>'(p555077, pipeline([features, mitigation, rebalancing, normalization], nn)) :- true.
':=>'(p317412, pipeline([features, mitigation, rebalancing, normalization], rf)) :- true.
':=>'(p701529, pipeline([features, rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p101987, pipeline([features, rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p547896, pipeline([features, rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p83934, pipeline([features, rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p615264, pipeline([features, rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p321040, pipeline([features, rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p131696, pipeline([features, rebalancing, mitigation, normalization], knn)) :- true.
':=>'(p918813, pipeline([features, rebalancing, mitigation, normalization], nn)) :- true.
':=>'(p877491, pipeline([features, rebalancing, mitigation, normalization], rf)) :- true.
':=>'(p699130, pipeline([rebalancing, normalization, features, mitigation], knn)) :- true.
':=>'(p65262, pipeline([rebalancing, normalization, features, mitigation], knn)) :- true.
':=>'(p27629, pipeline([rebalancing, normalization, features, mitigation], nn)) :- true.
':=>'(p542739, pipeline([rebalancing, normalization, features, mitigation], nn)) :- true.
':=>'(p664469, pipeline([rebalancing, normalization, features, mitigation], rf)) :- true.
':=>'(p49911, pipeline([rebalancing, normalization, features, mitigation], rf)) :- true.
':=>'(p948235, pipeline([rebalancing, normalization, mitigation, features], knn)) :- true.
':=>'(p333667, pipeline([rebalancing, normalization, mitigation, features], nn)) :- true.
':=>'(p177537, pipeline([rebalancing, normalization, mitigation, features], rf)) :- true.
':=>'(p630912, pipeline([rebalancing, features, normalization, mitigation], knn)) :- true.
':=>'(p860890, pipeline([rebalancing, features, normalization, mitigation], knn)) :- true.
':=>'(p973436, pipeline([rebalancing, features, normalization, mitigation], nn)) :- true.
':=>'(p905156, pipeline([rebalancing, features, normalization, mitigation], nn)) :- true.
':=>'(p552022, pipeline([rebalancing, features, normalization, mitigation], rf)) :- true.
':=>'(p198225, pipeline([rebalancing, features, normalization, mitigation], rf)) :- true.
':=>'(p575684, pipeline([rebalancing, features, mitigation, normalization], knn)) :- true.
':=>'(p427920, pipeline([rebalancing, features, mitigation, normalization], nn)) :- true.
':=>'(p673124, pipeline([rebalancing, features, mitigation, normalization], rf)) :- true.

Checking Config
Exporting Config
Saving Graph
Exporting AutoML input
Exporting Space
Exporting Constraints
Input created for iteration Config(iteration=4, dataset=compass, metric=balanced_accuracy, fairnessMetric=demographic_parity_ratio, sensitiveFeatures=[sex, race], mode=max, batchSize=999999, timeBudget=900, seed=42)
Here is the standard output/error of the command:

365200bd0ff41cda516ca6918aa743680aabb00591cee704576f1b1c52239a71
Here is the standard output/error of the command:

Here is the standard output/error of the command:

WARNING:root:No module named 'rpy2': FairAdapt will be unavailable. To install, run:
pip install 'aif360[FairAdapt]'
INFO:flaml.tune.searcher.blendsearch:No low-cost partial config given to the search algorithm. For cost-frugal search, consider providing low-cost values for cost-related hps via 'low_cost_partial_config'. More info can be found at https://microsoft.github.io/FLAML/docs/FAQ#about-low_cost_partial_config-in-tune
Trying to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Added successfully: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Trying to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: normalization == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
AutoML: starting optimization.
56
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.6647244607846923), 'balanced_accuracy': np.float64(0.6208786905967214), 'by_group': {'0_0': np.float64(0.81), '0_2': np.float64(0.91), '0_3': np.float64(0.7), '1_0': np.float64(0.98), '1_2': np.float64(0.85), '1_3': np.float64(0.78), '1_5': np.float64(0.8)}, 'status': 'success', 'total_time': 94.59544014930725, 'fit_time': np.float64(18.8518132686615), 'score_time': np.float64(0.022019004821777342), 'absolute_time': 1746712030.0048268, 'flatten_demographic_parity_ratio': '0.55_0.68_0.79_0.54_0.77', 'flatten_balanced_accuracy': '0.65_0.62_0.61_0.61_0.61'}
57
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(10), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.4395830715092982), 'balanced_accuracy': np.float64(0.594969963389824), 'by_group': {'0_0': np.float64(0.57), '0_2': np.float64(0.66), '0_3': np.float64(0.49), '1_0': np.float64(1.0), '1_2': np.float64(0.68), '1_3': np.float64(0.58), '1_5': np.float64(0.62)}, 'status': 'success', 'total_time': 55.514267444610596, 'fit_time': np.float64(11.043307256698608), 'score_time': np.float64(0.01659393310546875), 'absolute_time': 1746712085.6079779, 'flatten_demographic_parity_ratio': '0.0_0.45_0.69_0.55_0.51', 'flatten_balanced_accuracy': '0.5_0.61_0.62_0.61_0.64'}
58
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(25), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.6173892089326062), 'balanced_accuracy': np.float64(0.6231345303338504), 'by_group': {'0_0': np.float64(0.78), '0_2': np.float64(0.82), '0_3': np.float64(0.64), '1_0': np.float64(1.0), '1_2': np.float64(0.84), '1_3': np.float64(0.77), '1_5': np.float64(0.8)}, 'status': 'success', 'total_time': 38.61995077133179, 'fit_time': np.float64(7.505001735687256), 'score_time': np.float64(0.06663298606872559), 'absolute_time': 1746712124.3135145, 'flatten_demographic_parity_ratio': '0.51_0.59_0.73_0.61_0.64', 'flatten_balanced_accuracy': '0.65_0.63_0.62_0.61_0.61'}
59
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.6988367985741091), 'balanced_accuracy': np.float64(0.5971660983299438), 'by_group': {'0_0': np.float64(0.85), '0_2': np.float64(0.94), '0_3': np.float64(0.7), '1_0': np.float64(0.99), '1_2': np.float64(0.9), '1_3': np.float64(0.83), '1_5': np.float64(0.86)}, 'status': 'success', 'total_time': 71.30847525596619, 'fit_time': np.float64(14.189387083053589), 'score_time': np.float64(0.02513861656188965), 'absolute_time': 1746712195.7113473, 'flatten_demographic_parity_ratio': '0.99_0.64_0.81_0.75_0.3', 'flatten_balanced_accuracy': '0.5_0.62_0.6_0.62_0.64'}
60
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.5572749943182292), 'balanced_accuracy': np.float64(0.6299857863942508), 'by_group': {'0_0': np.float64(0.78), '0_2': np.float64(0.87), '0_3': np.float64(0.56), '1_0': np.float64(0.99), '1_2': np.float64(0.85), '1_3': np.float64(0.76), '1_5': np.float64(0.76)}, 'status': 'success', 'total_time': 314.98859000205994, 'fit_time': np.float64(62.78572573661804), 'score_time': np.float64(0.05837702751159668), 'absolute_time': 1746712510.800565, 'flatten_demographic_parity_ratio': '0.44_0.53_0.78_0.75_0.3', 'flatten_balanced_accuracy': '0.64_0.65_0.6_0.62_0.64'}
61
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.5944501559999458), 'balanced_accuracy': np.float64(0.624436805577747), 'by_group': {'0_0': np.float64(0.74), '0_2': np.float64(0.89), '0_3': np.float64(0.64), '1_0': np.float64(0.99), '1_2': np.float64(0.83), '1_3': np.float64(0.74), '1_5': np.float64(0.77)}, 'status': 'success', 'total_time': 80.80016493797302, 'fit_time': np.float64(15.948274707794189), 'score_time': np.float64(0.07410855293273926), 'absolute_time': 1746712591.693308, 'flatten_demographic_parity_ratio': '0.47_0.68_0.71_0.75_0.36', 'flatten_balanced_accuracy': '0.62_0.62_0.63_0.62_0.62'}
62
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(25), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.5437990457741247), 'balanced_accuracy': np.float64(0.6324796984059723), 'by_group': {'0_0': np.float64(0.72), '0_2': np.float64(0.81), '0_3': np.float64(0.56), '1_0': np.float64(1.0), '1_2': np.float64(0.83), '1_3': np.float64(0.74), '1_5': np.float64(0.73)}, 'status': 'success', 'total_time': 41.56416082382202, 'fit_time': np.float64(8.078746891021728), 'score_time': np.float64(0.08912668228149415), 'absolute_time': 1746712633.348941, 'flatten_demographic_parity_ratio': '0.42_0.59_0.73_0.64_0.34', 'flatten_balanced_accuracy': '0.64_0.63_0.63_0.63_0.63'}
63
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 3}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.5427536350781306), 'balanced_accuracy': np.float64(0.6266170196358372), 'by_group': {'0_0': np.float64(0.7), '0_2': np.float64(0.81), '0_3': np.float64(0.6), '1_0': np.float64(1.0), '1_2': np.float64(0.82), '1_3': np.float64(0.72), '1_5': np.float64(0.73)}, 'status': 'success', 'total_time': 75.0728509426117, 'fit_time': np.float64(14.786824321746826), 'score_time': np.float64(0.06236281394958496), 'absolute_time': 1746712708.522418, 'flatten_demographic_parity_ratio': '0.46_0.57_0.71_0.62_0.36', 'flatten_balanced_accuracy': '0.63_0.64_0.63_0.62_0.62'}
64
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'demographic_parity_ratio': np.float64(0.5519014919469036), 'balanced_accuracy': np.float64(0.6288216076183272), 'by_group': {'0_0': np.float64(0.74), '0_2': np.float64(0.85), '0_3': np.float64(0.59), '1_0': np.float64(0.98), '1_2': np.float64(0.8), '1_3': np.float64(0.73), '1_5': np.float64(0.74)}, 'status': 'success', 'total_time': 61.906797885894775, 'fit_time': np.float64(6.860813093185425), 'score_time': np.float64(0.01358480453491211), 'absolute_time': 1746712771.370399, 'flatten_demographic_parity_ratio': '0.44_0.66_0.72_0.59_0.35', 'flatten_balanced_accuracy': '0.64_0.63_0.63_0.61_0.64'}
65
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.5758104729791792), 'balanced_accuracy': np.float64(0.6333122727577817), 'by_group': {'0_0': np.float64(0.8), '0_2': np.float64(0.86), '0_3': np.float64(0.59), '1_0': np.float64(1.0), '1_2': np.float64(0.87), '1_3': np.float64(0.75), '1_5': np.float64(0.78)}, 'status': 'success', 'total_time': 39.57514238357544, 'fit_time': np.float64(7.0533270835876465), 'score_time': np.float64(0.029265546798706056), 'absolute_time': 1746712811.0433624, 'flatten_demographic_parity_ratio': '0.52_0.51_0.75_0.77_0.33', 'flatten_balanced_accuracy': '0.64_0.65_0.63_0.62_0.63'}
66
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_split': 5, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.6426087924596844), 'balanced_accuracy': np.float64(0.6225589220674266), 'by_group': {'0_0': np.float64(0.8), '0_2': np.float64(0.86), '0_3': np.float64(0.66), '1_0': np.float64(0.98), '1_2': np.float64(0.84), '1_3': np.float64(0.76), '1_5': np.float64(0.79)}, 'status': 'success', 'total_time': 19.816898822784424, 'fit_time': np.float64(3.902055358886719), 'score_time': np.float64(0.01687479019165039), 'absolute_time': 1746712830.9679043, 'flatten_demographic_parity_ratio': '0.55_0.6_0.7_0.58_0.78', 'flatten_balanced_accuracy': '0.64_0.62_0.62_0.64_0.6'}
AutoML: optimization done.
AutoML: miner done.
AutoML: export done.
Here is the standard output/error of the command:

Here is the standard output/error of the command:

Here is the standard output/error of the command:

hamlet_157352661
AutoML execution ended
