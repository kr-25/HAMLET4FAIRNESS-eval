Sensitive groups ready!
Theory ready!
Theory:
step(normalization) :- true.
step(features) :- true.
step(mitigation) :- true.
step(rebalancing) :- true.
step(classification) :- true.
operator(normalization, power_transformer) :- true.
operator(normalization, robust_scaler) :- true.
operator(normalization, standard) :- true.
operator(normalization, minmax) :- true.
operator(features, select_k_best) :- true.
operator(features, pca) :- true.
operator(mitigation, corr_remover) :- true.
operator(mitigation, lfr) :- true.
operator(rebalancing, near_miss) :- true.
operator(rebalancing, smote) :- true.
operator(classification, knn) :- true.
operator(classification, nn) :- true.
operator(classification, rf) :- true.
hyperparameter(robust_scaler, with_centering, choice) :- true.
hyperparameter(robust_scaler, with_scaling, choice) :- true.
hyperparameter(standard, with_mean, choice) :- true.
hyperparameter(standard, with_std, choice) :- true.
hyperparameter(select_k_best, k, randint) :- true.
hyperparameter(pca, n_components, randint) :- true.
hyperparameter(corr_remover, alpha, choice) :- true.
hyperparameter(lfr, n_prototypes, choice) :- true.
hyperparameter(lfr, reconstruct_weight, choice) :- true.
hyperparameter(lfr, fairness_weight, choice) :- true.
hyperparameter(near_miss, n_neighbors, randint) :- true.
hyperparameter(smote, k_neighbors, randint) :- true.
hyperparameter(knn, n_neighbors, randint) :- true.
hyperparameter(knn, weights, choice) :- true.
hyperparameter(knn, metric, choice) :- true.
hyperparameter(nn, n_hidden_layers, choice) :- true.
hyperparameter(nn, n_neurons, choice) :- true.
hyperparameter(nn, activation, choice) :- true.
hyperparameter(nn, solver, choice) :- true.
hyperparameter(nn, alpha, choice) :- true.
hyperparameter(nn, learning_rate, choice) :- true.
hyperparameter(rf, n_estimators, choice) :- true.
hyperparameter(rf, max_depth, randint) :- true.
hyperparameter(rf, max_features, randint) :- true.
hyperparameter(rf, min_samples_split, randint) :- true.
hyperparameter(rf, max_leaf_nodes, randint) :- true.
hyperparameter(rf, bootstrap, choice) :- true.
hyperparameter(rf, criterion, choice) :- true.
domain(robust_scaler, with_centering, [true, false]) :- true.
domain(robust_scaler, with_scaling, [true, false]) :- true.
domain(standard, with_mean, [true, false]) :- true.
domain(standard, with_std, [true, false]) :- true.
domain(select_k_best, k, [1, 10]) :- true.
domain(pca, n_components, [1, 8]) :- true.
domain(corr_remover, alpha, [0.25, 0.5, 0.75, 1.0]) :- true.
domain(lfr, n_prototypes, [10, 50, 100, 200]) :- true.
domain(lfr, reconstruct_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(lfr, fairness_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(near_miss, n_neighbors, [1, 4]) :- true.
domain(smote, k_neighbors, [5, 8]) :- true.
domain(knn, n_neighbors, [3, 20]) :- true.
domain(knn, weights, [uniform, distance]) :- true.
domain(knn, metric, [minkowski, euclidean, manhattan]) :- true.
domain(nn, n_hidden_layers, [1, 5, 10, 20]) :- true.
domain(nn, n_neurons, [5, 10, 25, 50]) :- true.
domain(nn, activation, [logistic, tanh, relu]) :- true.
domain(nn, solver, [lbfgs, sgd, adam]) :- true.
domain(nn, alpha, [0.0001, 0.001, 0.01, 0.00001]) :- true.
domain(nn, learning_rate, [constant, invscaling, adaptive]) :- true.
domain(rf, n_estimators, [10, 25, 50, 75, 100]) :- true.
domain(rf, max_depth, [1, 5]) :- true.
domain(rf, max_features, [1, 4]) :- true.
domain(rf, min_samples_split, [2, 6]) :- true.
domain(rf, max_leaf_nodes, [2, 6]) :- true.
domain(rf, bootstrap, [true, false]) :- true.
domain(rf, criterion, [gini, entropy]) :- true.
':=>'(c1, mandatory([mitigation], classification)) :- true.
':=>'(c3, mandatory_order([mitigation, features], classification)) :- true.
':=>'(c4, mandatory_order([mitigation, normalization], classification)) :- true.
':=>'(c5, mandatory([normalization], knn)) :- true.
':=>'(c6, mandatory([normalization], nn)) :- true.
dataset(compass) :- true.
metric(balanced_accuracy) :- true.
fairness_metric(demographic_parity_ratio) :- true.
sensitive_feature(sex, [0, 1]) :- true.
sensitive_feature(race, [0, 1, 2, 3, 4, 5]) :- true.
pipeline([Step_1_0], ZZ_0) :- (step(Step_1_0), '\\='(Step_1_0, classification), operator(classification, ZZ_0)).
pipeline([Step_1_1, Step_2_0], ZZ_1) :- (step(Step_1_1), step(Step_2_0), '\\='(Step_1_1, classification), '\\='(Step_2_0, classification), '\\='(Step_1_1, Step_2_0), operator(classification, ZZ_1)).
pipeline([Step_1_2, Step_2_1, Step_3_0], ZZ_2) :- (step(Step_1_2), step(Step_2_1), step(Step_3_0), '\\='(Step_1_2, classification), '\\='(Step_2_1, classification), '\\='(Step_3_0, classification), '\\='(Step_1_2, Step_2_1), '\\='(Step_1_2, Step_3_0), '\\='(Step_2_1, Step_3_0), operator(classification, ZZ_2)).
pipeline([Step_1_3, Step_2_2, Step_3_1, Step_4_0], ZZ_3) :- (step(Step_1_3), step(Step_2_2), step(Step_3_1), step(Step_4_0), '\\='(Step_1_3, classification), '\\='(Step_2_2, classification), '\\='(Step_3_1, classification), '\\='(Step_4_0, classification), '\\='(Step_1_3, Step_2_2), '\\='(Step_1_3, Step_3_1), '\\='(Step_1_3, Step_4_0), '\\='(Step_2_2, Step_3_1), '\\='(Step_2_2, Step_4_0), '\\='(Step_3_1, Step_4_0), operator(classification, ZZ_3)).
':=>'(p207005, sensitive_group([0])) :- true.
':=>'(p537114, sensitive_group([1])) :- true.
':=>'(p356049, sensitive_group([0])) :- true.
':=>'(p469187, sensitive_group([1])) :- true.
':=>'(p87420, sensitive_group([2])) :- true.
':=>'(p548634, sensitive_group([3])) :- true.
':=>'(p220744, sensitive_group([4])) :- true.
':=>'(p445712, sensitive_group([5])) :- true.
':=>'(p281756, sensitive_group([0, 0])) :- true.
':=>'(p39646, sensitive_group([0, 1])) :- true.
':=>'(p661612, sensitive_group([0, 2])) :- true.
':=>'(p7311, sensitive_group([0, 3])) :- true.
':=>'(p428704, sensitive_group([0, 4])) :- true.
':=>'(p922421, sensitive_group([0, 5])) :- true.
':=>'(p86768, sensitive_group([1, 0])) :- true.
':=>'(p749563, sensitive_group([1, 1])) :- true.
':=>'(p751328, sensitive_group([1, 2])) :- true.
':=>'(p3311, sensitive_group([1, 3])) :- true.
':=>'(p594184, sensitive_group([1, 4])) :- true.
':=>'(p674946, sensitive_group([1, 5])) :- true.
':=>'(p502219, pipeline([], knn)) :- true.
':=>'(p823353, pipeline([], knn)) :- true.
':=>'(p819436, pipeline([], nn)) :- true.
':=>'(p287039, pipeline([], nn)) :- true.
':=>'(p198426, pipeline([], rf)) :- true.
':=>'(p869812, pipeline([normalization], knn)) :- true.
':=>'(p822350, pipeline([normalization], nn)) :- true.
':=>'(p109311, pipeline([normalization], rf)) :- true.
':=>'(p659430, pipeline([features], knn)) :- true.
':=>'(p553546, pipeline([features], knn)) :- true.
':=>'(p541285, pipeline([features], nn)) :- true.
':=>'(p187425, pipeline([features], nn)) :- true.
':=>'(p630999, pipeline([features], rf)) :- true.
':=>'(p19232, pipeline([mitigation], knn)) :- true.
':=>'(p120220, pipeline([mitigation], nn)) :- true.
':=>'(p193149, pipeline([rebalancing], knn)) :- true.
':=>'(p251896, pipeline([rebalancing], knn)) :- true.
':=>'(p447379, pipeline([rebalancing], nn)) :- true.
':=>'(p151201, pipeline([rebalancing], nn)) :- true.
':=>'(p325901, pipeline([rebalancing], rf)) :- true.
':=>'(p723167, pipeline([normalization, features], knn)) :- true.
':=>'(p396474, pipeline([normalization, features], nn)) :- true.
':=>'(p384267, pipeline([normalization, features], rf)) :- true.
':=>'(p132111, pipeline([normalization, mitigation], knn)) :- true.
':=>'(p685208, pipeline([normalization, mitigation], nn)) :- true.
':=>'(p727818, pipeline([normalization, mitigation], rf)) :- true.
':=>'(p679503, pipeline([normalization, rebalancing], knn)) :- true.
':=>'(p458415, pipeline([normalization, rebalancing], nn)) :- true.
':=>'(p283597, pipeline([normalization, rebalancing], rf)) :- true.
':=>'(p650236, pipeline([features, normalization], knn)) :- true.
':=>'(p151093, pipeline([features, normalization], nn)) :- true.
':=>'(p80398, pipeline([features, normalization], rf)) :- true.
':=>'(p875963, pipeline([features, mitigation], knn)) :- true.
':=>'(p371052, pipeline([features, mitigation], knn)) :- true.
':=>'(p990902, pipeline([features, mitigation], nn)) :- true.
':=>'(p502201, pipeline([features, mitigation], nn)) :- true.
':=>'(p884428, pipeline([features, mitigation], rf)) :- true.
':=>'(p536863, pipeline([features, rebalancing], knn)) :- true.
':=>'(p395397, pipeline([features, rebalancing], knn)) :- true.
':=>'(p444060, pipeline([features, rebalancing], nn)) :- true.
':=>'(p700265, pipeline([features, rebalancing], nn)) :- true.
':=>'(p442154, pipeline([features, rebalancing], rf)) :- true.
':=>'(p532868, pipeline([mitigation, features], knn)) :- true.
':=>'(p286504, pipeline([mitigation, features], nn)) :- true.
':=>'(p99857, pipeline([mitigation, rebalancing], knn)) :- true.
':=>'(p163474, pipeline([mitigation, rebalancing], nn)) :- true.
':=>'(p60933, pipeline([rebalancing, normalization], knn)) :- true.
':=>'(p283465, pipeline([rebalancing, normalization], nn)) :- true.
':=>'(p25245, pipeline([rebalancing, normalization], rf)) :- true.
':=>'(p222156, pipeline([rebalancing, features], knn)) :- true.
':=>'(p371942, pipeline([rebalancing, features], knn)) :- true.
':=>'(p432676, pipeline([rebalancing, features], nn)) :- true.
':=>'(p27194, pipeline([rebalancing, features], nn)) :- true.
':=>'(p15410, pipeline([rebalancing, features], rf)) :- true.
':=>'(p330882, pipeline([rebalancing, mitigation], knn)) :- true.
':=>'(p210586, pipeline([rebalancing, mitigation], nn)) :- true.
':=>'(p694194, pipeline([normalization, features, mitigation], knn)) :- true.
':=>'(p788213, pipeline([normalization, features, mitigation], knn)) :- true.
':=>'(p163102, pipeline([normalization, features, mitigation], nn)) :- true.
':=>'(p609853, pipeline([normalization, features, mitigation], nn)) :- true.
':=>'(p286746, pipeline([normalization, features, mitigation], rf)) :- true.
':=>'(p978368, pipeline([normalization, features, mitigation], rf)) :- true.
':=>'(p705413, pipeline([normalization, features, rebalancing], knn)) :- true.
':=>'(p456769, pipeline([normalization, features, rebalancing], nn)) :- true.
':=>'(p261306, pipeline([normalization, features, rebalancing], rf)) :- true.
':=>'(p724756, pipeline([normalization, mitigation, features], knn)) :- true.
':=>'(p849880, pipeline([normalization, mitigation, features], nn)) :- true.
':=>'(p509523, pipeline([normalization, mitigation, features], rf)) :- true.
':=>'(p737503, pipeline([normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p802121, pipeline([normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p718835, pipeline([normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p581760, pipeline([normalization, rebalancing, features], knn)) :- true.
':=>'(p602146, pipeline([normalization, rebalancing, features], nn)) :- true.
':=>'(p982333, pipeline([normalization, rebalancing, features], rf)) :- true.
':=>'(p688907, pipeline([normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p764362, pipeline([normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p884658, pipeline([normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p898365, pipeline([features, normalization, mitigation], knn)) :- true.
':=>'(p932705, pipeline([features, normalization, mitigation], knn)) :- true.
':=>'(p247409, pipeline([features, normalization, mitigation], nn)) :- true.
':=>'(p455594, pipeline([features, normalization, mitigation], nn)) :- true.
':=>'(p318325, pipeline([features, normalization, mitigation], rf)) :- true.
':=>'(p866268, pipeline([features, normalization, mitigation], rf)) :- true.
':=>'(p932534, pipeline([features, normalization, rebalancing], knn)) :- true.
':=>'(p45823, pipeline([features, normalization, rebalancing], nn)) :- true.
':=>'(p986938, pipeline([features, normalization, rebalancing], rf)) :- true.
':=>'(p62302, pipeline([features, mitigation, normalization], knn)) :- true.
':=>'(p960652, pipeline([features, mitigation, normalization], nn)) :- true.
':=>'(p866486, pipeline([features, mitigation, normalization], rf)) :- true.
':=>'(p664323, pipeline([features, mitigation, rebalancing], knn)) :- true.
':=>'(p636161, pipeline([features, mitigation, rebalancing], knn)) :- true.
':=>'(p253188, pipeline([features, mitigation, rebalancing], nn)) :- true.
':=>'(p619291, pipeline([features, mitigation, rebalancing], nn)) :- true.
':=>'(p837052, pipeline([features, mitigation, rebalancing], rf)) :- true.
':=>'(p242928, pipeline([features, rebalancing, normalization], knn)) :- true.
':=>'(p324509, pipeline([features, rebalancing, normalization], nn)) :- true.
':=>'(p472501, pipeline([features, rebalancing, normalization], rf)) :- true.
':=>'(p266687, pipeline([features, rebalancing, mitigation], knn)) :- true.
':=>'(p159225, pipeline([features, rebalancing, mitigation], knn)) :- true.
':=>'(p664066, pipeline([features, rebalancing, mitigation], nn)) :- true.
':=>'(p528397, pipeline([features, rebalancing, mitigation], nn)) :- true.
':=>'(p871936, pipeline([features, rebalancing, mitigation], rf)) :- true.
':=>'(p521439, pipeline([mitigation, features, rebalancing], knn)) :- true.
':=>'(p763873, pipeline([mitigation, features, rebalancing], nn)) :- true.
':=>'(p465023, pipeline([mitigation, rebalancing, features], knn)) :- true.
':=>'(p830579, pipeline([mitigation, rebalancing, features], nn)) :- true.
':=>'(p866307, pipeline([rebalancing, normalization, features], knn)) :- true.
':=>'(p285294, pipeline([rebalancing, normalization, features], nn)) :- true.
':=>'(p409941, pipeline([rebalancing, normalization, features], rf)) :- true.
':=>'(p931443, pipeline([rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p729604, pipeline([rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p553780, pipeline([rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p709568, pipeline([rebalancing, features, normalization], knn)) :- true.
':=>'(p184179, pipeline([rebalancing, features, normalization], nn)) :- true.
':=>'(p920269, pipeline([rebalancing, features, normalization], rf)) :- true.
':=>'(p363316, pipeline([rebalancing, features, mitigation], knn)) :- true.
':=>'(p451290, pipeline([rebalancing, features, mitigation], knn)) :- true.
':=>'(p45411, pipeline([rebalancing, features, mitigation], nn)) :- true.
':=>'(p875401, pipeline([rebalancing, features, mitigation], nn)) :- true.
':=>'(p206571, pipeline([rebalancing, features, mitigation], rf)) :- true.
':=>'(p166617, pipeline([rebalancing, mitigation, features], knn)) :- true.
':=>'(p529525, pipeline([rebalancing, mitigation, features], nn)) :- true.
':=>'(p71128, pipeline([normalization, features, mitigation, rebalancing], knn)) :- true.
':=>'(p990665, pipeline([normalization, features, mitigation, rebalancing], knn)) :- true.
':=>'(p414427, pipeline([normalization, features, mitigation, rebalancing], nn)) :- true.
':=>'(p337036, pipeline([normalization, features, mitigation, rebalancing], nn)) :- true.
':=>'(p979171, pipeline([normalization, features, mitigation, rebalancing], rf)) :- true.
':=>'(p12855, pipeline([normalization, features, mitigation, rebalancing], rf)) :- true.
':=>'(p621468, pipeline([normalization, features, rebalancing, mitigation], knn)) :- true.
':=>'(p35852, pipeline([normalization, features, rebalancing, mitigation], knn)) :- true.
':=>'(p72725, pipeline([normalization, features, rebalancing, mitigation], nn)) :- true.
':=>'(p132051, pipeline([normalization, features, rebalancing, mitigation], nn)) :- true.
':=>'(p353953, pipeline([normalization, features, rebalancing, mitigation], rf)) :- true.
':=>'(p873579, pipeline([normalization, features, rebalancing, mitigation], rf)) :- true.
':=>'(p332222, pipeline([normalization, mitigation, features, rebalancing], knn)) :- true.
':=>'(p869647, pipeline([normalization, mitigation, features, rebalancing], nn)) :- true.
':=>'(p987424, pipeline([normalization, mitigation, features, rebalancing], rf)) :- true.
':=>'(p767129, pipeline([normalization, mitigation, rebalancing, features], knn)) :- true.
':=>'(p730107, pipeline([normalization, mitigation, rebalancing, features], nn)) :- true.
':=>'(p925178, pipeline([normalization, mitigation, rebalancing, features], rf)) :- true.
':=>'(p621703, pipeline([normalization, rebalancing, features, mitigation], knn)) :- true.
':=>'(p55063, pipeline([normalization, rebalancing, features, mitigation], knn)) :- true.
':=>'(p374329, pipeline([normalization, rebalancing, features, mitigation], nn)) :- true.
':=>'(p908705, pipeline([normalization, rebalancing, features, mitigation], nn)) :- true.
':=>'(p874470, pipeline([normalization, rebalancing, features, mitigation], rf)) :- true.
':=>'(p855837, pipeline([normalization, rebalancing, features, mitigation], rf)) :- true.
':=>'(p376617, pipeline([normalization, rebalancing, mitigation, features], knn)) :- true.
':=>'(p951250, pipeline([normalization, rebalancing, mitigation, features], nn)) :- true.
':=>'(p61175, pipeline([normalization, rebalancing, mitigation, features], rf)) :- true.
':=>'(p234538, pipeline([features, normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p62546, pipeline([features, normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p423610, pipeline([features, normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p477251, pipeline([features, normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p567706, pipeline([features, normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p437278, pipeline([features, normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p278165, pipeline([features, normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p442759, pipeline([features, normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p715889, pipeline([features, normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p940382, pipeline([features, normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p735805, pipeline([features, normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p867553, pipeline([features, normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p232434, pipeline([features, mitigation, normalization, rebalancing], knn)) :- true.
':=>'(p463928, pipeline([features, mitigation, normalization, rebalancing], nn)) :- true.
':=>'(p326760, pipeline([features, mitigation, normalization, rebalancing], rf)) :- true.
':=>'(p921009, pipeline([features, mitigation, rebalancing, normalization], knn)) :- true.
':=>'(p972163, pipeline([features, mitigation, rebalancing, normalization], nn)) :- true.
':=>'(p920397, pipeline([features, mitigation, rebalancing, normalization], rf)) :- true.
':=>'(p7577, pipeline([features, rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p718873, pipeline([features, rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p733345, pipeline([features, rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p850750, pipeline([features, rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p277791, pipeline([features, rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p623818, pipeline([features, rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p168046, pipeline([features, rebalancing, mitigation, normalization], knn)) :- true.
':=>'(p188330, pipeline([features, rebalancing, mitigation, normalization], nn)) :- true.
':=>'(p500003, pipeline([features, rebalancing, mitigation, normalization], rf)) :- true.
':=>'(p879090, pipeline([rebalancing, normalization, features, mitigation], knn)) :- true.
':=>'(p590676, pipeline([rebalancing, normalization, features, mitigation], knn)) :- true.
':=>'(p167572, pipeline([rebalancing, normalization, features, mitigation], nn)) :- true.
':=>'(p622981, pipeline([rebalancing, normalization, features, mitigation], nn)) :- true.
':=>'(p311569, pipeline([rebalancing, normalization, features, mitigation], rf)) :- true.
':=>'(p271560, pipeline([rebalancing, normalization, features, mitigation], rf)) :- true.
':=>'(p326358, pipeline([rebalancing, normalization, mitigation, features], knn)) :- true.
':=>'(p574316, pipeline([rebalancing, normalization, mitigation, features], nn)) :- true.
':=>'(p40011, pipeline([rebalancing, normalization, mitigation, features], rf)) :- true.
':=>'(p696919, pipeline([rebalancing, features, normalization, mitigation], knn)) :- true.
':=>'(p862888, pipeline([rebalancing, features, normalization, mitigation], knn)) :- true.
':=>'(p726511, pipeline([rebalancing, features, normalization, mitigation], nn)) :- true.
':=>'(p106697, pipeline([rebalancing, features, normalization, mitigation], nn)) :- true.
':=>'(p490802, pipeline([rebalancing, features, normalization, mitigation], rf)) :- true.
':=>'(p593377, pipeline([rebalancing, features, normalization, mitigation], rf)) :- true.
':=>'(p951718, pipeline([rebalancing, features, mitigation, normalization], knn)) :- true.
':=>'(p488754, pipeline([rebalancing, features, mitigation, normalization], nn)) :- true.
':=>'(p959914, pipeline([rebalancing, features, mitigation, normalization], rf)) :- true.

Checking Config
Exporting Config
Saving Graph
Exporting AutoML input
Exporting Space
Exporting Constraints
Input created for iteration Config(iteration=2, dataset=compass, metric=balanced_accuracy, fairnessMetric=demographic_parity_ratio, sensitiveFeatures=[sex, race], mode=max, batchSize=999999, timeBudget=900, seed=42)
Here is the standard output/error of the command:

37d22f4ad609a18a2d7f203e3bebf80703fb9d01dbf7544146fbde1c53d15694
Here is the standard output/error of the command:

Here is the standard output/error of the command:

WARNING:root:No module named 'rpy2': FairAdapt will be unavailable. To install, run:
pip install 'aif360[FairAdapt]'
INFO:flaml.tune.searcher.blendsearch:No low-cost partial config given to the search algorithm. For cost-frugal search, consider providing low-cost values for cost-related hps via 'low_cost_partial_config'. More info can be found at https://microsoft.github.io/FLAML/docs/FAQ#about-low_cost_partial_config-in-tune
Trying to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Added successfully: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Trying to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: normalization == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
AutoML: starting optimization.
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
19
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 4, 'max_leaf_nodes': 6, 'min_samples_split': 6, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.40912365132183054), 'balanced_accuracy': np.float64(0.6421906070541977), 'by_group': {'0_0': np.float64(0.59), '0_2': np.float64(0.63), '0_3': np.float64(0.41), '1_0': np.float64(1.0), '1_2': np.float64(0.78), '1_3': np.float64(0.66), '1_5': np.float64(0.63)}, 'status': 'success', 'total_time': 2.6753530502319336, 'fit_time': np.float64(0.421968412399292), 'score_time': np.float64(0.009821748733520508), 'absolute_time': 1746709798.4865592, 'flatten_demographic_parity_ratio': '0.36_0.31_0.58_0.52_0.27', 'flatten_balanced_accuracy': '0.65_0.65_0.64_0.63_0.64'}
20
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 4, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 6, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.2908925247099555), 'balanced_accuracy': np.float64(0.6771190497085954), 'by_group': {'0_0': np.float64(0.64), '0_2': np.float64(0.59), '0_3': np.float64(0.29), '1_0': np.float64(1.0), '1_2': np.float64(0.59), '1_3': np.float64(0.54), '1_5': np.float64(0.47)}, 'status': 'success', 'total_time': 2.401169776916504, 'fit_time': np.float64(0.4280110836029053), 'score_time': np.float64(0.010414505004882812), 'absolute_time': 1746709800.9413624, 'flatten_demographic_parity_ratio': '0.24_0.34_0.35_0.32_0.2', 'flatten_balanced_accuracy': '0.67_0.68_0.68_0.69_0.67'}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
21
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 2, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 6, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('SelectKBest'), 'k': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.5203990649355915), 'balanced_accuracy': np.float64(0.6579097995633446), 'by_group': {'0_0': np.float64(0.84), '0_2': np.float64(0.85), '0_3': np.float64(0.52), '1_0': np.float64(1.0), '1_2': np.float64(0.71), '1_3': np.float64(0.66), '1_5': np.float64(0.66)}, 'status': 'success', 'total_time': 2.4880237579345703, 'fit_time': np.float64(0.4161396026611328), 'score_time': np.float64(0.009447097778320312), 'absolute_time': 1746709803.4754443, 'flatten_demographic_parity_ratio': '0.47_0.57_0.47_0.62_0.47', 'flatten_balanced_accuracy': '0.66_0.67_0.65_0.66_0.65'}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
22
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 4, 'max_features': 4, 'max_leaf_nodes': 6, 'min_samples_split': 5, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.3604279808754904), 'balanced_accuracy': np.float64(0.6824319388701261), 'by_group': {'0_0': np.float64(0.68), '0_2': np.float64(0.67), '0_3': np.float64(0.36), '1_0': np.float64(1.0), '1_2': np.float64(0.67), '1_3': np.float64(0.59), '1_5': np.float64(0.56)}, 'status': 'success', 'total_time': 2.944760322570801, 'fit_time': np.float64(0.5054644584655762), 'score_time': np.float64(0.010382366180419923), 'absolute_time': 1746709806.4689095, 'flatten_demographic_parity_ratio': '0.29_0.32_0.45_0.38_0.36', 'flatten_balanced_accuracy': '0.67_0.7_0.69_0.68_0.67'}
23
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.1)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.6647244607846923), 'balanced_accuracy': np.float64(0.6208174160869175), 'by_group': {'0_0': np.float64(0.81), '0_2': np.float64(0.91), '0_3': np.float64(0.7), '1_0': np.float64(0.98), '1_2': np.float64(0.85), '1_3': np.float64(0.78), '1_5': np.float64(0.8)}, 'status': 'success', 'total_time': 74.67721223831177, 'fit_time': np.float64(14.740752458572388), 'score_time': np.float64(0.062329673767089845), 'absolute_time': 1746709881.1962025, 'flatten_demographic_parity_ratio': '0.55_0.68_0.79_0.54_0.77', 'flatten_balanced_accuracy': '0.65_0.62_0.61_0.61_0.61'}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
24
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 16, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.24043658167699306), 'balanced_accuracy': np.float64(0.6679934633273577), 'by_group': {'0_0': np.float64(0.51), '0_2': np.float64(0.5), '0_3': np.float64(0.24), '1_0': np.float64(1.0), '1_2': np.float64(0.6), '1_3': np.float64(0.54), '1_5': np.float64(0.55)}, 'status': 'success', 'total_time': 3.7310640811920166, 'fit_time': np.float64(0.10643386840820312), 'score_time': np.float64(0.29343514442443847), 'absolute_time': 1746709884.9829054, 'flatten_demographic_parity_ratio': '0.28_0.2_0.4_0.19_0.13', 'flatten_balanced_accuracy': '0.68_0.66_0.66_0.67_0.66'}
25
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 19, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.38179589035031997), 'balanced_accuracy': np.float64(0.6768778816172658), 'by_group': {'0_0': np.float64(0.53), '0_2': np.float64(0.52), '0_3': np.float64(0.38), '1_0': np.float64(1.0), '1_2': np.float64(0.7), '1_3': np.float64(0.7), '1_5': np.float64(0.7)}, 'status': 'success', 'total_time': 2.3420963287353516, 'fit_time': np.float64(0.09874124526977539), 'score_time': np.float64(0.1699831008911133), 'absolute_time': 1746709887.3795884, 'flatten_demographic_parity_ratio': '0.39_0.4_0.48_0.39_0.25', 'flatten_balanced_accuracy': '0.68_0.67_0.67_0.68_0.68'}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
26
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 5, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'demographic_parity_ratio': np.float64(0.40079416349009883), 'balanced_accuracy': np.float64(0.6806432454476773), 'by_group': {'0_0': np.float64(0.71), '0_2': np.float64(0.7), '0_3': np.float64(0.4), '1_0': np.float64(1.0), '1_2': np.float64(0.68), '1_3': np.float64(0.6), '1_5': np.float64(0.57)}, 'status': 'success', 'total_time': 3.294755697250366, 'fit_time': np.float64(0.5735296726226806), 'score_time': np.float64(0.010412836074829101), 'absolute_time': 1746709890.7270923, 'flatten_demographic_parity_ratio': '0.45_0.34_0.47_0.39_0.35', 'flatten_balanced_accuracy': '0.68_0.69_0.68_0.68_0.67'}
27
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.691249964727814), 'balanced_accuracy': np.float64(0.5966273339824086), 'by_group': {'0_0': np.float64(0.8), '0_2': np.float64(0.91), '0_3': np.float64(0.75), '1_0': np.float64(0.98), '1_2': np.float64(0.86), '1_3': np.float64(0.79), '1_5': np.float64(0.83)}, 'status': 'success', 'total_time': 44.042646408081055, 'fit_time': np.float64(8.646692132949829), 'score_time': np.float64(0.055597114562988284), 'absolute_time': 1746709935.4574873, 'flatten_demographic_parity_ratio': '0.99_0.73_0.69_0.55_0.51', 'flatten_balanced_accuracy': '0.51_0.61_0.62_0.61_0.64'}
28
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.5541278126051301), 'balanced_accuracy': np.float64(0.6276650209563975), 'by_group': {'0_0': np.float64(0.73), '0_2': np.float64(0.81), '0_3': np.float64(0.59), '1_0': np.float64(1.0), '1_2': np.float64(0.84), '1_3': np.float64(0.71), '1_5': np.float64(0.75)}, 'status': 'success', 'total_time': 32.955240964889526, 'fit_time': np.float64(6.537527370452881), 'score_time': np.float64(0.012331581115722657), 'absolute_time': 1746709968.5011277, 'flatten_demographic_parity_ratio': '0.51_0.59_0.71_0.6_0.35', 'flatten_balanced_accuracy': '0.65_0.63_0.62_0.62_0.63'}
29
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.6786469969521685), 'balanced_accuracy': np.float64(0.5980584553993744), 'by_group': {'0_0': np.float64(0.82), '0_2': np.float64(0.92), '0_3': np.float64(0.69), '1_0': np.float64(1.0), '1_2': np.float64(0.89), '1_3': np.float64(0.81), '1_5': np.float64(0.87)}, 'status': 'success', 'total_time': 36.97272777557373, 'fit_time': np.float64(7.326844310760498), 'score_time': np.float64(0.01944422721862793), 'absolute_time': 1746710005.5355291, 'flatten_demographic_parity_ratio': '0.99_0.66_0.68_0.76_0.3', 'flatten_balanced_accuracy': '0.5_0.62_0.6_0.62_0.64'}
30
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.5575858913880174), 'balanced_accuracy': np.float64(0.6295593917876224), 'by_group': {'0_0': np.float64(0.78), '0_2': np.float64(0.87), '0_3': np.float64(0.56), '1_0': np.float64(0.99), '1_2': np.float64(0.85), '1_3': np.float64(0.76), '1_5': np.float64(0.76)}, 'status': 'success', 'total_time': 40.642836570739746, 'fit_time': np.float64(8.075390815734863), 'score_time': np.float64(0.012329864501953124), 'absolute_time': 1746710046.2459297, 'flatten_demographic_parity_ratio': '0.44_0.53_0.78_0.75_0.3', 'flatten_balanced_accuracy': '0.64_0.65_0.6_0.62_0.64'}
31
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.5962510788691765), 'balanced_accuracy': np.float64(0.6244454880916291), 'by_group': {'0_0': np.float64(0.75), '0_2': np.float64(0.89), '0_3': np.float64(0.63), '1_0': np.float64(0.99), '1_2': np.float64(0.83), '1_3': np.float64(0.74), '1_5': np.float64(0.77)}, 'status': 'success', 'total_time': 38.49438667297363, 'fit_time': np.float64(7.636976671218872), 'score_time': np.float64(0.015195798873901368), 'absolute_time': 1746710084.8076642, 'flatten_demographic_parity_ratio': '0.47_0.68_0.71_0.76_0.36', 'flatten_balanced_accuracy': '0.62_0.62_0.63_0.62_0.62'}
32
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(50), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.5449806884399074), 'balanced_accuracy': np.float64(0.6325422714775426), 'by_group': {'0_0': np.float64(0.72), '0_2': np.float64(0.81), '0_3': np.float64(0.56), '1_0': np.float64(1.0), '1_2': np.float64(0.83), '1_3': np.float64(0.74), '1_5': np.float64(0.73)}, 'status': 'success', 'total_time': 49.31122803688049, 'fit_time': np.float64(9.788036251068116), 'score_time': np.float64(0.02883625030517578), 'absolute_time': 1746710134.1859515, 'flatten_demographic_parity_ratio': '0.42_0.59_0.73_0.64_0.34', 'flatten_balanced_accuracy': '0.64_0.63_0.63_0.63_0.63'}
33
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 5, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.36280288137906214), 'balanced_accuracy': np.float64(0.6412990468751524), 'by_group': {'0_0': np.float64(0.51), '0_2': np.float64(0.55), '0_3': np.float64(0.36), '1_0': np.float64(1.0), '1_2': np.float64(0.64), '1_3': np.float64(0.6), '1_5': np.float64(0.66)}, 'status': 'success', 'total_time': 2.1050355434417725, 'fit_time': np.float64(0.15604820251464843), 'score_time': np.float64(0.11797351837158203), 'absolute_time': 1746710136.360827, 'flatten_demographic_parity_ratio': '0.42_0.33_0.4_0.3_0.37', 'flatten_balanced_accuracy': '0.65_0.64_0.64_0.65_0.64'}
34
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 2, 'max_features': 4, 'max_leaf_nodes': 3, 'min_samples_split': 6, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('PCA'), 'n_components': 3}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.5479980306728519), 'balanced_accuracy': np.float64(0.6288448300544301), 'by_group': {'0_0': np.float64(0.72), '0_2': np.float64(0.82), '0_3': np.float64(0.59), '1_0': np.float64(1.0), '1_2': np.float64(0.82), '1_3': np.float64(0.72), '1_5': np.float64(0.73)}, 'status': 'success', 'total_time': 44.90784788131714, 'fit_time': np.float64(8.913403415679932), 'score_time': np.float64(0.019350481033325196), 'absolute_time': 1746710181.3418617, 'flatten_demographic_parity_ratio': '0.45_0.56_0.74_0.63_0.36', 'flatten_balanced_accuracy': '0.63_0.64_0.63_0.62_0.62'}
35
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 2, 'n_estimators': np.int64(75)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.5)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.49720260541624733), 'balanced_accuracy': np.float64(0.6253933330962065), 'by_group': {'0_0': np.float64(0.72), '0_2': np.float64(0.82), '0_3': np.float64(0.54), '1_0': np.float64(1.0), '1_2': np.float64(0.82), '1_3': np.float64(0.73), '1_5': np.float64(0.72)}, 'status': 'success', 'total_time': 45.528971433639526, 'fit_time': np.float64(9.038226127624512), 'score_time': np.float64(0.019756841659545898), 'absolute_time': 1746710227.7422867, 'flatten_demographic_parity_ratio': '0.48_0.4_0.73_0.53_0.34', 'flatten_balanced_accuracy': '0.62_0.62_0.64_0.61_0.63'}
36
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 2, 'n_estimators': np.int64(75)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(1.0)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.5094592985457238), 'balanced_accuracy': np.float64(0.6329371001970825), 'by_group': {'0_0': np.float64(0.76), '0_2': np.float64(0.84), '0_3': np.float64(0.55), '1_0': np.float64(1.0), '1_2': np.float64(0.84), '1_3': np.float64(0.74), '1_5': np.float64(0.75)}, 'status': 'success', 'total_time': 41.3076593875885, 'fit_time': np.float64(8.194623804092407), 'score_time': np.float64(0.019518661499023437), 'absolute_time': 1746710269.1220129, 'flatten_demographic_parity_ratio': '0.42_0.43_0.74_0.65_0.32', 'flatten_balanced_accuracy': '0.64_0.62_0.64_0.63_0.64'}
37
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 4, 'n_estimators': np.int64(75)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.5)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.5627733247075086), 'balanced_accuracy': np.float64(0.6285074372330998), 'by_group': {'0_0': np.float64(0.75), '0_2': np.float64(0.87), '0_3': np.float64(0.61), '1_0': np.float64(0.98), '1_2': np.float64(0.82), '1_3': np.float64(0.74), '1_5': np.float64(0.77)}, 'status': 'success', 'total_time': 50.94204616546631, 'fit_time': np.float64(10.120225954055787), 'score_time': np.float64(0.020595359802246093), 'absolute_time': 1746710320.1372426, 'flatten_demographic_parity_ratio': '0.4_0.65_0.7_0.75_0.32', 'flatten_balanced_accuracy': '0.65_0.62_0.62_0.62_0.64'}
38
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 3, 'n_estimators': np.int64(75)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.6551683338998382), 'balanced_accuracy': np.float64(0.6030266173138215), 'by_group': {'0_0': np.float64(0.82), '0_2': np.float64(0.9), '0_3': np.float64(0.7), '1_0': np.float64(0.99), '1_2': np.float64(0.88), '1_3': np.float64(0.8), '1_5': np.float64(0.83)}, 'status': 'success', 'total_time': 48.28578042984009, 'fit_time': np.float64(9.590263319015502), 'score_time': np.float64(0.019108295440673828), 'absolute_time': 1746710368.4966414, 'flatten_demographic_parity_ratio': '0.99_0.66_0.77_0.54_0.32', 'flatten_balanced_accuracy': '0.51_0.63_0.63_0.61_0.64'}
39
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 5, 'n_estimators': np.int64(75)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.5)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.5941694268530381), 'balanced_accuracy': np.float64(0.6281124288343604), 'by_group': {'0_0': np.float64(0.79), '0_2': np.float64(0.88), '0_3': np.float64(0.62), '1_0': np.float64(1.0), '1_2': np.float64(0.85), '1_3': np.float64(0.76), '1_5': np.float64(0.76)}, 'status': 'success', 'total_time': 54.94088101387024, 'fit_time': np.float64(10.922473526000976), 'score_time': np.float64(0.01925482749938965), 'absolute_time': 1746710423.513037, 'flatten_demographic_parity_ratio': '0.43_0.57_0.79_0.63_0.54', 'flatten_balanced_accuracy': '0.64_0.63_0.61_0.63_0.63'}
40
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'demographic_parity_ratio': np.float64(0.7753913922121487), 'balanced_accuracy': np.float64(0.5941665947591852), 'by_group': {'0_0': np.float64(0.87), '0_2': np.float64(0.91), '0_3': np.float64(0.79), '1_0': np.float64(0.99), '1_2': np.float64(0.9), '1_3': np.float64(0.85), '1_5': np.float64(0.86)}, 'status': 'success', 'total_time': 66.32297110557556, 'fit_time': np.float64(11.694950914382934), 'score_time': np.float64(0.014861154556274413), 'absolute_time': 1746710489.9129748, 'flatten_demographic_parity_ratio': '0.68_0.88_0.73_0.84_0.74', 'flatten_balanced_accuracy': '0.63_0.57_0.61_0.56_0.61'}
41
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 4, 'max_features': 4, 'max_leaf_nodes': 6, 'min_samples_split': 4, 'n_estimators': np.int64(75)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.6709282546891003), 'balanced_accuracy': np.float64(0.6188818017568213), 'by_group': {'0_0': np.float64(0.83), '0_2': np.float64(0.88), '0_3': np.float64(0.68), '1_0': np.float64(0.99), '1_2': np.float64(0.88), '1_3': np.float64(0.79), '1_5': np.float64(0.83)}, 'status': 'success', 'total_time': 56.62498211860657, 'fit_time': np.float64(11.256855297088624), 'score_time': np.float64(0.019764041900634764), 'absolute_time': 1746710546.6193314, 'flatten_demographic_parity_ratio': '0.56_0.43_0.8_0.78_0.79', 'flatten_balanced_accuracy': '0.65_0.62_0.6_0.62_0.61'}
42
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 6, 'n_estimators': np.int64(75)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(1.0)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'demographic_parity_ratio': np.float64(0.556774853404853), 'balanced_accuracy': np.float64(0.6347266182619354), 'by_group': {'0_0': np.float64(0.75), '0_2': np.float64(0.85), '0_3': np.float64(0.58), '1_0': np.float64(1.0), '1_2': np.float64(0.83), '1_3': np.float64(0.74), '1_5': np.float64(0.76)}, 'status': 'success', 'total_time': 52.47195529937744, 'fit_time': np.float64(10.42793779373169), 'score_time': np.float64(0.019446420669555663), 'absolute_time': 1746710599.1726055, 'flatten_demographic_parity_ratio': '0.47_0.52_0.73_0.74_0.32', 'flatten_balanced_accuracy': '0.62_0.65_0.64_0.62_0.64'}
43
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.5142412442049576), 'balanced_accuracy': np.float64(0.6254565661988899), 'by_group': {'0_0': np.float64(0.74), '0_2': np.float64(0.82), '0_3': np.float64(0.53), '1_0': np.float64(1.0), '1_2': np.float64(0.82), '1_3': np.float64(0.73), '1_5': np.float64(0.75)}, 'status': 'success', 'total_time': 32.45314359664917, 'fit_time': np.float64(6.428263139724732), 'score_time': np.float64(0.017071008682250977), 'absolute_time': 1746710632.6130323, 'flatten_demographic_parity_ratio': '0.44_0.4_0.77_0.6_0.35', 'flatten_balanced_accuracy': '0.63_0.62_0.63_0.62_0.62'}
44
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'demographic_parity_ratio': np.float64(0.5808687303107455), 'balanced_accuracy': np.float64(0.6271694609751547), 'by_group': {'0_0': np.float64(0.77), '0_2': np.float64(0.83), '0_3': np.float64(0.64), '1_0': np.float64(1.0), '1_2': np.float64(0.86), '1_3': np.float64(0.75), '1_5': np.float64(0.77)}, 'status': 'success', 'total_time': 159.5699610710144, 'fit_time': np.float64(31.83974289894104), 'score_time': np.float64(0.03170490264892578), 'absolute_time': 1746710792.2633762, 'flatten_demographic_parity_ratio': '0.68_0.59_0.71_0.62_0.3', 'flatten_balanced_accuracy': '0.63_0.63_0.62_0.62_0.64'}
AutoML: optimization done.
AutoML: miner done.
AutoML: export done.
Here is the standard output/error of the command:

Here is the standard output/error of the command:

Here is the standard output/error of the command:

hamlet_745987572
AutoML execution ended
