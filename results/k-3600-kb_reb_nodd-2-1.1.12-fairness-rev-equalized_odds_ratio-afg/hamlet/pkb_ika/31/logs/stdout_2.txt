Sensitive groups ready!
Theory ready!
Theory:
step(normalization) :- true.
step(features) :- true.
step(mitigation) :- true.
step(rebalancing) :- true.
step(classification) :- true.
operator(normalization, power_transformer) :- true.
operator(normalization, robust_scaler) :- true.
operator(normalization, standard) :- true.
operator(normalization, minmax) :- true.
operator(features, select_k_best) :- true.
operator(features, pca) :- true.
operator(mitigation, corr_remover) :- true.
operator(mitigation, lfr) :- true.
operator(rebalancing, near_miss) :- true.
operator(rebalancing, smote) :- true.
operator(classification, knn) :- true.
operator(classification, nn) :- true.
operator(classification, rf) :- true.
hyperparameter(robust_scaler, with_centering, choice) :- true.
hyperparameter(robust_scaler, with_scaling, choice) :- true.
hyperparameter(standard, with_mean, choice) :- true.
hyperparameter(standard, with_std, choice) :- true.
hyperparameter(select_k_best, k, randint) :- true.
hyperparameter(pca, n_components, randint) :- true.
hyperparameter(corr_remover, alpha, choice) :- true.
hyperparameter(lfr, n_prototypes, choice) :- true.
hyperparameter(lfr, reconstruct_weight, choice) :- true.
hyperparameter(lfr, fairness_weight, choice) :- true.
hyperparameter(near_miss, n_neighbors, randint) :- true.
hyperparameter(smote, k_neighbors, randint) :- true.
hyperparameter(knn, n_neighbors, randint) :- true.
hyperparameter(knn, weights, choice) :- true.
hyperparameter(knn, metric, choice) :- true.
hyperparameter(nn, n_hidden_layers, choice) :- true.
hyperparameter(nn, n_neurons, choice) :- true.
hyperparameter(nn, activation, choice) :- true.
hyperparameter(nn, solver, choice) :- true.
hyperparameter(nn, alpha, choice) :- true.
hyperparameter(nn, learning_rate, choice) :- true.
hyperparameter(rf, n_estimators, choice) :- true.
hyperparameter(rf, max_depth, randint) :- true.
hyperparameter(rf, max_features, randint) :- true.
hyperparameter(rf, min_samples_split, randint) :- true.
hyperparameter(rf, max_leaf_nodes, randint) :- true.
hyperparameter(rf, bootstrap, choice) :- true.
hyperparameter(rf, criterion, choice) :- true.
domain(robust_scaler, with_centering, [true, false]) :- true.
domain(robust_scaler, with_scaling, [true, false]) :- true.
domain(standard, with_mean, [true, false]) :- true.
domain(standard, with_std, [true, false]) :- true.
domain(select_k_best, k, [1, 10]) :- true.
domain(pca, n_components, [1, 8]) :- true.
domain(corr_remover, alpha, [0.25, 0.5, 0.75, 1.0]) :- true.
domain(lfr, n_prototypes, [10, 50, 100, 200]) :- true.
domain(lfr, reconstruct_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(lfr, fairness_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(near_miss, n_neighbors, [1, 4]) :- true.
domain(smote, k_neighbors, [5, 8]) :- true.
domain(knn, n_neighbors, [3, 20]) :- true.
domain(knn, weights, [uniform, distance]) :- true.
domain(knn, metric, [minkowski, euclidean, manhattan]) :- true.
domain(nn, n_hidden_layers, [1, 5, 10, 20]) :- true.
domain(nn, n_neurons, [5, 10, 25, 50]) :- true.
domain(nn, activation, [logistic, tanh, relu]) :- true.
domain(nn, solver, [lbfgs, sgd, adam]) :- true.
domain(nn, alpha, [0.0001, 0.001, 0.01, 0.00001]) :- true.
domain(nn, learning_rate, [constant, invscaling, adaptive]) :- true.
domain(rf, n_estimators, [10, 25, 50, 75, 100]) :- true.
domain(rf, max_depth, [1, 5]) :- true.
domain(rf, max_features, [1, 4]) :- true.
domain(rf, min_samples_split, [2, 6]) :- true.
domain(rf, max_leaf_nodes, [2, 6]) :- true.
domain(rf, bootstrap, [true, false]) :- true.
domain(rf, criterion, [gini, entropy]) :- true.
':=>'(c1, mandatory([mitigation], classification)) :- true.
':=>'(c3, mandatory_order([mitigation, features], classification)) :- true.
':=>'(c4, mandatory_order([mitigation, normalization], classification)) :- true.
':=>'(c5, mandatory([normalization], knn)) :- true.
':=>'(c6, mandatory([normalization], nn)) :- true.
dataset('credit-g') :- true.
metric(balanced_accuracy) :- true.
fairness_metric(equalized_odds_ratio) :- true.
sensitive_feature(personal_status, [single, 'div/dep/mar', 'mar/wid']) :- true.
sensitive_feature(sex, [male, female]) :- true.
':=>'(mc0, unbalanced_dataset) :- true.
pipeline([Step_1_0], ZZ_0) :- (step(Step_1_0), '\\='(Step_1_0, classification), operator(classification, ZZ_0)).
pipeline([Step_1_1, Step_2_0], ZZ_1) :- (step(Step_1_1), step(Step_2_0), '\\='(Step_1_1, classification), '\\='(Step_2_0, classification), '\\='(Step_1_1, Step_2_0), operator(classification, ZZ_1)).
pipeline([Step_1_2, Step_2_1, Step_3_0], ZZ_2) :- (step(Step_1_2), step(Step_2_1), step(Step_3_0), '\\='(Step_1_2, classification), '\\='(Step_2_1, classification), '\\='(Step_3_0, classification), '\\='(Step_1_2, Step_2_1), '\\='(Step_1_2, Step_3_0), '\\='(Step_2_1, Step_3_0), operator(classification, ZZ_2)).
pipeline([Step_1_3, Step_2_2, Step_3_1, Step_4_0], ZZ_3) :- (step(Step_1_3), step(Step_2_2), step(Step_3_1), step(Step_4_0), '\\='(Step_1_3, classification), '\\='(Step_2_2, classification), '\\='(Step_3_1, classification), '\\='(Step_4_0, classification), '\\='(Step_1_3, Step_2_2), '\\='(Step_1_3, Step_3_1), '\\='(Step_1_3, Step_4_0), '\\='(Step_2_2, Step_3_1), '\\='(Step_2_2, Step_4_0), '\\='(Step_3_1, Step_4_0), operator(classification, ZZ_3)).
':=>'(p441091, sensitive_group([single])) :- true.
':=>'(p100325, sensitive_group(['div/dep/mar'])) :- true.
':=>'(p492620, sensitive_group(['mar/wid'])) :- true.
':=>'(p932068, sensitive_group([male])) :- true.
':=>'(p390538, sensitive_group([female])) :- true.
':=>'(p881173, sensitive_group([single, male])) :- true.
':=>'(p87122, sensitive_group([single, female])) :- true.
':=>'(p816094, sensitive_group(['div/dep/mar', male])) :- true.
':=>'(p406659, sensitive_group(['div/dep/mar', female])) :- true.
':=>'(p698366, sensitive_group(['mar/wid', male])) :- true.
':=>'(p996019, sensitive_group(['mar/wid', female])) :- true.
':=>'(p163619, pipeline([], knn)) :- true.
':=>'(p660374, pipeline([], knn)) :- true.
':=>'(p853946, pipeline([], nn)) :- true.
':=>'(p296049, pipeline([], nn)) :- true.
':=>'(p153867, pipeline([], rf)) :- true.
':=>'(p805578, pipeline([normalization], knn)) :- true.
':=>'(p504287, pipeline([normalization], nn)) :- true.
':=>'(p554789, pipeline([normalization], rf)) :- true.
':=>'(p76021, pipeline([features], knn)) :- true.
':=>'(p656726, pipeline([features], knn)) :- true.
':=>'(p648866, pipeline([features], nn)) :- true.
':=>'(p23666, pipeline([features], nn)) :- true.
':=>'(p227738, pipeline([features], rf)) :- true.
':=>'(p736365, pipeline([mitigation], knn)) :- true.
':=>'(p337748, pipeline([mitigation], nn)) :- true.
':=>'(p182174, pipeline([rebalancing], knn)) :- true.
':=>'(p946935, pipeline([rebalancing], knn)) :- true.
':=>'(p18351, pipeline([rebalancing], nn)) :- true.
':=>'(p503680, pipeline([rebalancing], nn)) :- true.
':=>'(p627064, pipeline([rebalancing], rf)) :- true.
':=>'(p861067, pipeline([normalization, features], knn)) :- true.
':=>'(p946887, pipeline([normalization, features], nn)) :- true.
':=>'(p9384, pipeline([normalization, features], rf)) :- true.
':=>'(p566871, pipeline([normalization, mitigation], knn)) :- true.
':=>'(p771264, pipeline([normalization, mitigation], nn)) :- true.
':=>'(p851375, pipeline([normalization, mitigation], rf)) :- true.
':=>'(p452296, pipeline([normalization, rebalancing], knn)) :- true.
':=>'(p494546, pipeline([normalization, rebalancing], nn)) :- true.
':=>'(p253596, pipeline([normalization, rebalancing], rf)) :- true.
':=>'(p321414, pipeline([features, normalization], knn)) :- true.
':=>'(p370697, pipeline([features, normalization], nn)) :- true.
':=>'(p84074, pipeline([features, normalization], rf)) :- true.
':=>'(p754671, pipeline([features, mitigation], knn)) :- true.
':=>'(p913309, pipeline([features, mitigation], knn)) :- true.
':=>'(p929540, pipeline([features, mitigation], nn)) :- true.
':=>'(p506774, pipeline([features, mitigation], nn)) :- true.
':=>'(p81813, pipeline([features, mitigation], rf)) :- true.
':=>'(p634936, pipeline([features, rebalancing], knn)) :- true.
':=>'(p399839, pipeline([features, rebalancing], knn)) :- true.
':=>'(p274528, pipeline([features, rebalancing], nn)) :- true.
':=>'(p229834, pipeline([features, rebalancing], nn)) :- true.
':=>'(p485831, pipeline([features, rebalancing], rf)) :- true.
':=>'(p599815, pipeline([mitigation, features], knn)) :- true.
':=>'(p568270, pipeline([mitigation, features], nn)) :- true.
':=>'(p406010, pipeline([mitigation, rebalancing], knn)) :- true.
':=>'(p756663, pipeline([mitigation, rebalancing], nn)) :- true.
':=>'(p601087, pipeline([rebalancing, normalization], knn)) :- true.
':=>'(p397598, pipeline([rebalancing, normalization], nn)) :- true.
':=>'(p257749, pipeline([rebalancing, normalization], rf)) :- true.
':=>'(p634388, pipeline([rebalancing, features], knn)) :- true.
':=>'(p550752, pipeline([rebalancing, features], knn)) :- true.
':=>'(p514498, pipeline([rebalancing, features], nn)) :- true.
':=>'(p263515, pipeline([rebalancing, features], nn)) :- true.
':=>'(p973975, pipeline([rebalancing, features], rf)) :- true.
':=>'(p835285, pipeline([rebalancing, mitigation], knn)) :- true.
':=>'(p591641, pipeline([rebalancing, mitigation], nn)) :- true.
':=>'(p451598, pipeline([normalization, features, mitigation], knn)) :- true.
':=>'(p611848, pipeline([normalization, features, mitigation], knn)) :- true.
':=>'(p897104, pipeline([normalization, features, mitigation], nn)) :- true.
':=>'(p685787, pipeline([normalization, features, mitigation], nn)) :- true.
':=>'(p515018, pipeline([normalization, features, mitigation], rf)) :- true.
':=>'(p939913, pipeline([normalization, features, mitigation], rf)) :- true.
':=>'(p976611, pipeline([normalization, features, rebalancing], knn)) :- true.
':=>'(p229467, pipeline([normalization, features, rebalancing], nn)) :- true.
':=>'(p356348, pipeline([normalization, features, rebalancing], rf)) :- true.
':=>'(p644077, pipeline([normalization, mitigation, features], knn)) :- true.
':=>'(p42667, pipeline([normalization, mitigation, features], nn)) :- true.
':=>'(p981002, pipeline([normalization, mitigation, features], rf)) :- true.
':=>'(p271283, pipeline([normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p502312, pipeline([normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p214885, pipeline([normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p152658, pipeline([normalization, rebalancing, features], knn)) :- true.
':=>'(p762996, pipeline([normalization, rebalancing, features], nn)) :- true.
':=>'(p23765, pipeline([normalization, rebalancing, features], rf)) :- true.
':=>'(p108631, pipeline([normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p836214, pipeline([normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p962892, pipeline([normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p96155, pipeline([features, normalization, mitigation], knn)) :- true.
':=>'(p173904, pipeline([features, normalization, mitigation], knn)) :- true.
':=>'(p69965, pipeline([features, normalization, mitigation], nn)) :- true.
':=>'(p443102, pipeline([features, normalization, mitigation], nn)) :- true.
':=>'(p622639, pipeline([features, normalization, mitigation], rf)) :- true.
':=>'(p702903, pipeline([features, normalization, mitigation], rf)) :- true.
':=>'(p795280, pipeline([features, normalization, rebalancing], knn)) :- true.
':=>'(p221583, pipeline([features, normalization, rebalancing], nn)) :- true.
':=>'(p571814, pipeline([features, normalization, rebalancing], rf)) :- true.
':=>'(p658866, pipeline([features, mitigation, normalization], knn)) :- true.
':=>'(p723176, pipeline([features, mitigation, normalization], nn)) :- true.
':=>'(p982243, pipeline([features, mitigation, normalization], rf)) :- true.
':=>'(p114424, pipeline([features, mitigation, rebalancing], knn)) :- true.
':=>'(p756016, pipeline([features, mitigation, rebalancing], knn)) :- true.
':=>'(p126545, pipeline([features, mitigation, rebalancing], nn)) :- true.
':=>'(p67530, pipeline([features, mitigation, rebalancing], nn)) :- true.
':=>'(p860993, pipeline([features, mitigation, rebalancing], rf)) :- true.
':=>'(p834667, pipeline([features, rebalancing, normalization], knn)) :- true.
':=>'(p40469, pipeline([features, rebalancing, normalization], nn)) :- true.
':=>'(p861002, pipeline([features, rebalancing, normalization], rf)) :- true.
':=>'(p813239, pipeline([features, rebalancing, mitigation], knn)) :- true.
':=>'(p201704, pipeline([features, rebalancing, mitigation], knn)) :- true.
':=>'(p978032, pipeline([features, rebalancing, mitigation], nn)) :- true.
':=>'(p737829, pipeline([features, rebalancing, mitigation], nn)) :- true.
':=>'(p366500, pipeline([features, rebalancing, mitigation], rf)) :- true.
':=>'(p729386, pipeline([mitigation, features, rebalancing], knn)) :- true.
':=>'(p730326, pipeline([mitigation, features, rebalancing], nn)) :- true.
':=>'(p796774, pipeline([mitigation, rebalancing, features], knn)) :- true.
':=>'(p545987, pipeline([mitigation, rebalancing, features], nn)) :- true.
':=>'(p370604, pipeline([rebalancing, normalization, features], knn)) :- true.
':=>'(p782281, pipeline([rebalancing, normalization, features], nn)) :- true.
':=>'(p927889, pipeline([rebalancing, normalization, features], rf)) :- true.
':=>'(p412972, pipeline([rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p850386, pipeline([rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p25276, pipeline([rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p492731, pipeline([rebalancing, features, normalization], knn)) :- true.
':=>'(p762311, pipeline([rebalancing, features, normalization], nn)) :- true.
':=>'(p397424, pipeline([rebalancing, features, normalization], rf)) :- true.
':=>'(p777175, pipeline([rebalancing, features, mitigation], knn)) :- true.
':=>'(p570847, pipeline([rebalancing, features, mitigation], knn)) :- true.
':=>'(p28696, pipeline([rebalancing, features, mitigation], nn)) :- true.
':=>'(p323072, pipeline([rebalancing, features, mitigation], nn)) :- true.
':=>'(p351827, pipeline([rebalancing, features, mitigation], rf)) :- true.
':=>'(p789406, pipeline([rebalancing, mitigation, features], knn)) :- true.
':=>'(p15519, pipeline([rebalancing, mitigation, features], nn)) :- true.
':=>'(p761348, pipeline([normalization, features, mitigation, rebalancing], knn)) :- true.
':=>'(p938443, pipeline([normalization, features, mitigation, rebalancing], knn)) :- true.
':=>'(p386361, pipeline([normalization, features, mitigation, rebalancing], nn)) :- true.
':=>'(p656852, pipeline([normalization, features, mitigation, rebalancing], nn)) :- true.
':=>'(p898505, pipeline([normalization, features, mitigation, rebalancing], rf)) :- true.
':=>'(p984398, pipeline([normalization, features, mitigation, rebalancing], rf)) :- true.
':=>'(p866086, pipeline([normalization, features, rebalancing, mitigation], knn)) :- true.
':=>'(p152328, pipeline([normalization, features, rebalancing, mitigation], knn)) :- true.
':=>'(p381692, pipeline([normalization, features, rebalancing, mitigation], nn)) :- true.
':=>'(p423888, pipeline([normalization, features, rebalancing, mitigation], nn)) :- true.
':=>'(p958216, pipeline([normalization, features, rebalancing, mitigation], rf)) :- true.
':=>'(p782526, pipeline([normalization, features, rebalancing, mitigation], rf)) :- true.
':=>'(p138281, pipeline([normalization, mitigation, features, rebalancing], knn)) :- true.
':=>'(p966828, pipeline([normalization, mitigation, features, rebalancing], nn)) :- true.
':=>'(p928258, pipeline([normalization, mitigation, features, rebalancing], rf)) :- true.
':=>'(p71916, pipeline([normalization, mitigation, rebalancing, features], knn)) :- true.
':=>'(p17166, pipeline([normalization, mitigation, rebalancing, features], nn)) :- true.
':=>'(p753730, pipeline([normalization, mitigation, rebalancing, features], rf)) :- true.
':=>'(p143331, pipeline([normalization, rebalancing, features, mitigation], knn)) :- true.
':=>'(p222454, pipeline([normalization, rebalancing, features, mitigation], knn)) :- true.
':=>'(p937927, pipeline([normalization, rebalancing, features, mitigation], nn)) :- true.
':=>'(p904131, pipeline([normalization, rebalancing, features, mitigation], nn)) :- true.
':=>'(p5079, pipeline([normalization, rebalancing, features, mitigation], rf)) :- true.
':=>'(p254533, pipeline([normalization, rebalancing, features, mitigation], rf)) :- true.
':=>'(p406038, pipeline([normalization, rebalancing, mitigation, features], knn)) :- true.
':=>'(p37133, pipeline([normalization, rebalancing, mitigation, features], nn)) :- true.
':=>'(p718576, pipeline([normalization, rebalancing, mitigation, features], rf)) :- true.
':=>'(p378693, pipeline([features, normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p6120, pipeline([features, normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p26362, pipeline([features, normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p867422, pipeline([features, normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p465522, pipeline([features, normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p9931, pipeline([features, normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p606697, pipeline([features, normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p465338, pipeline([features, normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p601952, pipeline([features, normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p163363, pipeline([features, normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p939373, pipeline([features, normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p191308, pipeline([features, normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p958776, pipeline([features, mitigation, normalization, rebalancing], knn)) :- true.
':=>'(p92757, pipeline([features, mitigation, normalization, rebalancing], nn)) :- true.
':=>'(p522243, pipeline([features, mitigation, normalization, rebalancing], rf)) :- true.
':=>'(p918850, pipeline([features, mitigation, rebalancing, normalization], knn)) :- true.
':=>'(p135559, pipeline([features, mitigation, rebalancing, normalization], nn)) :- true.
':=>'(p3393, pipeline([features, mitigation, rebalancing, normalization], rf)) :- true.
':=>'(p753580, pipeline([features, rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p148451, pipeline([features, rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p979245, pipeline([features, rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p644548, pipeline([features, rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p771021, pipeline([features, rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p193141, pipeline([features, rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p890631, pipeline([features, rebalancing, mitigation, normalization], knn)) :- true.
':=>'(p594713, pipeline([features, rebalancing, mitigation, normalization], nn)) :- true.
':=>'(p818248, pipeline([features, rebalancing, mitigation, normalization], rf)) :- true.
':=>'(p356274, pipeline([rebalancing, normalization, features, mitigation], knn)) :- true.
':=>'(p977823, pipeline([rebalancing, normalization, features, mitigation], knn)) :- true.
':=>'(p624215, pipeline([rebalancing, normalization, features, mitigation], nn)) :- true.
':=>'(p216305, pipeline([rebalancing, normalization, features, mitigation], nn)) :- true.
':=>'(p968850, pipeline([rebalancing, normalization, features, mitigation], rf)) :- true.
':=>'(p692093, pipeline([rebalancing, normalization, features, mitigation], rf)) :- true.
':=>'(p221991, pipeline([rebalancing, normalization, mitigation, features], knn)) :- true.
':=>'(p607139, pipeline([rebalancing, normalization, mitigation, features], nn)) :- true.
':=>'(p709, pipeline([rebalancing, normalization, mitigation, features], rf)) :- true.
':=>'(p948289, pipeline([rebalancing, features, normalization, mitigation], knn)) :- true.
':=>'(p355664, pipeline([rebalancing, features, normalization, mitigation], knn)) :- true.
':=>'(p535253, pipeline([rebalancing, features, normalization, mitigation], nn)) :- true.
':=>'(p684407, pipeline([rebalancing, features, normalization, mitigation], nn)) :- true.
':=>'(p825834, pipeline([rebalancing, features, normalization, mitigation], rf)) :- true.
':=>'(p144313, pipeline([rebalancing, features, normalization, mitigation], rf)) :- true.
':=>'(p971216, pipeline([rebalancing, features, mitigation, normalization], knn)) :- true.
':=>'(p243232, pipeline([rebalancing, features, mitigation, normalization], nn)) :- true.
':=>'(p652825, pipeline([rebalancing, features, mitigation, normalization], rf)) :- true.

Checking Config
Exporting Config
Saving Graph
Exporting AutoML input
Exporting Space
Exporting Constraints
Input created for iteration Config(iteration=2, dataset=credit-g, metric=balanced_accuracy, fairnessMetric=equalized_odds_ratio, sensitiveFeatures=[personal_status, sex], mode=max, batchSize=999999, timeBudget=900, seed=42)
Here is the standard output/error of the command:

d4f8fdc3b8645eb152f1e6586e8d1e028e00f51a4350bc756fcdac33624899cc
Here is the standard output/error of the command:

Here is the standard output/error of the command:

WARNING:root:No module named 'rpy2': FairAdapt will be unavailable. To install, run:
pip install 'aif360[FairAdapt]'
INFO:flaml.tune.searcher.blendsearch:No low-cost partial config given to the search algorithm. For cost-frugal search, consider providing low-cost values for cost-related hps via 'low_cost_partial_config'. More info can be found at https://microsoft.github.io/FLAML/docs/FAQ#about-low_cost_partial_config-in-tune
Trying to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Added successfully: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Trying to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: normalization == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
AutoML: starting optimization.
/usr/local/lib/python3.12/site-packages/numpy/_core/_methods.py:194: RuntimeWarning: overflow encountered in multiply
  x = um.multiply(x, x, out=x)
/usr/local/lib/python3.12/site-packages/numpy/_core/_methods.py:205: RuntimeWarning: overflow encountered in reduce
  ret = umr_sum(x, axis, dtype, out, keepdims=keepdims, where=where)
/usr/local/lib/python3.12/site-packages/sklearn/preprocessing/_data.py:3475: RuntimeWarning: overflow encountered in power
  out[pos] = (np.power(x[pos] + 1, lmbda) - 1) / lmbda

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 622, in objective
    fair_scores, fair_scores_by_group = _compute_fair_metric(
                                        ^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 381, in _compute_fair_metric
    y_pred = np.array(scores["estimator"][fold].predict(x_original))
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 658, in predict
    Xt = transform.transform(Xt)
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_set_output.py", line 319, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/compose/_column_transformer.py", line 1101, in transform
    Xs = self._call_func_on_transformers(
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/compose/_column_transformer.py", line 873, in _call_func_on_transformers
    transformers = list(
                   ^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/compose/_column_transformer.py", line 469, in _iter
    transformers = self.transformers_
                   ^^^^^^^^^^^^^^^^^^
AttributeError: 'ColumnTransformer' object has no attribute 'transformers_'. Did you mean: 'transformers'?

19
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 91.27217531204224, 'fit_time': np.float64(13.416407775878906), 'score_time': np.float64(0.006498527526855469), 'absolute_time': 1746706441.545517}
The result for {'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 3, 'n_estimators': np.int64(75)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 3, 'n_estimators': np.int64(75)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')} was NaN

20
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 3, 'n_estimators': np.int64(75)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': np.float64(0.5485714285714286), 'by_group': {'female_div/dep/mar': np.float64(0.8), 'male_div/sep': np.float64(0.84), 'male_mar/wid': np.float64(0.85), 'male_single': np.float64(0.66)}, 'status': 'fail', 'total_time': 53.29545545578003, 'fit_time': np.float64(10.610422039031983), 'score_time': np.float64(0.011936712265014648), 'absolute_time': 1746706494.883417, 'flatten_equalized_odds_ratio': '0.77_0.58_0.76_0.52_nan', 'flatten_balanced_accuracy': '0.58_0.58_0.54_0.55_0.5'}
21
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 4, 'min_samples_split': 3, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'equalized_odds_ratio': np.float64(0.052727272727272734), 'balanced_accuracy': np.float64(0.605952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.51), 'male_div/sep': np.float64(0.07), 'male_mar/wid': np.float64(0.28), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.7948558330535889, 'fit_time': np.float64(0.08629407882690429), 'score_time': np.float64(0.00657811164855957), 'absolute_time': 1746706495.7165365, 'flatten_equalized_odds_ratio': '0.26_0.0_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.58_0.63_0.63_0.58_0.61'}
22
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 1, 'max_features': 4, 'max_leaf_nodes': 3, 'min_samples_split': 2, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'equalized_odds_ratio': np.float64(0.6137154799223765), 'balanced_accuracy': np.float64(0.5457142857142856), 'by_group': {'female_div/dep/mar': np.float64(0.81), 'male_div/sep': np.float64(0.69), 'male_mar/wid': np.float64(0.88), 'male_single': np.float64(0.72)}, 'status': 'success', 'total_time': 81.15187096595764, 'fit_time': np.float64(16.169227123260498), 'score_time': np.float64(0.010869646072387695), 'absolute_time': 1746706576.9318569, 'flatten_equalized_odds_ratio': '0.79_0.5_0.76_0.6_0.42', 'flatten_balanced_accuracy': '0.53_0.6_0.54_0.54_0.52'}
23
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.1)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.9724137931034482), 'balanced_accuracy': np.float64(0.5076190476190476), 'by_group': {'female_div/dep/mar': np.float64(0.99), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.97)}, 'status': 'success', 'total_time': 53.70237350463867, 'fit_time': np.float64(10.690154790878296), 'score_time': np.float64(0.012055301666259765), 'absolute_time': 1746706630.7048306, 'flatten_equalized_odds_ratio': '0.86_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.54_0.5_0.5_0.5_0.5'}
24
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 16, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.08285714285714287), 'balanced_accuracy': np.float64(0.6564285714285714), 'by_group': {'female_div/dep/mar': np.float64(0.78), 'male_div/sep': np.float64(0.26), 'male_mar/wid': np.float64(0.53), 'male_single': np.float64(0.62)}, 'status': 'success', 'total_time': 1.0252864360809326, 'fit_time': np.float64(0.11394691467285156), 'score_time': np.float64(0.017681646347045898), 'absolute_time': 1746706631.800663, 'flatten_equalized_odds_ratio': '0.0_0.0_0.41_0.0_0.0', 'flatten_balanced_accuracy': '0.67_0.7_0.64_0.66_0.62'}
25
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 19, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.45345765345765343), 'balanced_accuracy': np.float64(0.6180952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.53), 'male_div/sep': np.float64(0.69), 'male_mar/wid': np.float64(0.71), 'male_single': np.float64(0.54)}, 'status': 'success', 'total_time': 0.392195463180542, 'fit_time': np.float64(0.009369993209838867), 'score_time': np.float64(0.018886232376098634), 'absolute_time': 1746706632.2588255, 'flatten_equalized_odds_ratio': '0.25_0.44_0.41_0.56_0.61', 'flatten_balanced_accuracy': '0.63_0.64_0.59_0.64_0.6'}
26
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 5, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.6492637247809661), 'balanced_accuracy': np.float64(0.5266666666666666), 'by_group': {'female_div/dep/mar': np.float64(0.81), 'male_div/sep': np.float64(0.76), 'male_mar/wid': np.float64(0.92), 'male_single': np.float64(0.72)}, 'status': 'success', 'total_time': 70.36614179611206, 'fit_time': np.float64(14.005032682418824), 'score_time': np.float64(0.022415351867675782), 'absolute_time': 1746706702.710517, 'flatten_equalized_odds_ratio': '0.68_0.7_0.9_0.72_0.25', 'flatten_balanced_accuracy': '0.57_0.52_0.51_0.49_0.53'}
27
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 6, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.5098484848484849), 'balanced_accuracy': np.float64(0.625), 'by_group': {'female_div/dep/mar': np.float64(0.73), 'male_div/sep': np.float64(0.77), 'male_mar/wid': np.float64(0.6), 'male_single': np.float64(0.77)}, 'status': 'success', 'total_time': 1.4655721187591553, 'fit_time': np.float64(0.007439565658569336), 'score_time': np.float64(0.13323216438293456), 'absolute_time': 1746706705.2671251, 'flatten_equalized_odds_ratio': '0.27_0.53_0.62_0.53_0.59', 'flatten_balanced_accuracy': '0.63_0.63_0.62_0.63_0.61'}
28
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_split': 5, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'equalized_odds_ratio': np.float64(0.4927757013101841), 'balanced_accuracy': np.float64(0.5349999999999999), 'by_group': {'female_div/dep/mar': np.float64(0.74), 'male_div/sep': np.float64(0.62), 'male_mar/wid': np.float64(0.93), 'male_single': np.float64(0.58)}, 'status': 'success', 'total_time': 77.29853510856628, 'fit_time': np.float64(15.40592164993286), 'score_time': np.float64(0.008749723434448242), 'absolute_time': 1746706782.6274214, 'flatten_equalized_odds_ratio': '0.42_0.65_0.52_0.46_0.42', 'flatten_balanced_accuracy': '0.54_0.6_0.49_0.53_0.52'}
29
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.9666666666666666), 'balanced_accuracy': np.float64(0.5047619047619047), 'by_group': {'female_div/dep/mar': np.float64(0.98), 'male_div/sep': np.float64(0.97), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.98)}, 'status': 'success', 'total_time': 63.54220986366272, 'fit_time': np.float64(12.654446506500244), 'score_time': np.float64(0.015371084213256836), 'absolute_time': 1746706846.222056, 'flatten_equalized_odds_ratio': '1.0_1.0_1.0_1.0_0.83', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.52'}
30
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 4, 'max_leaf_nodes': 4, 'min_samples_split': 2, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'equalized_odds_ratio': np.float64(0.3198303229337712), 'balanced_accuracy': np.float64(0.6216666666666667), 'by_group': {'female_div/dep/mar': np.float64(0.65), 'male_div/sep': np.float64(0.46), 'male_mar/wid': np.float64(0.78), 'male_single': np.float64(0.62)}, 'status': 'success', 'total_time': 2.025214195251465, 'fit_time': np.float64(0.35120115280151365), 'score_time': np.float64(0.01011967658996582), 'absolute_time': 1746706848.3079965, 'flatten_equalized_odds_ratio': '0.0_0.42_0.38_0.39_0.41', 'flatten_balanced_accuracy': '0.65_0.62_0.64_0.58_0.62'}
31
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 14, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.3958874458874459), 'balanced_accuracy': np.float64(0.6166666666666666), 'by_group': {'female_div/dep/mar': np.float64(0.42), 'male_div/sep': np.float64(0.55), 'male_mar/wid': np.float64(0.92), 'male_single': np.float64(0.57)}, 'status': 'success', 'total_time': 0.5848996639251709, 'fit_time': np.float64(0.07592415809631348), 'score_time': np.float64(0.0076408863067626955), 'absolute_time': 1746706848.9443676, 'flatten_equalized_odds_ratio': '0.23_0.38_0.34_0.42_0.61', 'flatten_balanced_accuracy': '0.63_0.63_0.65_0.62_0.56'}
32
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.7353883664228491), 'balanced_accuracy': np.float64(0.5595238095238095), 'by_group': {'female_div/dep/mar': np.float64(0.88), 'male_div/sep': np.float64(0.79), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.83)}, 'status': 'success', 'total_time': 1.8113367557525635, 'fit_time': np.float64(0.31326751708984374), 'score_time': np.float64(0.004972219467163086), 'absolute_time': 1746706850.8114743, 'flatten_equalized_odds_ratio': '0.75_0.75_0.77_0.61_0.79', 'flatten_balanced_accuracy': '0.57_0.57_0.54_0.59_0.54'}
33
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 5, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.23507936507936508), 'balanced_accuracy': np.float64(0.5659523809523809), 'by_group': {'female_div/dep/mar': np.float64(0.63), 'male_div/sep': np.float64(0.65), 'male_mar/wid': np.float64(0.42), 'male_single': np.float64(0.66)}, 'status': 'success', 'total_time': 1.2292265892028809, 'fit_time': np.float64(0.06361942291259766), 'score_time': np.float64(0.07327451705932617), 'absolute_time': 1746706852.1509507, 'flatten_equalized_odds_ratio': '0.0_0.44_0.0_0.31_0.42', 'flatten_balanced_accuracy': '0.57_0.55_0.63_0.54_0.54'}
34
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 2, 'max_features': 4, 'max_leaf_nodes': 3, 'min_samples_split': 6, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('PCA'), 'n_components': 3}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.6047713727311429), 'balanced_accuracy': np.float64(0.5607142857142856), 'by_group': {'female_div/dep/mar': np.float64(0.79), 'male_div/sep': np.float64(0.75), 'male_mar/wid': np.float64(0.87), 'male_single': np.float64(0.66)}, 'status': 'success', 'total_time': 71.84624862670898, 'fit_time': np.float64(14.311055326461792), 'score_time': np.float64(0.01477055549621582), 'absolute_time': 1746706924.0993729, 'flatten_equalized_odds_ratio': '0.77_0.5_0.52_0.59_0.66', 'flatten_balanced_accuracy': '0.58_0.59_0.54_0.56_0.54'}
35
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.6338867603235419), 'balanced_accuracy': np.float64(0.5378571428571428), 'by_group': {'female_div/dep/mar': np.float64(0.76), 'male_div/sep': np.float64(0.72), 'male_mar/wid': np.float64(0.94), 'male_single': np.float64(0.65)}, 'status': 'success', 'total_time': 86.48629522323608, 'fit_time': np.float64(9.099049043655395), 'score_time': np.float64(0.008777141571044922), 'absolute_time': 1746707011.8208933, 'flatten_equalized_odds_ratio': '0.79_0.58_0.76_0.62_0.42', 'flatten_balanced_accuracy': '0.56_0.55_0.54_0.55_0.49'}
36
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_split': 3, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'equalized_odds_ratio': np.float64(0.27972439325380505), 'balanced_accuracy': np.float64(0.6107142857142858), 'by_group': {'female_div/dep/mar': np.float64(0.69), 'male_div/sep': np.float64(0.51), 'male_mar/wid': np.float64(0.49), 'male_single': np.float64(0.82)}, 'status': 'success', 'total_time': 0.8799254894256592, 'fit_time': np.float64(0.1377495288848877), 'score_time': np.float64(0.006556034088134766), 'absolute_time': 1746707012.7761545, 'flatten_equalized_odds_ratio': '0.55_0.54_0.31_0.0_0.0', 'flatten_balanced_accuracy': '0.59_0.62_0.65_0.62_0.57'}
37
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 6, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.49887379542551963), 'balanced_accuracy': np.float64(0.5311904761904762), 'by_group': {'female_div/dep/mar': np.float64(0.69), 'male_div/sep': np.float64(0.72), 'male_mar/wid': np.float64(0.76), 'male_single': np.float64(0.58)}, 'status': 'success', 'total_time': 81.0280191898346, 'fit_time': np.float64(16.10488052368164), 'score_time': np.float64(0.03160419464111328), 'absolute_time': 1746707093.8552544, 'flatten_equalized_odds_ratio': '0.75_0.63_0.69_0.0_0.42', 'flatten_balanced_accuracy': '0.59_0.45_0.51_0.58_0.53'}
38
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 3, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('SelectKBest'), 'k': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification')}
{'equalized_odds_ratio': np.float64(0.0), 'balanced_accuracy': np.float64(0.6719047619047618), 'by_group': {'female_div/dep/mar': np.float64(0.66), 'male_div/sep': np.float64(0.2), 'male_mar/wid': np.float64(0.17), 'male_single': np.float64(0.68)}, 'status': 'success', 'total_time': 1.0018386840820312, 'fit_time': np.float64(0.1381955623626709), 'score_time': np.float64(0.00686192512512207), 'absolute_time': 1746707094.9279404, 'flatten_equalized_odds_ratio': '0.0_0.0_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.65_0.69_0.7_0.64_0.69'}
39
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 11, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 7}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.7847439024390244), 'balanced_accuracy': np.float64(0.5054761904761904), 'by_group': {'female_div/dep/mar': np.float64(0.91), 'male_div/sep': np.float64(0.82), 'male_mar/wid': np.float64(0.93), 'male_single': np.float64(0.84)}, 'status': 'success', 'total_time': 137.48725700378418, 'fit_time': np.float64(15.155912399291992), 'score_time': np.float64(0.023732995986938475), 'absolute_time': 1746707232.4950175, 'flatten_equalized_odds_ratio': '1.0_0.31_0.95_0.66_1.0', 'flatten_balanced_accuracy': '0.5_0.55_0.49_0.49_0.5'}
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')} was NaN

40
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': np.float64(0.5042857142857142), 'by_group': {'female_div/dep/mar': np.float64(0.65), 'male_div/sep': np.float64(0.4), 'male_mar/wid': np.float64(0.91), 'male_single': np.float64(0.51)}, 'status': 'fail', 'total_time': 110.54068660736084, 'fit_time': np.float64(13.821287965774536), 'score_time': np.float64(0.009724617004394531), 'absolute_time': 1746707343.10765, 'flatten_equalized_odds_ratio': '0.79_nan_nan_0.0_0.42', 'flatten_balanced_accuracy': '0.54_0.5_0.5_0.48_0.5'}
AutoML: optimization done.
AutoML: miner done.
AutoML: export done.
Here is the standard output/error of the command:

Here is the standard output/error of the command:

Here is the standard output/error of the command:

hamlet_497244104
AutoML execution ended
