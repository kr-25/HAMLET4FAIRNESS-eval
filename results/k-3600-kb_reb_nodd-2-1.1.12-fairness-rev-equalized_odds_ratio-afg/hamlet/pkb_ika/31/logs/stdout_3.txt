Sensitive groups ready!
Theory ready!
Theory:
step(normalization) :- true.
step(features) :- true.
step(mitigation) :- true.
step(rebalancing) :- true.
step(classification) :- true.
operator(normalization, power_transformer) :- true.
operator(normalization, robust_scaler) :- true.
operator(normalization, standard) :- true.
operator(normalization, minmax) :- true.
operator(features, select_k_best) :- true.
operator(features, pca) :- true.
operator(mitigation, corr_remover) :- true.
operator(mitigation, lfr) :- true.
operator(rebalancing, near_miss) :- true.
operator(rebalancing, smote) :- true.
operator(classification, knn) :- true.
operator(classification, nn) :- true.
operator(classification, rf) :- true.
hyperparameter(robust_scaler, with_centering, choice) :- true.
hyperparameter(robust_scaler, with_scaling, choice) :- true.
hyperparameter(standard, with_mean, choice) :- true.
hyperparameter(standard, with_std, choice) :- true.
hyperparameter(select_k_best, k, randint) :- true.
hyperparameter(pca, n_components, randint) :- true.
hyperparameter(corr_remover, alpha, choice) :- true.
hyperparameter(lfr, n_prototypes, choice) :- true.
hyperparameter(lfr, reconstruct_weight, choice) :- true.
hyperparameter(lfr, fairness_weight, choice) :- true.
hyperparameter(near_miss, n_neighbors, randint) :- true.
hyperparameter(smote, k_neighbors, randint) :- true.
hyperparameter(knn, n_neighbors, randint) :- true.
hyperparameter(knn, weights, choice) :- true.
hyperparameter(knn, metric, choice) :- true.
hyperparameter(nn, n_hidden_layers, choice) :- true.
hyperparameter(nn, n_neurons, choice) :- true.
hyperparameter(nn, activation, choice) :- true.
hyperparameter(nn, solver, choice) :- true.
hyperparameter(nn, alpha, choice) :- true.
hyperparameter(nn, learning_rate, choice) :- true.
hyperparameter(rf, n_estimators, choice) :- true.
hyperparameter(rf, max_depth, randint) :- true.
hyperparameter(rf, max_features, randint) :- true.
hyperparameter(rf, min_samples_split, randint) :- true.
hyperparameter(rf, max_leaf_nodes, randint) :- true.
hyperparameter(rf, bootstrap, choice) :- true.
hyperparameter(rf, criterion, choice) :- true.
domain(robust_scaler, with_centering, [true, false]) :- true.
domain(robust_scaler, with_scaling, [true, false]) :- true.
domain(standard, with_mean, [true, false]) :- true.
domain(standard, with_std, [true, false]) :- true.
domain(select_k_best, k, [1, 10]) :- true.
domain(pca, n_components, [1, 8]) :- true.
domain(corr_remover, alpha, [0.25, 0.5, 0.75, 1.0]) :- true.
domain(lfr, n_prototypes, [10, 50, 100, 200]) :- true.
domain(lfr, reconstruct_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(lfr, fairness_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(near_miss, n_neighbors, [1, 4]) :- true.
domain(smote, k_neighbors, [5, 8]) :- true.
domain(knn, n_neighbors, [3, 20]) :- true.
domain(knn, weights, [uniform, distance]) :- true.
domain(knn, metric, [minkowski, euclidean, manhattan]) :- true.
domain(nn, n_hidden_layers, [1, 5, 10, 20]) :- true.
domain(nn, n_neurons, [5, 10, 25, 50]) :- true.
domain(nn, activation, [logistic, tanh, relu]) :- true.
domain(nn, solver, [lbfgs, sgd, adam]) :- true.
domain(nn, alpha, [0.0001, 0.001, 0.01, 0.00001]) :- true.
domain(nn, learning_rate, [constant, invscaling, adaptive]) :- true.
domain(rf, n_estimators, [10, 25, 50, 75, 100]) :- true.
domain(rf, max_depth, [1, 5]) :- true.
domain(rf, max_features, [1, 4]) :- true.
domain(rf, min_samples_split, [2, 6]) :- true.
domain(rf, max_leaf_nodes, [2, 6]) :- true.
domain(rf, bootstrap, [true, false]) :- true.
domain(rf, criterion, [gini, entropy]) :- true.
':=>'(c1, mandatory([mitigation], classification)) :- true.
':=>'(c3, mandatory_order([mitigation, features], classification)) :- true.
':=>'(c4, mandatory_order([mitigation, normalization], classification)) :- true.
':=>'(c5, mandatory([normalization], knn)) :- true.
':=>'(c6, mandatory([normalization], nn)) :- true.
dataset('credit-g') :- true.
metric(balanced_accuracy) :- true.
fairness_metric(equalized_odds_ratio) :- true.
sensitive_feature(personal_status, [single, 'div/dep/mar', 'mar/wid']) :- true.
sensitive_feature(sex, [male, female]) :- true.
':=>'(mc0, unbalanced_dataset) :- true.
pipeline([Step_1_0], ZZ_0) :- (step(Step_1_0), '\\='(Step_1_0, classification), operator(classification, ZZ_0)).
pipeline([Step_1_1, Step_2_0], ZZ_1) :- (step(Step_1_1), step(Step_2_0), '\\='(Step_1_1, classification), '\\='(Step_2_0, classification), '\\='(Step_1_1, Step_2_0), operator(classification, ZZ_1)).
pipeline([Step_1_2, Step_2_1, Step_3_0], ZZ_2) :- (step(Step_1_2), step(Step_2_1), step(Step_3_0), '\\='(Step_1_2, classification), '\\='(Step_2_1, classification), '\\='(Step_3_0, classification), '\\='(Step_1_2, Step_2_1), '\\='(Step_1_2, Step_3_0), '\\='(Step_2_1, Step_3_0), operator(classification, ZZ_2)).
pipeline([Step_1_3, Step_2_2, Step_3_1, Step_4_0], ZZ_3) :- (step(Step_1_3), step(Step_2_2), step(Step_3_1), step(Step_4_0), '\\='(Step_1_3, classification), '\\='(Step_2_2, classification), '\\='(Step_3_1, classification), '\\='(Step_4_0, classification), '\\='(Step_1_3, Step_2_2), '\\='(Step_1_3, Step_3_1), '\\='(Step_1_3, Step_4_0), '\\='(Step_2_2, Step_3_1), '\\='(Step_2_2, Step_4_0), '\\='(Step_3_1, Step_4_0), operator(classification, ZZ_3)).
':=>'(p993241, sensitive_group([single])) :- true.
':=>'(p94736, sensitive_group(['div/dep/mar'])) :- true.
':=>'(p976609, sensitive_group(['mar/wid'])) :- true.
':=>'(p678141, sensitive_group([male])) :- true.
':=>'(p778321, sensitive_group([female])) :- true.
':=>'(p998370, sensitive_group([single, male])) :- true.
':=>'(p986334, sensitive_group([single, female])) :- true.
':=>'(p226308, sensitive_group(['div/dep/mar', male])) :- true.
':=>'(p640126, sensitive_group(['div/dep/mar', female])) :- true.
':=>'(p316825, sensitive_group(['mar/wid', male])) :- true.
':=>'(p922275, sensitive_group(['mar/wid', female])) :- true.
':=>'(p301824, pipeline([], knn)) :- true.
':=>'(p403970, pipeline([], knn)) :- true.
':=>'(p280899, pipeline([], nn)) :- true.
':=>'(p283281, pipeline([], nn)) :- true.
':=>'(p746716, pipeline([], rf)) :- true.
':=>'(p887463, pipeline([normalization], knn)) :- true.
':=>'(p89897, pipeline([normalization], nn)) :- true.
':=>'(p31356, pipeline([normalization], rf)) :- true.
':=>'(p143445, pipeline([features], knn)) :- true.
':=>'(p894994, pipeline([features], knn)) :- true.
':=>'(p681820, pipeline([features], nn)) :- true.
':=>'(p422960, pipeline([features], nn)) :- true.
':=>'(p12515, pipeline([features], rf)) :- true.
':=>'(p858502, pipeline([mitigation], knn)) :- true.
':=>'(p50502, pipeline([mitigation], nn)) :- true.
':=>'(p861662, pipeline([rebalancing], knn)) :- true.
':=>'(p379849, pipeline([rebalancing], knn)) :- true.
':=>'(p953504, pipeline([rebalancing], nn)) :- true.
':=>'(p333386, pipeline([rebalancing], nn)) :- true.
':=>'(p308985, pipeline([rebalancing], rf)) :- true.
':=>'(p62280, pipeline([normalization, features], knn)) :- true.
':=>'(p800302, pipeline([normalization, features], nn)) :- true.
':=>'(p765842, pipeline([normalization, features], rf)) :- true.
':=>'(p930434, pipeline([normalization, mitigation], knn)) :- true.
':=>'(p853752, pipeline([normalization, mitigation], nn)) :- true.
':=>'(p672486, pipeline([normalization, mitigation], rf)) :- true.
':=>'(p532252, pipeline([normalization, rebalancing], knn)) :- true.
':=>'(p294552, pipeline([normalization, rebalancing], nn)) :- true.
':=>'(p100129, pipeline([normalization, rebalancing], rf)) :- true.
':=>'(p712791, pipeline([features, normalization], knn)) :- true.
':=>'(p92301, pipeline([features, normalization], nn)) :- true.
':=>'(p929831, pipeline([features, normalization], rf)) :- true.
':=>'(p818997, pipeline([features, mitigation], knn)) :- true.
':=>'(p603659, pipeline([features, mitigation], knn)) :- true.
':=>'(p124740, pipeline([features, mitigation], nn)) :- true.
':=>'(p874327, pipeline([features, mitigation], nn)) :- true.
':=>'(p298797, pipeline([features, mitigation], rf)) :- true.
':=>'(p807779, pipeline([features, rebalancing], knn)) :- true.
':=>'(p52654, pipeline([features, rebalancing], knn)) :- true.
':=>'(p263674, pipeline([features, rebalancing], nn)) :- true.
':=>'(p482575, pipeline([features, rebalancing], nn)) :- true.
':=>'(p150855, pipeline([features, rebalancing], rf)) :- true.
':=>'(p716901, pipeline([mitigation, features], knn)) :- true.
':=>'(p904616, pipeline([mitigation, features], nn)) :- true.
':=>'(p143273, pipeline([mitigation, rebalancing], knn)) :- true.
':=>'(p979576, pipeline([mitigation, rebalancing], nn)) :- true.
':=>'(p600441, pipeline([rebalancing, normalization], knn)) :- true.
':=>'(p326946, pipeline([rebalancing, normalization], nn)) :- true.
':=>'(p946208, pipeline([rebalancing, normalization], rf)) :- true.
':=>'(p613972, pipeline([rebalancing, features], knn)) :- true.
':=>'(p635012, pipeline([rebalancing, features], knn)) :- true.
':=>'(p414432, pipeline([rebalancing, features], nn)) :- true.
':=>'(p729100, pipeline([rebalancing, features], nn)) :- true.
':=>'(p309694, pipeline([rebalancing, features], rf)) :- true.
':=>'(p784287, pipeline([rebalancing, mitigation], knn)) :- true.
':=>'(p665944, pipeline([rebalancing, mitigation], nn)) :- true.
':=>'(p555712, pipeline([normalization, features, mitigation], knn)) :- true.
':=>'(p178917, pipeline([normalization, features, mitigation], knn)) :- true.
':=>'(p42214, pipeline([normalization, features, mitigation], nn)) :- true.
':=>'(p634922, pipeline([normalization, features, mitigation], nn)) :- true.
':=>'(p147852, pipeline([normalization, features, mitigation], rf)) :- true.
':=>'(p36531, pipeline([normalization, features, mitigation], rf)) :- true.
':=>'(p599481, pipeline([normalization, features, rebalancing], knn)) :- true.
':=>'(p661950, pipeline([normalization, features, rebalancing], nn)) :- true.
':=>'(p280755, pipeline([normalization, features, rebalancing], rf)) :- true.
':=>'(p870229, pipeline([normalization, mitigation, features], knn)) :- true.
':=>'(p492487, pipeline([normalization, mitigation, features], nn)) :- true.
':=>'(p80816, pipeline([normalization, mitigation, features], rf)) :- true.
':=>'(p595888, pipeline([normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p937853, pipeline([normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p772311, pipeline([normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p20430, pipeline([normalization, rebalancing, features], knn)) :- true.
':=>'(p357187, pipeline([normalization, rebalancing, features], nn)) :- true.
':=>'(p913402, pipeline([normalization, rebalancing, features], rf)) :- true.
':=>'(p853564, pipeline([normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p151211, pipeline([normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p492594, pipeline([normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p368501, pipeline([features, normalization, mitigation], knn)) :- true.
':=>'(p852771, pipeline([features, normalization, mitigation], knn)) :- true.
':=>'(p418266, pipeline([features, normalization, mitigation], nn)) :- true.
':=>'(p966433, pipeline([features, normalization, mitigation], nn)) :- true.
':=>'(p687478, pipeline([features, normalization, mitigation], rf)) :- true.
':=>'(p135707, pipeline([features, normalization, mitigation], rf)) :- true.
':=>'(p738707, pipeline([features, normalization, rebalancing], knn)) :- true.
':=>'(p131242, pipeline([features, normalization, rebalancing], nn)) :- true.
':=>'(p220185, pipeline([features, normalization, rebalancing], rf)) :- true.
':=>'(p591632, pipeline([features, mitigation, normalization], knn)) :- true.
':=>'(p622852, pipeline([features, mitigation, normalization], nn)) :- true.
':=>'(p748, pipeline([features, mitigation, normalization], rf)) :- true.
':=>'(p491033, pipeline([features, mitigation, rebalancing], knn)) :- true.
':=>'(p363992, pipeline([features, mitigation, rebalancing], knn)) :- true.
':=>'(p310431, pipeline([features, mitigation, rebalancing], nn)) :- true.
':=>'(p265688, pipeline([features, mitigation, rebalancing], nn)) :- true.
':=>'(p750050, pipeline([features, mitigation, rebalancing], rf)) :- true.
':=>'(p142438, pipeline([features, rebalancing, normalization], knn)) :- true.
':=>'(p895300, pipeline([features, rebalancing, normalization], nn)) :- true.
':=>'(p668069, pipeline([features, rebalancing, normalization], rf)) :- true.
':=>'(p24145, pipeline([features, rebalancing, mitigation], knn)) :- true.
':=>'(p633752, pipeline([features, rebalancing, mitigation], knn)) :- true.
':=>'(p571983, pipeline([features, rebalancing, mitigation], nn)) :- true.
':=>'(p867490, pipeline([features, rebalancing, mitigation], nn)) :- true.
':=>'(p898697, pipeline([features, rebalancing, mitigation], rf)) :- true.
':=>'(p803326, pipeline([mitigation, features, rebalancing], knn)) :- true.
':=>'(p608061, pipeline([mitigation, features, rebalancing], nn)) :- true.
':=>'(p399171, pipeline([mitigation, rebalancing, features], knn)) :- true.
':=>'(p430871, pipeline([mitigation, rebalancing, features], nn)) :- true.
':=>'(p85704, pipeline([rebalancing, normalization, features], knn)) :- true.
':=>'(p733664, pipeline([rebalancing, normalization, features], nn)) :- true.
':=>'(p474973, pipeline([rebalancing, normalization, features], rf)) :- true.
':=>'(p834852, pipeline([rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p652195, pipeline([rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p872273, pipeline([rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p998524, pipeline([rebalancing, features, normalization], knn)) :- true.
':=>'(p749320, pipeline([rebalancing, features, normalization], nn)) :- true.
':=>'(p643486, pipeline([rebalancing, features, normalization], rf)) :- true.
':=>'(p581800, pipeline([rebalancing, features, mitigation], knn)) :- true.
':=>'(p161243, pipeline([rebalancing, features, mitigation], knn)) :- true.
':=>'(p305487, pipeline([rebalancing, features, mitigation], nn)) :- true.
':=>'(p600744, pipeline([rebalancing, features, mitigation], nn)) :- true.
':=>'(p584473, pipeline([rebalancing, features, mitigation], rf)) :- true.
':=>'(p912455, pipeline([rebalancing, mitigation, features], knn)) :- true.
':=>'(p378696, pipeline([rebalancing, mitigation, features], nn)) :- true.
':=>'(p114070, pipeline([normalization, features, mitigation, rebalancing], knn)) :- true.
':=>'(p993648, pipeline([normalization, features, mitigation, rebalancing], knn)) :- true.
':=>'(p868833, pipeline([normalization, features, mitigation, rebalancing], nn)) :- true.
':=>'(p481510, pipeline([normalization, features, mitigation, rebalancing], nn)) :- true.
':=>'(p365032, pipeline([normalization, features, mitigation, rebalancing], rf)) :- true.
':=>'(p684876, pipeline([normalization, features, mitigation, rebalancing], rf)) :- true.
':=>'(p640467, pipeline([normalization, features, rebalancing, mitigation], knn)) :- true.
':=>'(p118803, pipeline([normalization, features, rebalancing, mitigation], knn)) :- true.
':=>'(p514948, pipeline([normalization, features, rebalancing, mitigation], nn)) :- true.
':=>'(p337039, pipeline([normalization, features, rebalancing, mitigation], nn)) :- true.
':=>'(p414855, pipeline([normalization, features, rebalancing, mitigation], rf)) :- true.
':=>'(p141680, pipeline([normalization, features, rebalancing, mitigation], rf)) :- true.
':=>'(p156435, pipeline([normalization, mitigation, features, rebalancing], knn)) :- true.
':=>'(p309942, pipeline([normalization, mitigation, features, rebalancing], nn)) :- true.
':=>'(p818637, pipeline([normalization, mitigation, features, rebalancing], rf)) :- true.
':=>'(p621412, pipeline([normalization, mitigation, rebalancing, features], knn)) :- true.
':=>'(p335319, pipeline([normalization, mitigation, rebalancing, features], nn)) :- true.
':=>'(p879369, pipeline([normalization, mitigation, rebalancing, features], rf)) :- true.
':=>'(p432807, pipeline([normalization, rebalancing, features, mitigation], knn)) :- true.
':=>'(p242584, pipeline([normalization, rebalancing, features, mitigation], knn)) :- true.
':=>'(p532372, pipeline([normalization, rebalancing, features, mitigation], nn)) :- true.
':=>'(p328199, pipeline([normalization, rebalancing, features, mitigation], nn)) :- true.
':=>'(p355163, pipeline([normalization, rebalancing, features, mitigation], rf)) :- true.
':=>'(p277297, pipeline([normalization, rebalancing, features, mitigation], rf)) :- true.
':=>'(p542132, pipeline([normalization, rebalancing, mitigation, features], knn)) :- true.
':=>'(p923597, pipeline([normalization, rebalancing, mitigation, features], nn)) :- true.
':=>'(p765219, pipeline([normalization, rebalancing, mitigation, features], rf)) :- true.
':=>'(p122357, pipeline([features, normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p511476, pipeline([features, normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p166279, pipeline([features, normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p623706, pipeline([features, normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p548824, pipeline([features, normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p52595, pipeline([features, normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p755177, pipeline([features, normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p334844, pipeline([features, normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p81273, pipeline([features, normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p270397, pipeline([features, normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p438543, pipeline([features, normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p689856, pipeline([features, normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p56624, pipeline([features, mitigation, normalization, rebalancing], knn)) :- true.
':=>'(p334591, pipeline([features, mitigation, normalization, rebalancing], nn)) :- true.
':=>'(p242225, pipeline([features, mitigation, normalization, rebalancing], rf)) :- true.
':=>'(p515072, pipeline([features, mitigation, rebalancing, normalization], knn)) :- true.
':=>'(p519263, pipeline([features, mitigation, rebalancing, normalization], nn)) :- true.
':=>'(p778671, pipeline([features, mitigation, rebalancing, normalization], rf)) :- true.
':=>'(p648802, pipeline([features, rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p340276, pipeline([features, rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p93104, pipeline([features, rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p43569, pipeline([features, rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p667285, pipeline([features, rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p840537, pipeline([features, rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p813649, pipeline([features, rebalancing, mitigation, normalization], knn)) :- true.
':=>'(p145767, pipeline([features, rebalancing, mitigation, normalization], nn)) :- true.
':=>'(p30784, pipeline([features, rebalancing, mitigation, normalization], rf)) :- true.
':=>'(p460899, pipeline([rebalancing, normalization, features, mitigation], knn)) :- true.
':=>'(p15127, pipeline([rebalancing, normalization, features, mitigation], knn)) :- true.
':=>'(p359041, pipeline([rebalancing, normalization, features, mitigation], nn)) :- true.
':=>'(p120986, pipeline([rebalancing, normalization, features, mitigation], nn)) :- true.
':=>'(p479153, pipeline([rebalancing, normalization, features, mitigation], rf)) :- true.
':=>'(p76624, pipeline([rebalancing, normalization, features, mitigation], rf)) :- true.
':=>'(p150377, pipeline([rebalancing, normalization, mitigation, features], knn)) :- true.
':=>'(p482525, pipeline([rebalancing, normalization, mitigation, features], nn)) :- true.
':=>'(p772699, pipeline([rebalancing, normalization, mitigation, features], rf)) :- true.
':=>'(p824110, pipeline([rebalancing, features, normalization, mitigation], knn)) :- true.
':=>'(p924327, pipeline([rebalancing, features, normalization, mitigation], knn)) :- true.
':=>'(p642613, pipeline([rebalancing, features, normalization, mitigation], nn)) :- true.
':=>'(p834229, pipeline([rebalancing, features, normalization, mitigation], nn)) :- true.
':=>'(p290447, pipeline([rebalancing, features, normalization, mitigation], rf)) :- true.
':=>'(p597762, pipeline([rebalancing, features, normalization, mitigation], rf)) :- true.
':=>'(p703581, pipeline([rebalancing, features, mitigation, normalization], knn)) :- true.
':=>'(p893627, pipeline([rebalancing, features, mitigation, normalization], nn)) :- true.
':=>'(p447522, pipeline([rebalancing, features, mitigation, normalization], rf)) :- true.

Checking Config
Exporting Config
Saving Graph
Exporting AutoML input
Exporting Space
Exporting Constraints
Input created for iteration Config(iteration=3, dataset=credit-g, metric=balanced_accuracy, fairnessMetric=equalized_odds_ratio, sensitiveFeatures=[personal_status, sex], mode=max, batchSize=999999, timeBudget=900, seed=42)
Here is the standard output/error of the command:

f8974dd6b6f373d4e46b468f8d1d1a4462d050461c53f8ff3abc319567dadd89
Here is the standard output/error of the command:

Here is the standard output/error of the command:

WARNING:root:No module named 'rpy2': FairAdapt will be unavailable. To install, run:
pip install 'aif360[FairAdapt]'
INFO:flaml.tune.searcher.blendsearch:No low-cost partial config given to the search algorithm. For cost-frugal search, consider providing low-cost values for cost-related hps via 'low_cost_partial_config'. More info can be found at https://microsoft.github.io/FLAML/docs/FAQ#about-low_cost_partial_config-in-tune
Trying to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Added successfully: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Trying to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: normalization == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
AutoML: starting optimization.
41
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'equalized_odds_ratio': np.float64(0.24080459770114943), 'balanced_accuracy': np.float64(0.4957142857142857), 'by_group': {'female_div/dep/mar': np.float64(0.67), 'male_div/sep': np.float64(0.5), 'male_mar/wid': np.float64(0.6), 'male_single': np.float64(0.61)}, 'status': 'success', 'total_time': 43.098156452178955, 'fit_time': np.float64(8.581258916854859), 'score_time': np.float64(0.0071752071380615234), 'absolute_time': 1746707487.7571259, 'flatten_equalized_odds_ratio': '0.0_0.58_0.62_0.0_0.0', 'flatten_balanced_accuracy': '0.35_0.57_0.53_0.54_0.49'}
42
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 3, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification')}
{'equalized_odds_ratio': np.float64(0.21969696969696972), 'balanced_accuracy': np.float64(0.6464285714285715), 'by_group': {'female_div/dep/mar': np.float64(0.56), 'male_div/sep': np.float64(0.41), 'male_mar/wid': np.float64(0.6), 'male_single': np.float64(0.59)}, 'status': 'success', 'total_time': 1.7696647644042969, 'fit_time': np.float64(0.2844213962554932), 'score_time': np.float64(0.010151529312133789), 'absolute_time': 1746707489.5902267, 'flatten_equalized_odds_ratio': '0.0_0.42_0.68_0.0_0.0', 'flatten_balanced_accuracy': '0.68_0.66_0.66_0.6_0.64'}
43
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.5395402298850575), 'balanced_accuracy': np.float64(0.5557142857142857), 'by_group': {'female_div/dep/mar': np.float64(0.79), 'male_div/sep': np.float64(0.75), 'male_mar/wid': np.float64(0.77), 'male_single': np.float64(0.67)}, 'status': 'success', 'total_time': 80.51982975006104, 'fit_time': np.float64(16.059397411346435), 'score_time': np.float64(0.008306169509887695), 'absolute_time': 1746707570.1871843, 'flatten_equalized_odds_ratio': '0.27_0.5_0.66_0.59_0.69', 'flatten_balanced_accuracy': '0.57_0.58_0.55_0.56_0.52'}
/usr/local/lib/python3.12/site-packages/numpy/_core/_methods.py:194: RuntimeWarning: overflow encountered in multiply
  x = um.multiply(x, x, out=x)
44
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'equalized_odds_ratio': np.float64(0.47898641588296764), 'balanced_accuracy': np.float64(0.5304761904761904), 'by_group': {'female_div/dep/mar': np.float64(0.72), 'male_div/sep': np.float64(0.53), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.6)}, 'status': 'success', 'total_time': 41.68830227851868, 'fit_time': np.float64(8.297157859802246), 'score_time': np.float64(0.00821371078491211), 'absolute_time': 1746707611.973089, 'flatten_equalized_odds_ratio': '0.85_0.5_0.62_0.42_0.0', 'flatten_balanced_accuracy': '0.54_0.58_0.52_0.5_0.51'}
45
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 2, 'max_features': 4, 'max_leaf_nodes': 4, 'min_samples_split': 3, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'equalized_odds_ratio': np.float64(0.0), 'balanced_accuracy': np.float64(0.6830952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.68), 'male_div/sep': np.float64(0.21), 'male_mar/wid': np.float64(0.18), 'male_single': np.float64(0.73)}, 'status': 'success', 'total_time': 1.7038373947143555, 'fit_time': np.float64(0.2949774742126465), 'score_time': np.float64(0.011363601684570313), 'absolute_time': 1746707613.7540007, 'flatten_equalized_odds_ratio': '0.0_0.0_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.67_0.69_0.7_0.69_0.67'}
46
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.7308284818629647), 'balanced_accuracy': np.float64(0.5180952380952382), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.78), 'male_mar/wid': np.float64(0.9), 'male_single': np.float64(0.83)}, 'status': 'success', 'total_time': 0.2834353446960449, 'fit_time': np.float64(0.005302047729492188), 'score_time': np.float64(0.01178436279296875), 'absolute_time': 1746707614.1079543, 'flatten_equalized_odds_ratio': '0.82_0.9_0.79_0.65_0.5', 'flatten_balanced_accuracy': '0.52_0.52_0.51_0.57_0.47'}
47
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 19, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.3221049382716049), 'balanced_accuracy': np.float64(0.6611904761904761), 'by_group': {'female_div/dep/mar': np.float64(0.57), 'male_div/sep': np.float64(0.35), 'male_mar/wid': np.float64(0.71), 'male_single': np.float64(0.5)}, 'status': 'success', 'total_time': 1.8923523426055908, 'fit_time': np.float64(0.09100117683410644), 'score_time': np.float64(0.13509793281555177), 'absolute_time': 1746707616.069252, 'flatten_equalized_odds_ratio': '0.25_0.61_0.31_0.44_0.0', 'flatten_balanced_accuracy': '0.65_0.65_0.67_0.68_0.66'}
48
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 2}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'equalized_odds_ratio': np.float64(0.4311029189352692), 'balanced_accuracy': np.float64(0.5478571428571428), 'by_group': {'female_div/dep/mar': np.float64(0.82), 'male_div/sep': np.float64(0.5), 'male_mar/wid': np.float64(0.9), 'male_single': np.float64(0.56)}, 'status': 'success', 'total_time': 116.95960092544556, 'fit_time': np.float64(6.773634529113769), 'score_time': np.float64(0.013811206817626953), 'absolute_time': 1746707733.1124508, 'flatten_equalized_odds_ratio': '0.42_0.58_0.64_0.52_0.0', 'flatten_balanced_accuracy': '0.56_0.55_0.54_0.54_0.54'}
49
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(25), 'solver': np.str_('sgd')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'equalized_odds_ratio': np.float64(0.3759541703507221), 'balanced_accuracy': np.float64(0.5092857142857142), 'by_group': {'female_div/dep/mar': np.float64(0.72), 'male_div/sep': np.float64(0.54), 'male_mar/wid': np.float64(0.81), 'male_single': np.float64(0.58)}, 'status': 'success', 'total_time': 1.3636999130249023, 'fit_time': np.float64(0.23907346725463868), 'score_time': np.float64(0.0045226097106933595), 'absolute_time': 1746707735.8874435, 'flatten_equalized_odds_ratio': '0.31_0.31_0.62_0.39_0.25', 'flatten_balanced_accuracy': '0.39_0.58_0.53_0.53_0.51'}
50
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 18, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.65), 'balanced_accuracy': np.float64(0.5028571428571429), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.65), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.81)}, 'status': 'success', 'total_time': 76.60591864585876, 'fit_time': np.float64(15.12793869972229), 'score_time': np.float64(0.08303031921386719), 'absolute_time': 1746707812.583517, 'flatten_equalized_odds_ratio': '0.75_1.0_1.0_0.0_0.5', 'flatten_balanced_accuracy': '0.54_0.5_0.5_0.41_0.56'}
51
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.46533333333333343), 'balanced_accuracy': np.float64(0.5392857142857143), 'by_group': {'female_div/dep/mar': np.float64(0.7), 'male_div/sep': np.float64(0.51), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.55)}, 'status': 'success', 'total_time': 60.04427194595337, 'fit_time': np.float64(11.965489673614503), 'score_time': np.float64(0.008705711364746094), 'absolute_time': 1746707872.7148395, 'flatten_equalized_odds_ratio': '0.42_0.62_0.65_0.39_0.25', 'flatten_balanced_accuracy': '0.58_0.58_0.55_0.47_0.51'}
52
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_split': 5, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.8252873563218392), 'balanced_accuracy': np.float64(0.5235714285714286), 'by_group': {'female_div/dep/mar': np.float64(0.93), 'male_div/sep': np.float64(0.83), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.9)}, 'status': 'success', 'total_time': 56.66269040107727, 'fit_time': np.float64(11.28290524482727), 'score_time': np.float64(0.009467887878417968), 'absolute_time': 1746707929.4808333, 'flatten_equalized_odds_ratio': '1.0_0.5_0.97_0.83_0.83', 'flatten_balanced_accuracy': '0.5_0.58_0.5_0.51_0.53'}
53
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 52.90837645530701, 'fit_time': np.float64(10.53970103263855), 'score_time': np.float64(0.007032012939453125), 'absolute_time': 1746707982.4809477, 'flatten_equalized_odds_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
54
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.8059561128526646), 'balanced_accuracy': np.float64(0.544047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.9), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.86)}, 'status': 'success', 'total_time': 1.3876376152038574, 'fit_time': np.float64(0.24092230796813965), 'score_time': np.float64(0.00445866584777832), 'absolute_time': 1746707983.9707236, 'flatten_equalized_odds_ratio': '0.75_0.75_0.91_0.72_0.9', 'flatten_balanced_accuracy': '0.56_0.54_0.53_0.57_0.53'}
55
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 11, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.2368861024033438), 'balanced_accuracy': np.float64(0.6276190476190476), 'by_group': {'female_div/dep/mar': np.float64(0.64), 'male_div/sep': np.float64(0.26), 'male_mar/wid': np.float64(0.89), 'male_single': np.float64(0.56)}, 'status': 'success', 'total_time': 0.6472792625427246, 'fit_time': np.float64(0.08742165565490723), 'score_time': np.float64(0.006953716278076172), 'absolute_time': 1746707984.7041423, 'flatten_equalized_odds_ratio': '0.0_0.5_0.45_0.23_0.0', 'flatten_balanced_accuracy': '0.66_0.66_0.6_0.64_0.59'}
56
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 5, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'equalized_odds_ratio': np.float64(0.898390804597701), 'balanced_accuracy': np.float64(0.5083333333333333), 'by_group': {'female_div/dep/mar': np.float64(0.93), 'male_div/sep': np.float64(0.96), 'male_mar/wid': np.float64(0.95), 'male_single': np.float64(0.9)}, 'status': 'success', 'total_time': 63.083224058151245, 'fit_time': np.float64(12.384872198104858), 'score_time': np.float64(0.10632343292236328), 'absolute_time': 1746708047.8963132, 'flatten_equalized_odds_ratio': '0.86_1.0_1.0_0.73_0.9', 'flatten_balanced_accuracy': '0.54_0.5_0.5_0.47_0.53'}
/usr/local/lib/python3.12/site-packages/numpy/_core/_methods.py:194: RuntimeWarning: overflow encountered in multiply
  x = um.multiply(x, x, out=x)
/usr/local/lib/python3.12/site-packages/numpy/_core/_methods.py:205: RuntimeWarning: overflow encountered in reduce
  ret = umr_sum(x, axis, dtype, out, keepdims=keepdims, where=where)
57
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.6341069849690539), 'balanced_accuracy': np.float64(0.5371428571428571), 'by_group': {'female_div/dep/mar': np.float64(0.85), 'male_div/sep': np.float64(0.68), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.67)}, 'status': 'success', 'total_time': 105.65915894508362, 'fit_time': np.float64(11.90067629814148), 'score_time': np.float64(0.010542726516723633), 'absolute_time': 1746708154.9660056, 'flatten_equalized_odds_ratio': '0.42_0.54_0.83_0.67_0.72', 'flatten_balanced_accuracy': '0.55_0.55_0.53_0.55_0.51'}
58
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 3, 'n_estimators': np.int64(25)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification')}
{'equalized_odds_ratio': np.float64(0.6778325123152709), 'balanced_accuracy': np.float64(0.5457142857142856), 'by_group': {'female_div/dep/mar': np.float64(0.86), 'male_div/sep': np.float64(0.73), 'male_mar/wid': np.float64(0.93), 'male_single': np.float64(0.73)}, 'status': 'success', 'total_time': 79.39256453514099, 'fit_time': np.float64(15.832446956634522), 'score_time': np.float64(0.009417009353637696), 'absolute_time': 1746708234.4710329, 'flatten_equalized_odds_ratio': '0.79_0.5_0.79_0.62_0.69', 'flatten_balanced_accuracy': '0.54_0.57_0.53_0.56_0.52'}
59
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 13, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 9}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.6072936259143156), 'balanced_accuracy': np.float64(0.6038095238095238), 'by_group': {'female_div/dep/mar': np.float64(0.73), 'male_div/sep': np.float64(0.79), 'male_mar/wid': np.float64(0.84), 'male_single': np.float64(0.78)}, 'status': 'success', 'total_time': 0.6823916435241699, 'fit_time': np.float64(0.044342041015625), 'score_time': np.float64(0.008886098861694336), 'absolute_time': 1746708235.2686017, 'flatten_equalized_odds_ratio': '0.53_0.5_0.64_0.78_0.59', 'flatten_balanced_accuracy': '0.62_0.62_0.57_0.6_0.6'}
60
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(25), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.04244031830238727), 'balanced_accuracy': np.float64(0.46380952380952384), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(0.05), 'male_mar/wid': np.float64(0.04), 'male_single': np.float64(0.42)}, 'status': 'success', 'total_time': 2.1421010494232178, 'fit_time': np.float64(0.39258975982666017), 'score_time': np.float64(0.004178667068481445), 'absolute_time': 1746708237.5292466, 'flatten_equalized_odds_ratio': '0.0_0.21_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.55_0.48_0.42_0.46_0.41'}
61
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 1, 'max_leaf_nodes': 4, 'min_samples_split': 6, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.8764367816091955), 'balanced_accuracy': np.float64(0.5188095238095238), 'by_group': {'female_div/dep/mar': np.float64(0.94), 'male_div/sep': np.float64(0.88), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.92)}, 'status': 'success', 'total_time': 65.48039150238037, 'fit_time': np.float64(13.037774896621704), 'score_time': np.float64(0.014903926849365234), 'absolute_time': 1746708303.0964715, 'flatten_equalized_odds_ratio': '1.0_0.75_0.97_0.83_0.83', 'flatten_balanced_accuracy': '0.5_0.56_0.5_0.51_0.52'}
62
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.25146551724137933), 'balanced_accuracy': np.float64(0.6176190476190475), 'by_group': {'female_div/dep/mar': np.float64(0.57), 'male_div/sep': np.float64(0.41), 'male_mar/wid': np.float64(0.83), 'male_single': np.float64(0.49)}, 'status': 'success', 'total_time': 1.0738537311553955, 'fit_time': np.float64(0.13926482200622559), 'score_time': np.float64(0.018976163864135743), 'absolute_time': 1746708304.2955751, 'flatten_equalized_odds_ratio': '0.0_0.6_0.34_0.0_0.31', 'flatten_balanced_accuracy': '0.65_0.65_0.62_0.59_0.57'}
63
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 7}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.5807471264367816), 'balanced_accuracy': np.float64(0.5588095238095238), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.71), 'male_mar/wid': np.float64(0.92), 'male_single': np.float64(0.64)}, 'status': 'success', 'total_time': 132.90239596366882, 'fit_time': np.float64(16.8323935508728), 'score_time': np.float64(0.00812978744506836), 'absolute_time': 1746708437.3441832, 'flatten_equalized_odds_ratio': '0.42_0.62_0.76_0.48_0.62', 'flatten_balanced_accuracy': '0.58_0.59_0.55_0.55_0.53'}
AutoML: optimization done.
AutoML: miner done.
AutoML: export done.
Here is the standard output/error of the command:

Here is the standard output/error of the command:

Here is the standard output/error of the command:

hamlet_866247476
AutoML execution ended
