Sensitive groups ready!
Theory ready!
Theory:
step(normalization) :- true.
step(features) :- true.
step(mitigation) :- true.
step(rebalancing) :- true.
step(classification) :- true.
operator(normalization, power_transformer) :- true.
operator(normalization, robust_scaler) :- true.
operator(normalization, standard) :- true.
operator(normalization, minmax) :- true.
operator(features, select_k_best) :- true.
operator(features, pca) :- true.
operator(mitigation, corr_remover) :- true.
operator(mitigation, lfr) :- true.
operator(rebalancing, near_miss) :- true.
operator(rebalancing, smote) :- true.
operator(classification, knn) :- true.
operator(classification, nn) :- true.
operator(classification, rf) :- true.
hyperparameter(robust_scaler, with_centering, choice) :- true.
hyperparameter(robust_scaler, with_scaling, choice) :- true.
hyperparameter(standard, with_mean, choice) :- true.
hyperparameter(standard, with_std, choice) :- true.
hyperparameter(select_k_best, k, randint) :- true.
hyperparameter(pca, n_components, randint) :- true.
hyperparameter(corr_remover, alpha, choice) :- true.
hyperparameter(lfr, n_prototypes, choice) :- true.
hyperparameter(lfr, reconstruct_weight, choice) :- true.
hyperparameter(lfr, fairness_weight, choice) :- true.
hyperparameter(near_miss, n_neighbors, randint) :- true.
hyperparameter(smote, k_neighbors, randint) :- true.
hyperparameter(knn, n_neighbors, randint) :- true.
hyperparameter(knn, weights, choice) :- true.
hyperparameter(knn, metric, choice) :- true.
hyperparameter(nn, n_hidden_layers, choice) :- true.
hyperparameter(nn, n_neurons, choice) :- true.
hyperparameter(nn, activation, choice) :- true.
hyperparameter(nn, solver, choice) :- true.
hyperparameter(nn, alpha, choice) :- true.
hyperparameter(nn, learning_rate, choice) :- true.
hyperparameter(rf, n_estimators, choice) :- true.
hyperparameter(rf, max_depth, randint) :- true.
hyperparameter(rf, max_features, randint) :- true.
hyperparameter(rf, min_samples_split, randint) :- true.
hyperparameter(rf, max_leaf_nodes, randint) :- true.
hyperparameter(rf, bootstrap, choice) :- true.
hyperparameter(rf, criterion, choice) :- true.
domain(robust_scaler, with_centering, [true, false]) :- true.
domain(robust_scaler, with_scaling, [true, false]) :- true.
domain(standard, with_mean, [true, false]) :- true.
domain(standard, with_std, [true, false]) :- true.
domain(select_k_best, k, [1, 10]) :- true.
domain(pca, n_components, [1, 8]) :- true.
domain(corr_remover, alpha, [0.25, 0.5, 0.75, 1.0]) :- true.
domain(lfr, n_prototypes, [10, 50, 100, 200]) :- true.
domain(lfr, reconstruct_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(lfr, fairness_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(near_miss, n_neighbors, [1, 4]) :- true.
domain(smote, k_neighbors, [5, 8]) :- true.
domain(knn, n_neighbors, [3, 20]) :- true.
domain(knn, weights, [uniform, distance]) :- true.
domain(knn, metric, [minkowski, euclidean, manhattan]) :- true.
domain(nn, n_hidden_layers, [1, 5, 10, 20]) :- true.
domain(nn, n_neurons, [5, 10, 25, 50]) :- true.
domain(nn, activation, [logistic, tanh, relu]) :- true.
domain(nn, solver, [lbfgs, sgd, adam]) :- true.
domain(nn, alpha, [0.0001, 0.001, 0.01, 0.00001]) :- true.
domain(nn, learning_rate, [constant, invscaling, adaptive]) :- true.
domain(rf, n_estimators, [10, 25, 50, 75, 100]) :- true.
domain(rf, max_depth, [1, 5]) :- true.
domain(rf, max_features, [1, 4]) :- true.
domain(rf, min_samples_split, [2, 6]) :- true.
domain(rf, max_leaf_nodes, [2, 6]) :- true.
domain(rf, bootstrap, [true, false]) :- true.
domain(rf, criterion, [gini, entropy]) :- true.
':=>'(c1, mandatory([mitigation], classification)) :- true.
':=>'(c3, mandatory_order([mitigation, features], classification)) :- true.
':=>'(c4, mandatory_order([mitigation, normalization], classification)) :- true.
':=>'(c5, mandatory([normalization], knn)) :- true.
':=>'(c6, mandatory([normalization], nn)) :- true.
dataset(adult) :- true.
metric(balanced_accuracy) :- true.
fairness_metric(equalized_odds_ratio) :- true.
sensitive_feature(sex, ['Male', 'Female']) :- true.
sensitive_feature(race, ['Amer-Indian-Eskimo', 'Asian-Pac-Islander', 'Black', 'Other', 'White']) :- true.
':=>'(mc0, unbalanced_dataset) :- true.
pipeline([Step_1_0], ZZ_0) :- (step(Step_1_0), '\\='(Step_1_0, classification), operator(classification, ZZ_0)).
pipeline([Step_1_1, Step_2_0], ZZ_1) :- (step(Step_1_1), step(Step_2_0), '\\='(Step_1_1, classification), '\\='(Step_2_0, classification), '\\='(Step_1_1, Step_2_0), operator(classification, ZZ_1)).
pipeline([Step_1_2, Step_2_1, Step_3_0], ZZ_2) :- (step(Step_1_2), step(Step_2_1), step(Step_3_0), '\\='(Step_1_2, classification), '\\='(Step_2_1, classification), '\\='(Step_3_0, classification), '\\='(Step_1_2, Step_2_1), '\\='(Step_1_2, Step_3_0), '\\='(Step_2_1, Step_3_0), operator(classification, ZZ_2)).
pipeline([Step_1_3, Step_2_2, Step_3_1, Step_4_0], ZZ_3) :- (step(Step_1_3), step(Step_2_2), step(Step_3_1), step(Step_4_0), '\\='(Step_1_3, classification), '\\='(Step_2_2, classification), '\\='(Step_3_1, classification), '\\='(Step_4_0, classification), '\\='(Step_1_3, Step_2_2), '\\='(Step_1_3, Step_3_1), '\\='(Step_1_3, Step_4_0), '\\='(Step_2_2, Step_3_1), '\\='(Step_2_2, Step_4_0), '\\='(Step_3_1, Step_4_0), operator(classification, ZZ_3)).
':=>'(p471324, sensitive_group(['Male'])) :- true.
':=>'(p343640, sensitive_group(['Female'])) :- true.
':=>'(p845834, sensitive_group(['Amer-Indian-Eskimo'])) :- true.
':=>'(p904914, sensitive_group(['Asian-Pac-Islander'])) :- true.
':=>'(p969125, sensitive_group(['Black'])) :- true.
':=>'(p449058, sensitive_group(['Other'])) :- true.
':=>'(p309264, sensitive_group(['White'])) :- true.
':=>'(p566239, sensitive_group(['Male', 'Amer-Indian-Eskimo'])) :- true.
':=>'(p234922, sensitive_group(['Male', 'Asian-Pac-Islander'])) :- true.
':=>'(p16249, sensitive_group(['Male', 'Black'])) :- true.
':=>'(p932987, sensitive_group(['Male', 'Other'])) :- true.
':=>'(p733051, sensitive_group(['Male', 'White'])) :- true.
':=>'(p178559, sensitive_group(['Female', 'Amer-Indian-Eskimo'])) :- true.
':=>'(p533720, sensitive_group(['Female', 'Asian-Pac-Islander'])) :- true.
':=>'(p951751, sensitive_group(['Female', 'Black'])) :- true.
':=>'(p871741, sensitive_group(['Female', 'Other'])) :- true.
':=>'(p332238, sensitive_group(['Female', 'White'])) :- true.
':=>'(p440558, pipeline([], knn)) :- true.
':=>'(p509991, pipeline([], knn)) :- true.
':=>'(p477915, pipeline([], nn)) :- true.
':=>'(p118634, pipeline([], nn)) :- true.
':=>'(p899176, pipeline([], rf)) :- true.
':=>'(p457107, pipeline([normalization], knn)) :- true.
':=>'(p796586, pipeline([normalization], nn)) :- true.
':=>'(p194830, pipeline([normalization], rf)) :- true.
':=>'(p408192, pipeline([features], knn)) :- true.
':=>'(p755765, pipeline([features], knn)) :- true.
':=>'(p399210, pipeline([features], nn)) :- true.
':=>'(p237895, pipeline([features], nn)) :- true.
':=>'(p54977, pipeline([features], rf)) :- true.
':=>'(p136088, pipeline([mitigation], knn)) :- true.
':=>'(p918851, pipeline([mitigation], nn)) :- true.
':=>'(p320416, pipeline([rebalancing], knn)) :- true.
':=>'(p831735, pipeline([rebalancing], knn)) :- true.
':=>'(p209261, pipeline([rebalancing], nn)) :- true.
':=>'(p195766, pipeline([rebalancing], nn)) :- true.
':=>'(p568483, pipeline([rebalancing], rf)) :- true.
':=>'(p891803, pipeline([normalization, features], knn)) :- true.
':=>'(p991566, pipeline([normalization, features], nn)) :- true.
':=>'(p887435, pipeline([normalization, features], rf)) :- true.
':=>'(p103907, pipeline([normalization, mitigation], knn)) :- true.
':=>'(p761340, pipeline([normalization, mitigation], nn)) :- true.
':=>'(p780545, pipeline([normalization, mitigation], rf)) :- true.
':=>'(p934683, pipeline([normalization, rebalancing], knn)) :- true.
':=>'(p78169, pipeline([normalization, rebalancing], nn)) :- true.
':=>'(p918746, pipeline([normalization, rebalancing], rf)) :- true.
':=>'(p804698, pipeline([features, normalization], knn)) :- true.
':=>'(p64736, pipeline([features, normalization], nn)) :- true.
':=>'(p401851, pipeline([features, normalization], rf)) :- true.
':=>'(p231768, pipeline([features, mitigation], knn)) :- true.
':=>'(p280615, pipeline([features, mitigation], knn)) :- true.
':=>'(p953788, pipeline([features, mitigation], nn)) :- true.
':=>'(p862582, pipeline([features, mitigation], nn)) :- true.
':=>'(p246863, pipeline([features, mitigation], rf)) :- true.
':=>'(p488520, pipeline([features, rebalancing], knn)) :- true.
':=>'(p547791, pipeline([features, rebalancing], knn)) :- true.
':=>'(p892945, pipeline([features, rebalancing], nn)) :- true.
':=>'(p547888, pipeline([features, rebalancing], nn)) :- true.
':=>'(p815474, pipeline([features, rebalancing], rf)) :- true.
':=>'(p892161, pipeline([mitigation, features], knn)) :- true.
':=>'(p202856, pipeline([mitigation, features], nn)) :- true.
':=>'(p213643, pipeline([mitigation, rebalancing], knn)) :- true.
':=>'(p57792, pipeline([mitigation, rebalancing], nn)) :- true.
':=>'(p97391, pipeline([rebalancing, normalization], knn)) :- true.
':=>'(p800084, pipeline([rebalancing, normalization], nn)) :- true.
':=>'(p639242, pipeline([rebalancing, normalization], rf)) :- true.
':=>'(p255193, pipeline([rebalancing, features], knn)) :- true.
':=>'(p741044, pipeline([rebalancing, features], knn)) :- true.
':=>'(p551668, pipeline([rebalancing, features], nn)) :- true.
':=>'(p384384, pipeline([rebalancing, features], nn)) :- true.
':=>'(p820529, pipeline([rebalancing, features], rf)) :- true.
':=>'(p391060, pipeline([rebalancing, mitigation], knn)) :- true.
':=>'(p425970, pipeline([rebalancing, mitigation], nn)) :- true.
':=>'(p681571, pipeline([normalization, features, mitigation], knn)) :- true.
':=>'(p60071, pipeline([normalization, features, mitigation], knn)) :- true.
':=>'(p118850, pipeline([normalization, features, mitigation], nn)) :- true.
':=>'(p285712, pipeline([normalization, features, mitigation], nn)) :- true.
':=>'(p930673, pipeline([normalization, features, mitigation], rf)) :- true.
':=>'(p181524, pipeline([normalization, features, mitigation], rf)) :- true.
':=>'(p779155, pipeline([normalization, features, rebalancing], knn)) :- true.
':=>'(p758836, pipeline([normalization, features, rebalancing], nn)) :- true.
':=>'(p388766, pipeline([normalization, features, rebalancing], rf)) :- true.
':=>'(p513400, pipeline([normalization, mitigation, features], knn)) :- true.
':=>'(p870109, pipeline([normalization, mitigation, features], nn)) :- true.
':=>'(p605068, pipeline([normalization, mitigation, features], rf)) :- true.
':=>'(p220109, pipeline([normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p789608, pipeline([normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p667227, pipeline([normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p296873, pipeline([normalization, rebalancing, features], knn)) :- true.
':=>'(p807989, pipeline([normalization, rebalancing, features], nn)) :- true.
':=>'(p837990, pipeline([normalization, rebalancing, features], rf)) :- true.
':=>'(p369681, pipeline([normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p896135, pipeline([normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p122425, pipeline([normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p58321, pipeline([features, normalization, mitigation], knn)) :- true.
':=>'(p615012, pipeline([features, normalization, mitigation], knn)) :- true.
':=>'(p898474, pipeline([features, normalization, mitigation], nn)) :- true.
':=>'(p172597, pipeline([features, normalization, mitigation], nn)) :- true.
':=>'(p3432, pipeline([features, normalization, mitigation], rf)) :- true.
':=>'(p231817, pipeline([features, normalization, mitigation], rf)) :- true.
':=>'(p101823, pipeline([features, normalization, rebalancing], knn)) :- true.
':=>'(p756746, pipeline([features, normalization, rebalancing], nn)) :- true.
':=>'(p203474, pipeline([features, normalization, rebalancing], rf)) :- true.
':=>'(p390025, pipeline([features, mitigation, normalization], knn)) :- true.
':=>'(p8799, pipeline([features, mitigation, normalization], nn)) :- true.
':=>'(p494437, pipeline([features, mitigation, normalization], rf)) :- true.
':=>'(p189848, pipeline([features, mitigation, rebalancing], knn)) :- true.
':=>'(p852481, pipeline([features, mitigation, rebalancing], knn)) :- true.
':=>'(p841481, pipeline([features, mitigation, rebalancing], nn)) :- true.
':=>'(p100480, pipeline([features, mitigation, rebalancing], nn)) :- true.
':=>'(p248311, pipeline([features, mitigation, rebalancing], rf)) :- true.
':=>'(p731811, pipeline([features, rebalancing, normalization], knn)) :- true.
':=>'(p383984, pipeline([features, rebalancing, normalization], nn)) :- true.
':=>'(p710176, pipeline([features, rebalancing, normalization], rf)) :- true.
':=>'(p136266, pipeline([features, rebalancing, mitigation], knn)) :- true.
':=>'(p636844, pipeline([features, rebalancing, mitigation], knn)) :- true.
':=>'(p825391, pipeline([features, rebalancing, mitigation], nn)) :- true.
':=>'(p793781, pipeline([features, rebalancing, mitigation], nn)) :- true.
':=>'(p720592, pipeline([features, rebalancing, mitigation], rf)) :- true.
':=>'(p200698, pipeline([mitigation, features, rebalancing], knn)) :- true.
':=>'(p338004, pipeline([mitigation, features, rebalancing], nn)) :- true.
':=>'(p86938, pipeline([mitigation, rebalancing, features], knn)) :- true.
':=>'(p141979, pipeline([mitigation, rebalancing, features], nn)) :- true.
':=>'(p198480, pipeline([rebalancing, normalization, features], knn)) :- true.
':=>'(p693017, pipeline([rebalancing, normalization, features], nn)) :- true.
':=>'(p869080, pipeline([rebalancing, normalization, features], rf)) :- true.
':=>'(p438131, pipeline([rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p953327, pipeline([rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p493156, pipeline([rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p708057, pipeline([rebalancing, features, normalization], knn)) :- true.
':=>'(p719557, pipeline([rebalancing, features, normalization], nn)) :- true.
':=>'(p588868, pipeline([rebalancing, features, normalization], rf)) :- true.
':=>'(p902516, pipeline([rebalancing, features, mitigation], knn)) :- true.
':=>'(p939746, pipeline([rebalancing, features, mitigation], knn)) :- true.
':=>'(p411786, pipeline([rebalancing, features, mitigation], nn)) :- true.
':=>'(p639844, pipeline([rebalancing, features, mitigation], nn)) :- true.
':=>'(p832503, pipeline([rebalancing, features, mitigation], rf)) :- true.
':=>'(p397466, pipeline([rebalancing, mitigation, features], knn)) :- true.
':=>'(p555070, pipeline([rebalancing, mitigation, features], nn)) :- true.
':=>'(p782040, pipeline([normalization, features, mitigation, rebalancing], knn)) :- true.
':=>'(p850503, pipeline([normalization, features, mitigation, rebalancing], knn)) :- true.
':=>'(p206559, pipeline([normalization, features, mitigation, rebalancing], nn)) :- true.
':=>'(p916352, pipeline([normalization, features, mitigation, rebalancing], nn)) :- true.
':=>'(p114000, pipeline([normalization, features, mitigation, rebalancing], rf)) :- true.
':=>'(p407731, pipeline([normalization, features, mitigation, rebalancing], rf)) :- true.
':=>'(p315571, pipeline([normalization, features, rebalancing, mitigation], knn)) :- true.
':=>'(p520700, pipeline([normalization, features, rebalancing, mitigation], knn)) :- true.
':=>'(p505128, pipeline([normalization, features, rebalancing, mitigation], nn)) :- true.
':=>'(p977641, pipeline([normalization, features, rebalancing, mitigation], nn)) :- true.
':=>'(p565744, pipeline([normalization, features, rebalancing, mitigation], rf)) :- true.
':=>'(p590211, pipeline([normalization, features, rebalancing, mitigation], rf)) :- true.
':=>'(p774981, pipeline([normalization, mitigation, features, rebalancing], knn)) :- true.
':=>'(p288800, pipeline([normalization, mitigation, features, rebalancing], nn)) :- true.
':=>'(p208469, pipeline([normalization, mitigation, features, rebalancing], rf)) :- true.
':=>'(p908505, pipeline([normalization, mitigation, rebalancing, features], knn)) :- true.
':=>'(p667760, pipeline([normalization, mitigation, rebalancing, features], nn)) :- true.
':=>'(p852371, pipeline([normalization, mitigation, rebalancing, features], rf)) :- true.
':=>'(p16278, pipeline([normalization, rebalancing, features, mitigation], knn)) :- true.
':=>'(p890327, pipeline([normalization, rebalancing, features, mitigation], knn)) :- true.
':=>'(p124957, pipeline([normalization, rebalancing, features, mitigation], nn)) :- true.
':=>'(p806920, pipeline([normalization, rebalancing, features, mitigation], nn)) :- true.
':=>'(p264171, pipeline([normalization, rebalancing, features, mitigation], rf)) :- true.
':=>'(p611277, pipeline([normalization, rebalancing, features, mitigation], rf)) :- true.
':=>'(p889579, pipeline([normalization, rebalancing, mitigation, features], knn)) :- true.
':=>'(p587417, pipeline([normalization, rebalancing, mitigation, features], nn)) :- true.
':=>'(p412237, pipeline([normalization, rebalancing, mitigation, features], rf)) :- true.
':=>'(p881484, pipeline([features, normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p236636, pipeline([features, normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p658593, pipeline([features, normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p612392, pipeline([features, normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p674041, pipeline([features, normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p506577, pipeline([features, normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p873452, pipeline([features, normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p970360, pipeline([features, normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p179835, pipeline([features, normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p603831, pipeline([features, normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p633684, pipeline([features, normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p731532, pipeline([features, normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p771197, pipeline([features, mitigation, normalization, rebalancing], knn)) :- true.
':=>'(p480342, pipeline([features, mitigation, normalization, rebalancing], nn)) :- true.
':=>'(p174451, pipeline([features, mitigation, normalization, rebalancing], rf)) :- true.
':=>'(p156558, pipeline([features, mitigation, rebalancing, normalization], knn)) :- true.
':=>'(p853647, pipeline([features, mitigation, rebalancing, normalization], nn)) :- true.
':=>'(p455068, pipeline([features, mitigation, rebalancing, normalization], rf)) :- true.
':=>'(p39450, pipeline([features, rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p370568, pipeline([features, rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p504883, pipeline([features, rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p337489, pipeline([features, rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p40537, pipeline([features, rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p134370, pipeline([features, rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p167426, pipeline([features, rebalancing, mitigation, normalization], knn)) :- true.
':=>'(p155927, pipeline([features, rebalancing, mitigation, normalization], nn)) :- true.
':=>'(p495781, pipeline([features, rebalancing, mitigation, normalization], rf)) :- true.
':=>'(p592255, pipeline([rebalancing, normalization, features, mitigation], knn)) :- true.
':=>'(p39446, pipeline([rebalancing, normalization, features, mitigation], knn)) :- true.
':=>'(p113236, pipeline([rebalancing, normalization, features, mitigation], nn)) :- true.
':=>'(p407583, pipeline([rebalancing, normalization, features, mitigation], nn)) :- true.
':=>'(p563871, pipeline([rebalancing, normalization, features, mitigation], rf)) :- true.
':=>'(p30123, pipeline([rebalancing, normalization, features, mitigation], rf)) :- true.
':=>'(p784964, pipeline([rebalancing, normalization, mitigation, features], knn)) :- true.
':=>'(p59492, pipeline([rebalancing, normalization, mitigation, features], nn)) :- true.
':=>'(p76331, pipeline([rebalancing, normalization, mitigation, features], rf)) :- true.
':=>'(p585712, pipeline([rebalancing, features, normalization, mitigation], knn)) :- true.
':=>'(p524252, pipeline([rebalancing, features, normalization, mitigation], knn)) :- true.
':=>'(p329207, pipeline([rebalancing, features, normalization, mitigation], nn)) :- true.
':=>'(p998863, pipeline([rebalancing, features, normalization, mitigation], nn)) :- true.
':=>'(p719994, pipeline([rebalancing, features, normalization, mitigation], rf)) :- true.
':=>'(p438012, pipeline([rebalancing, features, normalization, mitigation], rf)) :- true.
':=>'(p836502, pipeline([rebalancing, features, mitigation, normalization], knn)) :- true.
':=>'(p725699, pipeline([rebalancing, features, mitigation, normalization], nn)) :- true.
':=>'(p757919, pipeline([rebalancing, features, mitigation, normalization], rf)) :- true.

Checking Config
Exporting Config
Saving Graph
Exporting AutoML input
Exporting Space
Exporting Constraints
Input created for iteration Config(iteration=2, dataset=adult, metric=balanced_accuracy, fairnessMetric=equalized_odds_ratio, sensitiveFeatures=[sex, race], mode=max, batchSize=999999, timeBudget=900, seed=42)
Here is the standard output/error of the command:

4e77a15bc1ebb7d22bb87d7240aeda99d5876dca1cf282831cdff3b3c7a79e2d
Here is the standard output/error of the command:

Here is the standard output/error of the command:

WARNING:root:No module named 'rpy2': FairAdapt will be unavailable. To install, run:
pip install 'aif360[FairAdapt]'
INFO:flaml.tune.searcher.blendsearch:No low-cost partial config given to the search algorithm. For cost-frugal search, consider providing low-cost values for cost-related hps via 'low_cost_partial_config'. More info can be found at https://microsoft.github.io/FLAML/docs/FAQ#about-low_cost_partial_config-in-tune
Trying to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Added successfully: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Trying to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: normalization == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
AutoML: starting optimization.
27
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_split': 5, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 9}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'equalized_odds_ratio': np.float64(0.47810865105464906), 'balanced_accuracy': np.float64(0.5092246314256463), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.63), 'Asian-Pac-Islander_Male': np.float64(0.7), 'Black_Female': np.float64(0.85), 'Black_Male': np.float64(0.65), 'White_Female': np.float64(0.8), 'White_Male': np.float64(0.77)}, 'status': 'success', 'total_time': 30.261762380599976, 'fit_time': np.float64(5.500173091888428), 'score_time': np.float64(0.037308359146118165), 'absolute_time': 1746715480.0296662, 'flatten_equalized_odds_ratio': '0.53_0.39_0.63_0.48_0.37', 'flatten_balanced_accuracy': '0.53_0.51_0.5_0.5_0.5'}
28
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 6, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'equalized_odds_ratio': np.float64(0.25716059646640593), 'balanced_accuracy': np.float64(0.6566190094118584), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.89), 'Asian-Pac-Islander_Male': np.float64(0.9), 'Black_Female': np.float64(0.55), 'Black_Male': np.float64(0.65), 'White_Female': np.float64(0.28), 'White_Male': np.float64(0.27)}, 'status': 'success', 'total_time': 11.426381349563599, 'fit_time': np.float64(1.4222023010253906), 'score_time': np.float64(0.3832277297973633), 'absolute_time': 1746715491.5484169, 'flatten_equalized_odds_ratio': '0.28_0.25_0.23_0.25_0.28', 'flatten_balanced_accuracy': '0.62_0.67_0.66_0.67_0.66'}
29
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(50), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 3}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'equalized_odds_ratio': np.float64(0.35907718063609295), 'balanced_accuracy': np.float64(0.7365542547385207), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.87), 'Asian-Pac-Islander_Male': np.float64(0.71), 'Black_Female': np.float64(0.55), 'Black_Male': np.float64(0.64), 'White_Female': np.float64(0.36), 'White_Male': np.float64(0.6)}, 'status': 'success', 'total_time': 546.0718581676483, 'fit_time': np.float64(108.73481574058533), 'score_time': np.float64(0.18454408645629883), 'absolute_time': 1746716037.7107704, 'flatten_equalized_odds_ratio': '0.3_0.34_0.34_0.44_0.38', 'flatten_balanced_accuracy': '0.74_0.74_0.74_0.73_0.73'}
30
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 4, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'equalized_odds_ratio': np.float64(0.13730046928796508), 'balanced_accuracy': np.float64(0.6571359962338099), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.92), 'Asian-Pac-Islander_Male': np.float64(0.98), 'Black_Female': np.float64(0.33), 'Black_Male': np.float64(0.86), 'White_Female': np.float64(0.15), 'White_Male': np.float64(0.2)}, 'status': 'success', 'total_time': 10.70583724975586, 'fit_time': np.float64(2.0276471614837646), 'score_time': np.float64(0.011577939987182618), 'absolute_time': 1746716048.5666592, 'flatten_equalized_odds_ratio': '0.06_0.15_0.09_0.3_0.08', 'flatten_balanced_accuracy': '0.66_0.67_0.65_0.66_0.65'}
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.1)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.1)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

31
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.1)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': np.float64(0.504200341264434), 'by_group': {'Asian-Pac-Islander_Female': np.float64(1.0), 'Asian-Pac-Islander_Male': np.float64(0.53), 'Black_Female': np.float64(0.57), 'Black_Male': np.float64(0.0), 'White_Female': np.float64(0.43), 'White_Male': np.float64(0.21)}, 'status': 'fail', 'total_time': 67.98624515533447, 'fit_time': np.float64(13.181012058258057), 'score_time': np.float64(0.15888557434082032), 'absolute_time': 1746716116.6444094, 'flatten_equalized_odds_ratio': 'nan_0.0_nan_nan_nan', 'flatten_balanced_accuracy': '0.5_0.52_0.5_0.5_0.5'}
32
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 16, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.18350159245701364), 'balanced_accuracy': np.float64(0.7817843261847427), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.74), 'Asian-Pac-Islander_Male': np.float64(0.95), 'Black_Female': np.float64(0.19), 'Black_Male': np.float64(0.79), 'White_Female': np.float64(0.2), 'White_Male': np.float64(0.39)}, 'status': 'success', 'total_time': 12.688931226730347, 'fit_time': np.float64(0.16064109802246093), 'score_time': np.float64(1.1102221488952637), 'absolute_time': 1746716129.4400866, 'flatten_equalized_odds_ratio': '0.2_0.12_0.17_0.23_0.2', 'flatten_balanced_accuracy': '0.78_0.78_0.79_0.79_0.77'}
33
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 19, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.19633784941239624), 'balanced_accuracy': np.float64(0.7352567847270629), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.69), 'Asian-Pac-Islander_Male': np.float64(0.93), 'Black_Female': np.float64(0.22), 'Black_Male': np.float64(0.41), 'White_Female': np.float64(0.23), 'White_Male': np.float64(0.68)}, 'status': 'success', 'total_time': 5.696242332458496, 'fit_time': np.float64(0.14059271812438964), 'score_time': np.float64(0.43656282424926757), 'absolute_time': 1746716135.2256997, 'flatten_equalized_odds_ratio': '0.15_0.22_0.15_0.25_0.22', 'flatten_balanced_accuracy': '0.74_0.73_0.74_0.74_0.73'}
34
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 4, 'max_leaf_nodes': 3, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.0), 'balanced_accuracy': np.float64(0.6431124845083045), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.0), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.0), 'Black_Male': np.float64(0.17), 'White_Female': np.float64(0.0), 'White_Male': np.float64(0.3)}, 'status': 'success', 'total_time': 6.484407901763916, 'fit_time': np.float64(1.1488243103027345), 'score_time': np.float64(0.027698469161987305), 'absolute_time': 1746716141.8106573, 'flatten_equalized_odds_ratio': '0.0_0.0_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.64_0.64_0.66_0.63_0.64'}
35
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 11, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 9}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.13266404309975238), 'balanced_accuracy': np.float64(0.7630401791915643), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.45), 'Asian-Pac-Islander_Male': np.float64(0.99), 'Black_Female': np.float64(0.19), 'Black_Male': np.float64(0.36), 'White_Female': np.float64(0.13), 'White_Male': np.float64(0.39)}, 'status': 'success', 'total_time': 11.76781439781189, 'fit_time': np.float64(0.3230401039123535), 'score_time': np.float64(0.9698017597198486), 'absolute_time': 1746716154.6142254, 'flatten_equalized_odds_ratio': '0.14_0.13_0.12_0.15_0.13', 'flatten_balanced_accuracy': '0.74_0.77_0.76_0.77_0.77'}
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

36
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': np.float64(0.5), 'by_group': {'Asian-Pac-Islander_Female': -inf, 'Asian-Pac-Islander_Male': -inf, 'Black_Female': -inf, 'Black_Male': -inf, 'White_Female': -inf, 'White_Male': -inf}, 'status': 'fail', 'total_time': 36.7246367931366, 'fit_time': np.float64(2.2540391445159913), 'score_time': np.float64(0.023810386657714844), 'absolute_time': 1746716191.424856, 'flatten_equalized_odds_ratio': 'nan_nan_nan_nan_nan', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
The result for {'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

37
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': np.float64(0.5), 'by_group': {'Asian-Pac-Islander_Female': -inf, 'Asian-Pac-Islander_Male': -inf, 'Black_Female': -inf, 'Black_Male': -inf, 'White_Female': -inf, 'White_Male': -inf}, 'status': 'fail', 'total_time': 16.460963487625122, 'fit_time': np.float64(3.1253687381744384), 'score_time': np.float64(0.039395809173583984), 'absolute_time': 1746716207.973277, 'flatten_equalized_odds_ratio': 'nan_nan_nan_nan_nan', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
38
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(50), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.430346709508138), 'balanced_accuracy': np.float64(0.48948698033161353), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.84), 'Asian-Pac-Islander_Male': np.float64(0.72), 'Black_Female': np.float64(0.45), 'Black_Male': np.float64(0.78), 'White_Female': np.float64(0.54), 'White_Male': np.float64(0.59)}, 'status': 'success', 'total_time': 155.228280544281, 'fit_time': np.float64(30.54524221420288), 'score_time': np.float64(0.18700847625732422), 'absolute_time': 1746716363.2982106, 'flatten_equalized_odds_ratio': '0.48_0.41_0.53_0.31_0.42', 'flatten_balanced_accuracy': '0.48_0.49_0.49_0.5_0.49'}
AutoML: optimization done.
AutoML: miner done.
AutoML: export done.
Here is the standard output/error of the command:

Here is the standard output/error of the command:

Here is the standard output/error of the command:

hamlet_466645022
AutoML execution ended
