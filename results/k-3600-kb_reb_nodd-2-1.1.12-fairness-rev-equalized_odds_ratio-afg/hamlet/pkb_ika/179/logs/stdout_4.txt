Sensitive groups ready!
Theory ready!
Theory:
step(normalization) :- true.
step(features) :- true.
step(mitigation) :- true.
step(rebalancing) :- true.
step(classification) :- true.
operator(normalization, power_transformer) :- true.
operator(normalization, robust_scaler) :- true.
operator(normalization, standard) :- true.
operator(normalization, minmax) :- true.
operator(features, select_k_best) :- true.
operator(features, pca) :- true.
operator(mitigation, corr_remover) :- true.
operator(mitigation, lfr) :- true.
operator(rebalancing, near_miss) :- true.
operator(rebalancing, smote) :- true.
operator(classification, knn) :- true.
operator(classification, nn) :- true.
operator(classification, rf) :- true.
hyperparameter(robust_scaler, with_centering, choice) :- true.
hyperparameter(robust_scaler, with_scaling, choice) :- true.
hyperparameter(standard, with_mean, choice) :- true.
hyperparameter(standard, with_std, choice) :- true.
hyperparameter(select_k_best, k, randint) :- true.
hyperparameter(pca, n_components, randint) :- true.
hyperparameter(corr_remover, alpha, choice) :- true.
hyperparameter(lfr, n_prototypes, choice) :- true.
hyperparameter(lfr, reconstruct_weight, choice) :- true.
hyperparameter(lfr, fairness_weight, choice) :- true.
hyperparameter(near_miss, n_neighbors, randint) :- true.
hyperparameter(smote, k_neighbors, randint) :- true.
hyperparameter(knn, n_neighbors, randint) :- true.
hyperparameter(knn, weights, choice) :- true.
hyperparameter(knn, metric, choice) :- true.
hyperparameter(nn, n_hidden_layers, choice) :- true.
hyperparameter(nn, n_neurons, choice) :- true.
hyperparameter(nn, activation, choice) :- true.
hyperparameter(nn, solver, choice) :- true.
hyperparameter(nn, alpha, choice) :- true.
hyperparameter(nn, learning_rate, choice) :- true.
hyperparameter(rf, n_estimators, choice) :- true.
hyperparameter(rf, max_depth, randint) :- true.
hyperparameter(rf, max_features, randint) :- true.
hyperparameter(rf, min_samples_split, randint) :- true.
hyperparameter(rf, max_leaf_nodes, randint) :- true.
hyperparameter(rf, bootstrap, choice) :- true.
hyperparameter(rf, criterion, choice) :- true.
domain(robust_scaler, with_centering, [true, false]) :- true.
domain(robust_scaler, with_scaling, [true, false]) :- true.
domain(standard, with_mean, [true, false]) :- true.
domain(standard, with_std, [true, false]) :- true.
domain(select_k_best, k, [1, 10]) :- true.
domain(pca, n_components, [1, 8]) :- true.
domain(corr_remover, alpha, [0.25, 0.5, 0.75, 1.0]) :- true.
domain(lfr, n_prototypes, [10, 50, 100, 200]) :- true.
domain(lfr, reconstruct_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(lfr, fairness_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(near_miss, n_neighbors, [1, 4]) :- true.
domain(smote, k_neighbors, [5, 8]) :- true.
domain(knn, n_neighbors, [3, 20]) :- true.
domain(knn, weights, [uniform, distance]) :- true.
domain(knn, metric, [minkowski, euclidean, manhattan]) :- true.
domain(nn, n_hidden_layers, [1, 5, 10, 20]) :- true.
domain(nn, n_neurons, [5, 10, 25, 50]) :- true.
domain(nn, activation, [logistic, tanh, relu]) :- true.
domain(nn, solver, [lbfgs, sgd, adam]) :- true.
domain(nn, alpha, [0.0001, 0.001, 0.01, 0.00001]) :- true.
domain(nn, learning_rate, [constant, invscaling, adaptive]) :- true.
domain(rf, n_estimators, [10, 25, 50, 75, 100]) :- true.
domain(rf, max_depth, [1, 5]) :- true.
domain(rf, max_features, [1, 4]) :- true.
domain(rf, min_samples_split, [2, 6]) :- true.
domain(rf, max_leaf_nodes, [2, 6]) :- true.
domain(rf, bootstrap, [true, false]) :- true.
domain(rf, criterion, [gini, entropy]) :- true.
':=>'(c1, mandatory([mitigation], classification)) :- true.
':=>'(c3, mandatory_order([mitigation, features], classification)) :- true.
':=>'(c4, mandatory_order([mitigation, normalization], classification)) :- true.
':=>'(c5, mandatory([normalization], knn)) :- true.
':=>'(c6, mandatory([normalization], nn)) :- true.
dataset(adult) :- true.
metric(balanced_accuracy) :- true.
fairness_metric(equalized_odds_ratio) :- true.
sensitive_feature(sex, ['Male', 'Female']) :- true.
sensitive_feature(race, ['Amer-Indian-Eskimo', 'Asian-Pac-Islander', 'Black', 'Other', 'White']) :- true.
':=>'(mc0, unbalanced_dataset) :- true.
pipeline([Step_1_0], ZZ_0) :- (step(Step_1_0), '\\='(Step_1_0, classification), operator(classification, ZZ_0)).
pipeline([Step_1_1, Step_2_0], ZZ_1) :- (step(Step_1_1), step(Step_2_0), '\\='(Step_1_1, classification), '\\='(Step_2_0, classification), '\\='(Step_1_1, Step_2_0), operator(classification, ZZ_1)).
pipeline([Step_1_2, Step_2_1, Step_3_0], ZZ_2) :- (step(Step_1_2), step(Step_2_1), step(Step_3_0), '\\='(Step_1_2, classification), '\\='(Step_2_1, classification), '\\='(Step_3_0, classification), '\\='(Step_1_2, Step_2_1), '\\='(Step_1_2, Step_3_0), '\\='(Step_2_1, Step_3_0), operator(classification, ZZ_2)).
pipeline([Step_1_3, Step_2_2, Step_3_1, Step_4_0], ZZ_3) :- (step(Step_1_3), step(Step_2_2), step(Step_3_1), step(Step_4_0), '\\='(Step_1_3, classification), '\\='(Step_2_2, classification), '\\='(Step_3_1, classification), '\\='(Step_4_0, classification), '\\='(Step_1_3, Step_2_2), '\\='(Step_1_3, Step_3_1), '\\='(Step_1_3, Step_4_0), '\\='(Step_2_2, Step_3_1), '\\='(Step_2_2, Step_4_0), '\\='(Step_3_1, Step_4_0), operator(classification, ZZ_3)).
':=>'(p781910, sensitive_group(['Male'])) :- true.
':=>'(p730585, sensitive_group(['Female'])) :- true.
':=>'(p961365, sensitive_group(['Amer-Indian-Eskimo'])) :- true.
':=>'(p390240, sensitive_group(['Asian-Pac-Islander'])) :- true.
':=>'(p165476, sensitive_group(['Black'])) :- true.
':=>'(p797784, sensitive_group(['Other'])) :- true.
':=>'(p154064, sensitive_group(['White'])) :- true.
':=>'(p808288, sensitive_group(['Male', 'Amer-Indian-Eskimo'])) :- true.
':=>'(p247976, sensitive_group(['Male', 'Asian-Pac-Islander'])) :- true.
':=>'(p948819, sensitive_group(['Male', 'Black'])) :- true.
':=>'(p9384, sensitive_group(['Male', 'Other'])) :- true.
':=>'(p303230, sensitive_group(['Male', 'White'])) :- true.
':=>'(p978853, sensitive_group(['Female', 'Amer-Indian-Eskimo'])) :- true.
':=>'(p813358, sensitive_group(['Female', 'Asian-Pac-Islander'])) :- true.
':=>'(p647050, sensitive_group(['Female', 'Black'])) :- true.
':=>'(p802423, sensitive_group(['Female', 'Other'])) :- true.
':=>'(p790706, sensitive_group(['Female', 'White'])) :- true.
':=>'(p860812, pipeline([], knn)) :- true.
':=>'(p940904, pipeline([], knn)) :- true.
':=>'(p212066, pipeline([], nn)) :- true.
':=>'(p562598, pipeline([], nn)) :- true.
':=>'(p616984, pipeline([], rf)) :- true.
':=>'(p381378, pipeline([normalization], knn)) :- true.
':=>'(p694799, pipeline([normalization], nn)) :- true.
':=>'(p778405, pipeline([normalization], rf)) :- true.
':=>'(p334270, pipeline([features], knn)) :- true.
':=>'(p503560, pipeline([features], knn)) :- true.
':=>'(p79422, pipeline([features], nn)) :- true.
':=>'(p904942, pipeline([features], nn)) :- true.
':=>'(p372836, pipeline([features], rf)) :- true.
':=>'(p125361, pipeline([mitigation], knn)) :- true.
':=>'(p286508, pipeline([mitigation], nn)) :- true.
':=>'(p982438, pipeline([rebalancing], knn)) :- true.
':=>'(p53464, pipeline([rebalancing], knn)) :- true.
':=>'(p701063, pipeline([rebalancing], nn)) :- true.
':=>'(p592890, pipeline([rebalancing], nn)) :- true.
':=>'(p667193, pipeline([rebalancing], rf)) :- true.
':=>'(p513055, pipeline([normalization, features], knn)) :- true.
':=>'(p198612, pipeline([normalization, features], nn)) :- true.
':=>'(p448268, pipeline([normalization, features], rf)) :- true.
':=>'(p701968, pipeline([normalization, mitigation], knn)) :- true.
':=>'(p714264, pipeline([normalization, mitigation], nn)) :- true.
':=>'(p183850, pipeline([normalization, mitigation], rf)) :- true.
':=>'(p522593, pipeline([normalization, rebalancing], knn)) :- true.
':=>'(p259157, pipeline([normalization, rebalancing], nn)) :- true.
':=>'(p503320, pipeline([normalization, rebalancing], rf)) :- true.
':=>'(p573879, pipeline([features, normalization], knn)) :- true.
':=>'(p160391, pipeline([features, normalization], nn)) :- true.
':=>'(p203642, pipeline([features, normalization], rf)) :- true.
':=>'(p916747, pipeline([features, mitigation], knn)) :- true.
':=>'(p911690, pipeline([features, mitigation], knn)) :- true.
':=>'(p147555, pipeline([features, mitigation], nn)) :- true.
':=>'(p233265, pipeline([features, mitigation], nn)) :- true.
':=>'(p149988, pipeline([features, mitigation], rf)) :- true.
':=>'(p283996, pipeline([features, rebalancing], knn)) :- true.
':=>'(p401115, pipeline([features, rebalancing], knn)) :- true.
':=>'(p582898, pipeline([features, rebalancing], nn)) :- true.
':=>'(p918228, pipeline([features, rebalancing], nn)) :- true.
':=>'(p736007, pipeline([features, rebalancing], rf)) :- true.
':=>'(p145495, pipeline([mitigation, features], knn)) :- true.
':=>'(p609547, pipeline([mitigation, features], nn)) :- true.
':=>'(p401893, pipeline([mitigation, rebalancing], knn)) :- true.
':=>'(p830019, pipeline([mitigation, rebalancing], nn)) :- true.
':=>'(p991507, pipeline([rebalancing, normalization], knn)) :- true.
':=>'(p521395, pipeline([rebalancing, normalization], nn)) :- true.
':=>'(p761578, pipeline([rebalancing, normalization], rf)) :- true.
':=>'(p852691, pipeline([rebalancing, features], knn)) :- true.
':=>'(p906684, pipeline([rebalancing, features], knn)) :- true.
':=>'(p319854, pipeline([rebalancing, features], nn)) :- true.
':=>'(p860838, pipeline([rebalancing, features], nn)) :- true.
':=>'(p288816, pipeline([rebalancing, features], rf)) :- true.
':=>'(p474989, pipeline([rebalancing, mitigation], knn)) :- true.
':=>'(p808722, pipeline([rebalancing, mitigation], nn)) :- true.
':=>'(p958127, pipeline([normalization, features, mitigation], knn)) :- true.
':=>'(p677670, pipeline([normalization, features, mitigation], knn)) :- true.
':=>'(p682451, pipeline([normalization, features, mitigation], nn)) :- true.
':=>'(p663179, pipeline([normalization, features, mitigation], nn)) :- true.
':=>'(p616238, pipeline([normalization, features, mitigation], rf)) :- true.
':=>'(p554746, pipeline([normalization, features, mitigation], rf)) :- true.
':=>'(p643974, pipeline([normalization, features, rebalancing], knn)) :- true.
':=>'(p810208, pipeline([normalization, features, rebalancing], nn)) :- true.
':=>'(p666796, pipeline([normalization, features, rebalancing], rf)) :- true.
':=>'(p54091, pipeline([normalization, mitigation, features], knn)) :- true.
':=>'(p234881, pipeline([normalization, mitigation, features], nn)) :- true.
':=>'(p435778, pipeline([normalization, mitigation, features], rf)) :- true.
':=>'(p347720, pipeline([normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p727374, pipeline([normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p870132, pipeline([normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p596634, pipeline([normalization, rebalancing, features], knn)) :- true.
':=>'(p742425, pipeline([normalization, rebalancing, features], nn)) :- true.
':=>'(p563705, pipeline([normalization, rebalancing, features], rf)) :- true.
':=>'(p251853, pipeline([normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p100693, pipeline([normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p358537, pipeline([normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p773899, pipeline([features, normalization, mitigation], knn)) :- true.
':=>'(p356638, pipeline([features, normalization, mitigation], knn)) :- true.
':=>'(p641477, pipeline([features, normalization, mitigation], nn)) :- true.
':=>'(p46225, pipeline([features, normalization, mitigation], nn)) :- true.
':=>'(p547048, pipeline([features, normalization, mitigation], rf)) :- true.
':=>'(p776509, pipeline([features, normalization, mitigation], rf)) :- true.
':=>'(p933868, pipeline([features, normalization, rebalancing], knn)) :- true.
':=>'(p473337, pipeline([features, normalization, rebalancing], nn)) :- true.
':=>'(p240553, pipeline([features, normalization, rebalancing], rf)) :- true.
':=>'(p172521, pipeline([features, mitigation, normalization], knn)) :- true.
':=>'(p990696, pipeline([features, mitigation, normalization], nn)) :- true.
':=>'(p459545, pipeline([features, mitigation, normalization], rf)) :- true.
':=>'(p888326, pipeline([features, mitigation, rebalancing], knn)) :- true.
':=>'(p269110, pipeline([features, mitigation, rebalancing], knn)) :- true.
':=>'(p806723, pipeline([features, mitigation, rebalancing], nn)) :- true.
':=>'(p222227, pipeline([features, mitigation, rebalancing], nn)) :- true.
':=>'(p315192, pipeline([features, mitigation, rebalancing], rf)) :- true.
':=>'(p265136, pipeline([features, rebalancing, normalization], knn)) :- true.
':=>'(p219790, pipeline([features, rebalancing, normalization], nn)) :- true.
':=>'(p689053, pipeline([features, rebalancing, normalization], rf)) :- true.
':=>'(p915492, pipeline([features, rebalancing, mitigation], knn)) :- true.
':=>'(p335831, pipeline([features, rebalancing, mitigation], knn)) :- true.
':=>'(p554322, pipeline([features, rebalancing, mitigation], nn)) :- true.
':=>'(p813308, pipeline([features, rebalancing, mitigation], nn)) :- true.
':=>'(p489643, pipeline([features, rebalancing, mitigation], rf)) :- true.
':=>'(p500211, pipeline([mitigation, features, rebalancing], knn)) :- true.
':=>'(p424971, pipeline([mitigation, features, rebalancing], nn)) :- true.
':=>'(p913738, pipeline([mitigation, rebalancing, features], knn)) :- true.
':=>'(p375624, pipeline([mitigation, rebalancing, features], nn)) :- true.
':=>'(p572139, pipeline([rebalancing, normalization, features], knn)) :- true.
':=>'(p574987, pipeline([rebalancing, normalization, features], nn)) :- true.
':=>'(p249429, pipeline([rebalancing, normalization, features], rf)) :- true.
':=>'(p454840, pipeline([rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p496425, pipeline([rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p7382, pipeline([rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p576385, pipeline([rebalancing, features, normalization], knn)) :- true.
':=>'(p705532, pipeline([rebalancing, features, normalization], nn)) :- true.
':=>'(p545619, pipeline([rebalancing, features, normalization], rf)) :- true.
':=>'(p861799, pipeline([rebalancing, features, mitigation], knn)) :- true.
':=>'(p695757, pipeline([rebalancing, features, mitigation], knn)) :- true.
':=>'(p893990, pipeline([rebalancing, features, mitigation], nn)) :- true.
':=>'(p532203, pipeline([rebalancing, features, mitigation], nn)) :- true.
':=>'(p530676, pipeline([rebalancing, features, mitigation], rf)) :- true.
':=>'(p843448, pipeline([rebalancing, mitigation, features], knn)) :- true.
':=>'(p255964, pipeline([rebalancing, mitigation, features], nn)) :- true.
':=>'(p366032, pipeline([normalization, features, mitigation, rebalancing], knn)) :- true.
':=>'(p287378, pipeline([normalization, features, mitigation, rebalancing], knn)) :- true.
':=>'(p655386, pipeline([normalization, features, mitigation, rebalancing], nn)) :- true.
':=>'(p936352, pipeline([normalization, features, mitigation, rebalancing], nn)) :- true.
':=>'(p21007, pipeline([normalization, features, mitigation, rebalancing], rf)) :- true.
':=>'(p247897, pipeline([normalization, features, mitigation, rebalancing], rf)) :- true.
':=>'(p663092, pipeline([normalization, features, rebalancing, mitigation], knn)) :- true.
':=>'(p358954, pipeline([normalization, features, rebalancing, mitigation], knn)) :- true.
':=>'(p943115, pipeline([normalization, features, rebalancing, mitigation], nn)) :- true.
':=>'(p105252, pipeline([normalization, features, rebalancing, mitigation], nn)) :- true.
':=>'(p84136, pipeline([normalization, features, rebalancing, mitigation], rf)) :- true.
':=>'(p429910, pipeline([normalization, features, rebalancing, mitigation], rf)) :- true.
':=>'(p733182, pipeline([normalization, mitigation, features, rebalancing], knn)) :- true.
':=>'(p549155, pipeline([normalization, mitigation, features, rebalancing], nn)) :- true.
':=>'(p709815, pipeline([normalization, mitigation, features, rebalancing], rf)) :- true.
':=>'(p37493, pipeline([normalization, mitigation, rebalancing, features], knn)) :- true.
':=>'(p794793, pipeline([normalization, mitigation, rebalancing, features], nn)) :- true.
':=>'(p618341, pipeline([normalization, mitigation, rebalancing, features], rf)) :- true.
':=>'(p655189, pipeline([normalization, rebalancing, features, mitigation], knn)) :- true.
':=>'(p558220, pipeline([normalization, rebalancing, features, mitigation], knn)) :- true.
':=>'(p535945, pipeline([normalization, rebalancing, features, mitigation], nn)) :- true.
':=>'(p601725, pipeline([normalization, rebalancing, features, mitigation], nn)) :- true.
':=>'(p761150, pipeline([normalization, rebalancing, features, mitigation], rf)) :- true.
':=>'(p337163, pipeline([normalization, rebalancing, features, mitigation], rf)) :- true.
':=>'(p686468, pipeline([normalization, rebalancing, mitigation, features], knn)) :- true.
':=>'(p562153, pipeline([normalization, rebalancing, mitigation, features], nn)) :- true.
':=>'(p881116, pipeline([normalization, rebalancing, mitigation, features], rf)) :- true.
':=>'(p282151, pipeline([features, normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p330369, pipeline([features, normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p905209, pipeline([features, normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p284342, pipeline([features, normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p519698, pipeline([features, normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p715633, pipeline([features, normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p166648, pipeline([features, normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p25480, pipeline([features, normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p390745, pipeline([features, normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p118197, pipeline([features, normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p136268, pipeline([features, normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p141659, pipeline([features, normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p330869, pipeline([features, mitigation, normalization, rebalancing], knn)) :- true.
':=>'(p603984, pipeline([features, mitigation, normalization, rebalancing], nn)) :- true.
':=>'(p254584, pipeline([features, mitigation, normalization, rebalancing], rf)) :- true.
':=>'(p705365, pipeline([features, mitigation, rebalancing, normalization], knn)) :- true.
':=>'(p867943, pipeline([features, mitigation, rebalancing, normalization], nn)) :- true.
':=>'(p355404, pipeline([features, mitigation, rebalancing, normalization], rf)) :- true.
':=>'(p82855, pipeline([features, rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p700624, pipeline([features, rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p383565, pipeline([features, rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p67554, pipeline([features, rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p757459, pipeline([features, rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p830455, pipeline([features, rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p111605, pipeline([features, rebalancing, mitigation, normalization], knn)) :- true.
':=>'(p323650, pipeline([features, rebalancing, mitigation, normalization], nn)) :- true.
':=>'(p65683, pipeline([features, rebalancing, mitigation, normalization], rf)) :- true.
':=>'(p181866, pipeline([rebalancing, normalization, features, mitigation], knn)) :- true.
':=>'(p211639, pipeline([rebalancing, normalization, features, mitigation], knn)) :- true.
':=>'(p754211, pipeline([rebalancing, normalization, features, mitigation], nn)) :- true.
':=>'(p157052, pipeline([rebalancing, normalization, features, mitigation], nn)) :- true.
':=>'(p84517, pipeline([rebalancing, normalization, features, mitigation], rf)) :- true.
':=>'(p472056, pipeline([rebalancing, normalization, features, mitigation], rf)) :- true.
':=>'(p383199, pipeline([rebalancing, normalization, mitigation, features], knn)) :- true.
':=>'(p413868, pipeline([rebalancing, normalization, mitigation, features], nn)) :- true.
':=>'(p550764, pipeline([rebalancing, normalization, mitigation, features], rf)) :- true.
':=>'(p656438, pipeline([rebalancing, features, normalization, mitigation], knn)) :- true.
':=>'(p569650, pipeline([rebalancing, features, normalization, mitigation], knn)) :- true.
':=>'(p396887, pipeline([rebalancing, features, normalization, mitigation], nn)) :- true.
':=>'(p60710, pipeline([rebalancing, features, normalization, mitigation], nn)) :- true.
':=>'(p645438, pipeline([rebalancing, features, normalization, mitigation], rf)) :- true.
':=>'(p757704, pipeline([rebalancing, features, normalization, mitigation], rf)) :- true.
':=>'(p523163, pipeline([rebalancing, features, mitigation, normalization], knn)) :- true.
':=>'(p481872, pipeline([rebalancing, features, mitigation, normalization], nn)) :- true.
':=>'(p791795, pipeline([rebalancing, features, mitigation, normalization], rf)) :- true.

Checking Config
Exporting Config
Saving Graph
Exporting AutoML input
Exporting Space
Exporting Constraints
Input created for iteration Config(iteration=4, dataset=adult, metric=balanced_accuracy, fairnessMetric=equalized_odds_ratio, sensitiveFeatures=[sex, race], mode=max, batchSize=999999, timeBudget=900, seed=42)
Here is the standard output/error of the command:

69587782ac8930e49a82d105328c839cb41c4e1782bd84a2f739d2b121fc613d
Here is the standard output/error of the command:

Here is the standard output/error of the command:

WARNING:root:No module named 'rpy2': FairAdapt will be unavailable. To install, run:
pip install 'aif360[FairAdapt]'
INFO:flaml.tune.searcher.blendsearch:No low-cost partial config given to the search algorithm. For cost-frugal search, consider providing low-cost values for cost-related hps via 'low_cost_partial_config'. More info can be found at https://microsoft.github.io/FLAML/docs/FAQ#about-low_cost_partial_config-in-tune
Trying to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Added successfully: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Trying to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: normalization == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
AutoML: starting optimization.
The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 20, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(1.0)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 20, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(1.0)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

50
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 20, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(1.0)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': np.float64(0.5), 'by_group': {'Asian-Pac-Islander_Female': -inf, 'Asian-Pac-Islander_Male': -inf, 'Black_Female': -inf, 'Black_Male': -inf, 'White_Female': -inf, 'White_Male': -inf}, 'status': 'fail', 'total_time': 45.93489217758179, 'fit_time': np.float64(1.972050380706787), 'score_time': np.float64(3.5760669708251953), 'absolute_time': 1746717559.5048325, 'flatten_equalized_odds_ratio': 'nan_nan_nan_nan_nan', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
The result for {'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 4, 'n_estimators': np.int64(75)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 4, 'n_estimators': np.int64(75)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

51
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 4, 'n_estimators': np.int64(75)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': np.float64(0.5), 'by_group': {'Asian-Pac-Islander_Female': -inf, 'Asian-Pac-Islander_Male': -inf, 'Black_Female': -inf, 'Black_Male': -inf, 'White_Female': -inf, 'White_Male': -inf}, 'status': 'fail', 'total_time': 17.277628421783447, 'fit_time': np.float64(3.3080628395080565), 'score_time': np.float64(0.03316092491149902), 'absolute_time': 1746717576.8817596, 'flatten_equalized_odds_ratio': 'nan_nan_nan_nan_nan', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
52
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(50), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 3}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'equalized_odds_ratio': np.float64(0.7058257739087989), 'balanced_accuracy': np.float64(0.5069178995635342), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.75), 'Asian-Pac-Islander_Male': np.float64(0.79), 'Black_Female': np.float64(0.93), 'Black_Male': np.float64(0.87), 'White_Female': np.float64(0.94), 'White_Male': np.float64(0.92)}, 'status': 'success', 'total_time': 86.66741371154785, 'fit_time': np.float64(17.17745966911316), 'score_time': np.float64(0.046506071090698244), 'absolute_time': 1746717663.6480362, 'flatten_equalized_odds_ratio': '0.41_0.56_1.0_1.0_0.56', 'flatten_balanced_accuracy': '0.52_0.5_0.5_0.5_0.51'}
53
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 5, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'equalized_odds_ratio': np.float64(0.0855233014165694), 'balanced_accuracy': np.float64(0.7089101640949048), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.99), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.11), 'Black_Male': np.float64(0.18), 'White_Female': np.float64(0.09), 'White_Male': np.float64(0.16)}, 'status': 'success', 'total_time': 13.652248620986938, 'fit_time': np.float64(2.1072123050689697), 'score_time': np.float64(0.018386983871459962), 'absolute_time': 1746717677.4043612, 'flatten_equalized_odds_ratio': '0.09_0.08_0.07_0.11_0.08', 'flatten_balanced_accuracy': '0.7_0.72_0.71_0.7_0.7'}
54
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.4477806504480382), 'balanced_accuracy': np.float64(0.5112078565799336), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.64), 'Asian-Pac-Islander_Male': np.float64(0.72), 'Black_Female': np.float64(0.85), 'Black_Male': np.float64(0.66), 'White_Female': np.float64(0.77), 'White_Male': np.float64(0.75)}, 'status': 'success', 'total_time': 28.711228132247925, 'fit_time': np.float64(5.6100365161895756), 'score_time': np.float64(0.02499551773071289), 'absolute_time': 1746717706.2298067, 'flatten_equalized_odds_ratio': '0.37_0.6_0.53_0.12_0.61', 'flatten_balanced_accuracy': '0.52_0.51_0.51_0.5_0.51'}
55
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.08578641853100061), 'balanced_accuracy': np.float64(0.7491537852766023), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.59), 'Asian-Pac-Islander_Male': np.float64(0.9), 'Black_Female': np.float64(0.1), 'Black_Male': np.float64(0.32), 'White_Female': np.float64(0.12), 'White_Male': np.float64(0.69)}, 'status': 'success', 'total_time': 8.326997995376587, 'fit_time': np.float64(1.557330322265625), 'score_time': np.float64(0.010287046432495117), 'absolute_time': 1746717714.65845, 'flatten_equalized_odds_ratio': '0.1_0.13_0.06_0.07_0.07', 'flatten_balanced_accuracy': '0.75_0.75_0.74_0.75_0.75'}
56
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(50), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.22752975902182734), 'balanced_accuracy': np.float64(0.7850658710628575), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.68), 'Asian-Pac-Islander_Male': np.float64(0.97), 'Black_Female': np.float64(0.25), 'Black_Male': np.float64(0.61), 'White_Female': np.float64(0.25), 'White_Male': np.float64(0.77)}, 'status': 'success', 'total_time': 155.60748600959778, 'fit_time': np.float64(30.995620679855346), 'score_time': np.float64(0.022575950622558592), 'absolute_time': 1746717870.3666708, 'flatten_equalized_odds_ratio': '0.25_0.17_0.21_0.27_0.24', 'flatten_balanced_accuracy': '0.78_0.79_0.79_0.79_0.78'}
57
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.13306380038967053), 'balanced_accuracy': np.float64(0.7999811091630132), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.65), 'Asian-Pac-Islander_Male': np.float64(0.98), 'Black_Female': np.float64(0.22), 'Black_Male': np.float64(0.59), 'White_Female': np.float64(0.13), 'White_Male': np.float64(0.72)}, 'status': 'success', 'total_time': 271.4159982204437, 'fit_time': np.float64(54.12225456237793), 'score_time': np.float64(0.02798805236816406), 'absolute_time': 1746718141.899172, 'flatten_equalized_odds_ratio': '0.13_0.13_0.11_0.15_0.15', 'flatten_balanced_accuracy': '0.8_0.8_0.8_0.81_0.8'}
58
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.10274036825800208), 'balanced_accuracy': np.float64(0.7483073866363925), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.52), 'Asian-Pac-Islander_Male': np.float64(0.97), 'Black_Female': np.float64(0.24), 'Black_Male': np.float64(0.78), 'White_Female': np.float64(0.1), 'White_Male': np.float64(0.52)}, 'status': 'success', 'total_time': 1.4499289989471436, 'fit_time': np.float64(0.17299470901489258), 'score_time': np.float64(0.011919069290161132), 'absolute_time': 1746718144.7802203, 'flatten_equalized_odds_ratio': '0.18_0.09_0.11_0.02_0.12', 'flatten_balanced_accuracy': '0.74_0.75_0.75_0.76_0.75'}
59
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 4, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.24456857030967152), 'balanced_accuracy': np.float64(0.7524455860570936), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.53), 'Asian-Pac-Islander_Male': np.float64(0.96), 'Black_Female': np.float64(0.29), 'Black_Male': np.float64(0.54), 'White_Female': np.float64(0.25), 'White_Male': np.float64(0.72)}, 'status': 'success', 'total_time': 21.1100594997406, 'fit_time': np.float64(0.15448694229125975), 'score_time': np.float64(2.0188536167144777), 'absolute_time': 1746718166.0006065, 'flatten_equalized_odds_ratio': '0.21_0.18_0.33_0.27_0.23', 'flatten_balanced_accuracy': '0.75_0.76_0.75_0.75_0.75'}
The result for {'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_split': 5, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_split': 5, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

60
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_split': 5, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': np.float64(0.5), 'by_group': {'Asian-Pac-Islander_Female': -inf, 'Asian-Pac-Islander_Male': -inf, 'Black_Female': -inf, 'Black_Male': -inf, 'White_Female': -inf, 'White_Male': -inf}, 'status': 'fail', 'total_time': 12.061954975128174, 'fit_time': np.float64(2.2583503246307375), 'score_time': np.float64(0.032704734802246095), 'absolute_time': 1746718178.1844513, 'flatten_equalized_odds_ratio': 'nan_nan_nan_nan_nan', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

61
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': np.float64(0.5), 'by_group': {'Asian-Pac-Islander_Female': -inf, 'Asian-Pac-Islander_Male': -inf, 'Black_Female': -inf, 'Black_Male': -inf, 'White_Female': -inf, 'White_Male': -inf}, 'status': 'fail', 'total_time': 28.94551682472229, 'fit_time': np.float64(5.445442962646484), 'score_time': np.float64(0.11289043426513672), 'absolute_time': 1746718207.2567644, 'flatten_equalized_odds_ratio': 'nan_nan_nan_nan_nan', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
62
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 4, 'max_features': 4, 'max_leaf_nodes': 6, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.022568277016352726), 'balanced_accuracy': np.float64(0.7524659101858501), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.7), 'Asian-Pac-Islander_Male': np.float64(0.96), 'Black_Female': np.float64(0.17), 'Black_Male': np.float64(0.87), 'White_Female': np.float64(0.02), 'White_Male': np.float64(0.78)}, 'status': 'success', 'total_time': 3.6939382553100586, 'fit_time': np.float64(0.629753589630127), 'score_time': np.float64(0.011268186569213866), 'absolute_time': 1746718211.0733218, 'flatten_equalized_odds_ratio': '0.03_0.02_0.02_0.02_0.02', 'flatten_balanced_accuracy': '0.75_0.75_0.75_0.76_0.75'}
63
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 4, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.46211176531993825), 'balanced_accuracy': np.float64(0.5077016199154256), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.71), 'Asian-Pac-Islander_Male': np.float64(0.75), 'Black_Female': np.float64(0.73), 'Black_Male': np.float64(0.62), 'White_Female': np.float64(0.73), 'White_Male': np.float64(0.71)}, 'status': 'success', 'total_time': 54.925148725509644, 'fit_time': np.float64(4.6507086753845215), 'score_time': np.float64(0.026969194412231445), 'absolute_time': 1746718266.1197882, 'flatten_equalized_odds_ratio': '0.64_0.52_0.38_0.48_0.29', 'flatten_balanced_accuracy': '0.51_0.5_0.52_0.51_0.5'}
64
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 1}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.40154120953966094), 'balanced_accuracy': np.float64(0.5086810443737332), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.76), 'Asian-Pac-Islander_Male': np.float64(0.81), 'Black_Female': np.float64(0.72), 'Black_Male': np.float64(0.56), 'White_Female': np.float64(0.78), 'White_Male': np.float64(0.74)}, 'status': 'success', 'total_time': 47.787822008132935, 'fit_time': np.float64(6.261575412750244), 'score_time': np.float64(0.13513259887695311), 'absolute_time': 1746718314.0296514, 'flatten_equalized_odds_ratio': '0.33_0.45_0.41_0.48_0.34', 'flatten_balanced_accuracy': '0.51_0.51_0.51_0.5_0.51'}
65
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'equalized_odds_ratio': np.float64(0.42757773379759245), 'balanced_accuracy': np.float64(0.63077208969115), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.82), 'Asian-Pac-Islander_Male': np.float64(0.96), 'Black_Female': np.float64(0.6), 'Black_Male': np.float64(0.62), 'White_Female': np.float64(0.57), 'White_Male': np.float64(0.43)}, 'status': 'success', 'total_time': 430.59751558303833, 'fit_time': np.float64(85.65927395820617), 'score_time': np.float64(0.16551609039306642), 'absolute_time': 1746718744.7515907, 'flatten_equalized_odds_ratio': '0.47_0.43_0.42_0.41_0.41', 'flatten_balanced_accuracy': '0.62_0.64_0.62_0.63_0.64'}
AutoML: optimization done.
AutoML: miner done.
AutoML: export done.
Here is the standard output/error of the command:

Here is the standard output/error of the command:

Here is the standard output/error of the command:

hamlet_599714681
AutoML execution ended
