Sensitive groups ready!
Theory ready!
Theory:
step(normalization) :- true.
step(features) :- true.
step(mitigation) :- true.
step(rebalancing) :- true.
step(classification) :- true.
operator(normalization, power_transformer) :- true.
operator(normalization, robust_scaler) :- true.
operator(normalization, standard) :- true.
operator(normalization, minmax) :- true.
operator(features, select_k_best) :- true.
operator(features, pca) :- true.
operator(mitigation, corr_remover) :- true.
operator(mitigation, lfr) :- true.
operator(rebalancing, near_miss) :- true.
operator(rebalancing, smote) :- true.
operator(classification, knn) :- true.
operator(classification, nn) :- true.
operator(classification, rf) :- true.
hyperparameter(robust_scaler, with_centering, choice) :- true.
hyperparameter(robust_scaler, with_scaling, choice) :- true.
hyperparameter(standard, with_mean, choice) :- true.
hyperparameter(standard, with_std, choice) :- true.
hyperparameter(select_k_best, k, randint) :- true.
hyperparameter(pca, n_components, randint) :- true.
hyperparameter(corr_remover, alpha, choice) :- true.
hyperparameter(lfr, n_prototypes, choice) :- true.
hyperparameter(lfr, reconstruct_weight, choice) :- true.
hyperparameter(lfr, fairness_weight, choice) :- true.
hyperparameter(near_miss, n_neighbors, randint) :- true.
hyperparameter(smote, k_neighbors, randint) :- true.
hyperparameter(knn, n_neighbors, randint) :- true.
hyperparameter(knn, weights, choice) :- true.
hyperparameter(knn, metric, choice) :- true.
hyperparameter(nn, n_hidden_layers, choice) :- true.
hyperparameter(nn, n_neurons, choice) :- true.
hyperparameter(nn, activation, choice) :- true.
hyperparameter(nn, solver, choice) :- true.
hyperparameter(nn, alpha, choice) :- true.
hyperparameter(nn, learning_rate, choice) :- true.
hyperparameter(rf, n_estimators, choice) :- true.
hyperparameter(rf, max_depth, randint) :- true.
hyperparameter(rf, max_features, randint) :- true.
hyperparameter(rf, min_samples_split, randint) :- true.
hyperparameter(rf, max_leaf_nodes, randint) :- true.
hyperparameter(rf, bootstrap, choice) :- true.
hyperparameter(rf, criterion, choice) :- true.
domain(robust_scaler, with_centering, [true, false]) :- true.
domain(robust_scaler, with_scaling, [true, false]) :- true.
domain(standard, with_mean, [true, false]) :- true.
domain(standard, with_std, [true, false]) :- true.
domain(select_k_best, k, [1, 10]) :- true.
domain(pca, n_components, [1, 8]) :- true.
domain(corr_remover, alpha, [0.25, 0.5, 0.75, 1.0]) :- true.
domain(lfr, n_prototypes, [10, 50, 100, 200]) :- true.
domain(lfr, reconstruct_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(lfr, fairness_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(near_miss, n_neighbors, [1, 4]) :- true.
domain(smote, k_neighbors, [5, 8]) :- true.
domain(knn, n_neighbors, [3, 20]) :- true.
domain(knn, weights, [uniform, distance]) :- true.
domain(knn, metric, [minkowski, euclidean, manhattan]) :- true.
domain(nn, n_hidden_layers, [1, 5, 10, 20]) :- true.
domain(nn, n_neurons, [5, 10, 25, 50]) :- true.
domain(nn, activation, [logistic, tanh, relu]) :- true.
domain(nn, solver, [lbfgs, sgd, adam]) :- true.
domain(nn, alpha, [0.0001, 0.001, 0.01, 0.00001]) :- true.
domain(nn, learning_rate, [constant, invscaling, adaptive]) :- true.
domain(rf, n_estimators, [10, 25, 50, 75, 100]) :- true.
domain(rf, max_depth, [1, 5]) :- true.
domain(rf, max_features, [1, 4]) :- true.
domain(rf, min_samples_split, [2, 6]) :- true.
domain(rf, max_leaf_nodes, [2, 6]) :- true.
domain(rf, bootstrap, [true, false]) :- true.
domain(rf, criterion, [gini, entropy]) :- true.
':=>'(c1, mandatory([mitigation], classification)) :- true.
':=>'(c3, mandatory_order([mitigation, features], classification)) :- true.
':=>'(c4, mandatory_order([mitigation, normalization], classification)) :- true.
':=>'(c5, mandatory([normalization], knn)) :- true.
':=>'(c6, mandatory([normalization], nn)) :- true.
dataset(compass) :- true.
metric(balanced_accuracy) :- true.
fairness_metric(equalized_odds_ratio) :- true.
sensitive_feature(sex, [0, 1]) :- true.
sensitive_feature(race, [0, 1, 2, 3, 4, 5]) :- true.
pipeline([Step_1_0], ZZ_0) :- (step(Step_1_0), '\\='(Step_1_0, classification), operator(classification, ZZ_0)).
pipeline([Step_1_1, Step_2_0], ZZ_1) :- (step(Step_1_1), step(Step_2_0), '\\='(Step_1_1, classification), '\\='(Step_2_0, classification), '\\='(Step_1_1, Step_2_0), operator(classification, ZZ_1)).
pipeline([Step_1_2, Step_2_1, Step_3_0], ZZ_2) :- (step(Step_1_2), step(Step_2_1), step(Step_3_0), '\\='(Step_1_2, classification), '\\='(Step_2_1, classification), '\\='(Step_3_0, classification), '\\='(Step_1_2, Step_2_1), '\\='(Step_1_2, Step_3_0), '\\='(Step_2_1, Step_3_0), operator(classification, ZZ_2)).
pipeline([Step_1_3, Step_2_2, Step_3_1, Step_4_0], ZZ_3) :- (step(Step_1_3), step(Step_2_2), step(Step_3_1), step(Step_4_0), '\\='(Step_1_3, classification), '\\='(Step_2_2, classification), '\\='(Step_3_1, classification), '\\='(Step_4_0, classification), '\\='(Step_1_3, Step_2_2), '\\='(Step_1_3, Step_3_1), '\\='(Step_1_3, Step_4_0), '\\='(Step_2_2, Step_3_1), '\\='(Step_2_2, Step_4_0), '\\='(Step_3_1, Step_4_0), operator(classification, ZZ_3)).
':=>'(p694620, sensitive_group([0])) :- true.
':=>'(p809072, sensitive_group([1])) :- true.
':=>'(p245856, sensitive_group([0])) :- true.
':=>'(p861445, sensitive_group([1])) :- true.
':=>'(p619211, sensitive_group([2])) :- true.
':=>'(p549282, sensitive_group([3])) :- true.
':=>'(p485545, sensitive_group([4])) :- true.
':=>'(p183841, sensitive_group([5])) :- true.
':=>'(p187621, sensitive_group([0, 0])) :- true.
':=>'(p756904, sensitive_group([0, 1])) :- true.
':=>'(p840150, sensitive_group([0, 2])) :- true.
':=>'(p799636, sensitive_group([0, 3])) :- true.
':=>'(p484501, sensitive_group([0, 4])) :- true.
':=>'(p489207, sensitive_group([0, 5])) :- true.
':=>'(p809119, sensitive_group([1, 0])) :- true.
':=>'(p338443, sensitive_group([1, 1])) :- true.
':=>'(p386868, sensitive_group([1, 2])) :- true.
':=>'(p178906, sensitive_group([1, 3])) :- true.
':=>'(p673479, sensitive_group([1, 4])) :- true.
':=>'(p550769, sensitive_group([1, 5])) :- true.
':=>'(p856387, pipeline([], knn)) :- true.
':=>'(p146373, pipeline([], knn)) :- true.
':=>'(p761451, pipeline([], nn)) :- true.
':=>'(p732478, pipeline([], nn)) :- true.
':=>'(p722598, pipeline([], rf)) :- true.
':=>'(p879032, pipeline([normalization], knn)) :- true.
':=>'(p496170, pipeline([normalization], nn)) :- true.
':=>'(p532061, pipeline([normalization], rf)) :- true.
':=>'(p796772, pipeline([features], knn)) :- true.
':=>'(p648944, pipeline([features], knn)) :- true.
':=>'(p372117, pipeline([features], nn)) :- true.
':=>'(p818897, pipeline([features], nn)) :- true.
':=>'(p501042, pipeline([features], rf)) :- true.
':=>'(p369891, pipeline([mitigation], knn)) :- true.
':=>'(p546718, pipeline([mitigation], nn)) :- true.
':=>'(p499888, pipeline([rebalancing], knn)) :- true.
':=>'(p989366, pipeline([rebalancing], knn)) :- true.
':=>'(p423793, pipeline([rebalancing], nn)) :- true.
':=>'(p429602, pipeline([rebalancing], nn)) :- true.
':=>'(p124025, pipeline([rebalancing], rf)) :- true.
':=>'(p978974, pipeline([normalization, features], knn)) :- true.
':=>'(p270350, pipeline([normalization, features], nn)) :- true.
':=>'(p232715, pipeline([normalization, features], rf)) :- true.
':=>'(p12598, pipeline([normalization, mitigation], knn)) :- true.
':=>'(p932843, pipeline([normalization, mitigation], nn)) :- true.
':=>'(p261576, pipeline([normalization, mitigation], rf)) :- true.
':=>'(p423768, pipeline([normalization, rebalancing], knn)) :- true.
':=>'(p92346, pipeline([normalization, rebalancing], nn)) :- true.
':=>'(p883428, pipeline([normalization, rebalancing], rf)) :- true.
':=>'(p801761, pipeline([features, normalization], knn)) :- true.
':=>'(p595176, pipeline([features, normalization], nn)) :- true.
':=>'(p283093, pipeline([features, normalization], rf)) :- true.
':=>'(p266356, pipeline([features, mitigation], knn)) :- true.
':=>'(p711057, pipeline([features, mitigation], knn)) :- true.
':=>'(p227197, pipeline([features, mitigation], nn)) :- true.
':=>'(p163999, pipeline([features, mitigation], nn)) :- true.
':=>'(p655208, pipeline([features, mitigation], rf)) :- true.
':=>'(p193160, pipeline([features, rebalancing], knn)) :- true.
':=>'(p135741, pipeline([features, rebalancing], knn)) :- true.
':=>'(p188521, pipeline([features, rebalancing], nn)) :- true.
':=>'(p845538, pipeline([features, rebalancing], nn)) :- true.
':=>'(p132780, pipeline([features, rebalancing], rf)) :- true.
':=>'(p773194, pipeline([mitigation, features], knn)) :- true.
':=>'(p932655, pipeline([mitigation, features], nn)) :- true.
':=>'(p896983, pipeline([mitigation, rebalancing], knn)) :- true.
':=>'(p168891, pipeline([mitigation, rebalancing], nn)) :- true.
':=>'(p953500, pipeline([rebalancing, normalization], knn)) :- true.
':=>'(p411249, pipeline([rebalancing, normalization], nn)) :- true.
':=>'(p472417, pipeline([rebalancing, normalization], rf)) :- true.
':=>'(p216620, pipeline([rebalancing, features], knn)) :- true.
':=>'(p241543, pipeline([rebalancing, features], knn)) :- true.
':=>'(p92546, pipeline([rebalancing, features], nn)) :- true.
':=>'(p502458, pipeline([rebalancing, features], nn)) :- true.
':=>'(p17377, pipeline([rebalancing, features], rf)) :- true.
':=>'(p654905, pipeline([rebalancing, mitigation], knn)) :- true.
':=>'(p77544, pipeline([rebalancing, mitigation], nn)) :- true.
':=>'(p186086, pipeline([normalization, features, mitigation], knn)) :- true.
':=>'(p729136, pipeline([normalization, features, mitigation], knn)) :- true.
':=>'(p488669, pipeline([normalization, features, mitigation], nn)) :- true.
':=>'(p664615, pipeline([normalization, features, mitigation], nn)) :- true.
':=>'(p748749, pipeline([normalization, features, mitigation], rf)) :- true.
':=>'(p355762, pipeline([normalization, features, mitigation], rf)) :- true.
':=>'(p758706, pipeline([normalization, features, rebalancing], knn)) :- true.
':=>'(p154771, pipeline([normalization, features, rebalancing], nn)) :- true.
':=>'(p157345, pipeline([normalization, features, rebalancing], rf)) :- true.
':=>'(p153659, pipeline([normalization, mitigation, features], knn)) :- true.
':=>'(p783595, pipeline([normalization, mitigation, features], nn)) :- true.
':=>'(p774093, pipeline([normalization, mitigation, features], rf)) :- true.
':=>'(p923408, pipeline([normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p771724, pipeline([normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p563964, pipeline([normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p839308, pipeline([normalization, rebalancing, features], knn)) :- true.
':=>'(p827600, pipeline([normalization, rebalancing, features], nn)) :- true.
':=>'(p27096, pipeline([normalization, rebalancing, features], rf)) :- true.
':=>'(p347233, pipeline([normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p990203, pipeline([normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p666296, pipeline([normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p137330, pipeline([features, normalization, mitigation], knn)) :- true.
':=>'(p113245, pipeline([features, normalization, mitigation], knn)) :- true.
':=>'(p682349, pipeline([features, normalization, mitigation], nn)) :- true.
':=>'(p973756, pipeline([features, normalization, mitigation], nn)) :- true.
':=>'(p851182, pipeline([features, normalization, mitigation], rf)) :- true.
':=>'(p757287, pipeline([features, normalization, mitigation], rf)) :- true.
':=>'(p219168, pipeline([features, normalization, rebalancing], knn)) :- true.
':=>'(p682815, pipeline([features, normalization, rebalancing], nn)) :- true.
':=>'(p325237, pipeline([features, normalization, rebalancing], rf)) :- true.
':=>'(p241399, pipeline([features, mitigation, normalization], knn)) :- true.
':=>'(p22171, pipeline([features, mitigation, normalization], nn)) :- true.
':=>'(p714336, pipeline([features, mitigation, normalization], rf)) :- true.
':=>'(p259477, pipeline([features, mitigation, rebalancing], knn)) :- true.
':=>'(p426258, pipeline([features, mitigation, rebalancing], knn)) :- true.
':=>'(p264081, pipeline([features, mitigation, rebalancing], nn)) :- true.
':=>'(p731636, pipeline([features, mitigation, rebalancing], nn)) :- true.
':=>'(p380452, pipeline([features, mitigation, rebalancing], rf)) :- true.
':=>'(p772131, pipeline([features, rebalancing, normalization], knn)) :- true.
':=>'(p303341, pipeline([features, rebalancing, normalization], nn)) :- true.
':=>'(p745074, pipeline([features, rebalancing, normalization], rf)) :- true.
':=>'(p89575, pipeline([features, rebalancing, mitigation], knn)) :- true.
':=>'(p94980, pipeline([features, rebalancing, mitigation], knn)) :- true.
':=>'(p567471, pipeline([features, rebalancing, mitigation], nn)) :- true.
':=>'(p202260, pipeline([features, rebalancing, mitigation], nn)) :- true.
':=>'(p770992, pipeline([features, rebalancing, mitigation], rf)) :- true.
':=>'(p186686, pipeline([mitigation, features, rebalancing], knn)) :- true.
':=>'(p283699, pipeline([mitigation, features, rebalancing], nn)) :- true.
':=>'(p950577, pipeline([mitigation, rebalancing, features], knn)) :- true.
':=>'(p898992, pipeline([mitigation, rebalancing, features], nn)) :- true.
':=>'(p893994, pipeline([rebalancing, normalization, features], knn)) :- true.
':=>'(p351736, pipeline([rebalancing, normalization, features], nn)) :- true.
':=>'(p14945, pipeline([rebalancing, normalization, features], rf)) :- true.
':=>'(p380010, pipeline([rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p648960, pipeline([rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p443903, pipeline([rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p97710, pipeline([rebalancing, features, normalization], knn)) :- true.
':=>'(p728970, pipeline([rebalancing, features, normalization], nn)) :- true.
':=>'(p202334, pipeline([rebalancing, features, normalization], rf)) :- true.
':=>'(p789405, pipeline([rebalancing, features, mitigation], knn)) :- true.
':=>'(p283160, pipeline([rebalancing, features, mitigation], knn)) :- true.
':=>'(p469148, pipeline([rebalancing, features, mitigation], nn)) :- true.
':=>'(p634808, pipeline([rebalancing, features, mitigation], nn)) :- true.
':=>'(p444778, pipeline([rebalancing, features, mitigation], rf)) :- true.
':=>'(p132799, pipeline([rebalancing, mitigation, features], knn)) :- true.
':=>'(p885546, pipeline([rebalancing, mitigation, features], nn)) :- true.
':=>'(p159223, pipeline([normalization, features, mitigation, rebalancing], knn)) :- true.
':=>'(p734632, pipeline([normalization, features, mitigation, rebalancing], knn)) :- true.
':=>'(p25826, pipeline([normalization, features, mitigation, rebalancing], nn)) :- true.
':=>'(p304846, pipeline([normalization, features, mitigation, rebalancing], nn)) :- true.
':=>'(p796473, pipeline([normalization, features, mitigation, rebalancing], rf)) :- true.
':=>'(p134045, pipeline([normalization, features, mitigation, rebalancing], rf)) :- true.
':=>'(p267643, pipeline([normalization, features, rebalancing, mitigation], knn)) :- true.
':=>'(p360035, pipeline([normalization, features, rebalancing, mitigation], knn)) :- true.
':=>'(p22112, pipeline([normalization, features, rebalancing, mitigation], nn)) :- true.
':=>'(p409795, pipeline([normalization, features, rebalancing, mitigation], nn)) :- true.
':=>'(p706385, pipeline([normalization, features, rebalancing, mitigation], rf)) :- true.
':=>'(p791049, pipeline([normalization, features, rebalancing, mitigation], rf)) :- true.
':=>'(p106480, pipeline([normalization, mitigation, features, rebalancing], knn)) :- true.
':=>'(p222279, pipeline([normalization, mitigation, features, rebalancing], nn)) :- true.
':=>'(p133989, pipeline([normalization, mitigation, features, rebalancing], rf)) :- true.
':=>'(p750348, pipeline([normalization, mitigation, rebalancing, features], knn)) :- true.
':=>'(p524241, pipeline([normalization, mitigation, rebalancing, features], nn)) :- true.
':=>'(p635073, pipeline([normalization, mitigation, rebalancing, features], rf)) :- true.
':=>'(p986063, pipeline([normalization, rebalancing, features, mitigation], knn)) :- true.
':=>'(p727371, pipeline([normalization, rebalancing, features, mitigation], knn)) :- true.
':=>'(p209248, pipeline([normalization, rebalancing, features, mitigation], nn)) :- true.
':=>'(p862325, pipeline([normalization, rebalancing, features, mitigation], nn)) :- true.
':=>'(p160338, pipeline([normalization, rebalancing, features, mitigation], rf)) :- true.
':=>'(p290845, pipeline([normalization, rebalancing, features, mitigation], rf)) :- true.
':=>'(p22744, pipeline([normalization, rebalancing, mitigation, features], knn)) :- true.
':=>'(p28135, pipeline([normalization, rebalancing, mitigation, features], nn)) :- true.
':=>'(p213759, pipeline([normalization, rebalancing, mitigation, features], rf)) :- true.
':=>'(p886139, pipeline([features, normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p852018, pipeline([features, normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p886149, pipeline([features, normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p623165, pipeline([features, normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p657562, pipeline([features, normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p902897, pipeline([features, normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p477798, pipeline([features, normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p250887, pipeline([features, normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p591673, pipeline([features, normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p446533, pipeline([features, normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p657495, pipeline([features, normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p415744, pipeline([features, normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p524486, pipeline([features, mitigation, normalization, rebalancing], knn)) :- true.
':=>'(p754638, pipeline([features, mitigation, normalization, rebalancing], nn)) :- true.
':=>'(p997836, pipeline([features, mitigation, normalization, rebalancing], rf)) :- true.
':=>'(p965277, pipeline([features, mitigation, rebalancing, normalization], knn)) :- true.
':=>'(p916116, pipeline([features, mitigation, rebalancing, normalization], nn)) :- true.
':=>'(p695686, pipeline([features, mitigation, rebalancing, normalization], rf)) :- true.
':=>'(p705437, pipeline([features, rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p215167, pipeline([features, rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p117650, pipeline([features, rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p320909, pipeline([features, rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p16498, pipeline([features, rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p123495, pipeline([features, rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p547244, pipeline([features, rebalancing, mitigation, normalization], knn)) :- true.
':=>'(p534870, pipeline([features, rebalancing, mitigation, normalization], nn)) :- true.
':=>'(p702287, pipeline([features, rebalancing, mitigation, normalization], rf)) :- true.
':=>'(p699934, pipeline([rebalancing, normalization, features, mitigation], knn)) :- true.
':=>'(p773287, pipeline([rebalancing, normalization, features, mitigation], knn)) :- true.
':=>'(p344157, pipeline([rebalancing, normalization, features, mitigation], nn)) :- true.
':=>'(p147250, pipeline([rebalancing, normalization, features, mitigation], nn)) :- true.
':=>'(p964129, pipeline([rebalancing, normalization, features, mitigation], rf)) :- true.
':=>'(p653482, pipeline([rebalancing, normalization, features, mitigation], rf)) :- true.
':=>'(p467891, pipeline([rebalancing, normalization, mitigation, features], knn)) :- true.
':=>'(p916578, pipeline([rebalancing, normalization, mitigation, features], nn)) :- true.
':=>'(p142666, pipeline([rebalancing, normalization, mitigation, features], rf)) :- true.
':=>'(p114404, pipeline([rebalancing, features, normalization, mitigation], knn)) :- true.
':=>'(p567533, pipeline([rebalancing, features, normalization, mitigation], knn)) :- true.
':=>'(p597722, pipeline([rebalancing, features, normalization, mitigation], nn)) :- true.
':=>'(p365781, pipeline([rebalancing, features, normalization, mitigation], nn)) :- true.
':=>'(p677831, pipeline([rebalancing, features, normalization, mitigation], rf)) :- true.
':=>'(p350760, pipeline([rebalancing, features, normalization, mitigation], rf)) :- true.
':=>'(p693236, pipeline([rebalancing, features, mitigation, normalization], knn)) :- true.
':=>'(p306006, pipeline([rebalancing, features, mitigation, normalization], nn)) :- true.
':=>'(p339080, pipeline([rebalancing, features, mitigation, normalization], rf)) :- true.

Checking Config
Exporting Config
Saving Graph
Exporting AutoML input
Exporting Space
Exporting Constraints
Input created for iteration Config(iteration=2, dataset=compass, metric=balanced_accuracy, fairnessMetric=equalized_odds_ratio, sensitiveFeatures=[sex, race], mode=max, batchSize=999999, timeBudget=900, seed=42)
Here is the standard output/error of the command:

3c71801fa4b22ec54761a627c361447cc776fe171947e7d8e0f66fead6b88cea
Here is the standard output/error of the command:

Here is the standard output/error of the command:

WARNING:root:No module named 'rpy2': FairAdapt will be unavailable. To install, run:
pip install 'aif360[FairAdapt]'
INFO:flaml.tune.searcher.blendsearch:No low-cost partial config given to the search algorithm. For cost-frugal search, consider providing low-cost values for cost-related hps via 'low_cost_partial_config'. More info can be found at https://microsoft.github.io/FLAML/docs/FAQ#about-low_cost_partial_config-in-tune
Trying to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Added successfully: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Trying to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: normalization == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
AutoML: starting optimization.
6
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 6, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.19890471288773892), 'balanced_accuracy': np.float64(0.6434341322740952), 'by_group': {'0_0': np.float64(0.38), '0_2': np.float64(0.41), '0_3': np.float64(0.27), '1_0': np.float64(1.0), '1_2': np.float64(0.55), '1_3': np.float64(0.53), '1_5': np.float64(0.44)}, 'status': 'success', 'total_time': 1.7291576862335205, 'fit_time': np.float64(0.26685614585876466), 'score_time': np.float64(0.007017707824707032), 'absolute_time': 1746711078.1311617, 'flatten_equalized_odds_ratio': '0.36_0.07_0.0_0.16_0.41', 'flatten_balanced_accuracy': '0.65_0.65_0.63_0.64_0.65'}
7
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 6, 'min_samples_split': 6, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.500156338915627), 'balanced_accuracy': np.float64(0.6192892109523156), 'by_group': {'0_0': np.float64(0.73), '0_2': np.float64(0.79), '0_3': np.float64(0.51), '1_0': np.float64(0.83), '1_2': np.float64(0.75), '1_3': np.float64(0.71), '1_5': np.float64(0.7)}, 'status': 'success', 'total_time': 23.99074935913086, 'fit_time': np.float64(4.707325220108032), 'score_time': np.float64(0.02194061279296875), 'absolute_time': 1746711102.1547382, 'flatten_equalized_odds_ratio': '0.43_0.64_0.61_0.27_0.54', 'flatten_balanced_accuracy': '0.63_0.63_0.61_0.61_0.61'}
8
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 6, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.22248812398428602), 'balanced_accuracy': np.float64(0.6581348535295011), 'by_group': {'0_0': np.float64(0.59), '0_2': np.float64(0.63), '0_3': np.float64(0.29), '1_0': np.float64(0.9), '1_2': np.float64(0.62), '1_3': np.float64(0.68), '1_5': np.float64(0.48)}, 'status': 'success', 'total_time': 2.8610405921936035, 'fit_time': np.float64(0.5024302959442138), 'score_time': np.float64(0.008116960525512695), 'absolute_time': 1746711105.046621, 'flatten_equalized_odds_ratio': '0.47_0.2_0.0_0.16_0.29', 'flatten_balanced_accuracy': '0.65_0.68_0.65_0.64_0.67'}
9
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 1, 'max_leaf_nodes': 6, 'min_samples_split': 6, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.26191554465399436), 'balanced_accuracy': np.float64(0.6479005883477964), 'by_group': {'0_0': np.float64(0.48), '0_2': np.float64(0.49), '0_3': np.float64(0.34), '1_0': np.float64(0.95), '1_2': np.float64(0.57), '1_3': np.float64(0.65), '1_5': np.float64(0.58)}, 'status': 'success', 'total_time': 3.087160587310791, 'fit_time': np.float64(0.5439362049102783), 'score_time': np.float64(0.012025976181030273), 'absolute_time': 1746711108.1653445, 'flatten_equalized_odds_ratio': '0.34_0.27_0.0_0.31_0.38', 'flatten_balanced_accuracy': '0.66_0.66_0.64_0.64_0.65'}
/usr/local/lib/python3.12/site-packages/numpy/_core/_methods.py:194: RuntimeWarning: overflow encountered in multiply
  x = um.multiply(x, x, out=x)
/usr/local/lib/python3.12/site-packages/numpy/_core/_methods.py:205: RuntimeWarning: overflow encountered in reduce
  ret = umr_sum(x, axis, dtype, out, keepdims=keepdims, where=where)
The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 6, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 6, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')} was NaN

10
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 6, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': np.float64(0.5051606328472218), 'by_group': {'0_0': np.float64(0.56), '0_2': np.float64(0.21), '0_3': np.float64(0.2), '1_0': np.float64(0.38), '1_2': np.float64(0.32), '1_3': np.float64(0.16), '1_5': np.float64(0.19)}, 'status': 'fail', 'total_time': 25.537562608718872, 'fit_time': np.float64(4.015391492843628), 'score_time': np.float64(0.5194848060607911), 'absolute_time': 1746711133.738992, 'flatten_equalized_odds_ratio': 'nan_0.0_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.5_0.51_0.51_0.5_0.51'}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
11
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 1, 'max_features': 4, 'max_leaf_nodes': 6, 'min_samples_split': 5, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('SelectKBest'), 'k': 2}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.1359146904850059), 'balanced_accuracy': np.float64(0.6423131560738057), 'by_group': {'0_0': np.float64(0.55), '0_2': np.float64(0.54), '0_3': np.float64(0.15), '1_0': np.float64(0.92), '1_2': np.float64(0.67), '1_3': np.float64(0.64), '1_5': np.float64(0.49)}, 'status': 'success', 'total_time': 2.995750904083252, 'fit_time': np.float64(0.2972599506378174), 'score_time': np.float64(0.011986207962036134), 'absolute_time': 1746711136.7722237, 'flatten_equalized_odds_ratio': '0.28_0.2_0.0_0.2_0.0', 'flatten_balanced_accuracy': '0.65_0.65_0.64_0.63_0.64'}
12
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.15304834272841725), 'balanced_accuracy': np.float64(0.6342333428438461), 'by_group': {'0_0': np.float64(0.5), '0_2': np.float64(0.49), '0_3': np.float64(0.15), '1_0': np.float64(0.93), '1_2': np.float64(0.81), '1_3': np.float64(0.71), '1_5': np.float64(0.58)}, 'status': 'success', 'total_time': 6.482980251312256, 'fit_time': np.float64(1.2344675064086914), 'score_time': np.float64(0.00595698356628418), 'absolute_time': 1746711143.2923746, 'flatten_equalized_odds_ratio': '0.35_0.13_0.0_0.17_0.11', 'flatten_balanced_accuracy': '0.64_0.63_0.63_0.64_0.63'}
13
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 6, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.06391532208328837), 'balanced_accuracy': np.float64(0.6389563564216421), 'by_group': {'0_0': np.float64(0.24), '0_2': np.float64(0.26), '0_3': np.float64(0.08), '1_0': np.float64(1.0), '1_2': np.float64(0.38), '1_3': np.float64(0.36), '1_5': np.float64(0.25)}, 'status': 'success', 'total_time': 5.336066007614136, 'fit_time': np.float64(0.9895213127136231), 'score_time': np.float64(0.013600397109985351), 'absolute_time': 1746711148.66437, 'flatten_equalized_odds_ratio': '0.27_0.05_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.65_0.64_0.64_0.63_0.63'}
14
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.23423335759930422), 'balanced_accuracy': np.float64(0.6027029883767707), 'by_group': {'0_0': np.float64(0.47), '0_2': np.float64(0.56), '0_3': np.float64(0.23), '1_0': np.float64(1.0), '1_2': np.float64(0.68), '1_3': np.float64(0.61), '1_5': np.float64(0.57)}, 'status': 'success', 'total_time': 0.49658870697021484, 'fit_time': np.float64(0.01475367546081543), 'score_time': np.float64(0.01561422348022461), 'absolute_time': 1746711149.9132168, 'flatten_equalized_odds_ratio': '0.37_0.18_0.35_0.26_0.0', 'flatten_balanced_accuracy': '0.61_0.61_0.6_0.6_0.59'}
15
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 6, 'min_samples_split': 3, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.061664566267590835), 'balanced_accuracy': np.float64(0.6361605144240341), 'by_group': {'0_0': np.float64(0.25), '0_2': np.float64(0.24), '0_3': np.float64(0.06), '1_0': np.float64(0.99), '1_2': np.float64(0.56), '1_3': np.float64(0.51), '1_5': np.float64(0.37)}, 'status': 'success', 'total_time': 2.2375385761260986, 'fit_time': np.float64(0.3758803367614746), 'score_time': np.float64(0.008809709548950195), 'absolute_time': 1746711152.1868536, 'flatten_equalized_odds_ratio': '0.15_0.16_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.65_0.64_0.63_0.63_0.63'}
16
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 3, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.39141535893649754), 'balanced_accuracy': np.float64(0.6277901640845022), 'by_group': {'0_0': np.float64(0.71), '0_2': np.float64(0.77), '0_3': np.float64(0.41), '1_0': np.float64(0.8), '1_2': np.float64(0.76), '1_3': np.float64(0.68), '1_5': np.float64(0.57)}, 'status': 'success', 'total_time': 23.075538635253906, 'fit_time': np.float64(4.531691980361939), 'score_time': np.float64(0.017852020263671876), 'absolute_time': 1746711175.3008993, 'flatten_equalized_odds_ratio': '0.34_0.28_0.53_0.23_0.58', 'flatten_balanced_accuracy': '0.63_0.62_0.62_0.64_0.63'}
17
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.5911083741817729), 'balanced_accuracy': np.float64(0.5993157449986748), 'by_group': {'0_0': np.float64(0.79), '0_2': np.float64(0.87), '0_3': np.float64(0.59), '1_0': np.float64(0.88), '1_2': np.float64(0.85), '1_3': np.float64(0.78), '1_5': np.float64(0.82)}, 'status': 'success', 'total_time': 22.443950176239014, 'fit_time': np.float64(4.40775351524353), 'score_time': np.float64(0.013935089111328125), 'absolute_time': 1746711197.7870843, 'flatten_equalized_odds_ratio': '0.98_0.71_0.56_0.5_0.2', 'flatten_balanced_accuracy': '0.5_0.63_0.6_0.62_0.64'}
18
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.34130865255011755), 'balanced_accuracy': np.float64(0.6295113297394789), 'by_group': {'0_0': np.float64(0.7), '0_2': np.float64(0.76), '0_3': np.float64(0.36), '1_0': np.float64(0.84), '1_2': np.float64(0.77), '1_3': np.float64(0.7), '1_5': np.float64(0.58)}, 'status': 'success', 'total_time': 23.65067720413208, 'fit_time': np.float64(4.65076174736023), 'score_time': np.float64(0.01562533378601074), 'absolute_time': 1746711221.4901626, 'flatten_equalized_odds_ratio': '0.36_0.24_0.55_0.55_0.0', 'flatten_balanced_accuracy': '0.64_0.65_0.6_0.62_0.64'}
19
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('sgd')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.2627512783158509), 'balanced_accuracy': np.float64(0.6384135597996174), 'by_group': {'0_0': np.float64(0.69), '0_2': np.float64(0.66), '0_3': np.float64(0.28), '1_0': np.float64(0.8), '1_2': np.float64(0.65), '1_3': np.float64(0.61), '1_5': np.float64(0.5)}, 'status': 'success', 'total_time': 30.280871629714966, 'fit_time': np.float64(5.97496190071106), 'score_time': np.float64(0.015084314346313476), 'absolute_time': 1746711251.8181252, 'flatten_equalized_odds_ratio': '0.36_0.23_0.37_0.24_0.11', 'flatten_balanced_accuracy': '0.63_0.64_0.64_0.63_0.66'}
20
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 6, 'min_samples_split': 2, 'n_estimators': np.int64(25)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.20838747838935717), 'balanced_accuracy': np.float64(0.6687984996395507), 'by_group': {'0_0': np.float64(0.32), '0_2': np.float64(0.37), '0_3': np.float64(0.28), '1_0': np.float64(1.0), '1_2': np.float64(0.3), '1_3': np.float64(0.36), '1_5': np.float64(0.31)}, 'status': 'success', 'total_time': 1.3889343738555908, 'fit_time': np.float64(0.20938901901245116), 'score_time': np.float64(0.008220100402832031), 'absolute_time': 1746711253.263618, 'flatten_equalized_odds_ratio': '0.27_0.18_0.17_0.14_0.28', 'flatten_balanced_accuracy': '0.67_0.67_0.67_0.68_0.66'}
21
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 11, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.3403780771395294), 'balanced_accuracy': np.float64(0.623989525994195), 'by_group': {'0_0': np.float64(0.47), '0_2': np.float64(0.47), '0_3': np.float64(0.48), '1_0': np.float64(1.0), '1_2': np.float64(0.64), '1_3': np.float64(0.44), '1_5': np.float64(0.62)}, 'status': 'success', 'total_time': 1.706439733505249, 'fit_time': np.float64(0.020943880081176758), 'score_time': np.float64(0.13309736251831056), 'absolute_time': 1746711255.0232348, 'flatten_equalized_odds_ratio': '0.34_0.12_0.41_0.43_0.39', 'flatten_balanced_accuracy': '0.61_0.63_0.63_0.62_0.63'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 622, in objective
    fair_scores, fair_scores_by_group = _compute_fair_metric(
                                        ^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 381, in _compute_fair_metric
    y_pred = np.array(scores["estimator"][fold].predict(x_original))
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 658, in predict
    Xt = transform.transform(Xt)
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_set_output.py", line 319, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/decomposition/_base.py", line 134, in transform
    xp, _ = get_namespace(X, self.components_, self.explained_variance_)
                             ^^^^^^^^^^^^^^^^
AttributeError: 'PCA' object has no attribute 'components_'. Did you mean: 'n_components'?

22
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'0_0': -inf, '0_2': -inf, '0_3': -inf, '1_0': -inf, '1_2': -inf, '1_3': -inf, '1_5': -inf}, 'status': 'fail', 'total_time': 13.97952389717102, 'fit_time': np.float64(2.7592673778533934), 'score_time': np.float64(0.010647869110107422), 'absolute_time': 1746711269.886193}
23
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'0_0': np.float64(1.0), '0_2': np.float64(1.0), '0_3': np.float64(1.0), '1_0': np.float64(1.0), '1_2': np.float64(1.0), '1_3': np.float64(1.0), '1_5': np.float64(1.0)}, 'status': 'success', 'total_time': 1.9241955280303955, 'fit_time': np.float64(0.3225394725799561), 'score_time': np.float64(0.005628824234008789), 'absolute_time': 1746711271.8721557, 'flatten_equalized_odds_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
24
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.32571626238888496), 'balanced_accuracy': np.float64(0.623626890361838), 'by_group': {'0_0': np.float64(0.66), '0_2': np.float64(0.7), '0_3': np.float64(0.35), '1_0': np.float64(0.75), '1_2': np.float64(0.7), '1_3': np.float64(0.64), '1_5': np.float64(0.53)}, 'status': 'success', 'total_time': 24.252556324005127, 'fit_time': np.float64(4.772034168243408), 'score_time': np.float64(0.013621759414672852), 'absolute_time': 1746711296.1824503, 'flatten_equalized_odds_ratio': '0.38_0.26_0.0_0.25_0.73', 'flatten_balanced_accuracy': '0.63_0.64_0.63_0.62_0.61'}
25
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.09184945026668315), 'balanced_accuracy': np.float64(0.6629616205141267), 'by_group': {'0_0': np.float64(0.27), '0_2': np.float64(0.3), '0_3': np.float64(0.16), '1_0': np.float64(1.0), '1_2': np.float64(0.5), '1_3': np.float64(0.49), '1_5': np.float64(0.47)}, 'status': 'success', 'total_time': 2.3465347290039062, 'fit_time': np.float64(0.028239870071411134), 'score_time': np.float64(0.19565300941467284), 'absolute_time': 1746711298.5880952, 'flatten_equalized_odds_ratio': '0.22_0.1_0.0_0.13_0.0', 'flatten_balanced_accuracy': '0.67_0.67_0.66_0.67_0.65'}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
26
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 4, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.35853895130515406), 'balanced_accuracy': np.float64(0.6770565810574267), 'by_group': {'0_0': np.float64(0.65), '0_2': np.float64(0.71), '0_3': np.float64(0.41), '1_0': np.float64(0.94), '1_2': np.float64(0.55), '1_3': np.float64(0.54), '1_5': np.float64(0.45)}, 'status': 'success', 'total_time': 2.0770065784454346, 'fit_time': np.float64(0.2998549461364746), 'score_time': np.float64(0.00845794677734375), 'absolute_time': 1746711300.722571, 'flatten_equalized_odds_ratio': '0.43_0.42_0.22_0.35_0.37', 'flatten_balanced_accuracy': '0.67_0.69_0.68_0.68_0.67'}
27
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 4, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.16692046192106752), 'balanced_accuracy': np.float64(0.6350827464104436), 'by_group': {'0_0': np.float64(0.65), '0_2': np.float64(0.67), '0_3': np.float64(0.19), '1_0': np.float64(0.77), '1_2': np.float64(0.7), '1_3': np.float64(0.64), '1_5': np.float64(0.53)}, 'status': 'success', 'total_time': 22.049885988235474, 'fit_time': np.float64(4.327052164077759), 'score_time': np.float64(0.016591691970825197), 'absolute_time': 1746711322.831149, 'flatten_equalized_odds_ratio': '0.34_0.24_0.0_0.25_0.0', 'flatten_balanced_accuracy': '0.63_0.65_0.63_0.62_0.64'}
28
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 2, 'n_estimators': np.int64(25)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.40477708401095497), 'balanced_accuracy': np.float64(0.6269366808630823), 'by_group': {'0_0': np.float64(0.74), '0_2': np.float64(0.79), '0_3': np.float64(0.46), '1_0': np.float64(0.85), '1_2': np.float64(0.77), '1_3': np.float64(0.73), '1_5': np.float64(0.65)}, 'status': 'success', 'total_time': 18.086249351501465, 'fit_time': np.float64(3.53727445602417), 'score_time': np.float64(0.015282154083251953), 'absolute_time': 1746711340.9686754, 'flatten_equalized_odds_ratio': '0.33_0.63_0.3_0.64_0.13', 'flatten_balanced_accuracy': '0.65_0.61_0.63_0.62_0.62'}
29
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_split': 2, 'n_estimators': np.int64(75)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.25594794070807086), 'balanced_accuracy': np.float64(0.6246339845876677), 'by_group': {'0_0': np.float64(0.65), '0_2': np.float64(0.69), '0_3': np.float64(0.27), '1_0': np.float64(0.78), '1_2': np.float64(0.74), '1_3': np.float64(0.68), '1_5': np.float64(0.56)}, 'status': 'success', 'total_time': 20.411537170410156, 'fit_time': np.float64(3.9894437313079836), 'score_time': np.float64(0.020773601531982423), 'absolute_time': 1746711361.4362483, 'flatten_equalized_odds_ratio': '0.33_0.31_0.0_0.64_0.0', 'flatten_balanced_accuracy': '0.65_0.6_0.62_0.62_0.64'}
30
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.1819865182753999), 'balanced_accuracy': np.float64(0.6695923624087771), 'by_group': {'0_0': np.float64(0.38), '0_2': np.float64(0.39), '0_3': np.float64(0.22), '1_0': np.float64(1.0), '1_2': np.float64(0.27), '1_3': np.float64(0.31), '1_5': np.float64(0.27)}, 'status': 'success', 'total_time': 3.2258799076080322, 'fit_time': np.float64(0.5753427505493164), 'score_time': np.float64(0.008716630935668945), 'absolute_time': 1746711365.8993871, 'flatten_equalized_odds_ratio': '0.23_0.28_0.07_0.11_0.22', 'flatten_balanced_accuracy': '0.67_0.67_0.67_0.69_0.65'}
31
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.4313589005225126), 'balanced_accuracy': np.float64(0.597726791067841), 'by_group': {'0_0': np.float64(0.73), '0_2': np.float64(0.74), '0_3': np.float64(0.45), '1_0': np.float64(0.79), '1_2': np.float64(0.77), '1_3': np.float64(0.7), '1_5': np.float64(0.63)}, 'status': 'success', 'total_time': 29.82343363761902, 'fit_time': np.float64(4.434723043441773), 'score_time': np.float64(0.012878704071044921), 'absolute_time': 1746711395.778913, 'flatten_equalized_odds_ratio': '0.38_0.26_0.0_0.99_0.54', 'flatten_balanced_accuracy': '0.63_0.63_0.62_0.5_0.61'}
32
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.13467615294859692), 'balanced_accuracy': np.float64(0.6868935374851163), 'by_group': {'0_0': np.float64(0.36), '0_2': np.float64(0.41), '0_3': np.float64(0.13), '1_0': np.float64(1.0), '1_2': np.float64(0.48), '1_3': np.float64(0.52), '1_5': np.float64(0.47)}, 'status': 'success', 'total_time': 287.1998291015625, 'fit_time': np.float64(57.15717496871948), 'score_time': np.float64(0.09621720314025879), 'absolute_time': 1746711683.0383217, 'flatten_equalized_odds_ratio': '0.18_0.18_0.0_0.22_0.09', 'flatten_balanced_accuracy': '0.7_0.68_0.69_0.7_0.67'}
33
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(25), 'solver': np.str_('sgd')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.24568436638119798), 'balanced_accuracy': np.float64(0.6298653751628387), 'by_group': {'0_0': np.float64(0.65), '0_2': np.float64(0.73), '0_3': np.float64(0.28), '1_0': np.float64(0.77), '1_2': np.float64(0.72), '1_3': np.float64(0.66), '1_5': np.float64(0.53)}, 'status': 'success', 'total_time': 36.67624759674072, 'fit_time': np.float64(6.912779140472412), 'score_time': np.float64(0.1668041706085205), 'absolute_time': 1746711719.784652, 'flatten_equalized_odds_ratio': '0.41_0.21_0.0_0.61_0.0', 'flatten_balanced_accuracy': '0.62_0.65_0.62_0.62_0.63'}
34
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.06485710959781152), 'balanced_accuracy': np.float64(0.6343004267760372), 'by_group': {'0_0': np.float64(0.2), '0_2': np.float64(0.22), '0_3': np.float64(0.06), '1_0': np.float64(0.99), '1_2': np.float64(0.48), '1_3': np.float64(0.44), '1_5': np.float64(0.32)}, 'status': 'success', 'total_time': 3.322178363800049, 'fit_time': np.float64(0.5904967784881592), 'score_time': np.float64(0.010868501663208009), 'absolute_time': 1746711723.1742094, 'flatten_equalized_odds_ratio': '0.16_0.16_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.64_0.64_0.63_0.63_0.63'}
35
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 2}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'equalized_odds_ratio': np.float64(0.29705003782964806), 'balanced_accuracy': np.float64(0.6283025739347954), 'by_group': {'0_0': np.float64(0.72), '0_2': np.float64(0.76), '0_3': np.float64(0.34), '1_0': np.float64(0.81), '1_2': np.float64(0.79), '1_3': np.float64(0.69), '1_5': np.float64(0.61)}, 'status': 'success', 'total_time': 40.9934446811676, 'fit_time': np.float64(5.424570608139038), 'score_time': np.float64(0.017687559127807617), 'absolute_time': 1746711764.2329023, 'flatten_equalized_odds_ratio': '0.65_0.25_0.0_0.58_0.0', 'flatten_balanced_accuracy': '0.63_0.63_0.62_0.62_0.64'}
36
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_split': 6, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 3}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.3497910179447337), 'balanced_accuracy': np.float64(0.6281463633168567), 'by_group': {'0_0': np.float64(0.73), '0_2': np.float64(0.76), '0_3': np.float64(0.35), '1_0': np.float64(0.83), '1_2': np.float64(0.76), '1_3': np.float64(0.67), '1_5': np.float64(0.71)}, 'status': 'success', 'total_time': 22.79577898979187, 'fit_time': np.float64(4.461709976196289), 'score_time': np.float64(0.023280572891235352), 'absolute_time': 1746711787.104239, 'flatten_equalized_odds_ratio': '0.57_0.64_0.0_0.53_0.0', 'flatten_balanced_accuracy': '0.65_0.61_0.61_0.62_0.64'}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
37
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.17043705789024333), 'balanced_accuracy': np.float64(0.6647033159596868), 'by_group': {'0_0': np.float64(0.42), '0_2': np.float64(0.45), '0_3': np.float64(0.17), '1_0': np.float64(1.0), '1_2': np.float64(0.48), '1_3': np.float64(0.46), '1_5': np.float64(0.47)}, 'status': 'success', 'total_time': 2.757761001586914, 'fit_time': np.float64(0.08880867958068847), 'score_time': np.float64(0.20176105499267577), 'absolute_time': 1746711789.9300215, 'flatten_equalized_odds_ratio': '0.21_0.32_0.0_0.11_0.21', 'flatten_balanced_accuracy': '0.67_0.66_0.65_0.67_0.66'}
38
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 17, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 3}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.0), 'balanced_accuracy': np.float64(0.5083158346248038), 'by_group': {'0_0': np.float64(0.55), '0_2': np.float64(0.46), '0_3': np.float64(0.0), '1_0': np.float64(0.51), '1_2': np.float64(0.43), '1_3': np.float64(0.56), '1_5': np.float64(0.41)}, 'status': 'success', 'total_time': 19.260783672332764, 'fit_time': np.float64(3.3259506702423094), 'score_time': np.float64(0.23530540466308594), 'absolute_time': 1746711809.2691088, 'flatten_equalized_odds_ratio': '0.0_0.0_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.5_0.51_0.52_0.5_0.51'}
39
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.11316738223894714), 'balanced_accuracy': np.float64(0.6930830357387963), 'by_group': {'0_0': np.float64(0.48), '0_2': np.float64(0.39), '0_3': np.float64(0.11), '1_0': np.float64(1.0), '1_2': np.float64(0.56), '1_3': np.float64(0.58), '1_5': np.float64(0.54)}, 'status': 'success', 'total_time': 190.79695630073547, 'fit_time': np.float64(38.05967831611633), 'score_time': np.float64(0.020754289627075196), 'absolute_time': 1746712001.1567037, 'flatten_equalized_odds_ratio': '0.19_0.09_0.0_0.2_0.09', 'flatten_balanced_accuracy': '0.69_0.69_0.69_0.7_0.68'}
AutoML: optimization done.
AutoML: miner done.
AutoML: export done.
Here is the standard output/error of the command:

Here is the standard output/error of the command:

Here is the standard output/error of the command:

hamlet_1798103260
AutoML execution ended
