Sensitive groups ready!
Theory ready!
Theory:
step(normalization) :- true.
step(features) :- true.
step(mitigation) :- true.
step(rebalancing) :- true.
step(classification) :- true.
operator(normalization, power_transformer) :- true.
operator(normalization, robust_scaler) :- true.
operator(normalization, standard) :- true.
operator(normalization, minmax) :- true.
operator(features, select_k_best) :- true.
operator(features, pca) :- true.
operator(mitigation, corr_remover) :- true.
operator(mitigation, lfr) :- true.
operator(rebalancing, near_miss) :- true.
operator(rebalancing, smote) :- true.
operator(classification, knn) :- true.
operator(classification, nn) :- true.
operator(classification, rf) :- true.
hyperparameter(robust_scaler, with_centering, choice) :- true.
hyperparameter(robust_scaler, with_scaling, choice) :- true.
hyperparameter(standard, with_mean, choice) :- true.
hyperparameter(standard, with_std, choice) :- true.
hyperparameter(select_k_best, k, randint) :- true.
hyperparameter(pca, n_components, randint) :- true.
hyperparameter(corr_remover, alpha, choice) :- true.
hyperparameter(lfr, n_prototypes, choice) :- true.
hyperparameter(lfr, reconstruct_weight, choice) :- true.
hyperparameter(lfr, fairness_weight, choice) :- true.
hyperparameter(near_miss, n_neighbors, randint) :- true.
hyperparameter(smote, k_neighbors, randint) :- true.
hyperparameter(knn, n_neighbors, randint) :- true.
hyperparameter(knn, weights, choice) :- true.
hyperparameter(knn, metric, choice) :- true.
hyperparameter(nn, n_hidden_layers, choice) :- true.
hyperparameter(nn, n_neurons, choice) :- true.
hyperparameter(nn, activation, choice) :- true.
hyperparameter(nn, solver, choice) :- true.
hyperparameter(nn, alpha, choice) :- true.
hyperparameter(nn, learning_rate, choice) :- true.
hyperparameter(rf, n_estimators, choice) :- true.
hyperparameter(rf, max_depth, randint) :- true.
hyperparameter(rf, max_features, randint) :- true.
hyperparameter(rf, min_samples_split, randint) :- true.
hyperparameter(rf, max_leaf_nodes, randint) :- true.
hyperparameter(rf, bootstrap, choice) :- true.
hyperparameter(rf, criterion, choice) :- true.
domain(robust_scaler, with_centering, [true, false]) :- true.
domain(robust_scaler, with_scaling, [true, false]) :- true.
domain(standard, with_mean, [true, false]) :- true.
domain(standard, with_std, [true, false]) :- true.
domain(select_k_best, k, [1, 10]) :- true.
domain(pca, n_components, [1, 8]) :- true.
domain(corr_remover, alpha, [0.25, 0.5, 0.75, 1.0]) :- true.
domain(lfr, n_prototypes, [10, 50, 100, 200]) :- true.
domain(lfr, reconstruct_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(lfr, fairness_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(near_miss, n_neighbors, [1, 4]) :- true.
domain(smote, k_neighbors, [5, 8]) :- true.
domain(knn, n_neighbors, [3, 20]) :- true.
domain(knn, weights, [uniform, distance]) :- true.
domain(knn, metric, [minkowski, euclidean, manhattan]) :- true.
domain(nn, n_hidden_layers, [1, 5, 10, 20]) :- true.
domain(nn, n_neurons, [5, 10, 25, 50]) :- true.
domain(nn, activation, [logistic, tanh, relu]) :- true.
domain(nn, solver, [lbfgs, sgd, adam]) :- true.
domain(nn, alpha, [0.0001, 0.001, 0.01, 0.00001]) :- true.
domain(nn, learning_rate, [constant, invscaling, adaptive]) :- true.
domain(rf, n_estimators, [10, 25, 50, 75, 100]) :- true.
domain(rf, max_depth, [1, 5]) :- true.
domain(rf, max_features, [1, 4]) :- true.
domain(rf, min_samples_split, [2, 6]) :- true.
domain(rf, max_leaf_nodes, [2, 6]) :- true.
domain(rf, bootstrap, [true, false]) :- true.
domain(rf, criterion, [gini, entropy]) :- true.
':=>'(c1, mandatory([mitigation], classification)) :- true.
':=>'(c3, mandatory_order([mitigation, features], classification)) :- true.
':=>'(c4, mandatory_order([mitigation, normalization], classification)) :- true.
':=>'(c5, mandatory([normalization], knn)) :- true.
':=>'(c6, mandatory([normalization], nn)) :- true.
dataset(compass) :- true.
metric(balanced_accuracy) :- true.
fairness_metric(equalized_odds_ratio) :- true.
sensitive_feature(sex, [0, 1]) :- true.
sensitive_feature(race, [0, 1, 2, 3, 4, 5]) :- true.
pipeline([Step_1_0], ZZ_0) :- (step(Step_1_0), '\\='(Step_1_0, classification), operator(classification, ZZ_0)).
pipeline([Step_1_1, Step_2_0], ZZ_1) :- (step(Step_1_1), step(Step_2_0), '\\='(Step_1_1, classification), '\\='(Step_2_0, classification), '\\='(Step_1_1, Step_2_0), operator(classification, ZZ_1)).
pipeline([Step_1_2, Step_2_1, Step_3_0], ZZ_2) :- (step(Step_1_2), step(Step_2_1), step(Step_3_0), '\\='(Step_1_2, classification), '\\='(Step_2_1, classification), '\\='(Step_3_0, classification), '\\='(Step_1_2, Step_2_1), '\\='(Step_1_2, Step_3_0), '\\='(Step_2_1, Step_3_0), operator(classification, ZZ_2)).
pipeline([Step_1_3, Step_2_2, Step_3_1, Step_4_0], ZZ_3) :- (step(Step_1_3), step(Step_2_2), step(Step_3_1), step(Step_4_0), '\\='(Step_1_3, classification), '\\='(Step_2_2, classification), '\\='(Step_3_1, classification), '\\='(Step_4_0, classification), '\\='(Step_1_3, Step_2_2), '\\='(Step_1_3, Step_3_1), '\\='(Step_1_3, Step_4_0), '\\='(Step_2_2, Step_3_1), '\\='(Step_2_2, Step_4_0), '\\='(Step_3_1, Step_4_0), operator(classification, ZZ_3)).
':=>'(p240461, sensitive_group([0])) :- true.
':=>'(p435899, sensitive_group([1])) :- true.
':=>'(p165085, sensitive_group([0])) :- true.
':=>'(p913956, sensitive_group([1])) :- true.
':=>'(p11511, sensitive_group([2])) :- true.
':=>'(p11684, sensitive_group([3])) :- true.
':=>'(p66890, sensitive_group([4])) :- true.
':=>'(p361174, sensitive_group([5])) :- true.
':=>'(p486191, sensitive_group([0, 0])) :- true.
':=>'(p909524, sensitive_group([0, 1])) :- true.
':=>'(p772079, sensitive_group([0, 2])) :- true.
':=>'(p724765, sensitive_group([0, 3])) :- true.
':=>'(p194265, sensitive_group([0, 4])) :- true.
':=>'(p21580, sensitive_group([0, 5])) :- true.
':=>'(p430186, sensitive_group([1, 0])) :- true.
':=>'(p283861, sensitive_group([1, 1])) :- true.
':=>'(p557037, sensitive_group([1, 2])) :- true.
':=>'(p461633, sensitive_group([1, 3])) :- true.
':=>'(p990651, sensitive_group([1, 4])) :- true.
':=>'(p6076, sensitive_group([1, 5])) :- true.
':=>'(p262958, pipeline([], knn)) :- true.
':=>'(p160524, pipeline([], knn)) :- true.
':=>'(p238881, pipeline([], nn)) :- true.
':=>'(p531893, pipeline([], nn)) :- true.
':=>'(p93023, pipeline([], rf)) :- true.
':=>'(p200865, pipeline([normalization], knn)) :- true.
':=>'(p175470, pipeline([normalization], nn)) :- true.
':=>'(p593826, pipeline([normalization], rf)) :- true.
':=>'(p880300, pipeline([features], knn)) :- true.
':=>'(p491831, pipeline([features], knn)) :- true.
':=>'(p826076, pipeline([features], nn)) :- true.
':=>'(p97433, pipeline([features], nn)) :- true.
':=>'(p616504, pipeline([features], rf)) :- true.
':=>'(p918024, pipeline([mitigation], knn)) :- true.
':=>'(p75534, pipeline([mitigation], nn)) :- true.
':=>'(p457571, pipeline([rebalancing], knn)) :- true.
':=>'(p695129, pipeline([rebalancing], knn)) :- true.
':=>'(p654699, pipeline([rebalancing], nn)) :- true.
':=>'(p470592, pipeline([rebalancing], nn)) :- true.
':=>'(p617452, pipeline([rebalancing], rf)) :- true.
':=>'(p729364, pipeline([normalization, features], knn)) :- true.
':=>'(p897479, pipeline([normalization, features], nn)) :- true.
':=>'(p560593, pipeline([normalization, features], rf)) :- true.
':=>'(p714260, pipeline([normalization, mitigation], knn)) :- true.
':=>'(p375554, pipeline([normalization, mitigation], nn)) :- true.
':=>'(p190231, pipeline([normalization, mitigation], rf)) :- true.
':=>'(p931589, pipeline([normalization, rebalancing], knn)) :- true.
':=>'(p137432, pipeline([normalization, rebalancing], nn)) :- true.
':=>'(p957636, pipeline([normalization, rebalancing], rf)) :- true.
':=>'(p864417, pipeline([features, normalization], knn)) :- true.
':=>'(p904439, pipeline([features, normalization], nn)) :- true.
':=>'(p175932, pipeline([features, normalization], rf)) :- true.
':=>'(p971981, pipeline([features, mitigation], knn)) :- true.
':=>'(p566103, pipeline([features, mitigation], knn)) :- true.
':=>'(p463384, pipeline([features, mitigation], nn)) :- true.
':=>'(p673458, pipeline([features, mitigation], nn)) :- true.
':=>'(p906093, pipeline([features, mitigation], rf)) :- true.
':=>'(p514539, pipeline([features, rebalancing], knn)) :- true.
':=>'(p588764, pipeline([features, rebalancing], knn)) :- true.
':=>'(p495229, pipeline([features, rebalancing], nn)) :- true.
':=>'(p336710, pipeline([features, rebalancing], nn)) :- true.
':=>'(p591705, pipeline([features, rebalancing], rf)) :- true.
':=>'(p633769, pipeline([mitigation, features], knn)) :- true.
':=>'(p918382, pipeline([mitigation, features], nn)) :- true.
':=>'(p773229, pipeline([mitigation, rebalancing], knn)) :- true.
':=>'(p137280, pipeline([mitigation, rebalancing], nn)) :- true.
':=>'(p327374, pipeline([rebalancing, normalization], knn)) :- true.
':=>'(p649391, pipeline([rebalancing, normalization], nn)) :- true.
':=>'(p435126, pipeline([rebalancing, normalization], rf)) :- true.
':=>'(p961272, pipeline([rebalancing, features], knn)) :- true.
':=>'(p135322, pipeline([rebalancing, features], knn)) :- true.
':=>'(p664892, pipeline([rebalancing, features], nn)) :- true.
':=>'(p433557, pipeline([rebalancing, features], nn)) :- true.
':=>'(p661791, pipeline([rebalancing, features], rf)) :- true.
':=>'(p610392, pipeline([rebalancing, mitigation], knn)) :- true.
':=>'(p572474, pipeline([rebalancing, mitigation], nn)) :- true.
':=>'(p733464, pipeline([normalization, features, mitigation], knn)) :- true.
':=>'(p298613, pipeline([normalization, features, mitigation], knn)) :- true.
':=>'(p238636, pipeline([normalization, features, mitigation], nn)) :- true.
':=>'(p469325, pipeline([normalization, features, mitigation], nn)) :- true.
':=>'(p98764, pipeline([normalization, features, mitigation], rf)) :- true.
':=>'(p143188, pipeline([normalization, features, mitigation], rf)) :- true.
':=>'(p329574, pipeline([normalization, features, rebalancing], knn)) :- true.
':=>'(p892574, pipeline([normalization, features, rebalancing], nn)) :- true.
':=>'(p614708, pipeline([normalization, features, rebalancing], rf)) :- true.
':=>'(p512647, pipeline([normalization, mitigation, features], knn)) :- true.
':=>'(p815764, pipeline([normalization, mitigation, features], nn)) :- true.
':=>'(p656473, pipeline([normalization, mitigation, features], rf)) :- true.
':=>'(p723232, pipeline([normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p752603, pipeline([normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p601806, pipeline([normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p240400, pipeline([normalization, rebalancing, features], knn)) :- true.
':=>'(p381424, pipeline([normalization, rebalancing, features], nn)) :- true.
':=>'(p496002, pipeline([normalization, rebalancing, features], rf)) :- true.
':=>'(p903799, pipeline([normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p349579, pipeline([normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p607708, pipeline([normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p510229, pipeline([features, normalization, mitigation], knn)) :- true.
':=>'(p207376, pipeline([features, normalization, mitigation], knn)) :- true.
':=>'(p69728, pipeline([features, normalization, mitigation], nn)) :- true.
':=>'(p455821, pipeline([features, normalization, mitigation], nn)) :- true.
':=>'(p622334, pipeline([features, normalization, mitigation], rf)) :- true.
':=>'(p828796, pipeline([features, normalization, mitigation], rf)) :- true.
':=>'(p840918, pipeline([features, normalization, rebalancing], knn)) :- true.
':=>'(p931506, pipeline([features, normalization, rebalancing], nn)) :- true.
':=>'(p85369, pipeline([features, normalization, rebalancing], rf)) :- true.
':=>'(p524680, pipeline([features, mitigation, normalization], knn)) :- true.
':=>'(p731651, pipeline([features, mitigation, normalization], nn)) :- true.
':=>'(p331532, pipeline([features, mitigation, normalization], rf)) :- true.
':=>'(p66261, pipeline([features, mitigation, rebalancing], knn)) :- true.
':=>'(p193433, pipeline([features, mitigation, rebalancing], knn)) :- true.
':=>'(p136540, pipeline([features, mitigation, rebalancing], nn)) :- true.
':=>'(p498212, pipeline([features, mitigation, rebalancing], nn)) :- true.
':=>'(p806447, pipeline([features, mitigation, rebalancing], rf)) :- true.
':=>'(p79275, pipeline([features, rebalancing, normalization], knn)) :- true.
':=>'(p505330, pipeline([features, rebalancing, normalization], nn)) :- true.
':=>'(p856889, pipeline([features, rebalancing, normalization], rf)) :- true.
':=>'(p371145, pipeline([features, rebalancing, mitigation], knn)) :- true.
':=>'(p730566, pipeline([features, rebalancing, mitigation], knn)) :- true.
':=>'(p127065, pipeline([features, rebalancing, mitigation], nn)) :- true.
':=>'(p342923, pipeline([features, rebalancing, mitigation], nn)) :- true.
':=>'(p523643, pipeline([features, rebalancing, mitigation], rf)) :- true.
':=>'(p29007, pipeline([mitigation, features, rebalancing], knn)) :- true.
':=>'(p837937, pipeline([mitigation, features, rebalancing], nn)) :- true.
':=>'(p307948, pipeline([mitigation, rebalancing, features], knn)) :- true.
':=>'(p455115, pipeline([mitigation, rebalancing, features], nn)) :- true.
':=>'(p923672, pipeline([rebalancing, normalization, features], knn)) :- true.
':=>'(p686640, pipeline([rebalancing, normalization, features], nn)) :- true.
':=>'(p881300, pipeline([rebalancing, normalization, features], rf)) :- true.
':=>'(p444483, pipeline([rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p561986, pipeline([rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p692422, pipeline([rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p383824, pipeline([rebalancing, features, normalization], knn)) :- true.
':=>'(p783314, pipeline([rebalancing, features, normalization], nn)) :- true.
':=>'(p917619, pipeline([rebalancing, features, normalization], rf)) :- true.
':=>'(p467060, pipeline([rebalancing, features, mitigation], knn)) :- true.
':=>'(p3663, pipeline([rebalancing, features, mitigation], knn)) :- true.
':=>'(p274101, pipeline([rebalancing, features, mitigation], nn)) :- true.
':=>'(p973080, pipeline([rebalancing, features, mitigation], nn)) :- true.
':=>'(p822127, pipeline([rebalancing, features, mitigation], rf)) :- true.
':=>'(p558169, pipeline([rebalancing, mitigation, features], knn)) :- true.
':=>'(p111193, pipeline([rebalancing, mitigation, features], nn)) :- true.
':=>'(p356476, pipeline([normalization, features, mitigation, rebalancing], knn)) :- true.
':=>'(p933897, pipeline([normalization, features, mitigation, rebalancing], knn)) :- true.
':=>'(p273383, pipeline([normalization, features, mitigation, rebalancing], nn)) :- true.
':=>'(p633265, pipeline([normalization, features, mitigation, rebalancing], nn)) :- true.
':=>'(p755604, pipeline([normalization, features, mitigation, rebalancing], rf)) :- true.
':=>'(p993274, pipeline([normalization, features, mitigation, rebalancing], rf)) :- true.
':=>'(p508314, pipeline([normalization, features, rebalancing, mitigation], knn)) :- true.
':=>'(p525687, pipeline([normalization, features, rebalancing, mitigation], knn)) :- true.
':=>'(p313689, pipeline([normalization, features, rebalancing, mitigation], nn)) :- true.
':=>'(p718096, pipeline([normalization, features, rebalancing, mitigation], nn)) :- true.
':=>'(p874572, pipeline([normalization, features, rebalancing, mitigation], rf)) :- true.
':=>'(p756989, pipeline([normalization, features, rebalancing, mitigation], rf)) :- true.
':=>'(p97444, pipeline([normalization, mitigation, features, rebalancing], knn)) :- true.
':=>'(p416187, pipeline([normalization, mitigation, features, rebalancing], nn)) :- true.
':=>'(p165757, pipeline([normalization, mitigation, features, rebalancing], rf)) :- true.
':=>'(p803498, pipeline([normalization, mitigation, rebalancing, features], knn)) :- true.
':=>'(p269166, pipeline([normalization, mitigation, rebalancing, features], nn)) :- true.
':=>'(p689805, pipeline([normalization, mitigation, rebalancing, features], rf)) :- true.
':=>'(p467682, pipeline([normalization, rebalancing, features, mitigation], knn)) :- true.
':=>'(p795906, pipeline([normalization, rebalancing, features, mitigation], knn)) :- true.
':=>'(p76452, pipeline([normalization, rebalancing, features, mitigation], nn)) :- true.
':=>'(p303460, pipeline([normalization, rebalancing, features, mitigation], nn)) :- true.
':=>'(p281427, pipeline([normalization, rebalancing, features, mitigation], rf)) :- true.
':=>'(p285341, pipeline([normalization, rebalancing, features, mitigation], rf)) :- true.
':=>'(p489821, pipeline([normalization, rebalancing, mitigation, features], knn)) :- true.
':=>'(p348282, pipeline([normalization, rebalancing, mitigation, features], nn)) :- true.
':=>'(p91799, pipeline([normalization, rebalancing, mitigation, features], rf)) :- true.
':=>'(p802520, pipeline([features, normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p287939, pipeline([features, normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p492298, pipeline([features, normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p802487, pipeline([features, normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p773449, pipeline([features, normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p275664, pipeline([features, normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p11331, pipeline([features, normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p534964, pipeline([features, normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p112452, pipeline([features, normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p162334, pipeline([features, normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p36922, pipeline([features, normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p512920, pipeline([features, normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p253134, pipeline([features, mitigation, normalization, rebalancing], knn)) :- true.
':=>'(p585229, pipeline([features, mitigation, normalization, rebalancing], nn)) :- true.
':=>'(p349916, pipeline([features, mitigation, normalization, rebalancing], rf)) :- true.
':=>'(p13135, pipeline([features, mitigation, rebalancing, normalization], knn)) :- true.
':=>'(p577859, pipeline([features, mitigation, rebalancing, normalization], nn)) :- true.
':=>'(p62047, pipeline([features, mitigation, rebalancing, normalization], rf)) :- true.
':=>'(p603642, pipeline([features, rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p715292, pipeline([features, rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p998717, pipeline([features, rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p139276, pipeline([features, rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p564587, pipeline([features, rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p97959, pipeline([features, rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p92351, pipeline([features, rebalancing, mitigation, normalization], knn)) :- true.
':=>'(p23337, pipeline([features, rebalancing, mitigation, normalization], nn)) :- true.
':=>'(p690512, pipeline([features, rebalancing, mitigation, normalization], rf)) :- true.
':=>'(p969866, pipeline([rebalancing, normalization, features, mitigation], knn)) :- true.
':=>'(p865165, pipeline([rebalancing, normalization, features, mitigation], knn)) :- true.
':=>'(p67466, pipeline([rebalancing, normalization, features, mitigation], nn)) :- true.
':=>'(p363054, pipeline([rebalancing, normalization, features, mitigation], nn)) :- true.
':=>'(p853713, pipeline([rebalancing, normalization, features, mitigation], rf)) :- true.
':=>'(p938114, pipeline([rebalancing, normalization, features, mitigation], rf)) :- true.
':=>'(p996428, pipeline([rebalancing, normalization, mitigation, features], knn)) :- true.
':=>'(p498710, pipeline([rebalancing, normalization, mitigation, features], nn)) :- true.
':=>'(p298868, pipeline([rebalancing, normalization, mitigation, features], rf)) :- true.
':=>'(p846022, pipeline([rebalancing, features, normalization, mitigation], knn)) :- true.
':=>'(p176518, pipeline([rebalancing, features, normalization, mitigation], knn)) :- true.
':=>'(p381574, pipeline([rebalancing, features, normalization, mitigation], nn)) :- true.
':=>'(p984278, pipeline([rebalancing, features, normalization, mitigation], nn)) :- true.
':=>'(p229798, pipeline([rebalancing, features, normalization, mitigation], rf)) :- true.
':=>'(p312489, pipeline([rebalancing, features, normalization, mitigation], rf)) :- true.
':=>'(p768499, pipeline([rebalancing, features, mitigation, normalization], knn)) :- true.
':=>'(p380336, pipeline([rebalancing, features, mitigation, normalization], nn)) :- true.
':=>'(p610277, pipeline([rebalancing, features, mitigation, normalization], rf)) :- true.

Checking Config
Exporting Config
Saving Graph
Exporting AutoML input
Exporting Space
Exporting Constraints
Input created for iteration Config(iteration=3, dataset=compass, metric=balanced_accuracy, fairnessMetric=equalized_odds_ratio, sensitiveFeatures=[sex, race], mode=max, batchSize=999999, timeBudget=900, seed=42)
Here is the standard output/error of the command:

bb62499939113fcb6e1aab3f204a598cd8b03024978cf3cdf1b2789c645592bc
Here is the standard output/error of the command:

Here is the standard output/error of the command:

WARNING:root:No module named 'rpy2': FairAdapt will be unavailable. To install, run:
pip install 'aif360[FairAdapt]'
INFO:flaml.tune.searcher.blendsearch:No low-cost partial config given to the search algorithm. For cost-frugal search, consider providing low-cost values for cost-related hps via 'low_cost_partial_config'. More info can be found at https://microsoft.github.io/FLAML/docs/FAQ#about-low_cost_partial_config-in-tune
Trying to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Added successfully: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Trying to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: normalization == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
AutoML: starting optimization.
40
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 10, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.10424503052535883), 'balanced_accuracy': np.float64(0.6553283519725183), 'by_group': {'0_0': np.float64(0.4), '0_2': np.float64(0.43), '0_3': np.float64(0.1), '1_0': np.float64(1.0), '1_2': np.float64(0.49), '1_3': np.float64(0.48), '1_5': np.float64(0.41)}, 'status': 'success', 'total_time': 3.9198474884033203, 'fit_time': np.float64(0.030599546432495118), 'score_time': np.float64(0.3571802616119385), 'absolute_time': 1746712132.8823938, 'flatten_equalized_odds_ratio': '0.0_0.21_0.0_0.11_0.2', 'flatten_balanced_accuracy': '0.66_0.65_0.64_0.67_0.65'}
41
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 17, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.17254530610694996), 'balanced_accuracy': np.float64(0.5138063397537034), 'by_group': {'0_0': np.float64(0.44), '0_2': np.float64(0.43), '0_3': np.float64(0.47), '1_0': np.float64(0.43), '1_2': np.float64(0.49), '1_3': np.float64(0.45), '1_5': np.float64(0.25)}, 'status': 'success', 'total_time': 34.613126277923584, 'fit_time': np.float64(4.738689231872558), 'score_time': np.float64(0.2785306930541992), 'absolute_time': 1746712167.5682306, 'flatten_equalized_odds_ratio': '0.43_0.28_0.0_0.0_0.15', 'flatten_balanced_accuracy': '0.53_0.51_0.51_0.51_0.51'}
42
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.5263329465268616), 'balanced_accuracy': np.float64(0.5995063974129609), 'by_group': {'0_0': np.float64(0.79), '0_2': np.float64(0.88), '0_3': np.float64(0.53), '1_0': np.float64(0.89), '1_2': np.float64(0.85), '1_3': np.float64(0.79), '1_5': np.float64(0.83)}, 'status': 'success', 'total_time': 18.7824490070343, 'fit_time': np.float64(3.6743751525878907), 'score_time': np.float64(0.016192293167114256), 'absolute_time': 1746712186.4280617, 'flatten_equalized_odds_ratio': '0.98_0.6_0.56_0.5_0.0', 'flatten_balanced_accuracy': '0.5_0.63_0.6_0.62_0.64'}
43
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.4554578300822671), 'balanced_accuracy': np.float64(0.616325708156833), 'by_group': {'0_0': np.float64(0.74), '0_2': np.float64(0.82), '0_3': np.float64(0.48), '1_0': np.float64(0.88), '1_2': np.float64(0.81), '1_3': np.float64(0.74), '1_5': np.float64(0.7)}, 'status': 'success', 'total_time': 25.793281316757202, 'fit_time': np.float64(5.074319219589233), 'score_time': np.float64(0.017703914642333986), 'absolute_time': 1746712212.3048258, 'flatten_equalized_odds_ratio': '0.36_0.83_0.54_0.54_0.0', 'flatten_balanced_accuracy': '0.64_0.58_0.6_0.62_0.64'}
44
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.1)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.33778414628678605), 'balanced_accuracy': np.float64(0.624436805577747), 'by_group': {'0_0': np.float64(0.68), '0_2': np.float64(0.77), '0_3': np.float64(0.37), '1_0': np.float64(0.81), '1_2': np.float64(0.72), '1_3': np.float64(0.67), '1_5': np.float64(0.66)}, 'status': 'success', 'total_time': 40.693058013916016, 'fit_time': np.float64(7.877735805511475), 'score_time': np.float64(0.09387335777282715), 'absolute_time': 1746712253.083405, 'flatten_equalized_odds_ratio': '0.38_0.64_0.0_0.66_0.0', 'flatten_balanced_accuracy': '0.62_0.62_0.63_0.62_0.62'}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
45
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 16, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.10446006718884668), 'balanced_accuracy': np.float64(0.6679934633273577), 'by_group': {'0_0': np.float64(0.43), '0_2': np.float64(0.45), '0_3': np.float64(0.1), '1_0': np.float64(1.0), '1_2': np.float64(0.5), '1_3': np.float64(0.53), '1_5': np.float64(0.46)}, 'status': 'success', 'total_time': 3.8798880577087402, 'fit_time': np.float64(0.10530457496643067), 'score_time': np.float64(0.30335278511047364), 'absolute_time': 1746712257.081105, 'flatten_equalized_odds_ratio': '0.31_0.0_0.0_0.11_0.1', 'flatten_balanced_accuracy': '0.68_0.66_0.66_0.67_0.66'}
46
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 19, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.2459251992369298), 'balanced_accuracy': np.float64(0.6768778816172658), 'by_group': {'0_0': np.float64(0.47), '0_2': np.float64(0.44), '0_3': np.float64(0.25), '1_0': np.float64(1.0), '1_2': np.float64(0.62), '1_3': np.float64(0.64), '1_5': np.float64(0.59)}, 'status': 'success', 'total_time': 2.4752566814422607, 'fit_time': np.float64(0.0983339786529541), 'score_time': np.float64(0.17032947540283203), 'absolute_time': 1746712259.6427767, 'flatten_equalized_odds_ratio': '0.36_0.18_0.31_0.29_0.09', 'flatten_balanced_accuracy': '0.68_0.67_0.67_0.68_0.68'}
47
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 4, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': np.int64(100)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.16007971904284646), 'balanced_accuracy': np.float64(0.6340319325131617), 'by_group': {'0_0': np.float64(0.65), '0_2': np.float64(0.67), '0_3': np.float64(0.18), '1_0': np.float64(0.78), '1_2': np.float64(0.74), '1_3': np.float64(0.68), '1_5': np.float64(0.53)}, 'status': 'success', 'total_time': 23.623389959335327, 'fit_time': np.float64(4.627095317840576), 'score_time': np.float64(0.022721385955810545), 'absolute_time': 1746712283.3714628, 'flatten_equalized_odds_ratio': '0.33_0.26_0.0_0.21_0.0', 'flatten_balanced_accuracy': '0.64_0.63_0.64_0.63_0.63'}
48
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.07466053009531269), 'balanced_accuracy': np.float64(0.6322716711405499), 'by_group': {'0_0': np.float64(0.19), '0_2': np.float64(0.24), '0_3': np.float64(0.1), '1_0': np.float64(1.0), '1_2': np.float64(0.7), '1_3': np.float64(0.56), '1_5': np.float64(0.38)}, 'status': 'success', 'total_time': 6.094599485397339, 'fit_time': np.float64(1.1560278415679932), 'score_time': np.float64(0.006351661682128906), 'absolute_time': 1746712290.715314, 'flatten_equalized_odds_ratio': '0.27_0.1_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.63_0.64_0.62_0.64_0.63'}
49
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 1, 'max_leaf_nodes': 4, 'min_samples_split': 6, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'equalized_odds_ratio': np.float64(0.5207887414326475), 'balanced_accuracy': np.float64(0.6256137888010639), 'by_group': {'0_0': np.float64(0.78), '0_2': np.float64(0.84), '0_3': np.float64(0.52), '1_0': np.float64(0.85), '1_2': np.float64(0.78), '1_3': np.float64(0.7), '1_5': np.float64(0.74)}, 'status': 'success', 'total_time': 28.247264862060547, 'fit_time': np.float64(4.616505861282349), 'score_time': np.float64(0.017298078536987303), 'absolute_time': 1746712319.0532122, 'flatten_equalized_odds_ratio': '0.57_0.64_0.59_0.24_0.56', 'flatten_balanced_accuracy': '0.65_0.63_0.61_0.62_0.62'}
50
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.4763255999670359), 'balanced_accuracy': np.float64(0.6068226312475842), 'by_group': {'0_0': np.float64(0.76), '0_2': np.float64(0.81), '0_3': np.float64(0.53), '1_0': np.float64(0.84), '1_2': np.float64(0.77), '1_3': np.float64(0.76), '1_5': np.float64(0.73)}, 'status': 'success', 'total_time': 17.409882068634033, 'fit_time': np.float64(3.388084363937378), 'score_time': np.float64(0.02261500358581543), 'absolute_time': 1746712336.56204, 'flatten_equalized_odds_ratio': '0.59_0.64_0.71_0.25_0.18', 'flatten_balanced_accuracy': '0.59_0.63_0.56_0.61_0.64'}
51
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.366729814026106), 'balanced_accuracy': np.float64(0.6289856502844815), 'by_group': {'0_0': np.float64(0.65), '0_2': np.float64(0.73), '0_3': np.float64(0.39), '1_0': np.float64(0.78), '1_2': np.float64(0.73), '1_3': np.float64(0.68), '1_5': np.float64(0.55)}, 'status': 'success', 'total_time': 25.81490659713745, 'fit_time': np.float64(5.081843852996826), 'score_time': np.float64(0.012994384765625), 'absolute_time': 1746712362.4702306, 'flatten_equalized_odds_ratio': '0.38_0.25_0.59_0.61_0.0', 'flatten_balanced_accuracy': '0.63_0.63_0.63_0.63_0.63'}
52
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.39774555157059444), 'balanced_accuracy': np.float64(0.6253428560669486), 'by_group': {'0_0': np.float64(0.75), '0_2': np.float64(0.76), '0_3': np.float64(0.4), '1_0': np.float64(0.84), '1_2': np.float64(0.82), '1_3': np.float64(0.74), '1_5': np.float64(0.63)}, 'status': 'success', 'total_time': 18.87604260444641, 'fit_time': np.float64(3.691538953781128), 'score_time': np.float64(0.014031648635864258), 'absolute_time': 1746712381.4390192, 'flatten_equalized_odds_ratio': '0.66_0.26_0.53_0.53_0.0', 'flatten_balanced_accuracy': '0.63_0.62_0.62_0.62_0.64'}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
53
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.18727041104439196), 'balanced_accuracy': np.float64(0.6788174314633377), 'by_group': {'0_0': np.float64(0.59), '0_2': np.float64(0.5), '0_3': np.float64(0.2), '1_0': np.float64(1.0), '1_2': np.float64(0.57), '1_3': np.float64(0.6), '1_5': np.float64(0.47)}, 'status': 'success', 'total_time': 65.34671020507812, 'fit_time': np.float64(12.93531322479248), 'score_time': np.float64(0.024330949783325194), 'absolute_time': 1746712446.9292767, 'flatten_equalized_odds_ratio': '0.19_0.1_0.0_0.36_0.29', 'flatten_balanced_accuracy': '0.68_0.68_0.68_0.69_0.68'}
54
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 5, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.26276416726086815), 'balanced_accuracy': np.float64(0.6412990468751524), 'by_group': {'0_0': np.float64(0.46), '0_2': np.float64(0.53), '0_3': np.float64(0.28), '1_0': np.float64(1.0), '1_2': np.float64(0.59), '1_3': np.float64(0.54), '1_5': np.float64(0.58)}, 'status': 'success', 'total_time': 2.3443055152893066, 'fit_time': np.float64(0.16401433944702148), 'score_time': np.float64(0.12580394744873047), 'absolute_time': 1746712449.372997, 'flatten_equalized_odds_ratio': '0.38_0.28_0.1_0.33_0.22', 'flatten_balanced_accuracy': '0.65_0.64_0.64_0.65_0.64'}
55
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 2, 'max_features': 4, 'max_leaf_nodes': 3, 'min_samples_split': 6, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('PCA'), 'n_components': 3}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.2115959400436768), 'balanced_accuracy': np.float64(0.6331316003312122), 'by_group': {'0_0': np.float64(0.67), '0_2': np.float64(0.7), '0_3': np.float64(0.23), '1_0': np.float64(0.79), '1_2': np.float64(0.72), '1_3': np.float64(0.65), '1_5': np.float64(0.51)}, 'status': 'success', 'total_time': 22.409915685653687, 'fit_time': np.float64(4.389273929595947), 'score_time': np.float64(0.02020115852355957), 'absolute_time': 1746712471.8880208, 'flatten_equalized_odds_ratio': '0.52_0.25_0.0_0.29_0.0', 'flatten_balanced_accuracy': '0.65_0.64_0.64_0.61_0.63'}
56
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(50), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.34267564091466024), 'balanced_accuracy': np.float64(0.6229859210735268), 'by_group': {'0_0': np.float64(0.73), '0_2': np.float64(0.77), '0_3': np.float64(0.34), '1_0': np.float64(0.83), '1_2': np.float64(0.83), '1_3': np.float64(0.71), '1_5': np.float64(0.62)}, 'status': 'success', 'total_time': 39.102553606033325, 'fit_time': np.float64(7.721980428695678), 'score_time': np.float64(0.03222599029541016), 'absolute_time': 1746712512.6416829, 'flatten_equalized_odds_ratio': '0.63_0.29_0.56_0.24_0.0', 'flatten_balanced_accuracy': '0.63_0.61_0.6_0.63_0.64'}
57
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_split': 5, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.22739620966066645), 'balanced_accuracy': np.float64(0.6431251003059458), 'by_group': {'0_0': np.float64(0.46), '0_2': np.float64(0.57), '0_3': np.float64(0.44), '1_0': np.float64(0.95), '1_2': np.float64(0.58), '1_3': np.float64(0.66), '1_5': np.float64(0.62)}, 'status': 'success', 'total_time': 4.140291213989258, 'fit_time': np.float64(0.7525770664215088), 'score_time': np.float64(0.01312861442565918), 'absolute_time': 1746712516.8776944, 'flatten_equalized_odds_ratio': '0.3_0.27_0.0_0.16_0.4', 'flatten_balanced_accuracy': '0.64_0.65_0.64_0.64_0.65'}
58
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 6, 'min_samples_split': 4, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.10655245729777844), 'balanced_accuracy': np.float64(0.6770316784902863), 'by_group': {'0_0': np.float64(0.32), '0_2': np.float64(0.3), '0_3': np.float64(0.13), '1_0': np.float64(1.0), '1_2': np.float64(0.31), '1_3': np.float64(0.33), '1_5': np.float64(0.22)}, 'status': 'success', 'total_time': 1.21653413772583, 'fit_time': np.float64(0.17055010795593262), 'score_time': np.float64(0.010998964309692383), 'absolute_time': 1746712518.1895533, 'flatten_equalized_odds_ratio': '0.15_0.17_0.0_0.07_0.14', 'flatten_balanced_accuracy': '0.68_0.68_0.67_0.69_0.67'}
59
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification')}
{'equalized_odds_ratio': np.float64(0.22717811504887148), 'balanced_accuracy': np.float64(0.631679839580047), 'by_group': {'0_0': np.float64(0.65), '0_2': np.float64(0.7), '0_3': np.float64(0.25), '1_0': np.float64(0.78), '1_2': np.float64(0.72), '1_3': np.float64(0.66), '1_5': np.float64(0.52)}, 'status': 'success', 'total_time': 21.956188917160034, 'fit_time': np.float64(4.305909252166748), 'score_time': np.float64(0.017464876174926758), 'absolute_time': 1746712540.276383, 'flatten_equalized_odds_ratio': '0.36_0.23_0.0_0.55_0.0', 'flatten_balanced_accuracy': '0.63_0.65_0.61_0.63_0.63'}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
60
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.12933030852044014), 'balanced_accuracy': np.float64(0.6623678395156875), 'by_group': {'0_0': np.float64(0.43), '0_2': np.float64(0.47), '0_3': np.float64(0.13), '1_0': np.float64(0.98), '1_2': np.float64(0.49), '1_3': np.float64(0.5), '1_5': np.float64(0.45)}, 'status': 'success', 'total_time': 3.236112594604492, 'fit_time': np.float64(0.1233917236328125), 'score_time': np.float64(0.21805920600891113), 'absolute_time': 1746712543.6126535, 'flatten_equalized_odds_ratio': '0.11_0.1_0.11_0.12_0.21', 'flatten_balanced_accuracy': '0.68_0.66_0.65_0.66_0.66'}
61
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.42287058380631154), 'balanced_accuracy': np.float64(0.6136072001705759), 'by_group': {'0_0': np.float64(0.75), '0_2': np.float64(0.8), '0_3': np.float64(0.52), '1_0': np.float64(0.82), '1_2': np.float64(0.79), '1_3': np.float64(0.75), '1_5': np.float64(0.68)}, 'status': 'success', 'total_time': 33.18396997451782, 'fit_time': np.float64(4.977080202102661), 'score_time': np.float64(0.016370677947998048), 'absolute_time': 1746712576.8977387, 'flatten_equalized_odds_ratio': '0.63_0.7_0.58_0.21_0.0', 'flatten_balanced_accuracy': '0.62_0.61_0.57_0.64_0.63'}
62
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.46250845171594773), 'balanced_accuracy': np.float64(0.6139936415707747), 'by_group': {'0_0': np.float64(0.7), '0_2': np.float64(0.76), '0_3': np.float64(0.48), '1_0': np.float64(0.8), '1_2': np.float64(0.74), '1_3': np.float64(0.69), '1_5': np.float64(0.57)}, 'status': 'success', 'total_time': 35.71694803237915, 'fit_time': np.float64(7.0648072242736815), 'score_time': np.float64(0.013341903686523438), 'absolute_time': 1746712612.7336998, 'flatten_equalized_odds_ratio': '0.43_0.26_0.59_0.3_0.73', 'flatten_balanced_accuracy': '0.62_0.63_0.61_0.61_0.61'}
63
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 5, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.3335552262936913), 'balanced_accuracy': np.float64(0.6270817652203707), 'by_group': {'0_0': np.float64(0.68), '0_2': np.float64(0.74), '0_3': np.float64(0.33), '1_0': np.float64(0.8), '1_2': np.float64(0.76), '1_3': np.float64(0.67), '1_5': np.float64(0.61)}, 'status': 'success', 'total_time': 16.99561882019043, 'fit_time': np.float64(3.320310354232788), 'score_time': np.float64(0.012832307815551757), 'absolute_time': 1746712629.8295016, 'flatten_equalized_odds_ratio': '0.42_0.28_0.34_0.62_0.0', 'flatten_balanced_accuracy': '0.64_0.62_0.64_0.62_0.62'}
64
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.09382012646226694), 'balanced_accuracy': np.float64(0.6560944906107904), 'by_group': {'0_0': np.float64(0.53), '0_2': np.float64(0.43), '0_3': np.float64(0.09), '1_0': np.float64(1.0), '1_2': np.float64(0.51), '1_3': np.float64(0.48), '1_5': np.float64(0.42)}, 'status': 'success', 'total_time': 3.499671697616577, 'fit_time': np.float64(0.6299469947814942), 'score_time': np.float64(0.008692359924316407), 'absolute_time': 1746712634.745555, 'flatten_equalized_odds_ratio': '0.2_0.0_0.0_0.17_0.1', 'flatten_balanced_accuracy': '0.64_0.67_0.65_0.68_0.65'}
65
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(25)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.10729072278197438), 'balanced_accuracy': np.float64(0.6762823930106459), 'by_group': {'0_0': np.float64(0.36), '0_2': np.float64(0.38), '0_3': np.float64(0.11), '1_0': np.float64(1.0), '1_2': np.float64(0.32), '1_3': np.float64(0.34), '1_5': np.float64(0.24)}, 'status': 'success', 'total_time': 2.921942710876465, 'fit_time': np.float64(0.5092305660247802), 'score_time': np.float64(0.0115234375), 'absolute_time': 1746712637.7775693, 'flatten_equalized_odds_ratio': '0.13_0.2_0.0_0.07_0.13', 'flatten_balanced_accuracy': '0.67_0.68_0.68_0.68_0.67'}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
66
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(50), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'equalized_odds_ratio': np.float64(0.19740191543264388), 'balanced_accuracy': np.float64(0.6872243728387156), 'by_group': {'0_0': np.float64(0.58), '0_2': np.float64(0.49), '0_3': np.float64(0.2), '1_0': np.float64(1.0), '1_2': np.float64(0.57), '1_3': np.float64(0.53), '1_5': np.float64(0.48)}, 'status': 'success', 'total_time': 280.6846914291382, 'fit_time': np.float64(55.81565756797791), 'score_time': np.float64(0.11589088439941406), 'absolute_time': 1746712918.5665991, 'flatten_equalized_odds_ratio': '0.29_0.19_0.0_0.21_0.29', 'flatten_balanced_accuracy': '0.69_0.69_0.68_0.7_0.68'}
67
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 15, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.0), 'balanced_accuracy': np.float64(0.5097337334324406), 'by_group': {'0_0': np.float64(0.58), '0_2': np.float64(0.41), '0_3': np.float64(0.0), '1_0': np.float64(0.49), '1_2': np.float64(0.41), '1_3': np.float64(0.26), '1_5': np.float64(0.25)}, 'status': 'success', 'total_time': 33.13999819755554, 'fit_time': np.float64(5.266390562057495), 'score_time': np.float64(0.21696195602416993), 'absolute_time': 1746712951.868431, 'flatten_equalized_odds_ratio': '0.0_0.0_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.52_0.51_0.5_0.5_0.51'}
68
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_split': 6, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification')}
{'equalized_odds_ratio': np.float64(0.15657152754794582), 'balanced_accuracy': np.float64(0.6636777278804848), 'by_group': {'0_0': np.float64(0.47), '0_2': np.float64(0.47), '0_3': np.float64(0.17), '1_0': np.float64(0.94), '1_2': np.float64(0.52), '1_3': np.float64(0.51), '1_5': np.float64(0.41)}, 'status': 'success', 'total_time': 5.92414665222168, 'fit_time': np.float64(1.107433795928955), 'score_time': np.float64(0.012663125991821289), 'absolute_time': 1746712957.918997, 'flatten_equalized_odds_ratio': '0.31_0.2_0.0_0.28_0.0', 'flatten_balanced_accuracy': '0.66_0.67_0.65_0.67_0.67'}
69
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(50), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.2064870494701113), 'balanced_accuracy': np.float64(0.6845230810258469), 'by_group': {'0_0': np.float64(0.52), '0_2': np.float64(0.44), '0_3': np.float64(0.21), '1_0': np.float64(1.0), '1_2': np.float64(0.56), '1_3': np.float64(0.57), '1_5': np.float64(0.57)}, 'status': 'success', 'total_time': 36.27320432662964, 'fit_time': np.float64(6.891543054580689), 'score_time': np.float64(0.14825401306152344), 'absolute_time': 1746712994.3003728, 'flatten_equalized_odds_ratio': '0.31_0.3_0.0_0.2_0.22', 'flatten_balanced_accuracy': '0.69_0.68_0.68_0.7_0.68'}
70
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(10), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.29530731418359224), 'balanced_accuracy': np.float64(0.6192973757959178), 'by_group': {'0_0': np.float64(0.67), '0_2': np.float64(0.75), '0_3': np.float64(0.32), '1_0': np.float64(0.81), '1_2': np.float64(0.75), '1_3': np.float64(0.68), '1_5': np.float64(0.56)}, 'status': 'success', 'total_time': 19.82020616531372, 'fit_time': np.float64(3.7441173553466798), 'score_time': np.float64(0.07490377426147461), 'absolute_time': 1746713014.233553, 'flatten_equalized_odds_ratio': '0.38_0.26_0.57_0.25_0.0', 'flatten_balanced_accuracy': '0.63_0.63_0.59_0.62_0.62'}
71
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 6, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.021818181818181816), 'balanced_accuracy': np.float64(0.5064298228925547), 'by_group': {'0_0': np.float64(0.41), '0_2': np.float64(0.37), '0_3': np.float64(0.2), '1_0': np.float64(0.52), '1_2': np.float64(0.57), '1_3': np.float64(0.39), '1_5': np.float64(0.28)}, 'status': 'success', 'total_time': 20.12288212776184, 'fit_time': np.float64(3.5252598762512206), 'score_time': np.float64(0.22794523239135742), 'absolute_time': 1746713034.4710817, 'flatten_equalized_odds_ratio': '0.0_0.0_0.11_0.0_0.0', 'flatten_balanced_accuracy': '0.5_0.52_0.51_0.51_0.5'}
AutoML: optimization done.
AutoML: miner done.
AutoML: export done.
Here is the standard output/error of the command:

Here is the standard output/error of the command:

Here is the standard output/error of the command:

hamlet_187056200
AutoML execution ended
