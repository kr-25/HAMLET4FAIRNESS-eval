Sensitive groups ready!
Theory ready!
Theory:
step(normalization) :- true.
step(features) :- true.
step(mitigation) :- true.
step(rebalancing) :- true.
step(classification) :- true.
operator(normalization, power_transformer) :- true.
operator(normalization, robust_scaler) :- true.
operator(normalization, standard) :- true.
operator(normalization, minmax) :- true.
operator(features, select_k_best) :- true.
operator(features, pca) :- true.
operator(mitigation, corr_remover) :- true.
operator(mitigation, lfr) :- true.
operator(rebalancing, near_miss) :- true.
operator(rebalancing, smote) :- true.
operator(classification, knn) :- true.
operator(classification, nn) :- true.
operator(classification, rf) :- true.
hyperparameter(robust_scaler, with_centering, choice) :- true.
hyperparameter(robust_scaler, with_scaling, choice) :- true.
hyperparameter(standard, with_mean, choice) :- true.
hyperparameter(standard, with_std, choice) :- true.
hyperparameter(select_k_best, k, randint) :- true.
hyperparameter(pca, n_components, randint) :- true.
hyperparameter(corr_remover, alpha, choice) :- true.
hyperparameter(lfr, n_prototypes, choice) :- true.
hyperparameter(lfr, reconstruct_weight, choice) :- true.
hyperparameter(lfr, fairness_weight, choice) :- true.
hyperparameter(near_miss, n_neighbors, randint) :- true.
hyperparameter(smote, k_neighbors, randint) :- true.
hyperparameter(knn, n_neighbors, randint) :- true.
hyperparameter(knn, weights, choice) :- true.
hyperparameter(knn, metric, choice) :- true.
hyperparameter(nn, n_hidden_layers, choice) :- true.
hyperparameter(nn, n_neurons, choice) :- true.
hyperparameter(nn, activation, choice) :- true.
hyperparameter(nn, solver, choice) :- true.
hyperparameter(nn, alpha, choice) :- true.
hyperparameter(nn, learning_rate, choice) :- true.
hyperparameter(rf, n_estimators, choice) :- true.
hyperparameter(rf, max_depth, randint) :- true.
hyperparameter(rf, max_features, randint) :- true.
hyperparameter(rf, min_samples_split, randint) :- true.
hyperparameter(rf, max_leaf_nodes, randint) :- true.
hyperparameter(rf, bootstrap, choice) :- true.
hyperparameter(rf, criterion, choice) :- true.
domain(robust_scaler, with_centering, [true, false]) :- true.
domain(robust_scaler, with_scaling, [true, false]) :- true.
domain(standard, with_mean, [true, false]) :- true.
domain(standard, with_std, [true, false]) :- true.
domain(select_k_best, k, [1, 10]) :- true.
domain(pca, n_components, [1, 8]) :- true.
domain(corr_remover, alpha, [0.25, 0.5, 0.75, 1.0]) :- true.
domain(lfr, n_prototypes, [10, 50, 100, 200]) :- true.
domain(lfr, reconstruct_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(lfr, fairness_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(near_miss, n_neighbors, [1, 4]) :- true.
domain(smote, k_neighbors, [5, 8]) :- true.
domain(knn, n_neighbors, [3, 20]) :- true.
domain(knn, weights, [uniform, distance]) :- true.
domain(knn, metric, [minkowski, euclidean, manhattan]) :- true.
domain(nn, n_hidden_layers, [1, 5, 10, 20]) :- true.
domain(nn, n_neurons, [5, 10, 25, 50]) :- true.
domain(nn, activation, [logistic, tanh, relu]) :- true.
domain(nn, solver, [lbfgs, sgd, adam]) :- true.
domain(nn, alpha, [0.0001, 0.001, 0.01, 0.00001]) :- true.
domain(nn, learning_rate, [constant, invscaling, adaptive]) :- true.
domain(rf, n_estimators, [10, 25, 50, 75, 100]) :- true.
domain(rf, max_depth, [1, 5]) :- true.
domain(rf, max_features, [1, 4]) :- true.
domain(rf, min_samples_split, [2, 6]) :- true.
domain(rf, max_leaf_nodes, [2, 6]) :- true.
domain(rf, bootstrap, [true, false]) :- true.
domain(rf, criterion, [gini, entropy]) :- true.
':=>'(c1, mandatory([mitigation], classification)) :- true.
':=>'(c3, mandatory_order([mitigation, features], classification)) :- true.
':=>'(c4, mandatory_order([mitigation, normalization], classification)) :- true.
':=>'(c5, mandatory([normalization], knn)) :- true.
':=>'(c6, mandatory([normalization], nn)) :- true.
dataset(compass) :- true.
metric(balanced_accuracy) :- true.
fairness_metric(equalized_odds_ratio) :- true.
sensitive_feature(sex, [0, 1]) :- true.
sensitive_feature(race, [0, 1, 2, 3, 4, 5]) :- true.
pipeline([Step_1_0], ZZ_0) :- (step(Step_1_0), '\\='(Step_1_0, classification), operator(classification, ZZ_0)).
pipeline([Step_1_1, Step_2_0], ZZ_1) :- (step(Step_1_1), step(Step_2_0), '\\='(Step_1_1, classification), '\\='(Step_2_0, classification), '\\='(Step_1_1, Step_2_0), operator(classification, ZZ_1)).
pipeline([Step_1_2, Step_2_1, Step_3_0], ZZ_2) :- (step(Step_1_2), step(Step_2_1), step(Step_3_0), '\\='(Step_1_2, classification), '\\='(Step_2_1, classification), '\\='(Step_3_0, classification), '\\='(Step_1_2, Step_2_1), '\\='(Step_1_2, Step_3_0), '\\='(Step_2_1, Step_3_0), operator(classification, ZZ_2)).
pipeline([Step_1_3, Step_2_2, Step_3_1, Step_4_0], ZZ_3) :- (step(Step_1_3), step(Step_2_2), step(Step_3_1), step(Step_4_0), '\\='(Step_1_3, classification), '\\='(Step_2_2, classification), '\\='(Step_3_1, classification), '\\='(Step_4_0, classification), '\\='(Step_1_3, Step_2_2), '\\='(Step_1_3, Step_3_1), '\\='(Step_1_3, Step_4_0), '\\='(Step_2_2, Step_3_1), '\\='(Step_2_2, Step_4_0), '\\='(Step_3_1, Step_4_0), operator(classification, ZZ_3)).
':=>'(p286082, sensitive_group([0])) :- true.
':=>'(p509097, sensitive_group([1])) :- true.
':=>'(p583265, sensitive_group([0])) :- true.
':=>'(p520363, sensitive_group([1])) :- true.
':=>'(p223476, sensitive_group([2])) :- true.
':=>'(p407919, sensitive_group([3])) :- true.
':=>'(p954633, sensitive_group([4])) :- true.
':=>'(p124162, sensitive_group([5])) :- true.
':=>'(p352147, sensitive_group([0, 0])) :- true.
':=>'(p901537, sensitive_group([0, 1])) :- true.
':=>'(p196433, sensitive_group([0, 2])) :- true.
':=>'(p351862, sensitive_group([0, 3])) :- true.
':=>'(p209767, sensitive_group([0, 4])) :- true.
':=>'(p676131, sensitive_group([0, 5])) :- true.
':=>'(p236876, sensitive_group([1, 0])) :- true.
':=>'(p628136, sensitive_group([1, 1])) :- true.
':=>'(p293250, sensitive_group([1, 2])) :- true.
':=>'(p159190, sensitive_group([1, 3])) :- true.
':=>'(p428012, sensitive_group([1, 4])) :- true.
':=>'(p620581, sensitive_group([1, 5])) :- true.
':=>'(p611079, pipeline([], knn)) :- true.
':=>'(p506219, pipeline([], knn)) :- true.
':=>'(p949994, pipeline([], nn)) :- true.
':=>'(p438267, pipeline([], nn)) :- true.
':=>'(p859606, pipeline([], rf)) :- true.
':=>'(p472264, pipeline([normalization], knn)) :- true.
':=>'(p871735, pipeline([normalization], nn)) :- true.
':=>'(p65123, pipeline([normalization], rf)) :- true.
':=>'(p207498, pipeline([features], knn)) :- true.
':=>'(p504268, pipeline([features], knn)) :- true.
':=>'(p607455, pipeline([features], nn)) :- true.
':=>'(p678492, pipeline([features], nn)) :- true.
':=>'(p819556, pipeline([features], rf)) :- true.
':=>'(p813055, pipeline([mitigation], knn)) :- true.
':=>'(p381293, pipeline([mitigation], nn)) :- true.
':=>'(p129507, pipeline([rebalancing], knn)) :- true.
':=>'(p659606, pipeline([rebalancing], knn)) :- true.
':=>'(p64841, pipeline([rebalancing], nn)) :- true.
':=>'(p352785, pipeline([rebalancing], nn)) :- true.
':=>'(p330374, pipeline([rebalancing], rf)) :- true.
':=>'(p970827, pipeline([normalization, features], knn)) :- true.
':=>'(p492085, pipeline([normalization, features], nn)) :- true.
':=>'(p443848, pipeline([normalization, features], rf)) :- true.
':=>'(p310529, pipeline([normalization, mitigation], knn)) :- true.
':=>'(p610936, pipeline([normalization, mitigation], nn)) :- true.
':=>'(p975030, pipeline([normalization, mitigation], rf)) :- true.
':=>'(p982794, pipeline([normalization, rebalancing], knn)) :- true.
':=>'(p275558, pipeline([normalization, rebalancing], nn)) :- true.
':=>'(p731507, pipeline([normalization, rebalancing], rf)) :- true.
':=>'(p404787, pipeline([features, normalization], knn)) :- true.
':=>'(p43403, pipeline([features, normalization], nn)) :- true.
':=>'(p354496, pipeline([features, normalization], rf)) :- true.
':=>'(p865713, pipeline([features, mitigation], knn)) :- true.
':=>'(p948117, pipeline([features, mitigation], knn)) :- true.
':=>'(p201515, pipeline([features, mitigation], nn)) :- true.
':=>'(p286027, pipeline([features, mitigation], nn)) :- true.
':=>'(p179401, pipeline([features, mitigation], rf)) :- true.
':=>'(p151816, pipeline([features, rebalancing], knn)) :- true.
':=>'(p632563, pipeline([features, rebalancing], knn)) :- true.
':=>'(p975462, pipeline([features, rebalancing], nn)) :- true.
':=>'(p493123, pipeline([features, rebalancing], nn)) :- true.
':=>'(p918065, pipeline([features, rebalancing], rf)) :- true.
':=>'(p742579, pipeline([mitigation, features], knn)) :- true.
':=>'(p273907, pipeline([mitigation, features], nn)) :- true.
':=>'(p50427, pipeline([mitigation, rebalancing], knn)) :- true.
':=>'(p68025, pipeline([mitigation, rebalancing], nn)) :- true.
':=>'(p307414, pipeline([rebalancing, normalization], knn)) :- true.
':=>'(p969333, pipeline([rebalancing, normalization], nn)) :- true.
':=>'(p76348, pipeline([rebalancing, normalization], rf)) :- true.
':=>'(p276682, pipeline([rebalancing, features], knn)) :- true.
':=>'(p559420, pipeline([rebalancing, features], knn)) :- true.
':=>'(p987386, pipeline([rebalancing, features], nn)) :- true.
':=>'(p886583, pipeline([rebalancing, features], nn)) :- true.
':=>'(p456159, pipeline([rebalancing, features], rf)) :- true.
':=>'(p570951, pipeline([rebalancing, mitigation], knn)) :- true.
':=>'(p72340, pipeline([rebalancing, mitigation], nn)) :- true.
':=>'(p540921, pipeline([normalization, features, mitigation], knn)) :- true.
':=>'(p218645, pipeline([normalization, features, mitigation], knn)) :- true.
':=>'(p329988, pipeline([normalization, features, mitigation], nn)) :- true.
':=>'(p651133, pipeline([normalization, features, mitigation], nn)) :- true.
':=>'(p389052, pipeline([normalization, features, mitigation], rf)) :- true.
':=>'(p708192, pipeline([normalization, features, mitigation], rf)) :- true.
':=>'(p269075, pipeline([normalization, features, rebalancing], knn)) :- true.
':=>'(p714479, pipeline([normalization, features, rebalancing], nn)) :- true.
':=>'(p603033, pipeline([normalization, features, rebalancing], rf)) :- true.
':=>'(p497824, pipeline([normalization, mitigation, features], knn)) :- true.
':=>'(p873015, pipeline([normalization, mitigation, features], nn)) :- true.
':=>'(p488909, pipeline([normalization, mitigation, features], rf)) :- true.
':=>'(p550965, pipeline([normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p837716, pipeline([normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p837752, pipeline([normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p26375, pipeline([normalization, rebalancing, features], knn)) :- true.
':=>'(p896716, pipeline([normalization, rebalancing, features], nn)) :- true.
':=>'(p427747, pipeline([normalization, rebalancing, features], rf)) :- true.
':=>'(p544638, pipeline([normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p44206, pipeline([normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p384406, pipeline([normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p850941, pipeline([features, normalization, mitigation], knn)) :- true.
':=>'(p429418, pipeline([features, normalization, mitigation], knn)) :- true.
':=>'(p896843, pipeline([features, normalization, mitigation], nn)) :- true.
':=>'(p204989, pipeline([features, normalization, mitigation], nn)) :- true.
':=>'(p432426, pipeline([features, normalization, mitigation], rf)) :- true.
':=>'(p727169, pipeline([features, normalization, mitigation], rf)) :- true.
':=>'(p616339, pipeline([features, normalization, rebalancing], knn)) :- true.
':=>'(p742348, pipeline([features, normalization, rebalancing], nn)) :- true.
':=>'(p650875, pipeline([features, normalization, rebalancing], rf)) :- true.
':=>'(p9281, pipeline([features, mitigation, normalization], knn)) :- true.
':=>'(p883124, pipeline([features, mitigation, normalization], nn)) :- true.
':=>'(p72388, pipeline([features, mitigation, normalization], rf)) :- true.
':=>'(p34295, pipeline([features, mitigation, rebalancing], knn)) :- true.
':=>'(p904313, pipeline([features, mitigation, rebalancing], knn)) :- true.
':=>'(p774903, pipeline([features, mitigation, rebalancing], nn)) :- true.
':=>'(p873426, pipeline([features, mitigation, rebalancing], nn)) :- true.
':=>'(p540738, pipeline([features, mitigation, rebalancing], rf)) :- true.
':=>'(p288809, pipeline([features, rebalancing, normalization], knn)) :- true.
':=>'(p821691, pipeline([features, rebalancing, normalization], nn)) :- true.
':=>'(p896941, pipeline([features, rebalancing, normalization], rf)) :- true.
':=>'(p916161, pipeline([features, rebalancing, mitigation], knn)) :- true.
':=>'(p108937, pipeline([features, rebalancing, mitigation], knn)) :- true.
':=>'(p928219, pipeline([features, rebalancing, mitigation], nn)) :- true.
':=>'(p978110, pipeline([features, rebalancing, mitigation], nn)) :- true.
':=>'(p212358, pipeline([features, rebalancing, mitigation], rf)) :- true.
':=>'(p836351, pipeline([mitigation, features, rebalancing], knn)) :- true.
':=>'(p3743, pipeline([mitigation, features, rebalancing], nn)) :- true.
':=>'(p420305, pipeline([mitigation, rebalancing, features], knn)) :- true.
':=>'(p270565, pipeline([mitigation, rebalancing, features], nn)) :- true.
':=>'(p36770, pipeline([rebalancing, normalization, features], knn)) :- true.
':=>'(p564942, pipeline([rebalancing, normalization, features], nn)) :- true.
':=>'(p694382, pipeline([rebalancing, normalization, features], rf)) :- true.
':=>'(p297466, pipeline([rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p858781, pipeline([rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p923215, pipeline([rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p929175, pipeline([rebalancing, features, normalization], knn)) :- true.
':=>'(p521044, pipeline([rebalancing, features, normalization], nn)) :- true.
':=>'(p848396, pipeline([rebalancing, features, normalization], rf)) :- true.
':=>'(p557164, pipeline([rebalancing, features, mitigation], knn)) :- true.
':=>'(p919930, pipeline([rebalancing, features, mitigation], knn)) :- true.
':=>'(p877915, pipeline([rebalancing, features, mitigation], nn)) :- true.
':=>'(p645688, pipeline([rebalancing, features, mitigation], nn)) :- true.
':=>'(p241732, pipeline([rebalancing, features, mitigation], rf)) :- true.
':=>'(p340342, pipeline([rebalancing, mitigation, features], knn)) :- true.
':=>'(p631614, pipeline([rebalancing, mitigation, features], nn)) :- true.
':=>'(p33899, pipeline([normalization, features, mitigation, rebalancing], knn)) :- true.
':=>'(p438647, pipeline([normalization, features, mitigation, rebalancing], knn)) :- true.
':=>'(p575775, pipeline([normalization, features, mitigation, rebalancing], nn)) :- true.
':=>'(p978037, pipeline([normalization, features, mitigation, rebalancing], nn)) :- true.
':=>'(p660727, pipeline([normalization, features, mitigation, rebalancing], rf)) :- true.
':=>'(p771604, pipeline([normalization, features, mitigation, rebalancing], rf)) :- true.
':=>'(p461275, pipeline([normalization, features, rebalancing, mitigation], knn)) :- true.
':=>'(p520442, pipeline([normalization, features, rebalancing, mitigation], knn)) :- true.
':=>'(p599309, pipeline([normalization, features, rebalancing, mitigation], nn)) :- true.
':=>'(p441882, pipeline([normalization, features, rebalancing, mitigation], nn)) :- true.
':=>'(p168361, pipeline([normalization, features, rebalancing, mitigation], rf)) :- true.
':=>'(p781592, pipeline([normalization, features, rebalancing, mitigation], rf)) :- true.
':=>'(p347386, pipeline([normalization, mitigation, features, rebalancing], knn)) :- true.
':=>'(p631424, pipeline([normalization, mitigation, features, rebalancing], nn)) :- true.
':=>'(p942307, pipeline([normalization, mitigation, features, rebalancing], rf)) :- true.
':=>'(p127123, pipeline([normalization, mitigation, rebalancing, features], knn)) :- true.
':=>'(p783260, pipeline([normalization, mitigation, rebalancing, features], nn)) :- true.
':=>'(p954256, pipeline([normalization, mitigation, rebalancing, features], rf)) :- true.
':=>'(p417916, pipeline([normalization, rebalancing, features, mitigation], knn)) :- true.
':=>'(p783050, pipeline([normalization, rebalancing, features, mitigation], knn)) :- true.
':=>'(p706327, pipeline([normalization, rebalancing, features, mitigation], nn)) :- true.
':=>'(p54726, pipeline([normalization, rebalancing, features, mitigation], nn)) :- true.
':=>'(p291897, pipeline([normalization, rebalancing, features, mitigation], rf)) :- true.
':=>'(p597989, pipeline([normalization, rebalancing, features, mitigation], rf)) :- true.
':=>'(p382549, pipeline([normalization, rebalancing, mitigation, features], knn)) :- true.
':=>'(p550929, pipeline([normalization, rebalancing, mitigation, features], nn)) :- true.
':=>'(p295932, pipeline([normalization, rebalancing, mitigation, features], rf)) :- true.
':=>'(p383366, pipeline([features, normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p432083, pipeline([features, normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p737774, pipeline([features, normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p786310, pipeline([features, normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p818761, pipeline([features, normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p530869, pipeline([features, normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p434030, pipeline([features, normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p271717, pipeline([features, normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p75279, pipeline([features, normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p381593, pipeline([features, normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p789151, pipeline([features, normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p660569, pipeline([features, normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p529917, pipeline([features, mitigation, normalization, rebalancing], knn)) :- true.
':=>'(p621204, pipeline([features, mitigation, normalization, rebalancing], nn)) :- true.
':=>'(p95952, pipeline([features, mitigation, normalization, rebalancing], rf)) :- true.
':=>'(p820068, pipeline([features, mitigation, rebalancing, normalization], knn)) :- true.
':=>'(p21844, pipeline([features, mitigation, rebalancing, normalization], nn)) :- true.
':=>'(p467059, pipeline([features, mitigation, rebalancing, normalization], rf)) :- true.
':=>'(p45393, pipeline([features, rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p745144, pipeline([features, rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p874857, pipeline([features, rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p13974, pipeline([features, rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p637001, pipeline([features, rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p376820, pipeline([features, rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p663927, pipeline([features, rebalancing, mitigation, normalization], knn)) :- true.
':=>'(p102513, pipeline([features, rebalancing, mitigation, normalization], nn)) :- true.
':=>'(p471546, pipeline([features, rebalancing, mitigation, normalization], rf)) :- true.
':=>'(p628526, pipeline([rebalancing, normalization, features, mitigation], knn)) :- true.
':=>'(p884753, pipeline([rebalancing, normalization, features, mitigation], knn)) :- true.
':=>'(p308657, pipeline([rebalancing, normalization, features, mitigation], nn)) :- true.
':=>'(p148626, pipeline([rebalancing, normalization, features, mitigation], nn)) :- true.
':=>'(p899907, pipeline([rebalancing, normalization, features, mitigation], rf)) :- true.
':=>'(p552740, pipeline([rebalancing, normalization, features, mitigation], rf)) :- true.
':=>'(p957392, pipeline([rebalancing, normalization, mitigation, features], knn)) :- true.
':=>'(p353558, pipeline([rebalancing, normalization, mitigation, features], nn)) :- true.
':=>'(p17395, pipeline([rebalancing, normalization, mitigation, features], rf)) :- true.
':=>'(p984438, pipeline([rebalancing, features, normalization, mitigation], knn)) :- true.
':=>'(p277791, pipeline([rebalancing, features, normalization, mitigation], knn)) :- true.
':=>'(p933196, pipeline([rebalancing, features, normalization, mitigation], nn)) :- true.
':=>'(p283841, pipeline([rebalancing, features, normalization, mitigation], nn)) :- true.
':=>'(p240687, pipeline([rebalancing, features, normalization, mitigation], rf)) :- true.
':=>'(p732036, pipeline([rebalancing, features, normalization, mitigation], rf)) :- true.
':=>'(p146231, pipeline([rebalancing, features, mitigation, normalization], knn)) :- true.
':=>'(p549531, pipeline([rebalancing, features, mitigation, normalization], nn)) :- true.
':=>'(p772289, pipeline([rebalancing, features, mitigation, normalization], rf)) :- true.

Checking Config
Exporting Config
Saving Graph
Exporting AutoML input
Exporting Space
Exporting Constraints
Input created for iteration Config(iteration=4, dataset=compass, metric=balanced_accuracy, fairnessMetric=equalized_odds_ratio, sensitiveFeatures=[sex, race], mode=max, batchSize=999999, timeBudget=900, seed=42)
Here is the standard output/error of the command:

7097d2417688700d823699a922bde1f9877129d71b10147826fb2ca101668ac9
Here is the standard output/error of the command:

Here is the standard output/error of the command:

WARNING:root:No module named 'rpy2': FairAdapt will be unavailable. To install, run:
pip install 'aif360[FairAdapt]'
INFO:flaml.tune.searcher.blendsearch:No low-cost partial config given to the search algorithm. For cost-frugal search, consider providing low-cost values for cost-related hps via 'low_cost_partial_config'. More info can be found at https://microsoft.github.io/FLAML/docs/FAQ#about-low_cost_partial_config-in-tune
Trying to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Added successfully: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Trying to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: normalization == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
AutoML: starting optimization.
72
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.1249894085915813), 'balanced_accuracy': np.float64(0.6608702808208895), 'by_group': {'0_0': np.float64(0.31), '0_2': np.float64(0.32), '0_3': np.float64(0.14), '1_0': np.float64(1.0), '1_2': np.float64(0.18), '1_3': np.float64(0.22), '1_5': np.float64(0.19)}, 'status': 'success', 'total_time': 1.1479809284210205, 'fit_time': np.float64(0.158223295211792), 'score_time': np.float64(0.006483316421508789), 'absolute_time': 1746713170.9155178, 'flatten_equalized_odds_ratio': '0.15_0.15_0.15_0.04_0.13', 'flatten_balanced_accuracy': '0.66_0.67_0.67_0.67_0.64'}
73
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 4, 'min_samples_split': 5, 'n_estimators': np.int64(100)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.13331539727511718), 'balanced_accuracy': np.float64(0.675796365857712), 'by_group': {'0_0': np.float64(0.53), '0_2': np.float64(0.41), '0_3': np.float64(0.13), '1_0': np.float64(1.0), '1_2': np.float64(0.38), '1_3': np.float64(0.4), '1_5': np.float64(0.29)}, 'status': 'success', 'total_time': 3.164090394973755, 'fit_time': np.float64(0.5515221118927002), 'score_time': np.float64(0.01556534767150879), 'absolute_time': 1746713174.2048614, 'flatten_equalized_odds_ratio': '0.14_0.16_0.0_0.15_0.21', 'flatten_balanced_accuracy': '0.67_0.68_0.68_0.69_0.67'}
74
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.3328898824149368), 'balanced_accuracy': np.float64(0.6252980178016895), 'by_group': {'0_0': np.float64(0.67), '0_2': np.float64(0.73), '0_3': np.float64(0.35), '1_0': np.float64(0.77), '1_2': np.float64(0.75), '1_3': np.float64(0.64), '1_5': np.float64(0.57)}, 'status': 'success', 'total_time': 27.981643676757812, 'fit_time': np.float64(4.595721769332886), 'score_time': np.float64(0.013962793350219726), 'absolute_time': 1746713202.2970161, 'flatten_equalized_odds_ratio': '0.36_0.28_0.0_0.53_0.49', 'flatten_balanced_accuracy': '0.63_0.62_0.62_0.62_0.63'}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
75
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 7}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.16628393279998482), 'balanced_accuracy': np.float64(0.6631625132885807), 'by_group': {'0_0': np.float64(0.46), '0_2': np.float64(0.41), '0_3': np.float64(0.17), '1_0': np.float64(0.99), '1_2': np.float64(0.61), '1_3': np.float64(0.62), '1_5': np.float64(0.57)}, 'status': 'success', 'total_time': 3.5211281776428223, 'fit_time': np.float64(0.14451446533203124), 'score_time': np.float64(0.23418707847595216), 'absolute_time': 1746713205.9394329, 'flatten_equalized_odds_ratio': '0.0_0.36_0.13_0.12_0.23', 'flatten_balanced_accuracy': '0.67_0.66_0.65_0.67_0.67'}
76
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 4, 'max_leaf_nodes': 3, 'min_samples_split': 2, 'n_estimators': np.int64(100)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'equalized_odds_ratio': np.float64(0.22725837119682574), 'balanced_accuracy': np.float64(0.669190070820809), 'by_group': {'0_0': np.float64(0.39), '0_2': np.float64(0.31), '0_3': np.float64(0.23), '1_0': np.float64(0.99), '1_2': np.float64(0.48), '1_3': np.float64(0.51), '1_5': np.float64(0.34)}, 'status': 'success', 'total_time': 5.09837007522583, 'fit_time': np.float64(0.9334615230560303), 'score_time': np.float64(0.01824216842651367), 'absolute_time': 1746713211.167129, 'flatten_equalized_odds_ratio': '0.41_0.32_0.0_0.09_0.31', 'flatten_balanced_accuracy': '0.67_0.68_0.67_0.67_0.66'}
77
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 9, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.15647335243903432), 'balanced_accuracy': np.float64(0.6731825982349592), 'by_group': {'0_0': np.float64(0.59), '0_2': np.float64(0.49), '0_3': np.float64(0.16), '1_0': np.float64(0.99), '1_2': np.float64(0.67), '1_3': np.float64(0.64), '1_5': np.float64(0.56)}, 'status': 'success', 'total_time': 3.8482019901275635, 'fit_time': np.float64(0.3184403896331787), 'score_time': np.float64(0.20892558097839356), 'absolute_time': 1746713215.1298413, 'flatten_equalized_odds_ratio': '0.0_0.36_0.0_0.21_0.21', 'flatten_balanced_accuracy': '0.68_0.67_0.66_0.68_0.67'}
78
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 4, 'max_leaf_nodes': 6, 'min_samples_split': 5, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification')}
{'equalized_odds_ratio': np.float64(0.26884639637771546), 'balanced_accuracy': np.float64(0.6302773611197511), 'by_group': {'0_0': np.float64(0.7), '0_2': np.float64(0.76), '0_3': np.float64(0.29), '1_0': np.float64(0.8), '1_2': np.float64(0.77), '1_3': np.float64(0.67), '1_5': np.float64(0.6)}, 'status': 'success', 'total_time': 23.19449019432068, 'fit_time': np.float64(4.551448631286621), 'score_time': np.float64(0.017776012420654297), 'absolute_time': 1746713238.4405808, 'flatten_equalized_odds_ratio': '0.53_0.25_0.0_0.57_0.0', 'flatten_balanced_accuracy': '0.64_0.65_0.62_0.62_0.63'}
79
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 2}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'equalized_odds_ratio': np.float64(0.34773313934260436), 'balanced_accuracy': np.float64(0.621229112284734), 'by_group': {'0_0': np.float64(0.69), '0_2': np.float64(0.78), '0_3': np.float64(0.37), '1_0': np.float64(0.83), '1_2': np.float64(0.74), '1_3': np.float64(0.69), '1_5': np.float64(0.67)}, 'status': 'success', 'total_time': 43.960209131240845, 'fit_time': np.float64(3.575830173492432), 'score_time': np.float64(0.023670339584350587), 'absolute_time': 1746713282.5202522, 'flatten_equalized_odds_ratio': '0.38_0.57_0.55_0.24_0.0', 'flatten_balanced_accuracy': '0.63_0.62_0.61_0.62_0.62'}
80
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 4, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.2768756779782495), 'balanced_accuracy': np.float64(0.6323062178583727), 'by_group': {'0_0': np.float64(0.47), '0_2': np.float64(0.54), '0_3': np.float64(0.31), '1_0': np.float64(1.0), '1_2': np.float64(0.65), '1_3': np.float64(0.62), '1_5': np.float64(0.7)}, 'status': 'success', 'total_time': 1.0927443504333496, 'fit_time': np.float64(0.027560997009277343), 'score_time': np.float64(0.07218618392944336), 'absolute_time': 1746713285.2204294, 'flatten_equalized_odds_ratio': '0.47_0.12_0.29_0.4_0.11', 'flatten_balanced_accuracy': '0.64_0.64_0.63_0.63_0.63'}
81
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(50), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.030667486679865852), 'balanced_accuracy': np.float64(0.6505705761936286), 'by_group': {'0_0': np.float64(0.13), '0_2': np.float64(0.18), '0_3': np.float64(0.03), '1_0': np.float64(1.0), '1_2': np.float64(0.32), '1_3': np.float64(0.37), '1_5': np.float64(0.24)}, 'status': 'success', 'total_time': 127.59566450119019, 'fit_time': np.float64(25.43346619606018), 'score_time': np.float64(0.01741018295288086), 'absolute_time': 1746713412.9348414, 'flatten_equalized_odds_ratio': '0.08_0.0_0.0_0.08_0.0', 'flatten_balanced_accuracy': '0.66_0.65_0.65_0.66_0.64'}
82
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 4, 'max_features': 4, 'max_leaf_nodes': 2, 'min_samples_split': 2, 'n_estimators': np.int64(75)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.2160582141910627), 'balanced_accuracy': np.float64(0.6319646081278243), 'by_group': {'0_0': np.float64(0.68), '0_2': np.float64(0.7), '0_3': np.float64(0.22), '1_0': np.float64(0.79), '1_2': np.float64(0.72), '1_3': np.float64(0.65), '1_5': np.float64(0.52)}, 'status': 'success', 'total_time': 19.650018453598022, 'fit_time': np.float64(3.842330265045166), 'score_time': np.float64(0.01836733818054199), 'absolute_time': 1746713432.7044775, 'flatten_equalized_odds_ratio': '0.54_0.25_0.0_0.3_0.0', 'flatten_balanced_accuracy': '0.65_0.64_0.64_0.61_0.63'}
83
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_split': 5, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.20425492553673888), 'balanced_accuracy': np.float64(0.6242000177821352), 'by_group': {'0_0': np.float64(0.68), '0_2': np.float64(0.74), '0_3': np.float64(0.2), '1_0': np.float64(0.79), '1_2': np.float64(0.8), '1_3': np.float64(0.67), '1_5': np.float64(0.6)}, 'status': 'success', 'total_time': 24.495746850967407, 'fit_time': np.float64(4.812650680541992), 'score_time': np.float64(0.01995816230773926), 'absolute_time': 1746713457.3435857, 'flatten_equalized_odds_ratio': '0.51_0.28_0.0_0.23_0.0', 'flatten_balanced_accuracy': '0.63_0.62_0.61_0.62_0.64'}
84
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.26128879812690997), 'balanced_accuracy': np.float64(0.6292607442179918), 'by_group': {'0_0': np.float64(0.67), '0_2': np.float64(0.78), '0_3': np.float64(0.28), '1_0': np.float64(0.83), '1_2': np.float64(0.75), '1_3': np.float64(0.73), '1_5': np.float64(0.55)}, 'status': 'success', 'total_time': 29.549334049224854, 'fit_time': np.float64(5.827974557876587), 'score_time': np.float64(0.017629575729370118), 'absolute_time': 1746713487.0159612, 'flatten_equalized_odds_ratio': '0.37_0.22_0.53_0.19_0.0', 'flatten_balanced_accuracy': '0.63_0.65_0.6_0.63_0.63'}
85
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 14, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'equalized_odds_ratio': np.float64(0.08275862068965517), 'balanced_accuracy': np.float64(0.5183771574832863), 'by_group': {'0_0': np.float64(0.36), '0_2': np.float64(0.39), '0_3': np.float64(0.2), '1_0': np.float64(0.55), '1_2': np.float64(0.48), '1_3': np.float64(0.51), '1_5': np.float64(0.21)}, 'status': 'success', 'total_time': 25.78450059890747, 'fit_time': np.float64(4.518494606018066), 'score_time': np.float64(0.30751872062683105), 'absolute_time': 1746713512.9231067, 'flatten_equalized_odds_ratio': '0.41_0.0_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.52_0.54_0.5_0.54_0.5'}
86
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 10, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.16349116033326563), 'balanced_accuracy': np.float64(0.5107794873916852), 'by_group': {'0_0': np.float64(0.58), '0_2': np.float64(0.51), '0_3': np.float64(0.5), '1_0': np.float64(0.52), '1_2': np.float64(0.47), '1_3': np.float64(0.53), '1_5': np.float64(0.32)}, 'status': 'success', 'total_time': 30.025701761245728, 'fit_time': np.float64(5.443559837341309), 'score_time': np.float64(0.25694704055786133), 'absolute_time': 1746713543.0723305, 'flatten_equalized_odds_ratio': '0.57_0.0_0.0_0.25_0.0', 'flatten_balanced_accuracy': '0.52_0.51_0.52_0.51_0.5'}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
87
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(25), 'solver': np.str_('adam')}, 'features': {'type': np.str_('SelectKBest'), 'k': 1}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.32146614643881266), 'balanced_accuracy': np.float64(0.6236011123013878), 'by_group': {'0_0': np.float64(0.69), '0_2': np.float64(0.63), '0_3': np.float64(0.32), '1_0': np.float64(0.92), '1_2': np.float64(0.79), '1_3': np.float64(0.7), '1_5': np.float64(0.68)}, 'status': 'success', 'total_time': 9.927475929260254, 'fit_time': np.float64(1.7064335823059082), 'score_time': np.float64(0.07687525749206543), 'absolute_time': 1746713553.1243122, 'flatten_equalized_odds_ratio': '0.36_0.11_0.22_0.5_0.41', 'flatten_balanced_accuracy': '0.64_0.64_0.62_0.61_0.61'}
88
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(50), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.06943623703586169), 'balanced_accuracy': np.float64(0.6489118338946082), 'by_group': {'0_0': np.float64(0.44), '0_2': np.float64(0.31), '0_3': np.float64(0.07), '1_0': np.float64(1.0), '1_2': np.float64(0.46), '1_3': np.float64(0.49), '1_5': np.float64(0.48)}, 'status': 'success', 'total_time': 7.860196828842163, 'fit_time': np.float64(1.3529276847839355), 'score_time': np.float64(0.07416863441467285), 'absolute_time': 1746713562.9936876, 'flatten_equalized_odds_ratio': '0.17_0.0_0.0_0.1_0.08', 'flatten_balanced_accuracy': '0.65_0.65_0.63_0.67_0.64'}
89
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'equalized_odds_ratio': np.float64(0.18790615957137535), 'balanced_accuracy': np.float64(0.6288528785873205), 'by_group': {'0_0': np.float64(0.69), '0_2': np.float64(0.71), '0_3': np.float64(0.2), '1_0': np.float64(0.77), '1_2': np.float64(0.78), '1_3': np.float64(0.69), '1_5': np.float64(0.56)}, 'status': 'success', 'total_time': 144.60072803497314, 'fit_time': np.float64(28.625763845443725), 'score_time': np.float64(0.09983687400817871), 'absolute_time': 1746713707.72875, 'flatten_equalized_odds_ratio': '0.65_0.29_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.63_0.62_0.63_0.64_0.63'}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
90
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 13, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 9}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.09872818720933667), 'balanced_accuracy': np.float64(0.6810274217365905), 'by_group': {'0_0': np.float64(0.41), '0_2': np.float64(0.48), '0_3': np.float64(0.1), '1_0': np.float64(1.0), '1_2': np.float64(0.53), '1_3': np.float64(0.44), '1_5': np.float64(0.5)}, 'status': 'success', 'total_time': 3.2344436645507812, 'fit_time': np.float64(0.14777116775512694), 'score_time': np.float64(0.20075149536132814), 'absolute_time': 1746713711.0975375, 'flatten_equalized_odds_ratio': '0.19_0.0_0.0_0.11_0.2', 'flatten_balanced_accuracy': '0.69_0.68_0.67_0.69_0.67'}
91
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.14623829039497102), 'balanced_accuracy': np.float64(0.6680521787172833), 'by_group': {'0_0': np.float64(0.42), '0_2': np.float64(0.41), '0_3': np.float64(0.15), '1_0': np.float64(0.99), '1_2': np.float64(0.57), '1_3': np.float64(0.55), '1_5': np.float64(0.44)}, 'status': 'success', 'total_time': 2.7178688049316406, 'fit_time': np.float64(0.03527565002441406), 'score_time': np.float64(0.23670368194580077), 'absolute_time': 1746713713.948064, 'flatten_equalized_odds_ratio': '0.23_0.23_0.13_0.14_0.0', 'flatten_balanced_accuracy': '0.68_0.66_0.67_0.68_0.66'}
92
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 3, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.31074901088713486), 'balanced_accuracy': np.float64(0.6172341757791289), 'by_group': {'0_0': np.float64(0.68), '0_2': np.float64(0.75), '0_3': np.float64(0.33), '1_0': np.float64(0.82), '1_2': np.float64(0.75), '1_3': np.float64(0.68), '1_5': np.float64(0.54)}, 'status': 'success', 'total_time': 25.387139558792114, 'fit_time': np.float64(4.994577646255493), 'score_time': np.float64(0.013465261459350586), 'absolute_time': 1746713739.4667778, 'flatten_equalized_odds_ratio': '0.41_0.25_0.6_0.29_0.0', 'flatten_balanced_accuracy': '0.62_0.63_0.61_0.61_0.62'}
93
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'equalized_odds_ratio': np.float64(0.25880342916464316), 'balanced_accuracy': np.float64(0.6226478524666474), 'by_group': {'0_0': np.float64(0.68), '0_2': np.float64(0.72), '0_3': np.float64(0.28), '1_0': np.float64(0.79), '1_2': np.float64(0.72), '1_3': np.float64(0.65), '1_5': np.float64(0.53)}, 'status': 'success', 'total_time': 16.623939037322998, 'fit_time': np.float64(3.214468574523926), 'score_time': np.float64(0.024927091598510743), 'absolute_time': 1746713756.2305784, 'flatten_equalized_odds_ratio': '0.42_0.25_0.32_0.3_0.0', 'flatten_balanced_accuracy': '0.62_0.63_0.63_0.61_0.62'}
94
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.16293097044562743), 'balanced_accuracy': np.float64(0.6493481293110708), 'by_group': {'0_0': np.float64(0.49), '0_2': np.float64(0.44), '0_3': np.float64(0.16), '1_0': np.float64(0.99), '1_2': np.float64(0.72), '1_3': np.float64(0.66), '1_5': np.float64(0.53)}, 'status': 'success', 'total_time': 5.642775297164917, 'fit_time': np.float64(1.0649075508117676), 'score_time': np.float64(0.005715227127075196), 'absolute_time': 1746713762.0085251, 'flatten_equalized_odds_ratio': '0.41_0.13_0.0_0.14_0.12', 'flatten_balanced_accuracy': '0.66_0.65_0.64_0.65_0.65'}
95
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 5, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('SelectKBest'), 'k': 2}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.35802196963922356), 'balanced_accuracy': np.float64(0.623529898384873), 'by_group': {'0_0': np.float64(0.68), '0_2': np.float64(0.8), '0_3': np.float64(0.38), '1_0': np.float64(0.77), '1_2': np.float64(0.7), '1_3': np.float64(0.66), '1_5': np.float64(0.63)}, 'status': 'success', 'total_time': 49.851933002471924, 'fit_time': np.float64(4.906227445602417), 'score_time': np.float64(0.015607070922851563), 'absolute_time': 1746713812.031747, 'flatten_equalized_odds_ratio': '0.4_0.6_0.0_0.3_0.48', 'flatten_balanced_accuracy': '0.63_0.62_0.64_0.6_0.63'}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
96
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 4, 'max_leaf_nodes': 4, 'min_samples_split': 6, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.22961145903762797), 'balanced_accuracy': np.float64(0.6806341179502517), 'by_group': {'0_0': np.float64(0.69), '0_2': np.float64(0.67), '0_3': np.float64(0.25), '1_0': np.float64(1.0), '1_2': np.float64(0.57), '1_3': np.float64(0.53), '1_5': np.float64(0.45)}, 'status': 'success', 'total_time': 4.782741546630859, 'fit_time': np.float64(0.869537353515625), 'score_time': np.float64(0.015592813491821289), 'absolute_time': 1746713818.6835196, 'flatten_equalized_odds_ratio': '0.27_0.37_0.1_0.23_0.18', 'flatten_balanced_accuracy': '0.68_0.69_0.68_0.68_0.67'}
97
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.11632243539182), 'balanced_accuracy': np.float64(0.6694503330478818), 'by_group': {'0_0': np.float64(0.38), '0_2': np.float64(0.34), '0_3': np.float64(0.12), '1_0': np.float64(1.0), '1_2': np.float64(0.28), '1_3': np.float64(0.29), '1_5': np.float64(0.25)}, 'status': 'success', 'total_time': 3.6778602600097656, 'fit_time': np.float64(0.6657886028289794), 'score_time': np.float64(0.009374189376831054), 'absolute_time': 1746713822.4983096, 'flatten_equalized_odds_ratio': '0.12_0.27_0.0_0.07_0.12', 'flatten_balanced_accuracy': '0.67_0.67_0.67_0.68_0.66'}
98
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 6, 'min_samples_split': 4, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.10108466362977227), 'balanced_accuracy': np.float64(0.6758359153806934), 'by_group': {'0_0': np.float64(0.41), '0_2': np.float64(0.36), '0_3': np.float64(0.1), '1_0': np.float64(1.0), '1_2': np.float64(0.34), '1_3': np.float64(0.36), '1_5': np.float64(0.24)}, 'status': 'success', 'total_time': 3.836167335510254, 'fit_time': np.float64(0.6900945186614991), 'score_time': np.float64(0.013434076309204101), 'absolute_time': 1746713826.4776025, 'flatten_equalized_odds_ratio': '0.14_0.15_0.0_0.08_0.14', 'flatten_balanced_accuracy': '0.67_0.68_0.67_0.69_0.67'}
99
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(25), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 1}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.7304800584337879), 'balanced_accuracy': np.float64(0.5551306230642731), 'by_group': {'0_0': np.float64(0.88), '0_2': np.float64(0.86), '0_3': np.float64(0.73), '1_0': np.float64(0.87), '1_2': np.float64(0.88), '1_3': np.float64(0.84), '1_5': np.float64(0.81)}, 'status': 'success', 'total_time': 48.21489238739014, 'fit_time': np.float64(8.64771614074707), 'score_time': np.float64(0.07610015869140625), 'absolute_time': 1746713874.8328118, 'flatten_equalized_odds_ratio': '1.0_0.25_0.4_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.63_0.64_0.5_0.5'}
100
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 9, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.15497174162219135), 'balanced_accuracy': np.float64(0.665906318071145), 'by_group': {'0_0': np.float64(0.44), '0_2': np.float64(0.45), '0_3': np.float64(0.15), '1_0': np.float64(0.99), '1_2': np.float64(0.63), '1_3': np.float64(0.61), '1_5': np.float64(0.54)}, 'status': 'success', 'total_time': 3.9657227993011475, 'fit_time': np.float64(0.024941444396972656), 'score_time': np.float64(0.35727319717407224), 'absolute_time': 1746713878.9847033, 'flatten_equalized_odds_ratio': '0.1_0.19_0.1_0.3_0.09', 'flatten_balanced_accuracy': '0.67_0.67_0.66_0.67_0.66'}
101
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 19, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.09684671771463421), 'balanced_accuracy': np.float64(0.6872911925255693), 'by_group': {'0_0': np.float64(0.43), '0_2': np.float64(0.46), '0_3': np.float64(0.1), '1_0': np.float64(0.98), '1_2': np.float64(0.55), '1_3': np.float64(0.51), '1_5': np.float64(0.49)}, 'status': 'success', 'total_time': 3.0051839351654053, 'fit_time': np.float64(0.23129539489746093), 'score_time': np.float64(0.16147704124450685), 'absolute_time': 1746713882.1747115, 'flatten_equalized_odds_ratio': '0.28_0.0_0.0_0.11_0.1', 'flatten_balanced_accuracy': '0.69_0.68_0.69_0.7_0.69'}
102
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 20, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.08154236835070836), 'balanced_accuracy': np.float64(0.5054738558490132), 'by_group': {'0_0': np.float64(0.23), '0_2': np.float64(0.53), '0_3': np.float64(0.32), '1_0': np.float64(0.42), '1_2': np.float64(0.38), '1_3': np.float64(0.25), '1_5': np.float64(0.27)}, 'status': 'success', 'total_time': 20.03166151046753, 'fit_time': np.float64(3.2820064544677736), 'score_time': np.float64(0.3574118137359619), 'absolute_time': 1746713902.3476927, 'flatten_equalized_odds_ratio': '0.0_0.1_0.3_0.0_0.0', 'flatten_balanced_accuracy': '0.51_0.51_0.51_0.5_0.5'}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
103
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 6, 'min_samples_split': 5, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.24204311238066908), 'balanced_accuracy': np.float64(0.6800094731147738), 'by_group': {'0_0': np.float64(0.66), '0_2': np.float64(0.64), '0_3': np.float64(0.26), '1_0': np.float64(1.0), '1_2': np.float64(0.55), '1_3': np.float64(0.53), '1_5': np.float64(0.44)}, 'status': 'success', 'total_time': 3.007005214691162, 'fit_time': np.float64(0.4803461074829102), 'score_time': np.float64(0.013449001312255859), 'absolute_time': 1746713905.5078535, 'flatten_equalized_odds_ratio': '0.31_0.38_0.1_0.23_0.18', 'flatten_balanced_accuracy': '0.67_0.69_0.69_0.68_0.67'}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
104
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_split': 6, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 1}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.09070036043622025), 'balanced_accuracy': np.float64(0.6394197528613543), 'by_group': {'0_0': np.float64(0.39), '0_2': np.float64(0.42), '0_3': np.float64(0.11), '1_0': np.float64(0.98), '1_2': np.float64(0.62), '1_3': np.float64(0.58), '1_5': np.float64(0.44)}, 'status': 'success', 'total_time': 0.7659571170806885, 'fit_time': np.float64(0.07668681144714355), 'score_time': np.float64(0.006937885284423828), 'absolute_time': 1746713908.409386, 'flatten_equalized_odds_ratio': '0.27_0.19_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.65_0.64_0.64_0.63_0.64'}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
105
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'equalized_odds_ratio': np.float64(0.1625802111227003), 'balanced_accuracy': np.float64(0.6831833893106436), 'by_group': {'0_0': np.float64(0.52), '0_2': np.float64(0.49), '0_3': np.float64(0.16), '1_0': np.float64(1.0), '1_2': np.float64(0.59), '1_3': np.float64(0.58), '1_5': np.float64(0.47)}, 'status': 'success', 'total_time': 8.015352249145508, 'fit_time': np.float64(1.4996729850769044), 'score_time': np.float64(0.008200454711914062), 'absolute_time': 1746713916.5688262, 'flatten_equalized_odds_ratio': '0.2_0.19_0.0_0.22_0.21', 'flatten_balanced_accuracy': '0.68_0.69_0.67_0.69_0.69'}
106
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 4, 'min_samples_split': 5, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'equalized_odds_ratio': np.float64(0.30538382660444113), 'balanced_accuracy': np.float64(0.6292455558877786), 'by_group': {'0_0': np.float64(0.76), '0_2': np.float64(0.74), '0_3': np.float64(0.32), '1_0': np.float64(0.82), '1_2': np.float64(0.79), '1_3': np.float64(0.69), '1_5': np.float64(0.6)}, 'status': 'success', 'total_time': 19.158069849014282, 'fit_time': np.float64(3.750047779083252), 'score_time': np.float64(0.015651893615722657), 'absolute_time': 1746713935.87262, 'flatten_equalized_odds_ratio': '0.67_0.26_0.33_0.27_0.0', 'flatten_balanced_accuracy': '0.63_0.63_0.63_0.61_0.64'}
107
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 5, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.1404068318609503), 'balanced_accuracy': np.float64(0.6574294241889328), 'by_group': {'0_0': np.float64(0.28), '0_2': np.float64(0.33), '0_3': np.float64(0.26), '1_0': np.float64(1.0), '1_2': np.float64(0.16), '1_3': np.float64(0.22), '1_5': np.float64(0.22)}, 'status': 'success', 'total_time': 1.095644474029541, 'fit_time': np.float64(0.15585923194885254), 'score_time': np.float64(0.006243181228637695), 'absolute_time': 1746713937.1141489, 'flatten_equalized_odds_ratio': '0.17_0.13_0.14_0.14_0.13', 'flatten_balanced_accuracy': '0.65_0.66_0.66_0.67_0.65'}
108
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_split': 6, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'equalized_odds_ratio': np.float64(0.19500130424521508), 'balanced_accuracy': np.float64(0.6129790291303295), 'by_group': {'0_0': np.float64(0.58), '0_2': np.float64(0.68), '0_3': np.float64(0.23), '1_0': np.float64(0.73), '1_2': np.float64(0.68), '1_3': np.float64(0.6), '1_5': np.float64(0.49)}, 'status': 'success', 'total_time': 19.439485788345337, 'fit_time': np.float64(3.7958418846130373), 'score_time': np.float64(0.020797300338745116), 'absolute_time': 1746713956.7022755, 'flatten_equalized_odds_ratio': '0.43_0.24_0.0_0.31_0.0', 'flatten_balanced_accuracy': '0.61_0.61_0.63_0.6_0.62'}
109
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_split': 6, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'equalized_odds_ratio': np.float64(0.42706240057341904), 'balanced_accuracy': np.float64(0.6028791170825276), 'by_group': {'0_0': np.float64(0.74), '0_2': np.float64(0.77), '0_3': np.float64(0.43), '1_0': np.float64(0.81), '1_2': np.float64(0.82), '1_3': np.float64(0.72), '1_5': np.float64(0.66)}, 'status': 'success', 'total_time': 17.543678522109985, 'fit_time': np.float64(3.4238672733306883), 'score_time': np.float64(0.020052623748779298), 'absolute_time': 1746713974.40391, 'flatten_equalized_odds_ratio': '0.63_0.28_0.25_0.98_0.0', 'flatten_balanced_accuracy': '0.63_0.62_0.63_0.5_0.63'}
110
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 4, 'max_features': 4, 'max_leaf_nodes': 3, 'min_samples_split': 2, 'n_estimators': np.int64(100)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.16422538325047123), 'balanced_accuracy': np.float64(0.6769772396215437), 'by_group': {'0_0': np.float64(0.58), '0_2': np.float64(0.5), '0_3': np.float64(0.17), '1_0': np.float64(1.0), '1_2': np.float64(0.42), '1_3': np.float64(0.45), '1_5': np.float64(0.32)}, 'status': 'success', 'total_time': 4.319271087646484, 'fit_time': np.float64(0.7789252758026123), 'score_time': np.float64(0.017288732528686523), 'absolute_time': 1746713978.8725255, 'flatten_equalized_odds_ratio': '0.16_0.32_0.09_0.18_0.08', 'flatten_balanced_accuracy': '0.67_0.68_0.68_0.69_0.67'}
111
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.24258964301259586), 'balanced_accuracy': np.float64(0.6672253350332008), 'by_group': {'0_0': np.float64(0.71), '0_2': np.float64(0.61), '0_3': np.float64(0.26), '1_0': np.float64(0.99), '1_2': np.float64(0.58), '1_3': np.float64(0.61), '1_5': np.float64(0.45)}, 'status': 'success', 'total_time': 22.24745202064514, 'fit_time': np.float64(4.373229169845581), 'score_time': np.float64(0.009242820739746093), 'absolute_time': 1746714001.2773468, 'flatten_equalized_odds_ratio': '0.35_0.09_0.1_0.38_0.29', 'flatten_balanced_accuracy': '0.67_0.67_0.66_0.68_0.66'}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
112
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 5, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 3}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'equalized_odds_ratio': np.float64(0.1347561173205039), 'balanced_accuracy': np.float64(0.6427315366157499), 'by_group': {'0_0': np.float64(0.54), '0_2': np.float64(0.55), '0_3': np.float64(0.15), '1_0': np.float64(0.92), '1_2': np.float64(0.67), '1_3': np.float64(0.63), '1_5': np.float64(0.5)}, 'status': 'success', 'total_time': 3.052474021911621, 'fit_time': np.float64(0.4993415832519531), 'score_time': np.float64(0.013408994674682618), 'absolute_time': 1746714006.726538, 'flatten_equalized_odds_ratio': '0.28_0.19_0.0_0.2_0.0', 'flatten_balanced_accuracy': '0.65_0.65_0.64_0.63_0.64'}
113
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 12, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.4626680909776898), 'balanced_accuracy': np.float64(0.5856350745054903), 'by_group': {'0_0': np.float64(0.67), '0_2': np.float64(0.7), '0_3': np.float64(0.5), '1_0': np.float64(0.99), '1_2': np.float64(0.8), '1_3': np.float64(0.73), '1_5': np.float64(0.74)}, 'status': 'success', 'total_time': 0.4366941452026367, 'fit_time': np.float64(0.012246322631835938), 'score_time': np.float64(0.012066078186035157), 'absolute_time': 1746714007.3140874, 'flatten_equalized_odds_ratio': '0.52_0.35_0.36_0.61_0.47', 'flatten_balanced_accuracy': '0.59_0.58_0.59_0.59_0.58'}
114
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.3614253280808572), 'balanced_accuracy': np.float64(0.6278225881504671), 'by_group': {'0_0': np.float64(0.7), '0_2': np.float64(0.8), '0_3': np.float64(0.38), '1_0': np.float64(0.84), '1_2': np.float64(0.77), '1_3': np.float64(0.7), '1_5': np.float64(0.66)}, 'status': 'success', 'total_time': 28.51658296585083, 'fit_time': np.float64(3.928926372528076), 'score_time': np.float64(0.015471792221069336), 'absolute_time': 1746714035.9868145, 'flatten_equalized_odds_ratio': '0.34_0.69_0.56_0.22_0.0', 'flatten_balanced_accuracy': '0.63_0.62_0.6_0.64_0.64'}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
115
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 16, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 7}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'equalized_odds_ratio': np.float64(0.2278031329070438), 'balanced_accuracy': np.float64(0.6775088808453642), 'by_group': {'0_0': np.float64(0.51), '0_2': np.float64(0.5), '0_3': np.float64(0.23), '1_0': np.float64(1.0), '1_2': np.float64(0.6), '1_3': np.float64(0.58), '1_5': np.float64(0.5)}, 'status': 'success', 'total_time': 2.828521251678467, 'fit_time': np.float64(0.1466808319091797), 'score_time': np.float64(0.160949182510376), 'absolute_time': 1746714038.9778433, 'flatten_equalized_odds_ratio': '0.1_0.42_0.11_0.22_0.3', 'flatten_balanced_accuracy': '0.68_0.68_0.67_0.68_0.68'}
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')} was NaN

116
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': np.float64(0.5055138522701631), 'by_group': {'0_0': np.float64(0.66), '0_2': np.float64(0.79), '0_3': np.float64(0.5), '1_0': np.float64(0.84), '1_2': np.float64(0.81), '1_3': np.float64(1.0), '1_5': np.float64(0.73)}, 'status': 'fail', 'total_time': 24.84607720375061, 'fit_time': np.float64(3.990452194213867), 'score_time': np.float64(0.014605712890625), 'absolute_time': 1746714063.9930747, 'flatten_equalized_odds_ratio': '1.0_nan_0.0_nan_nan', 'flatten_balanced_accuracy': '0.5_0.5_0.53_0.5_0.5'}
AutoML: optimization done.
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
AutoML: miner done.
AutoML: export done.
Here is the standard output/error of the command:

Here is the standard output/error of the command:

Here is the standard output/error of the command:

hamlet_759580046
AutoML execution ended
