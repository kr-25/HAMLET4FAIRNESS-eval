Sensitive groups ready!
Theory ready!
Theory:
step(normalization) :- true.
step(features) :- true.
step(mitigation) :- true.
step(rebalancing) :- true.
step(classification) :- true.
operator(normalization, power_transformer) :- true.
operator(normalization, robust_scaler) :- true.
operator(normalization, standard) :- true.
operator(normalization, minmax) :- true.
operator(features, select_k_best) :- true.
operator(features, pca) :- true.
operator(mitigation, corr_remover) :- true.
operator(mitigation, lfr) :- true.
operator(rebalancing, near_miss) :- true.
operator(rebalancing, smote) :- true.
operator(classification, knn) :- true.
operator(classification, nn) :- true.
operator(classification, rf) :- true.
hyperparameter(robust_scaler, with_centering, choice) :- true.
hyperparameter(robust_scaler, with_scaling, choice) :- true.
hyperparameter(standard, with_mean, choice) :- true.
hyperparameter(standard, with_std, choice) :- true.
hyperparameter(select_k_best, k, randint) :- true.
hyperparameter(pca, n_components, randint) :- true.
hyperparameter(corr_remover, alpha, choice) :- true.
hyperparameter(lfr, n_prototypes, choice) :- true.
hyperparameter(lfr, reconstruct_weight, choice) :- true.
hyperparameter(lfr, fairness_weight, choice) :- true.
hyperparameter(near_miss, n_neighbors, randint) :- true.
hyperparameter(smote, k_neighbors, randint) :- true.
hyperparameter(knn, n_neighbors, randint) :- true.
hyperparameter(knn, weights, choice) :- true.
hyperparameter(knn, metric, choice) :- true.
hyperparameter(nn, n_hidden_layers, choice) :- true.
hyperparameter(nn, n_neurons, choice) :- true.
hyperparameter(nn, activation, choice) :- true.
hyperparameter(nn, solver, choice) :- true.
hyperparameter(nn, alpha, choice) :- true.
hyperparameter(nn, learning_rate, choice) :- true.
hyperparameter(rf, n_estimators, choice) :- true.
hyperparameter(rf, max_depth, randint) :- true.
hyperparameter(rf, max_features, randint) :- true.
hyperparameter(rf, min_samples_split, randint) :- true.
hyperparameter(rf, max_leaf_nodes, randint) :- true.
hyperparameter(rf, bootstrap, choice) :- true.
hyperparameter(rf, criterion, choice) :- true.
domain(robust_scaler, with_centering, [true, false]) :- true.
domain(robust_scaler, with_scaling, [true, false]) :- true.
domain(standard, with_mean, [true, false]) :- true.
domain(standard, with_std, [true, false]) :- true.
domain(select_k_best, k, [1, 10]) :- true.
domain(pca, n_components, [1, 8]) :- true.
domain(corr_remover, alpha, [0.25, 0.5, 0.75, 1.0]) :- true.
domain(lfr, n_prototypes, [10, 50, 100, 200]) :- true.
domain(lfr, reconstruct_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(lfr, fairness_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(near_miss, n_neighbors, [1, 4]) :- true.
domain(smote, k_neighbors, [5, 8]) :- true.
domain(knn, n_neighbors, [3, 20]) :- true.
domain(knn, weights, [uniform, distance]) :- true.
domain(knn, metric, [minkowski, euclidean, manhattan]) :- true.
domain(nn, n_hidden_layers, [1, 5, 10, 20]) :- true.
domain(nn, n_neurons, [5, 10, 25, 50]) :- true.
domain(nn, activation, [logistic, tanh, relu]) :- true.
domain(nn, solver, [lbfgs, sgd, adam]) :- true.
domain(nn, alpha, [0.0001, 0.001, 0.01, 0.00001]) :- true.
domain(nn, learning_rate, [constant, invscaling, adaptive]) :- true.
domain(rf, n_estimators, [10, 25, 50, 75, 100]) :- true.
domain(rf, max_depth, [1, 5]) :- true.
domain(rf, max_features, [1, 4]) :- true.
domain(rf, min_samples_split, [2, 6]) :- true.
domain(rf, max_leaf_nodes, [2, 6]) :- true.
domain(rf, bootstrap, [true, false]) :- true.
domain(rf, criterion, [gini, entropy]) :- true.
':=>'(c1, mandatory([mitigation], classification)) :- true.
':=>'(c3, mandatory_order([mitigation, features], classification)) :- true.
':=>'(c4, mandatory_order([mitigation, normalization], classification)) :- true.
':=>'(c5, mandatory([normalization], knn)) :- true.
':=>'(c6, mandatory([normalization], nn)) :- true.
dataset(compass) :- true.
metric(balanced_accuracy) :- true.
fairness_metric(equalized_odds_ratio) :- true.
sensitive_feature(sex, [0, 1]) :- true.
sensitive_feature(race, [0, 1, 2, 3, 4, 5]) :- true.
pipeline([Step_1_0], ZZ_0) :- (step(Step_1_0), '\\='(Step_1_0, classification), operator(classification, ZZ_0)).
pipeline([Step_1_1, Step_2_0], ZZ_1) :- (step(Step_1_1), step(Step_2_0), '\\='(Step_1_1, classification), '\\='(Step_2_0, classification), '\\='(Step_1_1, Step_2_0), operator(classification, ZZ_1)).
pipeline([Step_1_2, Step_2_1, Step_3_0], ZZ_2) :- (step(Step_1_2), step(Step_2_1), step(Step_3_0), '\\='(Step_1_2, classification), '\\='(Step_2_1, classification), '\\='(Step_3_0, classification), '\\='(Step_1_2, Step_2_1), '\\='(Step_1_2, Step_3_0), '\\='(Step_2_1, Step_3_0), operator(classification, ZZ_2)).
pipeline([Step_1_3, Step_2_2, Step_3_1, Step_4_0], ZZ_3) :- (step(Step_1_3), step(Step_2_2), step(Step_3_1), step(Step_4_0), '\\='(Step_1_3, classification), '\\='(Step_2_2, classification), '\\='(Step_3_1, classification), '\\='(Step_4_0, classification), '\\='(Step_1_3, Step_2_2), '\\='(Step_1_3, Step_3_1), '\\='(Step_1_3, Step_4_0), '\\='(Step_2_2, Step_3_1), '\\='(Step_2_2, Step_4_0), '\\='(Step_3_1, Step_4_0), operator(classification, ZZ_3)).
':=>'(p424531, sensitive_group([0])) :- true.
':=>'(p918089, sensitive_group([1])) :- true.
':=>'(p386559, sensitive_group([0])) :- true.
':=>'(p82428, sensitive_group([1])) :- true.
':=>'(p962356, sensitive_group([2])) :- true.
':=>'(p588437, sensitive_group([3])) :- true.
':=>'(p691937, sensitive_group([4])) :- true.
':=>'(p534947, sensitive_group([5])) :- true.
':=>'(p530528, sensitive_group([0, 0])) :- true.
':=>'(p490915, sensitive_group([0, 1])) :- true.
':=>'(p687656, sensitive_group([0, 2])) :- true.
':=>'(p255367, sensitive_group([0, 3])) :- true.
':=>'(p304116, sensitive_group([0, 4])) :- true.
':=>'(p31597, sensitive_group([0, 5])) :- true.
':=>'(p182734, sensitive_group([1, 0])) :- true.
':=>'(p901427, sensitive_group([1, 1])) :- true.
':=>'(p93322, sensitive_group([1, 2])) :- true.
':=>'(p593725, sensitive_group([1, 3])) :- true.
':=>'(p622919, sensitive_group([1, 4])) :- true.
':=>'(p156895, sensitive_group([1, 5])) :- true.
':=>'(p244868, pipeline([], knn)) :- true.
':=>'(p246208, pipeline([], knn)) :- true.
':=>'(p162942, pipeline([], nn)) :- true.
':=>'(p980398, pipeline([], nn)) :- true.
':=>'(p68934, pipeline([], rf)) :- true.
':=>'(p54886, pipeline([normalization], knn)) :- true.
':=>'(p878560, pipeline([normalization], nn)) :- true.
':=>'(p678152, pipeline([normalization], rf)) :- true.
':=>'(p927861, pipeline([features], knn)) :- true.
':=>'(p795458, pipeline([features], knn)) :- true.
':=>'(p967885, pipeline([features], nn)) :- true.
':=>'(p813209, pipeline([features], nn)) :- true.
':=>'(p900629, pipeline([features], rf)) :- true.
':=>'(p293091, pipeline([mitigation], knn)) :- true.
':=>'(p279201, pipeline([mitigation], nn)) :- true.
':=>'(p409942, pipeline([rebalancing], knn)) :- true.
':=>'(p576062, pipeline([rebalancing], knn)) :- true.
':=>'(p698938, pipeline([rebalancing], nn)) :- true.
':=>'(p21866, pipeline([rebalancing], nn)) :- true.
':=>'(p748330, pipeline([rebalancing], rf)) :- true.
':=>'(p814588, pipeline([normalization, features], knn)) :- true.
':=>'(p51019, pipeline([normalization, features], nn)) :- true.
':=>'(p134225, pipeline([normalization, features], rf)) :- true.
':=>'(p898392, pipeline([normalization, mitigation], knn)) :- true.
':=>'(p828567, pipeline([normalization, mitigation], nn)) :- true.
':=>'(p262143, pipeline([normalization, mitigation], rf)) :- true.
':=>'(p662209, pipeline([normalization, rebalancing], knn)) :- true.
':=>'(p289495, pipeline([normalization, rebalancing], nn)) :- true.
':=>'(p14358, pipeline([normalization, rebalancing], rf)) :- true.
':=>'(p140490, pipeline([features, normalization], knn)) :- true.
':=>'(p458489, pipeline([features, normalization], nn)) :- true.
':=>'(p303511, pipeline([features, normalization], rf)) :- true.
':=>'(p144049, pipeline([features, mitigation], knn)) :- true.
':=>'(p253184, pipeline([features, mitigation], knn)) :- true.
':=>'(p242052, pipeline([features, mitigation], nn)) :- true.
':=>'(p798362, pipeline([features, mitigation], nn)) :- true.
':=>'(p690145, pipeline([features, mitigation], rf)) :- true.
':=>'(p48322, pipeline([features, rebalancing], knn)) :- true.
':=>'(p606711, pipeline([features, rebalancing], knn)) :- true.
':=>'(p845222, pipeline([features, rebalancing], nn)) :- true.
':=>'(p382582, pipeline([features, rebalancing], nn)) :- true.
':=>'(p866349, pipeline([features, rebalancing], rf)) :- true.
':=>'(p838611, pipeline([mitigation, features], knn)) :- true.
':=>'(p12865, pipeline([mitigation, features], nn)) :- true.
':=>'(p43657, pipeline([mitigation, rebalancing], knn)) :- true.
':=>'(p601985, pipeline([mitigation, rebalancing], nn)) :- true.
':=>'(p35559, pipeline([rebalancing, normalization], knn)) :- true.
':=>'(p440816, pipeline([rebalancing, normalization], nn)) :- true.
':=>'(p675194, pipeline([rebalancing, normalization], rf)) :- true.
':=>'(p726452, pipeline([rebalancing, features], knn)) :- true.
':=>'(p358292, pipeline([rebalancing, features], knn)) :- true.
':=>'(p67170, pipeline([rebalancing, features], nn)) :- true.
':=>'(p112218, pipeline([rebalancing, features], nn)) :- true.
':=>'(p366457, pipeline([rebalancing, features], rf)) :- true.
':=>'(p547244, pipeline([rebalancing, mitigation], knn)) :- true.
':=>'(p59211, pipeline([rebalancing, mitigation], nn)) :- true.
':=>'(p590445, pipeline([normalization, features, mitigation], knn)) :- true.
':=>'(p424946, pipeline([normalization, features, mitigation], knn)) :- true.
':=>'(p742437, pipeline([normalization, features, mitigation], nn)) :- true.
':=>'(p464203, pipeline([normalization, features, mitigation], nn)) :- true.
':=>'(p526758, pipeline([normalization, features, mitigation], rf)) :- true.
':=>'(p989710, pipeline([normalization, features, mitigation], rf)) :- true.
':=>'(p572114, pipeline([normalization, features, rebalancing], knn)) :- true.
':=>'(p495988, pipeline([normalization, features, rebalancing], nn)) :- true.
':=>'(p855253, pipeline([normalization, features, rebalancing], rf)) :- true.
':=>'(p619620, pipeline([normalization, mitigation, features], knn)) :- true.
':=>'(p431163, pipeline([normalization, mitigation, features], nn)) :- true.
':=>'(p605924, pipeline([normalization, mitigation, features], rf)) :- true.
':=>'(p579319, pipeline([normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p285858, pipeline([normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p59950, pipeline([normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p403576, pipeline([normalization, rebalancing, features], knn)) :- true.
':=>'(p565179, pipeline([normalization, rebalancing, features], nn)) :- true.
':=>'(p786169, pipeline([normalization, rebalancing, features], rf)) :- true.
':=>'(p728116, pipeline([normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p686686, pipeline([normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p68454, pipeline([normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p382325, pipeline([features, normalization, mitigation], knn)) :- true.
':=>'(p553065, pipeline([features, normalization, mitigation], knn)) :- true.
':=>'(p528891, pipeline([features, normalization, mitigation], nn)) :- true.
':=>'(p424695, pipeline([features, normalization, mitigation], nn)) :- true.
':=>'(p35566, pipeline([features, normalization, mitigation], rf)) :- true.
':=>'(p321199, pipeline([features, normalization, mitigation], rf)) :- true.
':=>'(p694069, pipeline([features, normalization, rebalancing], knn)) :- true.
':=>'(p100807, pipeline([features, normalization, rebalancing], nn)) :- true.
':=>'(p365530, pipeline([features, normalization, rebalancing], rf)) :- true.
':=>'(p147840, pipeline([features, mitigation, normalization], knn)) :- true.
':=>'(p611950, pipeline([features, mitigation, normalization], nn)) :- true.
':=>'(p840204, pipeline([features, mitigation, normalization], rf)) :- true.
':=>'(p825944, pipeline([features, mitigation, rebalancing], knn)) :- true.
':=>'(p517235, pipeline([features, mitigation, rebalancing], knn)) :- true.
':=>'(p86218, pipeline([features, mitigation, rebalancing], nn)) :- true.
':=>'(p361995, pipeline([features, mitigation, rebalancing], nn)) :- true.
':=>'(p315360, pipeline([features, mitigation, rebalancing], rf)) :- true.
':=>'(p131425, pipeline([features, rebalancing, normalization], knn)) :- true.
':=>'(p740297, pipeline([features, rebalancing, normalization], nn)) :- true.
':=>'(p710234, pipeline([features, rebalancing, normalization], rf)) :- true.
':=>'(p429475, pipeline([features, rebalancing, mitigation], knn)) :- true.
':=>'(p114619, pipeline([features, rebalancing, mitigation], knn)) :- true.
':=>'(p886315, pipeline([features, rebalancing, mitigation], nn)) :- true.
':=>'(p408139, pipeline([features, rebalancing, mitigation], nn)) :- true.
':=>'(p104027, pipeline([features, rebalancing, mitigation], rf)) :- true.
':=>'(p698054, pipeline([mitigation, features, rebalancing], knn)) :- true.
':=>'(p490717, pipeline([mitigation, features, rebalancing], nn)) :- true.
':=>'(p700279, pipeline([mitigation, rebalancing, features], knn)) :- true.
':=>'(p135268, pipeline([mitigation, rebalancing, features], nn)) :- true.
':=>'(p29286, pipeline([rebalancing, normalization, features], knn)) :- true.
':=>'(p18354, pipeline([rebalancing, normalization, features], nn)) :- true.
':=>'(p911307, pipeline([rebalancing, normalization, features], rf)) :- true.
':=>'(p175297, pipeline([rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p813235, pipeline([rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p790962, pipeline([rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p686547, pipeline([rebalancing, features, normalization], knn)) :- true.
':=>'(p828419, pipeline([rebalancing, features, normalization], nn)) :- true.
':=>'(p923408, pipeline([rebalancing, features, normalization], rf)) :- true.
':=>'(p126727, pipeline([rebalancing, features, mitigation], knn)) :- true.
':=>'(p210106, pipeline([rebalancing, features, mitigation], knn)) :- true.
':=>'(p342534, pipeline([rebalancing, features, mitigation], nn)) :- true.
':=>'(p489072, pipeline([rebalancing, features, mitigation], nn)) :- true.
':=>'(p301022, pipeline([rebalancing, features, mitigation], rf)) :- true.
':=>'(p853190, pipeline([rebalancing, mitigation, features], knn)) :- true.
':=>'(p190991, pipeline([rebalancing, mitigation, features], nn)) :- true.
':=>'(p451396, pipeline([normalization, features, mitigation, rebalancing], knn)) :- true.
':=>'(p590348, pipeline([normalization, features, mitigation, rebalancing], knn)) :- true.
':=>'(p366040, pipeline([normalization, features, mitigation, rebalancing], nn)) :- true.
':=>'(p604769, pipeline([normalization, features, mitigation, rebalancing], nn)) :- true.
':=>'(p639326, pipeline([normalization, features, mitigation, rebalancing], rf)) :- true.
':=>'(p902282, pipeline([normalization, features, mitigation, rebalancing], rf)) :- true.
':=>'(p334679, pipeline([normalization, features, rebalancing, mitigation], knn)) :- true.
':=>'(p939972, pipeline([normalization, features, rebalancing, mitigation], knn)) :- true.
':=>'(p657054, pipeline([normalization, features, rebalancing, mitigation], nn)) :- true.
':=>'(p729999, pipeline([normalization, features, rebalancing, mitigation], nn)) :- true.
':=>'(p253408, pipeline([normalization, features, rebalancing, mitigation], rf)) :- true.
':=>'(p985595, pipeline([normalization, features, rebalancing, mitigation], rf)) :- true.
':=>'(p29066, pipeline([normalization, mitigation, features, rebalancing], knn)) :- true.
':=>'(p911596, pipeline([normalization, mitigation, features, rebalancing], nn)) :- true.
':=>'(p731392, pipeline([normalization, mitigation, features, rebalancing], rf)) :- true.
':=>'(p220281, pipeline([normalization, mitigation, rebalancing, features], knn)) :- true.
':=>'(p602647, pipeline([normalization, mitigation, rebalancing, features], nn)) :- true.
':=>'(p826091, pipeline([normalization, mitigation, rebalancing, features], rf)) :- true.
':=>'(p420631, pipeline([normalization, rebalancing, features, mitigation], knn)) :- true.
':=>'(p807231, pipeline([normalization, rebalancing, features, mitigation], knn)) :- true.
':=>'(p643170, pipeline([normalization, rebalancing, features, mitigation], nn)) :- true.
':=>'(p148021, pipeline([normalization, rebalancing, features, mitigation], nn)) :- true.
':=>'(p910895, pipeline([normalization, rebalancing, features, mitigation], rf)) :- true.
':=>'(p42654, pipeline([normalization, rebalancing, features, mitigation], rf)) :- true.
':=>'(p150324, pipeline([normalization, rebalancing, mitigation, features], knn)) :- true.
':=>'(p251265, pipeline([normalization, rebalancing, mitigation, features], nn)) :- true.
':=>'(p134405, pipeline([normalization, rebalancing, mitigation, features], rf)) :- true.
':=>'(p199335, pipeline([features, normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p932882, pipeline([features, normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p861950, pipeline([features, normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p805132, pipeline([features, normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p466552, pipeline([features, normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p621162, pipeline([features, normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p538815, pipeline([features, normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p766270, pipeline([features, normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p225225, pipeline([features, normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p735999, pipeline([features, normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p529101, pipeline([features, normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p835332, pipeline([features, normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p883559, pipeline([features, mitigation, normalization, rebalancing], knn)) :- true.
':=>'(p837745, pipeline([features, mitigation, normalization, rebalancing], nn)) :- true.
':=>'(p968951, pipeline([features, mitigation, normalization, rebalancing], rf)) :- true.
':=>'(p239626, pipeline([features, mitigation, rebalancing, normalization], knn)) :- true.
':=>'(p585465, pipeline([features, mitigation, rebalancing, normalization], nn)) :- true.
':=>'(p114492, pipeline([features, mitigation, rebalancing, normalization], rf)) :- true.
':=>'(p890565, pipeline([features, rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p308043, pipeline([features, rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p112318, pipeline([features, rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p497657, pipeline([features, rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p401163, pipeline([features, rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p878872, pipeline([features, rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p195225, pipeline([features, rebalancing, mitigation, normalization], knn)) :- true.
':=>'(p902748, pipeline([features, rebalancing, mitigation, normalization], nn)) :- true.
':=>'(p935994, pipeline([features, rebalancing, mitigation, normalization], rf)) :- true.
':=>'(p342597, pipeline([rebalancing, normalization, features, mitigation], knn)) :- true.
':=>'(p207166, pipeline([rebalancing, normalization, features, mitigation], knn)) :- true.
':=>'(p526280, pipeline([rebalancing, normalization, features, mitigation], nn)) :- true.
':=>'(p396190, pipeline([rebalancing, normalization, features, mitigation], nn)) :- true.
':=>'(p928222, pipeline([rebalancing, normalization, features, mitigation], rf)) :- true.
':=>'(p50114, pipeline([rebalancing, normalization, features, mitigation], rf)) :- true.
':=>'(p213816, pipeline([rebalancing, normalization, mitigation, features], knn)) :- true.
':=>'(p207002, pipeline([rebalancing, normalization, mitigation, features], nn)) :- true.
':=>'(p608469, pipeline([rebalancing, normalization, mitigation, features], rf)) :- true.
':=>'(p330415, pipeline([rebalancing, features, normalization, mitigation], knn)) :- true.
':=>'(p355412, pipeline([rebalancing, features, normalization, mitigation], knn)) :- true.
':=>'(p612918, pipeline([rebalancing, features, normalization, mitigation], nn)) :- true.
':=>'(p231014, pipeline([rebalancing, features, normalization, mitigation], nn)) :- true.
':=>'(p543194, pipeline([rebalancing, features, normalization, mitigation], rf)) :- true.
':=>'(p886016, pipeline([rebalancing, features, normalization, mitigation], rf)) :- true.
':=>'(p490020, pipeline([rebalancing, features, mitigation, normalization], knn)) :- true.
':=>'(p686920, pipeline([rebalancing, features, mitigation, normalization], nn)) :- true.
':=>'(p717505, pipeline([rebalancing, features, mitigation, normalization], rf)) :- true.

Checking Config
Exporting Config
Saving Graph
Exporting AutoML input
Exporting Space
Exporting Constraints
Input created for iteration Config(iteration=1, dataset=compass, metric=balanced_accuracy, fairnessMetric=equalized_odds_ratio, sensitiveFeatures=[sex, race], mode=max, batchSize=999999, timeBudget=3600, seed=42)
Here is the standard output/error of the command:

43d8c6f58eff30fae49cabd453ade6541588bc503d56fda6b997629917430d99
Here is the standard output/error of the command:

Here is the standard output/error of the command:

WARNING:root:No module named 'rpy2': FairAdapt will be unavailable. To install, run:
pip install 'aif360[FairAdapt]'
INFO:flaml.tune.searcher.blendsearch:No low-cost partial config given to the search algorithm. For cost-frugal search, consider providing low-cost values for cost-related hps via 'low_cost_partial_config'. More info can be found at https://microsoft.github.io/FLAML/docs/FAQ#about-low_cost_partial_config-in-tune
Trying to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Added successfully: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Trying to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: normalization == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
AutoML: starting optimization.
1
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 3, 'max_leaf_nodes': 4, 'min_samples_split': 2, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.23911797852199515), 'balanced_accuracy': np.float64(0.6868281492474073), 'by_group': {'0_0': np.float64(0.67), '0_2': np.float64(0.6), '0_3': np.float64(0.25), '1_0': np.float64(0.99), '1_2': np.float64(0.58), '1_3': np.float64(0.6), '1_5': np.float64(0.51)}, 'status': 'success', 'total_time': 7.10530686378479, 'fit_time': np.float64(1.3371135234832763), 'score_time': np.float64(0.015676307678222656), 'absolute_time': 1746734735.4813435, 'flatten_equalized_odds_ratio': '0.26_0.39_0.0_0.3_0.25', 'flatten_balanced_accuracy': '0.68_0.7_0.69_0.69_0.67'}
2
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 15, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.15548483885797598), 'balanced_accuracy': np.float64(0.6656167307347565), 'by_group': {'0_0': np.float64(0.42), '0_2': np.float64(0.43), '0_3': np.float64(0.16), '1_0': np.float64(1.0), '1_2': np.float64(0.5), '1_3': np.float64(0.39), '1_5': np.float64(0.4)}, 'status': 'success', 'total_time': 10.701362609863281, 'fit_time': np.float64(0.034312105178833006), 'score_time': np.float64(0.9881371974945068), 'absolute_time': 1746734746.9385083, 'flatten_equalized_odds_ratio': '0.09_0.19_0.1_0.1_0.3', 'flatten_balanced_accuracy': '0.67_0.66_0.65_0.68_0.66'}
3
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_split': 6, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.5254439849722675), 'balanced_accuracy': np.float64(0.6232198832649185), 'by_group': {'0_0': np.float64(0.77), '0_2': np.float64(0.82), '0_3': np.float64(0.53), '1_0': np.float64(0.85), '1_2': np.float64(0.77), '1_3': np.float64(0.72), '1_5': np.float64(0.73)}, 'status': 'success', 'total_time': 366.99212169647217, 'fit_time': np.float64(73.29927406311035), 'score_time': np.float64(0.019678926467895506), 'absolute_time': 1746735113.98092, 'flatten_equalized_odds_ratio': '0.56_0.64_0.61_0.27_0.54', 'flatten_balanced_accuracy': '0.65_0.62_0.61_0.61_0.61'}
4
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 15, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 7}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.08135048231511254), 'balanced_accuracy': np.float64(0.5161259390195657), 'by_group': {'0_0': np.float64(0.46), '0_2': np.float64(0.65), '0_3': np.float64(0.18), '1_0': np.float64(0.59), '1_2': np.float64(0.49), '1_3': np.float64(0.5), '1_5': np.float64(0.61)}, 'status': 'success', 'total_time': 554.2286193370819, 'fit_time': np.float64(72.92820601463318), 'score_time': np.float64(0.2818927764892578), 'absolute_time': 1746735668.2397256, 'flatten_equalized_odds_ratio': '0.0_0.0_0.0_0.41_0.0', 'flatten_balanced_accuracy': '0.51_0.53_0.52_0.51_0.51'}
5
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.2849757846805574), 'balanced_accuracy': np.float64(0.6366176035546823), 'by_group': {'0_0': np.float64(0.7), '0_2': np.float64(0.68), '0_3': np.float64(0.3), '1_0': np.float64(0.8), '1_2': np.float64(0.68), '1_3': np.float64(0.6), '1_5': np.float64(0.53)}, 'status': 'success', 'total_time': 368.23317074775696, 'fit_time': np.float64(73.54206562042236), 'score_time': np.float64(0.0265291690826416), 'absolute_time': 1746736036.500299, 'flatten_equalized_odds_ratio': '0.42_0.25_0.0_0.54_0.21', 'flatten_balanced_accuracy': '0.63_0.64_0.62_0.62_0.67'}
6
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_split': 2, 'n_estimators': np.int64(25)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.43017131231724814), 'balanced_accuracy': np.float64(0.6018455892251271), 'by_group': {'0_0': np.float64(0.8), '0_2': np.float64(0.84), '0_3': np.float64(0.44), '1_0': np.float64(0.85), '1_2': np.float64(0.82), '1_3': np.float64(0.78), '1_5': np.float64(0.78)}, 'status': 'success', 'total_time': 369.06883573532104, 'fit_time': np.float64(73.72371187210084), 'score_time': np.float64(0.01746687889099121), 'absolute_time': 1746736405.6080496, 'flatten_equalized_odds_ratio': '0.97_0.6_0.3_0.28_0.0', 'flatten_balanced_accuracy': '0.51_0.63_0.63_0.61_0.64'}
7
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 3, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.0709090909090909), 'balanced_accuracy': np.float64(0.5084783411171979), 'by_group': {'0_0': np.float64(0.47), '0_2': np.float64(0.51), '0_3': np.float64(0.15), '1_0': np.float64(0.5), '1_2': np.float64(0.57), '1_3': np.float64(0.4), '1_5': np.float64(0.25)}, 'status': 'success', 'total_time': 456.0226500034332, 'fit_time': np.float64(90.71024050712586), 'score_time': np.float64(0.23579668998718262), 'absolute_time': 1746736861.6633058, 'flatten_equalized_odds_ratio': '0.0_0.0_0.0_0.0_0.35', 'flatten_balanced_accuracy': '0.51_0.51_0.51_0.5_0.51'}
8
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 6, 'min_samples_split': 3, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'equalized_odds_ratio': np.float64(0.2676052861796314), 'balanced_accuracy': np.float64(0.6340723415231164), 'by_group': {'0_0': np.float64(0.66), '0_2': np.float64(0.72), '0_3': np.float64(0.29), '1_0': np.float64(0.78), '1_2': np.float64(0.73), '1_3': np.float64(0.66), '1_5': np.float64(0.51)}, 'status': 'success', 'total_time': 315.4909727573395, 'fit_time': np.float64(62.99378914833069), 'score_time': np.float64(0.026495599746704103), 'absolute_time': 1746737177.1866047, 'flatten_equalized_odds_ratio': '0.35_0.24_0.0_0.58_0.17', 'flatten_balanced_accuracy': '0.64_0.64_0.62_0.63_0.64'}
9
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 6, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.27628721746925194), 'balanced_accuracy': np.float64(0.6478985598961098), 'by_group': {'0_0': np.float64(0.56), '0_2': np.float64(0.5), '0_3': np.float64(0.28), '1_0': np.float64(1.0), '1_2': np.float64(0.62), '1_3': np.float64(0.61), '1_5': np.float64(0.48)}, 'status': 'success', 'total_time': 2.453934669494629, 'fit_time': np.float64(0.17559213638305665), 'score_time': np.float64(0.13234171867370606), 'absolute_time': 1746737179.6738448, 'flatten_equalized_odds_ratio': '0.35_0.42_0.0_0.43_0.19', 'flatten_balanced_accuracy': '0.66_0.64_0.65_0.65_0.64'}
10
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 6, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'equalized_odds_ratio': np.float64(0.24621369167027227), 'balanced_accuracy': np.float64(0.6322388934245231), 'by_group': {'0_0': np.float64(0.65), '0_2': np.float64(0.71), '0_3': np.float64(0.28), '1_0': np.float64(0.76), '1_2': np.float64(0.71), '1_3': np.float64(0.65), '1_5': np.float64(0.52)}, 'status': 'success', 'total_time': 407.50827646255493, 'fit_time': np.float64(81.3996262550354), 'score_time': np.float64(0.021435546875), 'absolute_time': 1746737588.0241082, 'flatten_equalized_odds_ratio': '0.4_0.22_0.0_0.61_0.0', 'flatten_balanced_accuracy': '0.62_0.65_0.63_0.63_0.63'}
11
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 1, 'max_leaf_nodes': 4, 'min_samples_split': 6, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.2366541650108238), 'balanced_accuracy': np.float64(0.6309875524647294), 'by_group': {'0_0': np.float64(0.68), '0_2': np.float64(0.7), '0_3': np.float64(0.26), '1_0': np.float64(0.79), '1_2': np.float64(0.73), '1_3': np.float64(0.66), '1_5': np.float64(0.54)}, 'status': 'success', 'total_time': 585.8348650932312, 'fit_time': np.float64(97.00777888298035), 'score_time': np.float64(0.02127528190612793), 'absolute_time': 1746738173.9055429, 'flatten_equalized_odds_ratio': '0.34_0.26_0.0_0.59_0.0', 'flatten_balanced_accuracy': '0.63_0.63_0.64_0.62_0.63'}
12
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 6, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.055089820359281436), 'balanced_accuracy': np.float64(0.5080226462971621), 'by_group': {'0_0': np.float64(0.39), '0_2': np.float64(0.51), '0_3': np.float64(0.18), '1_0': np.float64(0.58), '1_2': np.float64(0.45), '1_3': np.float64(0.5), '1_5': np.float64(0.47)}, 'status': 'success', 'total_time': 462.1603193283081, 'fit_time': np.float64(74.80054478645324), 'score_time': np.float64(0.13531112670898438), 'absolute_time': 1746738636.1027818, 'flatten_equalized_odds_ratio': '0.0_0.0_0.0_0.0_0.28', 'flatten_balanced_accuracy': '0.5_0.5_0.51_0.52_0.5'}
AutoML: optimization done.
AutoML: miner done.
AutoML: export done.
Here is the standard output/error of the command:

Here is the standard output/error of the command:

Here is the standard output/error of the command:

hamlet_1144868005
AutoML execution ended
