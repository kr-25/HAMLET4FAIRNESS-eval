Sensitive groups ready!
Theory ready!
Theory:
step(normalization) :- true.
step(features) :- true.
step(mitigation) :- true.
step(rebalancing) :- true.
step(classification) :- true.
operator(normalization, power_transformer) :- true.
operator(normalization, robust_scaler) :- true.
operator(normalization, standard) :- true.
operator(normalization, minmax) :- true.
operator(features, select_k_best) :- true.
operator(features, pca) :- true.
operator(mitigation, corr_remover) :- true.
operator(mitigation, lfr) :- true.
operator(rebalancing, near_miss) :- true.
operator(rebalancing, smote) :- true.
operator(classification, knn) :- true.
operator(classification, nn) :- true.
operator(classification, rf) :- true.
hyperparameter(robust_scaler, with_centering, choice) :- true.
hyperparameter(robust_scaler, with_scaling, choice) :- true.
hyperparameter(standard, with_mean, choice) :- true.
hyperparameter(standard, with_std, choice) :- true.
hyperparameter(select_k_best, k, randint) :- true.
hyperparameter(pca, n_components, randint) :- true.
hyperparameter(corr_remover, alpha, choice) :- true.
hyperparameter(lfr, n_prototypes, choice) :- true.
hyperparameter(lfr, reconstruct_weight, choice) :- true.
hyperparameter(lfr, fairness_weight, choice) :- true.
hyperparameter(near_miss, n_neighbors, randint) :- true.
hyperparameter(smote, k_neighbors, randint) :- true.
hyperparameter(knn, n_neighbors, randint) :- true.
hyperparameter(knn, weights, choice) :- true.
hyperparameter(knn, metric, choice) :- true.
hyperparameter(nn, n_hidden_layers, choice) :- true.
hyperparameter(nn, n_neurons, choice) :- true.
hyperparameter(nn, activation, choice) :- true.
hyperparameter(nn, solver, choice) :- true.
hyperparameter(nn, alpha, choice) :- true.
hyperparameter(nn, learning_rate, choice) :- true.
hyperparameter(rf, n_estimators, choice) :- true.
hyperparameter(rf, max_depth, randint) :- true.
hyperparameter(rf, max_features, randint) :- true.
hyperparameter(rf, min_samples_split, randint) :- true.
hyperparameter(rf, max_leaf_nodes, randint) :- true.
hyperparameter(rf, bootstrap, choice) :- true.
hyperparameter(rf, criterion, choice) :- true.
domain(robust_scaler, with_centering, [true, false]) :- true.
domain(robust_scaler, with_scaling, [true, false]) :- true.
domain(standard, with_mean, [true, false]) :- true.
domain(standard, with_std, [true, false]) :- true.
domain(select_k_best, k, [1, 10]) :- true.
domain(pca, n_components, [1, 8]) :- true.
domain(corr_remover, alpha, [0.25, 0.5, 0.75, 1.0]) :- true.
domain(lfr, n_prototypes, [10, 50, 100, 200]) :- true.
domain(lfr, reconstruct_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(lfr, fairness_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(near_miss, n_neighbors, [1, 4]) :- true.
domain(smote, k_neighbors, [5, 8]) :- true.
domain(knn, n_neighbors, [3, 20]) :- true.
domain(knn, weights, [uniform, distance]) :- true.
domain(knn, metric, [minkowski, euclidean, manhattan]) :- true.
domain(nn, n_hidden_layers, [1, 5, 10, 20]) :- true.
domain(nn, n_neurons, [5, 10, 25, 50]) :- true.
domain(nn, activation, [logistic, tanh, relu]) :- true.
domain(nn, solver, [lbfgs, sgd, adam]) :- true.
domain(nn, alpha, [0.0001, 0.001, 0.01, 0.00001]) :- true.
domain(nn, learning_rate, [constant, invscaling, adaptive]) :- true.
domain(rf, n_estimators, [10, 25, 50, 75, 100]) :- true.
domain(rf, max_depth, [1, 5]) :- true.
domain(rf, max_features, [1, 4]) :- true.
domain(rf, min_samples_split, [2, 6]) :- true.
domain(rf, max_leaf_nodes, [2, 6]) :- true.
domain(rf, bootstrap, [true, false]) :- true.
domain(rf, criterion, [gini, entropy]) :- true.
':=>'(c1, mandatory([mitigation], classification)) :- true.
':=>'(c3, mandatory_order([mitigation, features], classification)) :- true.
':=>'(c4, mandatory_order([mitigation, normalization], classification)) :- true.
':=>'(c5, mandatory([normalization], knn)) :- true.
':=>'(c6, mandatory([normalization], nn)) :- true.
dataset('credit-g') :- true.
metric(balanced_accuracy) :- true.
fairness_metric(equalized_odds_ratio) :- true.
sensitive_feature(personal_status, [single, 'div/dep/mar', 'mar/wid']) :- true.
sensitive_feature(sex, [male, female]) :- true.
':=>'(mc0, unbalanced_dataset) :- true.
pipeline([Step_1_0], ZZ_0) :- (step(Step_1_0), '\\='(Step_1_0, classification), operator(classification, ZZ_0)).
pipeline([Step_1_1, Step_2_0], ZZ_1) :- (step(Step_1_1), step(Step_2_0), '\\='(Step_1_1, classification), '\\='(Step_2_0, classification), '\\='(Step_1_1, Step_2_0), operator(classification, ZZ_1)).
pipeline([Step_1_2, Step_2_1, Step_3_0], ZZ_2) :- (step(Step_1_2), step(Step_2_1), step(Step_3_0), '\\='(Step_1_2, classification), '\\='(Step_2_1, classification), '\\='(Step_3_0, classification), '\\='(Step_1_2, Step_2_1), '\\='(Step_1_2, Step_3_0), '\\='(Step_2_1, Step_3_0), operator(classification, ZZ_2)).
pipeline([Step_1_3, Step_2_2, Step_3_1, Step_4_0], ZZ_3) :- (step(Step_1_3), step(Step_2_2), step(Step_3_1), step(Step_4_0), '\\='(Step_1_3, classification), '\\='(Step_2_2, classification), '\\='(Step_3_1, classification), '\\='(Step_4_0, classification), '\\='(Step_1_3, Step_2_2), '\\='(Step_1_3, Step_3_1), '\\='(Step_1_3, Step_4_0), '\\='(Step_2_2, Step_3_1), '\\='(Step_2_2, Step_4_0), '\\='(Step_3_1, Step_4_0), operator(classification, ZZ_3)).
':=>'(p257413, sensitive_group([single])) :- true.
':=>'(p627700, sensitive_group(['div/dep/mar'])) :- true.
':=>'(p281495, sensitive_group(['mar/wid'])) :- true.
':=>'(p125746, sensitive_group([male])) :- true.
':=>'(p715514, sensitive_group([female])) :- true.
':=>'(p50165, sensitive_group([single, male])) :- true.
':=>'(p294134, sensitive_group([single, female])) :- true.
':=>'(p972556, sensitive_group(['div/dep/mar', male])) :- true.
':=>'(p806883, sensitive_group(['div/dep/mar', female])) :- true.
':=>'(p639517, sensitive_group(['mar/wid', male])) :- true.
':=>'(p415196, sensitive_group(['mar/wid', female])) :- true.
':=>'(p387606, pipeline([], knn)) :- true.
':=>'(p750495, pipeline([], knn)) :- true.
':=>'(p428915, pipeline([], nn)) :- true.
':=>'(p497466, pipeline([], nn)) :- true.
':=>'(p860712, pipeline([], rf)) :- true.
':=>'(p585217, pipeline([normalization], knn)) :- true.
':=>'(p705604, pipeline([normalization], nn)) :- true.
':=>'(p601039, pipeline([normalization], rf)) :- true.
':=>'(p555060, pipeline([features], knn)) :- true.
':=>'(p893512, pipeline([features], knn)) :- true.
':=>'(p49532, pipeline([features], nn)) :- true.
':=>'(p902627, pipeline([features], nn)) :- true.
':=>'(p749318, pipeline([features], rf)) :- true.
':=>'(p532677, pipeline([mitigation], knn)) :- true.
':=>'(p212729, pipeline([mitigation], nn)) :- true.
':=>'(p797949, pipeline([rebalancing], knn)) :- true.
':=>'(p958122, pipeline([rebalancing], knn)) :- true.
':=>'(p863396, pipeline([rebalancing], nn)) :- true.
':=>'(p933196, pipeline([rebalancing], nn)) :- true.
':=>'(p46035, pipeline([rebalancing], rf)) :- true.
':=>'(p889959, pipeline([normalization, features], knn)) :- true.
':=>'(p311397, pipeline([normalization, features], nn)) :- true.
':=>'(p493197, pipeline([normalization, features], rf)) :- true.
':=>'(p391354, pipeline([normalization, mitigation], knn)) :- true.
':=>'(p707627, pipeline([normalization, mitigation], nn)) :- true.
':=>'(p820099, pipeline([normalization, mitigation], rf)) :- true.
':=>'(p97724, pipeline([normalization, rebalancing], knn)) :- true.
':=>'(p316524, pipeline([normalization, rebalancing], nn)) :- true.
':=>'(p585844, pipeline([normalization, rebalancing], rf)) :- true.
':=>'(p585830, pipeline([features, normalization], knn)) :- true.
':=>'(p300619, pipeline([features, normalization], nn)) :- true.
':=>'(p626404, pipeline([features, normalization], rf)) :- true.
':=>'(p663037, pipeline([features, mitigation], knn)) :- true.
':=>'(p764807, pipeline([features, mitigation], knn)) :- true.
':=>'(p960563, pipeline([features, mitigation], nn)) :- true.
':=>'(p388425, pipeline([features, mitigation], nn)) :- true.
':=>'(p852443, pipeline([features, mitigation], rf)) :- true.
':=>'(p761096, pipeline([features, rebalancing], knn)) :- true.
':=>'(p112096, pipeline([features, rebalancing], knn)) :- true.
':=>'(p602238, pipeline([features, rebalancing], nn)) :- true.
':=>'(p246422, pipeline([features, rebalancing], nn)) :- true.
':=>'(p454362, pipeline([features, rebalancing], rf)) :- true.
':=>'(p397074, pipeline([mitigation, features], knn)) :- true.
':=>'(p930310, pipeline([mitigation, features], nn)) :- true.
':=>'(p200710, pipeline([mitigation, rebalancing], knn)) :- true.
':=>'(p605269, pipeline([mitigation, rebalancing], nn)) :- true.
':=>'(p530881, pipeline([rebalancing, normalization], knn)) :- true.
':=>'(p320902, pipeline([rebalancing, normalization], nn)) :- true.
':=>'(p180577, pipeline([rebalancing, normalization], rf)) :- true.
':=>'(p84491, pipeline([rebalancing, features], knn)) :- true.
':=>'(p976369, pipeline([rebalancing, features], knn)) :- true.
':=>'(p78371, pipeline([rebalancing, features], nn)) :- true.
':=>'(p292400, pipeline([rebalancing, features], nn)) :- true.
':=>'(p31180, pipeline([rebalancing, features], rf)) :- true.
':=>'(p253436, pipeline([rebalancing, mitigation], knn)) :- true.
':=>'(p715849, pipeline([rebalancing, mitigation], nn)) :- true.
':=>'(p628224, pipeline([normalization, features, mitigation], knn)) :- true.
':=>'(p943588, pipeline([normalization, features, mitigation], knn)) :- true.
':=>'(p54564, pipeline([normalization, features, mitigation], nn)) :- true.
':=>'(p156372, pipeline([normalization, features, mitigation], nn)) :- true.
':=>'(p509341, pipeline([normalization, features, mitigation], rf)) :- true.
':=>'(p200127, pipeline([normalization, features, mitigation], rf)) :- true.
':=>'(p909678, pipeline([normalization, features, rebalancing], knn)) :- true.
':=>'(p200963, pipeline([normalization, features, rebalancing], nn)) :- true.
':=>'(p250166, pipeline([normalization, features, rebalancing], rf)) :- true.
':=>'(p595160, pipeline([normalization, mitigation, features], knn)) :- true.
':=>'(p814654, pipeline([normalization, mitigation, features], nn)) :- true.
':=>'(p335163, pipeline([normalization, mitigation, features], rf)) :- true.
':=>'(p718136, pipeline([normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p186552, pipeline([normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p475438, pipeline([normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p816578, pipeline([normalization, rebalancing, features], knn)) :- true.
':=>'(p468731, pipeline([normalization, rebalancing, features], nn)) :- true.
':=>'(p393195, pipeline([normalization, rebalancing, features], rf)) :- true.
':=>'(p227604, pipeline([normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p713016, pipeline([normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p588016, pipeline([normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p121830, pipeline([features, normalization, mitigation], knn)) :- true.
':=>'(p159079, pipeline([features, normalization, mitigation], knn)) :- true.
':=>'(p189119, pipeline([features, normalization, mitigation], nn)) :- true.
':=>'(p429629, pipeline([features, normalization, mitigation], nn)) :- true.
':=>'(p79185, pipeline([features, normalization, mitigation], rf)) :- true.
':=>'(p510759, pipeline([features, normalization, mitigation], rf)) :- true.
':=>'(p704672, pipeline([features, normalization, rebalancing], knn)) :- true.
':=>'(p740508, pipeline([features, normalization, rebalancing], nn)) :- true.
':=>'(p747081, pipeline([features, normalization, rebalancing], rf)) :- true.
':=>'(p591866, pipeline([features, mitigation, normalization], knn)) :- true.
':=>'(p511890, pipeline([features, mitigation, normalization], nn)) :- true.
':=>'(p256007, pipeline([features, mitigation, normalization], rf)) :- true.
':=>'(p424402, pipeline([features, mitigation, rebalancing], knn)) :- true.
':=>'(p216806, pipeline([features, mitigation, rebalancing], knn)) :- true.
':=>'(p955296, pipeline([features, mitigation, rebalancing], nn)) :- true.
':=>'(p874515, pipeline([features, mitigation, rebalancing], nn)) :- true.
':=>'(p327745, pipeline([features, mitigation, rebalancing], rf)) :- true.
':=>'(p741483, pipeline([features, rebalancing, normalization], knn)) :- true.
':=>'(p905517, pipeline([features, rebalancing, normalization], nn)) :- true.
':=>'(p781331, pipeline([features, rebalancing, normalization], rf)) :- true.
':=>'(p429416, pipeline([features, rebalancing, mitigation], knn)) :- true.
':=>'(p420530, pipeline([features, rebalancing, mitigation], knn)) :- true.
':=>'(p669049, pipeline([features, rebalancing, mitigation], nn)) :- true.
':=>'(p813737, pipeline([features, rebalancing, mitigation], nn)) :- true.
':=>'(p790766, pipeline([features, rebalancing, mitigation], rf)) :- true.
':=>'(p553132, pipeline([mitigation, features, rebalancing], knn)) :- true.
':=>'(p931357, pipeline([mitigation, features, rebalancing], nn)) :- true.
':=>'(p206865, pipeline([mitigation, rebalancing, features], knn)) :- true.
':=>'(p19793, pipeline([mitigation, rebalancing, features], nn)) :- true.
':=>'(p168934, pipeline([rebalancing, normalization, features], knn)) :- true.
':=>'(p431730, pipeline([rebalancing, normalization, features], nn)) :- true.
':=>'(p995184, pipeline([rebalancing, normalization, features], rf)) :- true.
':=>'(p139112, pipeline([rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p755224, pipeline([rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p460789, pipeline([rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p271183, pipeline([rebalancing, features, normalization], knn)) :- true.
':=>'(p984142, pipeline([rebalancing, features, normalization], nn)) :- true.
':=>'(p233100, pipeline([rebalancing, features, normalization], rf)) :- true.
':=>'(p383745, pipeline([rebalancing, features, mitigation], knn)) :- true.
':=>'(p958750, pipeline([rebalancing, features, mitigation], knn)) :- true.
':=>'(p711326, pipeline([rebalancing, features, mitigation], nn)) :- true.
':=>'(p171541, pipeline([rebalancing, features, mitigation], nn)) :- true.
':=>'(p76173, pipeline([rebalancing, features, mitigation], rf)) :- true.
':=>'(p371948, pipeline([rebalancing, mitigation, features], knn)) :- true.
':=>'(p333282, pipeline([rebalancing, mitigation, features], nn)) :- true.
':=>'(p172901, pipeline([normalization, features, mitigation, rebalancing], knn)) :- true.
':=>'(p12460, pipeline([normalization, features, mitigation, rebalancing], knn)) :- true.
':=>'(p17267, pipeline([normalization, features, mitigation, rebalancing], nn)) :- true.
':=>'(p547805, pipeline([normalization, features, mitigation, rebalancing], nn)) :- true.
':=>'(p912587, pipeline([normalization, features, mitigation, rebalancing], rf)) :- true.
':=>'(p785601, pipeline([normalization, features, mitigation, rebalancing], rf)) :- true.
':=>'(p391044, pipeline([normalization, features, rebalancing, mitigation], knn)) :- true.
':=>'(p616198, pipeline([normalization, features, rebalancing, mitigation], knn)) :- true.
':=>'(p953271, pipeline([normalization, features, rebalancing, mitigation], nn)) :- true.
':=>'(p75978, pipeline([normalization, features, rebalancing, mitigation], nn)) :- true.
':=>'(p925881, pipeline([normalization, features, rebalancing, mitigation], rf)) :- true.
':=>'(p289557, pipeline([normalization, features, rebalancing, mitigation], rf)) :- true.
':=>'(p66163, pipeline([normalization, mitigation, features, rebalancing], knn)) :- true.
':=>'(p46019, pipeline([normalization, mitigation, features, rebalancing], nn)) :- true.
':=>'(p119065, pipeline([normalization, mitigation, features, rebalancing], rf)) :- true.
':=>'(p259718, pipeline([normalization, mitigation, rebalancing, features], knn)) :- true.
':=>'(p683307, pipeline([normalization, mitigation, rebalancing, features], nn)) :- true.
':=>'(p504486, pipeline([normalization, mitigation, rebalancing, features], rf)) :- true.
':=>'(p398738, pipeline([normalization, rebalancing, features, mitigation], knn)) :- true.
':=>'(p911315, pipeline([normalization, rebalancing, features, mitigation], knn)) :- true.
':=>'(p193668, pipeline([normalization, rebalancing, features, mitigation], nn)) :- true.
':=>'(p300013, pipeline([normalization, rebalancing, features, mitigation], nn)) :- true.
':=>'(p743491, pipeline([normalization, rebalancing, features, mitigation], rf)) :- true.
':=>'(p980471, pipeline([normalization, rebalancing, features, mitigation], rf)) :- true.
':=>'(p546432, pipeline([normalization, rebalancing, mitigation, features], knn)) :- true.
':=>'(p599561, pipeline([normalization, rebalancing, mitigation, features], nn)) :- true.
':=>'(p910500, pipeline([normalization, rebalancing, mitigation, features], rf)) :- true.
':=>'(p424032, pipeline([features, normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p739138, pipeline([features, normalization, mitigation, rebalancing], knn)) :- true.
':=>'(p838630, pipeline([features, normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p466697, pipeline([features, normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p80086, pipeline([features, normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p370596, pipeline([features, normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p595380, pipeline([features, normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p188103, pipeline([features, normalization, rebalancing, mitigation], knn)) :- true.
':=>'(p756061, pipeline([features, normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p329060, pipeline([features, normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p466274, pipeline([features, normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p515865, pipeline([features, normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p616402, pipeline([features, mitigation, normalization, rebalancing], knn)) :- true.
':=>'(p800454, pipeline([features, mitigation, normalization, rebalancing], nn)) :- true.
':=>'(p614782, pipeline([features, mitigation, normalization, rebalancing], rf)) :- true.
':=>'(p663600, pipeline([features, mitigation, rebalancing, normalization], knn)) :- true.
':=>'(p697152, pipeline([features, mitigation, rebalancing, normalization], nn)) :- true.
':=>'(p107679, pipeline([features, mitigation, rebalancing, normalization], rf)) :- true.
':=>'(p135745, pipeline([features, rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p452774, pipeline([features, rebalancing, normalization, mitigation], knn)) :- true.
':=>'(p190763, pipeline([features, rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p291035, pipeline([features, rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p732832, pipeline([features, rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p892350, pipeline([features, rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p809647, pipeline([features, rebalancing, mitigation, normalization], knn)) :- true.
':=>'(p417669, pipeline([features, rebalancing, mitigation, normalization], nn)) :- true.
':=>'(p25224, pipeline([features, rebalancing, mitigation, normalization], rf)) :- true.
':=>'(p400483, pipeline([rebalancing, normalization, features, mitigation], knn)) :- true.
':=>'(p235889, pipeline([rebalancing, normalization, features, mitigation], knn)) :- true.
':=>'(p10886, pipeline([rebalancing, normalization, features, mitigation], nn)) :- true.
':=>'(p537566, pipeline([rebalancing, normalization, features, mitigation], nn)) :- true.
':=>'(p241494, pipeline([rebalancing, normalization, features, mitigation], rf)) :- true.
':=>'(p859347, pipeline([rebalancing, normalization, features, mitigation], rf)) :- true.
':=>'(p498428, pipeline([rebalancing, normalization, mitigation, features], knn)) :- true.
':=>'(p786128, pipeline([rebalancing, normalization, mitigation, features], nn)) :- true.
':=>'(p290755, pipeline([rebalancing, normalization, mitigation, features], rf)) :- true.
':=>'(p676479, pipeline([rebalancing, features, normalization, mitigation], knn)) :- true.
':=>'(p537507, pipeline([rebalancing, features, normalization, mitigation], knn)) :- true.
':=>'(p755474, pipeline([rebalancing, features, normalization, mitigation], nn)) :- true.
':=>'(p125059, pipeline([rebalancing, features, normalization, mitigation], nn)) :- true.
':=>'(p945985, pipeline([rebalancing, features, normalization, mitigation], rf)) :- true.
':=>'(p371375, pipeline([rebalancing, features, normalization, mitigation], rf)) :- true.
':=>'(p333969, pipeline([rebalancing, features, mitigation, normalization], knn)) :- true.
':=>'(p693528, pipeline([rebalancing, features, mitigation, normalization], nn)) :- true.
':=>'(p330034, pipeline([rebalancing, features, mitigation, normalization], rf)) :- true.

Checking Config
Exporting Config
Saving Graph
Exporting AutoML input
Exporting Space
Exporting Constraints
Input created for iteration Config(iteration=1, dataset=credit-g, metric=balanced_accuracy, fairnessMetric=equalized_odds_ratio, sensitiveFeatures=[personal_status, sex], mode=max, batchSize=999999, timeBudget=3600, seed=42)
Here is the standard output/error of the command:

2861b50cc3de69c915954d6cce08755ad657479726ec5ae2f1f662d497f2d38f
Here is the standard output/error of the command:

Here is the standard output/error of the command:

WARNING:root:No module named 'rpy2': FairAdapt will be unavailable. To install, run:
pip install 'aif360[FairAdapt]'
INFO:flaml.tune.searcher.blendsearch:No low-cost partial config given to the search algorithm. For cost-frugal search, consider providing low-cost values for cost-related hps via 'low_cost_partial_config'. More info can be found at https://microsoft.github.io/FLAML/docs/FAQ#about-low_cost_partial_config-in-tune
Trying to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Added successfully: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Trying to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: normalization == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: normalization == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: mitigation == 'FunctionTransformer' && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'features_mitigation_normalization_rebalancing_classification', 'features_mitigation_rebalancing_normalization_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'features_rebalancing_mitigation_normalization_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'rebalancing_features_mitigation_normalization_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'KNeighborsClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'KNeighborsClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'MLPClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'MLPClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
Trying to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'RandomForestClassifier')
Failed to add: (Forbidden: prototype in {'normalization_features_mitigation_rebalancing_classification', 'features_normalization_mitigation_rebalancing_classification', 'normalization_mitigation_features_rebalancing_classification', 'normalization_mitigation_rebalancing_features_classification', 'normalization_features_rebalancing_mitigation_classification', 'features_normalization_rebalancing_mitigation_classification', 'features_rebalancing_normalization_mitigation_classification', 'normalization_rebalancing_features_mitigation_classification', 'rebalancing_normalization_features_mitigation_classification', 'rebalancing_features_normalization_mitigation_classification', 'normalization_rebalancing_mitigation_features_classification', 'rebalancing_normalization_mitigation_features_classification'} && Forbidden: mitigation in {'CorrelationRemover', 'LFR_wrapper'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'RandomForestClassifier')
Reason: Given vector violates forbidden clause: (Forbidden: classification == 'KNeighborsClassifier' && Forbidden: mitigation == 'FunctionTransformer')
AutoML: starting optimization.
1
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 3, 'max_leaf_nodes': 4, 'min_samples_split': 2, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.3770898641588297), 'balanced_accuracy': np.float64(0.579047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.68), 'male_div/sep': np.float64(0.43), 'male_mar/wid': np.float64(0.95), 'male_single': np.float64(0.52)}, 'status': 'success', 'total_time': 1.080176591873169, 'fit_time': np.float64(0.16829590797424315), 'score_time': np.float64(0.009258413314819336), 'absolute_time': 1746730901.7711, 'flatten_equalized_odds_ratio': '0.42_0.46_0.59_0.42_0.0', 'flatten_balanced_accuracy': '0.64_0.62_0.55_0.57_0.51'}
2
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 15, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.6363636363636364), 'balanced_accuracy': np.float64(0.5980952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.66), 'male_div/sep': np.float64(0.7), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.73)}, 'status': 'success', 'total_time': 0.7305099964141846, 'fit_time': np.float64(0.005301141738891601), 'score_time': np.float64(0.07206625938415527), 'absolute_time': 1746730903.3351963, 'flatten_equalized_odds_ratio': '0.64_0.5_0.73_0.64_0.68', 'flatten_balanced_accuracy': '0.6_0.62_0.58_0.59_0.6'}
3
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_split': 6, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.910016420361248), 'balanced_accuracy': np.float64(0.5109523809523809), 'by_group': {'female_div/dep/mar': np.float64(0.98), 'male_div/sep': np.float64(0.92), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.95)}, 'status': 'success', 'total_time': 39.67462372779846, 'fit_time': np.float64(7.874727058410644), 'score_time': np.float64(0.011095905303955078), 'absolute_time': 1746730943.0250697, 'flatten_equalized_odds_ratio': '0.79_1.0_0.93_0.83_1.0', 'flatten_balanced_accuracy': '0.54_0.5_0.5_0.51_0.5'}
The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 15, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 7}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 15, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 7}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')} was NaN

4
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 15, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 7}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': np.float64(0.5014285714285714), 'by_group': {'female_div/dep/mar': np.float64(0.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(0.0), 'male_single': np.float64(0.07)}, 'status': 'fail', 'total_time': 149.7636592388153, 'fit_time': np.float64(11.776779937744141), 'score_time': np.float64(0.01836094856262207), 'absolute_time': 1746731092.8130755, 'flatten_equalized_odds_ratio': '0.0_nan_nan_nan_nan', 'flatten_balanced_accuracy': '0.51_0.5_0.5_0.5_0.5'}
5
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.5502988505747127), 'balanced_accuracy': np.float64(0.5640476190476191), 'by_group': {'female_div/dep/mar': np.float64(0.73), 'male_div/sep': np.float64(0.64), 'male_mar/wid': np.float64(0.8), 'male_single': np.float64(0.64)}, 'status': 'success', 'total_time': 60.57586979866028, 'fit_time': np.float64(12.071780490875245), 'score_time': np.float64(0.008698987960815429), 'absolute_time': 1746731153.4062414, 'flatten_equalized_odds_ratio': '0.44_0.5_0.76_0.59_0.47', 'flatten_balanced_accuracy': '0.62_0.59_0.54_0.56_0.51'}
6
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_split': 2, 'n_estimators': np.int64(25)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.5861777739076589), 'balanced_accuracy': np.float64(0.5507142857142856), 'by_group': {'female_div/dep/mar': np.float64(0.75), 'male_div/sep': np.float64(0.69), 'male_mar/wid': np.float64(0.9), 'male_single': np.float64(0.64)}, 'status': 'success', 'total_time': 41.970829248428345, 'fit_time': np.float64(8.351020622253419), 'score_time': np.float64(0.009173583984375), 'absolute_time': 1746731195.397154, 'flatten_equalized_odds_ratio': '0.79_0.5_0.6_0.62_0.42', 'flatten_balanced_accuracy': '0.56_0.58_0.54_0.56_0.52'}
7
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 3, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.7611672278338946), 'balanced_accuracy': np.float64(0.4947619047619048), 'by_group': {'female_div/dep/mar': np.float64(0.78), 'male_div/sep': np.float64(0.77), 'male_mar/wid': np.float64(0.84), 'male_single': np.float64(0.88)}, 'status': 'success', 'total_time': 75.70551919937134, 'fit_time': np.float64(15.072587823867797), 'score_time': np.float64(0.017489004135131835), 'absolute_time': 1746731271.1198921, 'flatten_equalized_odds_ratio': '1.0_0.99_1.0_0.0_0.82', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.44_0.54'}
8
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 6, 'min_samples_split': 3, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'equalized_odds_ratio': np.float64(0.4121445856019359), 'balanced_accuracy': np.float64(0.5628571428571428), 'by_group': {'female_div/dep/mar': np.float64(0.78), 'male_div/sep': np.float64(0.47), 'male_mar/wid': np.float64(0.94), 'male_single': np.float64(0.56)}, 'status': 'success', 'total_time': 72.38094973564148, 'fit_time': np.float64(14.426175117492676), 'score_time': np.float64(0.01439681053161621), 'absolute_time': 1746731343.5177388, 'flatten_equalized_odds_ratio': '0.42_0.5_0.62_0.52_0.0', 'flatten_balanced_accuracy': '0.59_0.58_0.56_0.54_0.54'}
9
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 6, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.3985878489326765), 'balanced_accuracy': np.float64(0.5428571428571429), 'by_group': {'female_div/dep/mar': np.float64(0.63), 'male_div/sep': np.float64(0.47), 'male_mar/wid': np.float64(0.85), 'male_single': np.float64(0.58)}, 'status': 'success', 'total_time': 1.7442200183868408, 'fit_time': np.float64(0.1059983253479004), 'score_time': np.float64(0.10094947814941406), 'absolute_time': 1746731345.2785335, 'flatten_equalized_odds_ratio': '0.42_0.42_0.7_0.46_0.0', 'flatten_balanced_accuracy': '0.58_0.6_0.54_0.49_0.51'}
10
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_split': 4, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.9321839080459771), 'balanced_accuracy': np.float64(0.5078571428571428), 'by_group': {'female_div/dep/mar': np.float64(0.96), 'male_div/sep': np.float64(0.93), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.94)}, 'status': 'success', 'total_time': 57.93656277656555, 'fit_time': np.float64(11.529797172546386), 'score_time': np.float64(0.00936126708984375), 'absolute_time': 1746731403.9902248, 'flatten_equalized_odds_ratio': '1.0_1.0_1.0_0.83_0.83', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.51_0.53'}
11
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 4, 'max_leaf_nodes': 6, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.7229362591431557), 'balanced_accuracy': np.float64(0.5330952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.81), 'male_div/sep': np.float64(0.8), 'male_mar/wid': np.float64(0.94), 'male_single': np.float64(0.77)}, 'status': 'success', 'total_time': 1.7460520267486572, 'fit_time': np.float64(0.30205206871032714), 'score_time': np.float64(0.009822940826416016), 'absolute_time': 1746731405.7712579, 'flatten_equalized_odds_ratio': '0.76_0.75_0.77_0.83_0.5', 'flatten_balanced_accuracy': '0.52_0.56_0.51_0.52_0.55'}
12
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 6, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.7151515151515151), 'balanced_accuracy': np.float64(0.5204761904761904), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.72), 'male_mar/wid': np.float64(0.95), 'male_single': np.float64(0.79)}, 'status': 'success', 'total_time': 85.09087824821472, 'fit_time': np.float64(16.526821899414063), 'score_time': np.float64(0.009819936752319337), 'absolute_time': 1746731490.889375, 'flatten_equalized_odds_ratio': '0.75_0.58_0.91_0.83_0.5', 'flatten_balanced_accuracy': '0.49_0.57_0.48_0.51_0.55'}
/usr/local/lib/python3.12/site-packages/numpy/_core/_methods.py:194: RuntimeWarning: overflow encountered in multiply
  x = um.multiply(x, x, out=x)
13
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 9}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'equalized_odds_ratio': np.float64(0.4051089714882818), 'balanced_accuracy': np.float64(0.5059523809523809), 'by_group': {'female_div/dep/mar': np.float64(0.65), 'male_div/sep': np.float64(0.68), 'male_mar/wid': np.float64(0.67), 'male_single': np.float64(0.71)}, 'status': 'success', 'total_time': 157.93215107917786, 'fit_time': np.float64(14.224586486816406), 'score_time': np.float64(0.010449743270874024), 'absolute_time': 1746731648.8449235, 'flatten_equalized_odds_ratio': '0.0_0.54_0.72_0.21_0.55', 'flatten_balanced_accuracy': '0.44_0.56_0.52_0.49_0.52'}
14
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.9242424242424242), 'balanced_accuracy': np.float64(0.5061904761904762), 'by_group': {'female_div/dep/mar': np.float64(0.97), 'male_div/sep': np.float64(0.93), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.99)}, 'status': 'success', 'total_time': 0.29653167724609375, 'fit_time': np.float64(0.020222282409667967), 'score_time': np.float64(0.004660558700561523), 'absolute_time': 1746731649.1733623, 'flatten_equalized_odds_ratio': '0.83_1.0_1.0_0.95_0.83', 'flatten_balanced_accuracy': '0.51_0.5_0.5_0.51_0.51'}
15
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 75.40351438522339, 'fit_time': np.float64(15.03354778289795), 'score_time': np.float64(0.0074617862701416016), 'absolute_time': 1746731724.603492, 'flatten_equalized_odds_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
16
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 19, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.1781818181818182), 'balanced_accuracy': np.float64(0.6697619047619047), 'by_group': {'female_div/dep/mar': np.float64(0.74), 'male_div/sep': np.float64(0.48), 'male_mar/wid': np.float64(0.54), 'male_single': np.float64(0.88)}, 'status': 'success', 'total_time': 0.46277928352355957, 'fit_time': np.float64(0.04955954551696777), 'score_time': np.float64(0.008121919631958009), 'absolute_time': 1746731725.116104, 'flatten_equalized_odds_ratio': '0.0_0.0_0.36_0.53_0.0', 'flatten_balanced_accuracy': '0.68_0.71_0.66_0.65_0.65'}
17
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 4, 'max_features': 4, 'max_leaf_nodes': 3, 'min_samples_split': 4, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('PCA'), 'n_components': 3}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.6856108982545763), 'balanced_accuracy': np.float64(0.5488095238095237), 'by_group': {'female_div/dep/mar': np.float64(0.85), 'male_div/sep': np.float64(0.77), 'male_mar/wid': np.float64(0.89), 'male_single': np.float64(0.74)}, 'status': 'success', 'total_time': 72.30208230018616, 'fit_time': np.float64(14.418166351318359), 'score_time': np.float64(0.009172868728637696), 'absolute_time': 1746731797.4509234, 'flatten_equalized_odds_ratio': '0.79_0.5_0.86_0.59_0.69', 'flatten_balanced_accuracy': '0.56_0.59_0.51_0.56_0.52'}
18
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 3, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.6552149851000426), 'balanced_accuracy': np.float64(0.5419047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.77), 'male_div/sep': np.float64(0.69), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.72)}, 'status': 'success', 'total_time': 69.80342888832092, 'fit_time': np.float64(13.88898000717163), 'score_time': np.float64(0.019532299041748045), 'absolute_time': 1746731868.1208422, 'flatten_equalized_odds_ratio': '0.75_0.75_0.69_0.58_0.5', 'flatten_balanced_accuracy': '0.6_0.56_0.53_0.48_0.55'}
19
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'equalized_odds_ratio': np.float64(0.5494040017028523), 'balanced_accuracy': np.float64(0.5516666666666666), 'by_group': {'female_div/dep/mar': np.float64(0.77), 'male_div/sep': np.float64(0.65), 'male_mar/wid': np.float64(0.9), 'male_single': np.float64(0.61)}, 'status': 'success', 'total_time': 59.07111692428589, 'fit_time': np.float64(11.768660402297973), 'score_time': np.float64(0.01058335304260254), 'absolute_time': 1746731927.239086, 'flatten_equalized_odds_ratio': '0.79_0.5_0.66_0.55_0.25', 'flatten_balanced_accuracy': '0.56_0.59_0.55_0.55_0.5'}
The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 11, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 11, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')} was NaN

20
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 11, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 65.40615248680115, 'fit_time': np.float64(12.960885190963745), 'score_time': np.float64(0.044640636444091795), 'absolute_time': 1746731992.6812491, 'flatten_equalized_odds_ratio': 'nan_nan_nan_nan_nan', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
21
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 3}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 107.08061575889587, 'fit_time': np.float64(13.595980739593506), 'score_time': np.float64(0.009386491775512696), 'absolute_time': 1746732099.8020637, 'flatten_equalized_odds_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
22
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(25), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.9586206896551724), 'balanced_accuracy': np.float64(0.5042857142857142), 'by_group': {'female_div/dep/mar': np.float64(0.97), 'male_div/sep': np.float64(0.98), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.96)}, 'status': 'success', 'total_time': 51.36594581604004, 'fit_time': np.float64(10.231297302246094), 'score_time': np.float64(0.007547807693481445), 'absolute_time': 1746732151.2117844, 'flatten_equalized_odds_ratio': '1.0_1.0_1.0_1.0_0.79', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.52'}
23
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(50), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.5826454197143852), 'balanced_accuracy': np.float64(0.5528571428571428), 'by_group': {'female_div/dep/mar': np.float64(0.77), 'male_div/sep': np.float64(0.68), 'male_mar/wid': np.float64(0.86), 'male_single': np.float64(0.63)}, 'status': 'success', 'total_time': 65.57115769386292, 'fit_time': np.float64(13.07073359489441), 'score_time': np.float64(0.008311700820922852), 'absolute_time': 1746732216.8354895, 'flatten_equalized_odds_ratio': '0.78_0.5_0.62_0.59_0.42', 'flatten_balanced_accuracy': '0.56_0.58_0.54_0.56_0.53'}
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')} was NaN

24
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': np.float64(0.49000000000000005), 'by_group': {'female_div/dep/mar': np.float64(0.71), 'male_div/sep': np.float64(0.56), 'male_mar/wid': np.float64(0.49), 'male_single': np.float64(0.5)}, 'status': 'fail', 'total_time': 154.11370968818665, 'fit_time': np.float64(16.783617877960204), 'score_time': np.float64(0.007107305526733399), 'absolute_time': 1746732370.9995506, 'flatten_equalized_odds_ratio': 'nan_0.0_0.66_0.39_0.0', 'flatten_balanced_accuracy': '0.5_0.42_0.54_0.48_0.5'}
25
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.13392857142857142), 'balanced_accuracy': np.float64(0.6640476190476191), 'by_group': {'female_div/dep/mar': np.float64(0.63), 'male_div/sep': np.float64(0.31), 'male_mar/wid': np.float64(0.57), 'male_single': np.float64(0.6)}, 'status': 'success', 'total_time': 1.3819360733032227, 'fit_time': np.float64(0.23463702201843262), 'score_time': np.float64(0.004300308227539062), 'absolute_time': 1746732372.4269476, 'flatten_equalized_odds_ratio': '0.0_0.36_0.31_0.0_0.0', 'flatten_balanced_accuracy': '0.66_0.72_0.67_0.62_0.64'}
26
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.4852544720743387), 'balanced_accuracy': np.float64(0.6395238095238095), 'by_group': {'female_div/dep/mar': np.float64(0.62), 'male_div/sep': np.float64(0.64), 'male_mar/wid': np.float64(0.66), 'male_single': np.float64(0.67)}, 'status': 'success', 'total_time': 1.7118217945098877, 'fit_time': np.float64(0.3015068531036377), 'score_time': np.float64(0.006209087371826172), 'absolute_time': 1746732375.2792506, 'flatten_equalized_odds_ratio': '0.38_0.49_0.57_0.42_0.56', 'flatten_balanced_accuracy': '0.58_0.67_0.65_0.67_0.63'}
27
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 12, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.6396969696969697), 'balanced_accuracy': np.float64(0.6019047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.78), 'male_div/sep': np.float64(0.7), 'male_mar/wid': np.float64(0.86), 'male_single': np.float64(0.76)}, 'status': 'success', 'total_time': 1.3226346969604492, 'fit_time': np.float64(0.005399894714355469), 'score_time': np.float64(0.1195533275604248), 'absolute_time': 1746732376.6492767, 'flatten_equalized_odds_ratio': '0.6_0.62_0.62_0.67_0.68', 'flatten_balanced_accuracy': '0.61_0.67_0.59_0.58_0.56'}
28
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 11, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 2}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.14824810606060607), 'balanced_accuracy': np.float64(0.5997619047619047), 'by_group': {'female_div/dep/mar': np.float64(0.79), 'male_div/sep': np.float64(0.42), 'male_mar/wid': np.float64(0.33), 'male_single': np.float64(0.91)}, 'status': 'success', 'total_time': 0.22943902015686035, 'fit_time': np.float64(0.007358264923095703), 'score_time': np.float64(0.004505634307861328), 'absolute_time': 1746732376.931947, 'flatten_equalized_odds_ratio': '0.21_0.27_0.26_0.0_0.0', 'flatten_balanced_accuracy': '0.62_0.56_0.58_0.57_0.67'}
29
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 7, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.8444164456233422), 'balanced_accuracy': np.float64(0.5111904761904762), 'by_group': {'female_div/dep/mar': np.float64(0.91), 'male_div/sep': np.float64(0.89), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.87)}, 'status': 'success', 'total_time': 73.83030891418457, 'fit_time': np.float64(14.53985366821289), 'score_time': np.float64(0.09318695068359376), 'absolute_time': 1746732450.8139966, 'flatten_equalized_odds_ratio': '0.86_0.75_0.9_0.71_1.0', 'flatten_balanced_accuracy': '0.54_0.55_0.51_0.45_0.5'}
30
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'equalized_odds_ratio': np.float64(0.4260136853886854), 'balanced_accuracy': np.float64(0.6342857142857143), 'by_group': {'female_div/dep/mar': np.float64(0.69), 'male_div/sep': np.float64(0.62), 'male_mar/wid': np.float64(0.64), 'male_single': np.float64(0.81)}, 'status': 'success', 'total_time': 3.6576931476593018, 'fit_time': np.float64(0.6959990978240966), 'score_time': np.float64(0.004561948776245117), 'absolute_time': 1746732454.5267925, 'flatten_equalized_odds_ratio': '0.0_0.54_0.45_0.72_0.42', 'flatten_balanced_accuracy': '0.62_0.6_0.67_0.66_0.62'}
31
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.0), 'balanced_accuracy': np.float64(0.615952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.0), 'male_mar/wid': np.float64(0.48), 'male_single': np.float64(0.75)}, 'status': 'success', 'total_time': 1.693681001663208, 'fit_time': np.float64(0.3063544750213623), 'score_time': np.float64(0.004161262512207031), 'absolute_time': 1746732456.2767746, 'flatten_equalized_odds_ratio': '0.0_0.0_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.63_0.63_0.62_0.6_0.6'}
/usr/local/lib/python3.12/site-packages/numpy/_core/_methods.py:194: RuntimeWarning: overflow encountered in multiply
  x = um.multiply(x, x, out=x)
/usr/local/lib/python3.12/site-packages/sklearn/preprocessing/_data.py:3475: RuntimeWarning: overflow encountered in power
  out[pos] = (np.power(x[pos] + 1, lmbda) - 1) / lmbda

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 622, in objective
    fair_scores, fair_scores_by_group = _compute_fair_metric(
                                        ^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 381, in _compute_fair_metric
    y_pred = np.array(scores["estimator"][fold].predict(x_original))
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 658, in predict
    Xt = transform.transform(Xt)
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_set_output.py", line 319, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/compose/_column_transformer.py", line 1101, in transform
    Xs = self._call_func_on_transformers(
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/compose/_column_transformer.py", line 873, in _call_func_on_transformers
    transformers = list(
                   ^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/compose/_column_transformer.py", line 469, in _iter
    transformers = self.transformers_
                   ^^^^^^^^^^^^^^^^^^
AttributeError: 'ColumnTransformer' object has no attribute 'transformers_'. Did you mean: 'transformers'?

32
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 44.65489149093628, 'fit_time': np.float64(8.901082181930542), 'score_time': np.float64(0.005937004089355468), 'absolute_time': 1746732500.986781}
33
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 20, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.95), 'balanced_accuracy': np.float64(0.5138095238095237), 'by_group': {'female_div/dep/mar': np.float64(0.96), 'male_div/sep': np.float64(0.95), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.97)}, 'status': 'success', 'total_time': 131.9246380329132, 'fit_time': np.float64(12.948795938491822), 'score_time': np.float64(0.009580230712890625), 'absolute_time': 1746732632.9836903, 'flatten_equalized_odds_ratio': '1.0_0.75_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.57_0.5_0.5_0.5'}
34
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 1, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_split': 4, 'n_estimators': np.int64(25)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.5874521072796934), 'balanced_accuracy': np.float64(0.5621428571428572), 'by_group': {'female_div/dep/mar': np.float64(0.78), 'male_div/sep': np.float64(0.64), 'male_mar/wid': np.float64(0.9), 'male_single': np.float64(0.7)}, 'status': 'success', 'total_time': 55.97589659690857, 'fit_time': np.float64(11.14869179725647), 'score_time': np.float64(0.008570575714111328), 'absolute_time': 1746732689.0364368, 'flatten_equalized_odds_ratio': '0.4_0.5_0.62_0.59_0.83', 'flatten_balanced_accuracy': '0.61_0.58_0.54_0.55_0.53'}
35
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 8, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.6377158343012), 'balanced_accuracy': np.float64(0.5964285714285713), 'by_group': {'female_div/dep/mar': np.float64(0.74), 'male_div/sep': np.float64(0.85), 'male_mar/wid': np.float64(0.76), 'male_single': np.float64(0.79)}, 'status': 'success', 'total_time': 0.3411245346069336, 'fit_time': np.float64(0.023094320297241212), 'score_time': np.float64(0.008348989486694335), 'absolute_time': 1746732690.6111834, 'flatten_equalized_odds_ratio': '0.53_0.63_0.85_0.67_0.5', 'flatten_balanced_accuracy': '0.64_0.64_0.55_0.57_0.58'}
36
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.6521421107628004), 'balanced_accuracy': np.float64(0.554047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.66), 'male_div/sep': np.float64(0.84), 'male_mar/wid': np.float64(0.94), 'male_single': np.float64(0.7)}, 'status': 'success', 'total_time': 1.0034689903259277, 'fit_time': np.float64(0.009702730178833007), 'score_time': np.float64(0.07452602386474609), 'absolute_time': 1746732691.6813207, 'flatten_equalized_odds_ratio': '0.66_0.67_0.64_0.62_0.68', 'flatten_balanced_accuracy': '0.56_0.56_0.55_0.58_0.51'}
37
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.5)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.8393267651888342), 'balanced_accuracy': np.float64(0.5240476190476191), 'by_group': {'female_div/dep/mar': np.float64(0.94), 'male_div/sep': np.float64(0.84), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.91)}, 'status': 'success', 'total_time': 58.082322120666504, 'fit_time': np.float64(11.578928136825562), 'score_time': np.float64(0.007379865646362305), 'absolute_time': 1746732749.8443334, 'flatten_equalized_odds_ratio': '0.79_0.75_1.0_0.83_0.83', 'flatten_balanced_accuracy': '0.54_0.53_0.5_0.51_0.53'}
38
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.5350592128178335), 'balanced_accuracy': np.float64(0.5452380952380953), 'by_group': {'female_div/dep/mar': np.float64(0.73), 'male_div/sep': np.float64(0.69), 'male_mar/wid': np.float64(0.85), 'male_single': np.float64(0.63)}, 'status': 'success', 'total_time': 50.1045663356781, 'fit_time': np.float64(9.975744104385376), 'score_time': np.float64(0.0075629234313964845), 'absolute_time': 1746732800.0172613, 'flatten_equalized_odds_ratio': '0.4_0.4_0.76_0.42_0.69', 'flatten_balanced_accuracy': '0.62_0.55_0.53_0.5_0.52'}
39
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.7091598510742188, 'fit_time': np.float64(0.10821390151977539), 'score_time': np.float64(0.003568077087402344), 'absolute_time': 1746732800.8144193, 'flatten_equalized_odds_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
40
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 8, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.4036363636363637), 'balanced_accuracy': np.float64(0.6269047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.6), 'male_div/sep': np.float64(0.64), 'male_mar/wid': np.float64(0.47), 'male_single': np.float64(0.53)}, 'status': 'success', 'total_time': 1.3488516807556152, 'fit_time': np.float64(0.08262248039245605), 'score_time': np.float64(0.07704410552978516), 'absolute_time': 1746732802.2451835, 'flatten_equalized_odds_ratio': '0.27_0.4_0.5_0.37_0.48', 'flatten_balanced_accuracy': '0.63_0.66_0.61_0.62_0.6'}
41
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'equalized_odds_ratio': np.float64(0.25919540229885063), 'balanced_accuracy': np.float64(0.6357142857142857), 'by_group': {'female_div/dep/mar': np.float64(0.66), 'male_div/sep': np.float64(0.29), 'male_mar/wid': np.float64(0.84), 'male_single': np.float64(0.47)}, 'status': 'success', 'total_time': 1.2385320663452148, 'fit_time': np.float64(0.2088019847869873), 'score_time': np.float64(0.0047858238220214845), 'absolute_time': 1746732803.5616472, 'flatten_equalized_odds_ratio': '0.0_0.5_0.42_0.38_0.0', 'flatten_balanced_accuracy': '0.7_0.68_0.65_0.63_0.51'}
42
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_split': 3, 'n_estimators': np.int64(75)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 1.1664752960205078, 'fit_time': np.float64(0.18095574378967286), 'score_time': np.float64(0.010071134567260743), 'absolute_time': 1746732804.869506, 'flatten_equalized_odds_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
43
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 15, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.9699137931034482), 'balanced_accuracy': np.float64(0.5076190476190476), 'by_group': {'female_div/dep/mar': np.float64(0.99), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.97)}, 'status': 'success', 'total_time': 85.13279056549072, 'fit_time': np.float64(16.80041913986206), 'score_time': np.float64(0.09221796989440918), 'absolute_time': 1746732891.4622076, 'flatten_equalized_odds_ratio': '0.86_1.0_0.99_1.0_1.0', 'flatten_balanced_accuracy': '0.54_0.5_0.5_0.5_0.5'}
44
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 5, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.7338770999115827), 'balanced_accuracy': np.float64(0.5373809523809523), 'by_group': {'female_div/dep/mar': np.float64(0.86), 'male_div/sep': np.float64(0.78), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.82)}, 'status': 'success', 'total_time': 81.92954993247986, 'fit_time': np.float64(9.90332384109497), 'score_time': np.float64(0.006846904754638672), 'absolute_time': 1746732973.4692447, 'flatten_equalized_odds_ratio': '0.83_0.5_0.79_0.83_0.72', 'flatten_balanced_accuracy': '0.53_0.58_0.54_0.52_0.51'}
45
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 3, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'equalized_odds_ratio': np.float64(0.30694444444444446), 'balanced_accuracy': np.float64(0.5916666666666667), 'by_group': {'female_div/dep/mar': np.float64(0.81), 'male_div/sep': np.float64(0.31), 'male_mar/wid': np.float64(0.92), 'male_single': np.float64(0.58)}, 'status': 'success', 'total_time': 1.5398712158203125, 'fit_time': np.float64(0.2642375469207764), 'score_time': np.float64(0.008498907089233398), 'absolute_time': 1746732975.08697, 'flatten_equalized_odds_ratio': '0.42_0.31_0.42_0.39_0.0', 'flatten_balanced_accuracy': '0.63_0.6_0.61_0.58_0.54'}
46
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.3786280577659888), 'balanced_accuracy': np.float64(0.52), 'by_group': {'female_div/dep/mar': np.float64(0.68), 'male_div/sep': np.float64(0.58), 'male_mar/wid': np.float64(0.6), 'male_single': np.float64(0.76)}, 'status': 'success', 'total_time': 70.97396850585938, 'fit_time': np.float64(14.14392991065979), 'score_time': np.float64(0.008503103256225586), 'absolute_time': 1746733046.1320157, 'flatten_equalized_odds_ratio': '0.4_0.27_0.0_0.51_0.72', 'flatten_balanced_accuracy': '0.62_0.47_0.47_0.52_0.52'}
47
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 4, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('PCA'), 'n_components': 3}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.2412121212121212), 'balanced_accuracy': np.float64(0.6754761904761905), 'by_group': {'female_div/dep/mar': np.float64(0.7), 'male_div/sep': np.float64(0.51), 'male_mar/wid': np.float64(0.6), 'male_single': np.float64(0.72)}, 'status': 'success', 'total_time': 0.855370044708252, 'fit_time': np.float64(0.13240461349487304), 'score_time': np.float64(0.006676769256591797), 'absolute_time': 1746733047.0819674, 'flatten_equalized_odds_ratio': '0.53_0.0_0.27_0.4_0.0', 'flatten_balanced_accuracy': '0.68_0.69_0.69_0.65_0.68'}
48
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 19, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.7501904493854957), 'balanced_accuracy': np.float64(0.5585714285714285), 'by_group': {'female_div/dep/mar': np.float64(0.8), 'male_div/sep': np.float64(0.88), 'male_mar/wid': np.float64(0.86), 'male_single': np.float64(0.86)}, 'status': 'success', 'total_time': 0.3030548095703125, 'fit_time': np.float64(0.0052814483642578125), 'score_time': np.float64(0.012360572814941406), 'absolute_time': 1746733047.4654481, 'flatten_equalized_odds_ratio': '0.77_0.7_0.86_0.78_0.64', 'flatten_balanced_accuracy': '0.54_0.57_0.51_0.6_0.57'}
49
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(50), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.7055735664931067), 'balanced_accuracy': np.float64(0.5459523809523809), 'by_group': {'female_div/dep/mar': np.float64(0.85), 'male_div/sep': np.float64(0.76), 'male_mar/wid': np.float64(0.94), 'male_single': np.float64(0.73)}, 'status': 'success', 'total_time': 63.734917879104614, 'fit_time': np.float64(12.701165342330933), 'score_time': np.float64(0.008966541290283203), 'absolute_time': 1746733111.2708623, 'flatten_equalized_odds_ratio': '0.83_0.5_0.86_0.62_0.72', 'flatten_balanced_accuracy': '0.56_0.58_0.51_0.56_0.52'}
50
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.3036806583404541, 'fit_time': np.float64(0.024696540832519532), 'score_time': np.float64(0.003843879699707031), 'absolute_time': 1746733113.1933045, 'flatten_equalized_odds_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
51
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 15, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 9}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.974921630094044), 'balanced_accuracy': np.float64(0.5035714285714286), 'by_group': {'female_div/dep/mar': np.float64(0.98), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.99)}, 'status': 'success', 'total_time': 87.23766851425171, 'fit_time': np.float64(12.992941236495971), 'score_time': np.float64(0.018573904037475587), 'absolute_time': 1746733200.5218608, 'flatten_equalized_odds_ratio': '1.0_1.0_0.97_1.0_0.91', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.52'}
52
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 4, 'max_leaf_nodes': 2, 'min_samples_split': 6, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification')}
{'equalized_odds_ratio': np.float64(0.4064583333333333), 'balanced_accuracy': np.float64(0.5583333333333333), 'by_group': {'female_div/dep/mar': np.float64(0.8), 'male_div/sep': np.float64(0.46), 'male_mar/wid': np.float64(0.9), 'male_single': np.float64(0.57)}, 'status': 'success', 'total_time': 58.564780473709106, 'fit_time': np.float64(11.664713191986085), 'score_time': np.float64(0.012032175064086914), 'absolute_time': 1746733259.1867104, 'flatten_equalized_odds_ratio': '0.42_0.31_0.64_0.67_0.0', 'flatten_balanced_accuracy': '0.62_0.55_0.54_0.55_0.53'}
53
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.5077056277056277), 'balanced_accuracy': np.float64(0.6176190476190476), 'by_group': {'female_div/dep/mar': np.float64(0.73), 'male_div/sep': np.float64(0.76), 'male_mar/wid': np.float64(0.69), 'male_single': np.float64(0.72)}, 'status': 'success', 'total_time': 0.9503688812255859, 'fit_time': np.float64(0.004145574569702148), 'score_time': np.float64(0.07229466438293457), 'absolute_time': 1746733260.217291, 'flatten_equalized_odds_ratio': '0.38_0.53_0.5_0.53_0.59', 'flatten_balanced_accuracy': '0.63_0.67_0.6_0.6_0.6'}
54
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(50), 'solver': np.str_('adam')}, 'features': {'type': np.str_('SelectKBest'), 'k': 7}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.4477490421455939), 'balanced_accuracy': np.float64(0.5507142857142858), 'by_group': {'female_div/dep/mar': np.float64(0.7), 'male_div/sep': np.float64(0.47), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.58)}, 'status': 'success', 'total_time': 108.46652913093567, 'fit_time': np.float64(13.397922611236572), 'score_time': np.float64(0.010322284698486329), 'absolute_time': 1746733368.7912743, 'flatten_equalized_odds_ratio': '0.42_0.31_0.62_0.39_0.5', 'flatten_balanced_accuracy': '0.61_0.55_0.54_0.51_0.55'}
55
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 4, 'min_samples_split': 2, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.9528735632183908), 'balanced_accuracy': np.float64(0.5059523809523809), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(0.97), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.97)}, 'status': 'success', 'total_time': 0.6098365783691406, 'fit_time': np.float64(0.08083181381225586), 'score_time': np.float64(0.00589137077331543), 'absolute_time': 1746733369.5069315, 'flatten_equalized_odds_ratio': '0.93_1.0_1.0_0.83_1.0', 'flatten_balanced_accuracy': '0.52_0.5_0.5_0.51_0.5'}
56
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 7, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.6563433035506538), 'balanced_accuracy': np.float64(0.5104761904761904), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.68), 'male_mar/wid': np.float64(0.87), 'male_single': np.float64(0.77)}, 'status': 'success', 'total_time': 66.94193649291992, 'fit_time': np.float64(13.145282363891601), 'score_time': np.float64(0.10722432136535645), 'absolute_time': 1746733436.5491908, 'flatten_equalized_odds_ratio': '0.85_0.66_1.0_0.52_0.26', 'flatten_balanced_accuracy': '0.56_0.47_0.5_0.52_0.51'}
57
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.8670402298850576), 'balanced_accuracy': np.float64(0.5197619047619048), 'by_group': {'female_div/dep/mar': np.float64(0.96), 'male_div/sep': np.float64(0.88), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.94)}, 'status': 'success', 'total_time': 0.3170032501220703, 'fit_time': np.float64(0.022369956970214842), 'score_time': np.float64(0.005440711975097656), 'absolute_time': 1746733436.95104, 'flatten_equalized_odds_ratio': '0.83_0.75_0.99_0.83_0.93', 'flatten_balanced_accuracy': '0.52_0.54_0.5_0.52_0.52'}
58
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 2, 'n_estimators': np.int64(100)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.5)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.9097701149425287), 'balanced_accuracy': np.float64(0.516904761904762), 'by_group': {'female_div/dep/mar': np.float64(0.96), 'male_div/sep': np.float64(0.92), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.94)}, 'status': 'success', 'total_time': 53.02693819999695, 'fit_time': np.float64(10.550240278244019), 'score_time': np.float64(0.014037227630615235), 'absolute_time': 1746733490.1071272, 'flatten_equalized_odds_ratio': '1.0_0.75_0.97_0.83_1.0', 'flatten_balanced_accuracy': '0.5_0.56_0.5_0.52_0.5'}
59
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.8657142857142857), 'balanced_accuracy': np.float64(0.48904761904761906), 'by_group': {'female_div/dep/mar': np.float64(0.94), 'male_div/sep': np.float64(0.99), 'male_mar/wid': np.float64(0.87), 'male_single': np.float64(0.95)}, 'status': 'success', 'total_time': 44.824379205703735, 'fit_time': np.float64(8.923338031768798), 'score_time': np.float64(0.007785177230834961), 'absolute_time': 1746733535.0432172, 'flatten_equalized_odds_ratio': '0.4_1.0_1.0_1.0_0.93', 'flatten_balanced_accuracy': '0.45_0.5_0.5_0.5_0.5'}
60
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 4, 'max_features': 3, 'max_leaf_nodes': 6, 'min_samples_split': 6, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.3918576741041245), 'balanced_accuracy': np.float64(0.5333333333333334), 'by_group': {'female_div/dep/mar': np.float64(0.73), 'male_div/sep': np.float64(0.43), 'male_mar/wid': np.float64(0.91), 'male_single': np.float64(0.51)}, 'status': 'success', 'total_time': 80.81727766990662, 'fit_time': np.float64(16.122136449813844), 'score_time': np.float64(0.009325408935546875), 'absolute_time': 1746733615.9718966, 'flatten_equalized_odds_ratio': '0.42_0.31_0.65_0.58_0.0', 'flatten_balanced_accuracy': '0.55_0.55_0.55_0.52_0.5'}
61
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'equalized_odds_ratio': np.float64(0.5938871622204955), 'balanced_accuracy': np.float64(0.5566666666666666), 'by_group': {'female_div/dep/mar': np.float64(0.73), 'male_div/sep': np.float64(0.73), 'male_mar/wid': np.float64(0.81), 'male_single': np.float64(0.66)}, 'status': 'success', 'total_time': 133.04166388511658, 'fit_time': np.float64(11.86293134689331), 'score_time': np.float64(0.00819082260131836), 'absolute_time': 1746733750.5734804, 'flatten_equalized_odds_ratio': '0.79_0.62_0.64_0.2_0.72', 'flatten_balanced_accuracy': '0.56_0.6_0.5_0.61_0.51'}
62
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.3266666666666667), 'balanced_accuracy': np.float64(0.67), 'by_group': {'female_div/dep/mar': np.float64(0.69), 'male_div/sep': np.float64(0.51), 'male_mar/wid': np.float64(0.63), 'male_single': np.float64(0.59)}, 'status': 'success', 'total_time': 2.4554250240325928, 'fit_time': np.float64(0.4533653259277344), 'score_time': np.float64(0.00425410270690918), 'absolute_time': 1746733753.1274076, 'flatten_equalized_odds_ratio': '0.0_0.4_0.42_0.4_0.42', 'flatten_balanced_accuracy': '0.66_0.68_0.69_0.66_0.65'}
63
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.3397727272727273), 'balanced_accuracy': np.float64(0.6002380952380952), 'by_group': {'female_div/dep/mar': np.float64(0.49), 'male_div/sep': np.float64(0.35), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.63)}, 'status': 'success', 'total_time': 0.8551948070526123, 'fit_time': np.float64(0.13418636322021485), 'score_time': np.float64(0.005051851272583008), 'absolute_time': 1746733754.0991495, 'flatten_equalized_odds_ratio': '0.38_0.59_0.31_0.42_0.0', 'flatten_balanced_accuracy': '0.65_0.59_0.56_0.59_0.6'}
64
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(75)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.0), 'balanced_accuracy': np.float64(0.6621428571428571), 'by_group': {'female_div/dep/mar': np.float64(0.46), 'male_div/sep': np.float64(0.08), 'male_mar/wid': np.float64(0.18), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 1.1632113456726074, 'fit_time': np.float64(0.18554000854492186), 'score_time': np.float64(0.010341739654541016), 'absolute_time': 1746733755.351965, 'flatten_equalized_odds_ratio': '0.0_0.0_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.66_0.65_0.65_0.65_0.7'}
65
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'equalized_odds_ratio': np.float64(0.5737254901960783), 'balanced_accuracy': np.float64(0.5173809523809523), 'by_group': {'female_div/dep/mar': np.float64(0.75), 'male_div/sep': np.float64(0.76), 'male_mar/wid': np.float64(0.8), 'male_single': np.float64(0.67)}, 'status': 'success', 'total_time': 68.37508988380432, 'fit_time': np.float64(13.632640314102172), 'score_time': np.float64(0.007768964767456055), 'absolute_time': 1746733823.955905, 'flatten_equalized_odds_ratio': '0.4_0.58_0.65_0.58_0.66', 'flatten_balanced_accuracy': '0.45_0.55_0.54_0.52_0.54'}
66
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 1, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 2, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('SelectKBest'), 'k': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.0), 'balanced_accuracy': np.float64(0.6719047619047618), 'by_group': {'female_div/dep/mar': np.float64(0.66), 'male_div/sep': np.float64(0.2), 'male_mar/wid': np.float64(0.17), 'male_single': np.float64(0.68)}, 'status': 'success', 'total_time': 1.0477046966552734, 'fit_time': np.float64(0.15231766700744628), 'score_time': np.float64(0.0068171024322509766), 'absolute_time': 1746733826.7448711, 'flatten_equalized_odds_ratio': '0.0_0.0_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.65_0.69_0.7_0.64_0.69'}
67
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 1, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 3, 'n_estimators': np.int64(100)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.47545454545454546), 'balanced_accuracy': np.float64(0.5288095238095238), 'by_group': {'female_div/dep/mar': np.float64(0.75), 'male_div/sep': np.float64(0.65), 'male_mar/wid': np.float64(0.88), 'male_single': np.float64(0.7)}, 'status': 'success', 'total_time': 61.07465434074402, 'fit_time': np.float64(12.152229976654052), 'score_time': np.float64(0.01794013977050781), 'absolute_time': 1746733887.912345, 'flatten_equalized_odds_ratio': '0.42_0.4_0.73_0.83_0.0', 'flatten_balanced_accuracy': '0.56_0.5_0.55_0.52_0.52'}
68
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.48948412698412697), 'balanced_accuracy': np.float64(0.6519047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.83), 'male_div/sep': np.float64(0.49), 'male_mar/wid': np.float64(0.82), 'male_single': np.float64(0.79)}, 'status': 'success', 'total_time': 1.1427536010742188, 'fit_time': np.float64(0.1883162498474121), 'score_time': np.float64(0.0052982807159423825), 'absolute_time': 1746733889.1666517, 'flatten_equalized_odds_ratio': '0.5_0.58_0.31_0.63_0.42', 'flatten_balanced_accuracy': '0.68_0.69_0.61_0.63_0.64'}
/usr/local/lib/python3.12/site-packages/numpy/_core/_methods.py:194: RuntimeWarning: overflow encountered in multiply
  x = um.multiply(x, x, out=x)
/usr/local/lib/python3.12/site-packages/sklearn/preprocessing/_data.py:3475: RuntimeWarning: overflow encountered in power
  out[pos] = (np.power(x[pos] + 1, lmbda) - 1) / lmbda

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 622, in objective
    fair_scores, fair_scores_by_group = _compute_fair_metric(
                                        ^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 381, in _compute_fair_metric
    y_pred = np.array(scores["estimator"][fold].predict(x_original))
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 658, in predict
    Xt = transform.transform(Xt)
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_set_output.py", line 319, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/compose/_column_transformer.py", line 1101, in transform
    Xs = self._call_func_on_transformers(
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/compose/_column_transformer.py", line 873, in _call_func_on_transformers
    transformers = list(
                   ^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/compose/_column_transformer.py", line 469, in _iter
    transformers = self.transformers_
                   ^^^^^^^^^^^^^^^^^^
AttributeError: 'ColumnTransformer' object has no attribute 'transformers_'. Did you mean: 'transformers'?

69
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 2}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 80.7301459312439, 'fit_time': np.float64(12.832845306396484), 'score_time': np.float64(0.008036422729492187), 'absolute_time': 1746733969.996026}
70
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.9086206896551724), 'balanced_accuracy': np.float64(0.5223809523809524), 'by_group': {'female_div/dep/mar': np.float64(0.93), 'male_div/sep': np.float64(0.92), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.93)}, 'status': 'success', 'total_time': 70.40120601654053, 'fit_time': np.float64(14.02594838142395), 'score_time': np.float64(0.008954191207885742), 'absolute_time': 1746734040.5161803, 'flatten_equalized_odds_ratio': '1.0_0.75_0.97_1.0_0.83', 'flatten_balanced_accuracy': '0.5_0.57_0.5_0.5_0.54'}
71
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 10, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.993103448275862), 'balanced_accuracy': np.float64(0.5002380952380953), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.99)}, 'status': 'success', 'total_time': 51.83178472518921, 'fit_time': np.float64(10.303117656707764), 'score_time': np.float64(0.019781017303466798), 'absolute_time': 1746734092.4620984, 'flatten_equalized_odds_ratio': '1.0_1.0_0.97_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
72
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 2}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.9252873563218392), 'balanced_accuracy': np.float64(0.5119047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.96), 'male_div/sep': np.float64(0.93), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.93)}, 'status': 'success', 'total_time': 188.3980152606964, 'fit_time': np.float64(14.798998975753785), 'score_time': np.float64(0.009337997436523438), 'absolute_time': 1746734280.9766526, 'flatten_equalized_odds_ratio': '1.0_1.0_0.97_0.83_0.83', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.52_0.54'}
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')} was NaN

73
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 60.2146520614624, 'fit_time': np.float64(11.99251184463501), 'score_time': np.float64(0.007723236083984375), 'absolute_time': 1746734341.3214092, 'flatten_equalized_odds_ratio': 'nan_nan_nan_nan_nan', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
74
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 3, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.8138505747126438), 'balanced_accuracy': np.float64(0.505), 'by_group': {'female_div/dep/mar': np.float64(0.87), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(0.85), 'male_single': np.float64(0.91)}, 'status': 'success', 'total_time': 73.31512761116028, 'fit_time': np.float64(14.457225656509399), 'score_time': np.float64(0.08057279586791992), 'absolute_time': 1746734414.7930005, 'flatten_equalized_odds_ratio': '0.86_0.27_0.97_0.97_1.0', 'flatten_balanced_accuracy': '0.53_0.49_0.51_0.49_0.5'}
75
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 10, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.9268103448275863), 'balanced_accuracy': np.float64(0.5116666666666666), 'by_group': {'female_div/dep/mar': np.float64(0.95), 'male_div/sep': np.float64(0.95), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.93)}, 'status': 'success', 'total_time': 74.7803807258606, 'fit_time': np.float64(14.763141059875489), 'score_time': np.float64(0.09396028518676758), 'absolute_time': 1746734491.2894886, 'flatten_equalized_odds_ratio': '1.0_0.75_0.99_1.0_0.9', 'flatten_balanced_accuracy': '0.5_0.53_0.5_0.5_0.53'}
76
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 9}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'equalized_odds_ratio': np.float64(0.7239080459770115), 'balanced_accuracy': np.float64(0.5347619047619048), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.76), 'male_mar/wid': np.float64(0.97), 'male_single': np.float64(0.82)}, 'status': 'success', 'total_time': 101.85473370552063, 'fit_time': np.float64(16.093700170516968), 'score_time': np.float64(0.02246379852294922), 'absolute_time': 1746734593.2607126, 'flatten_equalized_odds_ratio': '0.42_0.83_0.95_0.83_0.59', 'flatten_balanced_accuracy': '0.63_0.5_0.5_0.51_0.53'}
AutoML: optimization done.
AutoML: miner done.
AutoML: export done.
Here is the standard output/error of the command:

Here is the standard output/error of the command:

Here is the standard output/error of the command:

hamlet_1756187477
AutoML execution ended
