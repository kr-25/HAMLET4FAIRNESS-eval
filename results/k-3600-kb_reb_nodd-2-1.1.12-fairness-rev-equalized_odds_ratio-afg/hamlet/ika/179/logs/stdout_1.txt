Sensitive groups ready!
Theory ready!
Theory:
step(normalization) :- true.
step(features) :- true.
step(mitigation) :- true.
step(rebalancing) :- true.
step(classification) :- true.
operator(normalization, power_transformer) :- true.
operator(normalization, robust_scaler) :- true.
operator(normalization, standard) :- true.
operator(normalization, minmax) :- true.
operator(features, select_k_best) :- true.
operator(features, pca) :- true.
operator(mitigation, corr_remover) :- true.
operator(mitigation, lfr) :- true.
operator(rebalancing, near_miss) :- true.
operator(rebalancing, smote) :- true.
operator(classification, knn) :- true.
operator(classification, nn) :- true.
operator(classification, rf) :- true.
hyperparameter(robust_scaler, with_centering, choice) :- true.
hyperparameter(robust_scaler, with_scaling, choice) :- true.
hyperparameter(standard, with_mean, choice) :- true.
hyperparameter(standard, with_std, choice) :- true.
hyperparameter(select_k_best, k, randint) :- true.
hyperparameter(pca, n_components, randint) :- true.
hyperparameter(corr_remover, alpha, choice) :- true.
hyperparameter(lfr, n_prototypes, choice) :- true.
hyperparameter(lfr, reconstruct_weight, choice) :- true.
hyperparameter(lfr, fairness_weight, choice) :- true.
hyperparameter(near_miss, n_neighbors, randint) :- true.
hyperparameter(smote, k_neighbors, randint) :- true.
hyperparameter(knn, n_neighbors, randint) :- true.
hyperparameter(knn, weights, choice) :- true.
hyperparameter(knn, metric, choice) :- true.
hyperparameter(nn, n_hidden_layers, choice) :- true.
hyperparameter(nn, n_neurons, choice) :- true.
hyperparameter(nn, activation, choice) :- true.
hyperparameter(nn, solver, choice) :- true.
hyperparameter(nn, alpha, choice) :- true.
hyperparameter(nn, learning_rate, choice) :- true.
hyperparameter(rf, n_estimators, choice) :- true.
hyperparameter(rf, max_depth, randint) :- true.
hyperparameter(rf, max_features, randint) :- true.
hyperparameter(rf, min_samples_split, randint) :- true.
hyperparameter(rf, max_leaf_nodes, randint) :- true.
hyperparameter(rf, bootstrap, choice) :- true.
hyperparameter(rf, criterion, choice) :- true.
domain(robust_scaler, with_centering, [true, false]) :- true.
domain(robust_scaler, with_scaling, [true, false]) :- true.
domain(standard, with_mean, [true, false]) :- true.
domain(standard, with_std, [true, false]) :- true.
domain(select_k_best, k, [1, 10]) :- true.
domain(pca, n_components, [1, 8]) :- true.
domain(corr_remover, alpha, [0.25, 0.5, 0.75, 1.0]) :- true.
domain(lfr, n_prototypes, [10, 50, 100, 200]) :- true.
domain(lfr, reconstruct_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(lfr, fairness_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(near_miss, n_neighbors, [1, 4]) :- true.
domain(smote, k_neighbors, [5, 8]) :- true.
domain(knn, n_neighbors, [3, 20]) :- true.
domain(knn, weights, [uniform, distance]) :- true.
domain(knn, metric, [minkowski, euclidean, manhattan]) :- true.
domain(nn, n_hidden_layers, [1, 5, 10, 20]) :- true.
domain(nn, n_neurons, [5, 10, 25, 50]) :- true.
domain(nn, activation, [logistic, tanh, relu]) :- true.
domain(nn, solver, [lbfgs, sgd, adam]) :- true.
domain(nn, alpha, [0.0001, 0.001, 0.01, 0.00001]) :- true.
domain(nn, learning_rate, [constant, invscaling, adaptive]) :- true.
domain(rf, n_estimators, [10, 25, 50, 75, 100]) :- true.
domain(rf, max_depth, [1, 5]) :- true.
domain(rf, max_features, [1, 4]) :- true.
domain(rf, min_samples_split, [2, 6]) :- true.
domain(rf, max_leaf_nodes, [2, 6]) :- true.
domain(rf, bootstrap, [true, false]) :- true.
domain(rf, criterion, [gini, entropy]) :- true.
dataset(adult) :- true.
metric(balanced_accuracy) :- true.
fairness_metric(equalized_odds_ratio) :- true.
sensitive_feature(sex, ['Male', 'Female']) :- true.
sensitive_feature(race, ['Amer-Indian-Eskimo', 'Asian-Pac-Islander', 'Black', 'Other', 'White']) :- true.
':=>'(mc0, unbalanced_dataset) :- true.
pipeline([Step_1_0], ZZ_0) :- (step(Step_1_0), '\\='(Step_1_0, classification), operator(classification, ZZ_0)).
pipeline([Step_1_1, Step_2_0], ZZ_1) :- (step(Step_1_1), step(Step_2_0), '\\='(Step_1_1, classification), '\\='(Step_2_0, classification), '\\='(Step_1_1, Step_2_0), operator(classification, ZZ_1)).
pipeline([Step_1_2, Step_2_1, Step_3_0], ZZ_2) :- (step(Step_1_2), step(Step_2_1), step(Step_3_0), '\\='(Step_1_2, classification), '\\='(Step_2_1, classification), '\\='(Step_3_0, classification), '\\='(Step_1_2, Step_2_1), '\\='(Step_1_2, Step_3_0), '\\='(Step_2_1, Step_3_0), operator(classification, ZZ_2)).
pipeline([Step_1_3, Step_2_2, Step_3_1, Step_4_0], ZZ_3) :- (step(Step_1_3), step(Step_2_2), step(Step_3_1), step(Step_4_0), '\\='(Step_1_3, classification), '\\='(Step_2_2, classification), '\\='(Step_3_1, classification), '\\='(Step_4_0, classification), '\\='(Step_1_3, Step_2_2), '\\='(Step_1_3, Step_3_1), '\\='(Step_1_3, Step_4_0), '\\='(Step_2_2, Step_3_1), '\\='(Step_2_2, Step_4_0), '\\='(Step_3_1, Step_4_0), operator(classification, ZZ_3)).
':=>'(p458638, sensitive_group(['Male'])) :- true.
':=>'(p958886, sensitive_group(['Female'])) :- true.
':=>'(p508939, sensitive_group(['Amer-Indian-Eskimo'])) :- true.
':=>'(p298176, sensitive_group(['Asian-Pac-Islander'])) :- true.
':=>'(p82409, sensitive_group(['Black'])) :- true.
':=>'(p539607, sensitive_group(['Other'])) :- true.
':=>'(p211885, sensitive_group(['White'])) :- true.
':=>'(p682574, sensitive_group(['Male', 'Amer-Indian-Eskimo'])) :- true.
':=>'(p415035, sensitive_group(['Male', 'Asian-Pac-Islander'])) :- true.
':=>'(p833472, sensitive_group(['Male', 'Black'])) :- true.
':=>'(p367315, sensitive_group(['Male', 'Other'])) :- true.
':=>'(p449983, sensitive_group(['Male', 'White'])) :- true.
':=>'(p786056, sensitive_group(['Female', 'Amer-Indian-Eskimo'])) :- true.
':=>'(p757718, sensitive_group(['Female', 'Asian-Pac-Islander'])) :- true.
':=>'(p649802, sensitive_group(['Female', 'Black'])) :- true.
':=>'(p589758, sensitive_group(['Female', 'Other'])) :- true.
':=>'(p159004, sensitive_group(['Female', 'White'])) :- true.

Checking Config
Exporting Config
Saving Graph
Exporting AutoML input
Exporting Space
Exporting Constraints
Input created for iteration Config(iteration=1, dataset=adult, metric=balanced_accuracy, fairnessMetric=equalized_odds_ratio, sensitiveFeatures=[sex, race], mode=max, batchSize=999999, timeBudget=900, seed=42)
Here is the standard output/error of the command:

dd92bcc2fff57e1f4bd6785181252a7a4497444d8d1b77797a6a73db7b456d2f
Here is the standard output/error of the command:

Here is the standard output/error of the command:

WARNING:root:No module named 'rpy2': FairAdapt will be unavailable. To install, run:
pip install 'aif360[FairAdapt]'
INFO:flaml.tune.searcher.blendsearch:No low-cost partial config given to the search algorithm. For cost-frugal search, consider providing low-cost values for cost-related hps via 'low_cost_partial_config'. More info can be found at https://microsoft.github.io/FLAML/docs/FAQ#about-low_cost_partial_config-in-tune
AutoML: starting optimization.
1
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 4, 'max_leaf_nodes': 4, 'min_samples_split': 5, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.2574981282193981), 'balanced_accuracy': np.float64(0.6870577813477474), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.3), 'Asian-Pac-Islander_Male': np.float64(0.64), 'Black_Female': np.float64(0.47), 'Black_Male': np.float64(0.79), 'White_Female': np.float64(0.49), 'White_Male': np.float64(0.92)}, 'status': 'success', 'total_time': 402.7880976200104, 'fit_time': np.float64(80.38940467834473), 'score_time': np.float64(0.03982939720153809), 'absolute_time': 1746700703.4206376, 'flatten_equalized_odds_ratio': '0.42_0.61_0.0_0.27_0.0', 'flatten_balanced_accuracy': '0.67_0.6_0.7_0.73_0.73'}
2
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 8, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 3}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.08565889732312823), 'balanced_accuracy': np.float64(0.6852705800677538), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.34), 'Asian-Pac-Islander_Male': np.float64(0.99), 'Black_Female': np.float64(0.09), 'Black_Male': np.float64(0.4), 'White_Female': np.float64(0.17), 'White_Male': np.float64(0.64)}, 'status': 'success', 'total_time': 7.126847505569458, 'fit_time': np.float64(0.035275936126708984), 'score_time': np.float64(0.6225110054016113), 'absolute_time': 1746700710.5995116, 'flatten_equalized_odds_ratio': '0.0_0.01_0.07_0.06_0.29', 'flatten_balanced_accuracy': '0.61_0.74_0.75_0.69_0.63'}
3
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 6, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')}
{'equalized_odds_ratio': np.float64(0.3421872440446195), 'balanced_accuracy': np.float64(0.520965370664285), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.71), 'Asian-Pac-Islander_Male': np.float64(0.95), 'Black_Female': np.float64(0.63), 'Black_Male': np.float64(0.97), 'White_Female': np.float64(0.34), 'White_Male': np.float64(0.54)}, 'status': 'success', 'total_time': 5.121958017349243, 'fit_time': np.float64(0.17150473594665527), 'score_time': np.float64(0.3749691486358643), 'absolute_time': 1746700715.7897828, 'flatten_equalized_odds_ratio': '0.35_0.31_0.33_0.38_0.34', 'flatten_balanced_accuracy': '0.52_0.53_0.52_0.52_0.53'}
4
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 3, 'max_leaf_nodes': 4, 'min_samples_split': 2, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.23868518855540244), 'balanced_accuracy': np.float64(0.6658849204631444), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.79), 'Asian-Pac-Islander_Male': np.float64(0.95), 'Black_Female': np.float64(0.32), 'Black_Male': np.float64(0.45), 'White_Female': np.float64(0.24), 'White_Male': np.float64(0.37)}, 'status': 'success', 'total_time': 10.040725946426392, 'fit_time': np.float64(1.8627604007720948), 'score_time': np.float64(0.025464677810668947), 'absolute_time': 1746700725.8989675, 'flatten_equalized_odds_ratio': '0.23_0.24_0.23_0.29_0.2', 'flatten_balanced_accuracy': '0.66_0.68_0.67_0.66_0.66'}
5
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.18136654523652293), 'balanced_accuracy': np.float64(0.7880539368087296), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.46), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.2), 'Black_Male': np.float64(0.48), 'White_Female': np.float64(0.22), 'White_Male': np.float64(0.82)}, 'status': 'success', 'total_time': 225.70362186431885, 'fit_time': np.float64(44.99360837936401), 'score_time': np.float64(0.018800926208496094), 'absolute_time': 1746700951.6629372, 'flatten_equalized_odds_ratio': '0.17_0.15_0.2_0.22_0.16', 'flatten_balanced_accuracy': '0.79_0.78_0.78_0.8_0.79'}
6
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'equalized_odds_ratio': np.float64(0.002745383867832847), 'balanced_accuracy': np.float64(0.7668272410578367), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.01), 'Asian-Pac-Islander_Male': np.float64(0.98), 'Black_Female': np.float64(0.02), 'Black_Male': np.float64(0.61), 'White_Female': np.float64(0.03), 'White_Male': np.float64(0.91)}, 'status': 'success', 'total_time': 6.295126676559448, 'fit_time': np.float64(1.0831274032592773), 'score_time': np.float64(0.029424381256103516), 'absolute_time': 1746700958.8149934, 'flatten_equalized_odds_ratio': '0.0_0.01_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.75_0.77_0.77_0.77_0.77'}
7
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_split': 5, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'equalized_odds_ratio': np.float64(0.0055900621118012426), 'balanced_accuracy': np.float64(0.7526046719790612), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.01), 'Asian-Pac-Islander_Male': np.float64(0.89), 'Black_Female': np.float64(0.04), 'Black_Male': np.float64(0.68), 'White_Female': np.float64(0.05), 'White_Male': np.float64(0.96)}, 'status': 'success', 'total_time': 5.715674877166748, 'fit_time': np.float64(0.941535472869873), 'score_time': np.float64(0.026289939880371094), 'absolute_time': 1746700964.6406019, 'flatten_equalized_odds_ratio': '0.0_0.03_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.75_0.75_0.75_0.76_0.75'}
8
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 6, 'min_samples_split': 6, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 7}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.22241505978680554), 'balanced_accuracy': np.float64(0.7512267702090979), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.48), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.22), 'Black_Male': np.float64(0.41), 'White_Female': np.float64(0.36), 'White_Male': np.float64(0.82)}, 'status': 'success', 'total_time': 1.4969418048858643, 'fit_time': np.float64(0.1534289836883545), 'score_time': np.float64(0.011478328704833984), 'absolute_time': 1746700966.2153897, 'flatten_equalized_odds_ratio': '0.22_0.17_0.26_0.26_0.2', 'flatten_balanced_accuracy': '0.75_0.75_0.75_0.76_0.75'}
9
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 1, 'max_leaf_nodes': 4, 'min_samples_split': 2, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('SelectKBest'), 'k': 9}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.47444975535663064), 'balanced_accuracy': np.float64(0.5180325833306757), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.92), 'Asian-Pac-Islander_Male': np.float64(0.73), 'Black_Female': np.float64(0.65), 'Black_Male': np.float64(0.51), 'White_Female': np.float64(0.69), 'White_Male': np.float64(0.62)}, 'status': 'success', 'total_time': 267.0544686317444, 'fit_time': np.float64(51.927226543426514), 'score_time': np.float64(0.04439187049865723), 'absolute_time': 1746701233.3455915, 'flatten_equalized_odds_ratio': '0.65_0.36_0.73_0.35_0.28', 'flatten_balanced_accuracy': '0.53_0.54_0.52_0.51_0.5'}
AutoML: optimization done.
AutoML: miner done.
AutoML: export done.
Here is the standard output/error of the command:

Here is the standard output/error of the command:

Here is the standard output/error of the command:

hamlet_1962142292
AutoML execution ended
