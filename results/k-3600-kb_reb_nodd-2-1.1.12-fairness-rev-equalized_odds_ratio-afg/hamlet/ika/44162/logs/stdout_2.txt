Sensitive groups ready!
Theory ready!
Theory:
step(normalization) :- true.
step(features) :- true.
step(mitigation) :- true.
step(rebalancing) :- true.
step(classification) :- true.
operator(normalization, power_transformer) :- true.
operator(normalization, robust_scaler) :- true.
operator(normalization, standard) :- true.
operator(normalization, minmax) :- true.
operator(features, select_k_best) :- true.
operator(features, pca) :- true.
operator(mitigation, corr_remover) :- true.
operator(mitigation, lfr) :- true.
operator(rebalancing, near_miss) :- true.
operator(rebalancing, smote) :- true.
operator(classification, knn) :- true.
operator(classification, nn) :- true.
operator(classification, rf) :- true.
hyperparameter(robust_scaler, with_centering, choice) :- true.
hyperparameter(robust_scaler, with_scaling, choice) :- true.
hyperparameter(standard, with_mean, choice) :- true.
hyperparameter(standard, with_std, choice) :- true.
hyperparameter(select_k_best, k, randint) :- true.
hyperparameter(pca, n_components, randint) :- true.
hyperparameter(corr_remover, alpha, choice) :- true.
hyperparameter(lfr, n_prototypes, choice) :- true.
hyperparameter(lfr, reconstruct_weight, choice) :- true.
hyperparameter(lfr, fairness_weight, choice) :- true.
hyperparameter(near_miss, n_neighbors, randint) :- true.
hyperparameter(smote, k_neighbors, randint) :- true.
hyperparameter(knn, n_neighbors, randint) :- true.
hyperparameter(knn, weights, choice) :- true.
hyperparameter(knn, metric, choice) :- true.
hyperparameter(nn, n_hidden_layers, choice) :- true.
hyperparameter(nn, n_neurons, choice) :- true.
hyperparameter(nn, activation, choice) :- true.
hyperparameter(nn, solver, choice) :- true.
hyperparameter(nn, alpha, choice) :- true.
hyperparameter(nn, learning_rate, choice) :- true.
hyperparameter(rf, n_estimators, choice) :- true.
hyperparameter(rf, max_depth, randint) :- true.
hyperparameter(rf, max_features, randint) :- true.
hyperparameter(rf, min_samples_split, randint) :- true.
hyperparameter(rf, max_leaf_nodes, randint) :- true.
hyperparameter(rf, bootstrap, choice) :- true.
hyperparameter(rf, criterion, choice) :- true.
domain(robust_scaler, with_centering, [true, false]) :- true.
domain(robust_scaler, with_scaling, [true, false]) :- true.
domain(standard, with_mean, [true, false]) :- true.
domain(standard, with_std, [true, false]) :- true.
domain(select_k_best, k, [1, 10]) :- true.
domain(pca, n_components, [1, 8]) :- true.
domain(corr_remover, alpha, [0.25, 0.5, 0.75, 1.0]) :- true.
domain(lfr, n_prototypes, [10, 50, 100, 200]) :- true.
domain(lfr, reconstruct_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(lfr, fairness_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(near_miss, n_neighbors, [1, 4]) :- true.
domain(smote, k_neighbors, [5, 8]) :- true.
domain(knn, n_neighbors, [3, 20]) :- true.
domain(knn, weights, [uniform, distance]) :- true.
domain(knn, metric, [minkowski, euclidean, manhattan]) :- true.
domain(nn, n_hidden_layers, [1, 5, 10, 20]) :- true.
domain(nn, n_neurons, [5, 10, 25, 50]) :- true.
domain(nn, activation, [logistic, tanh, relu]) :- true.
domain(nn, solver, [lbfgs, sgd, adam]) :- true.
domain(nn, alpha, [0.0001, 0.001, 0.01, 0.00001]) :- true.
domain(nn, learning_rate, [constant, invscaling, adaptive]) :- true.
domain(rf, n_estimators, [10, 25, 50, 75, 100]) :- true.
domain(rf, max_depth, [1, 5]) :- true.
domain(rf, max_features, [1, 4]) :- true.
domain(rf, min_samples_split, [2, 6]) :- true.
domain(rf, max_leaf_nodes, [2, 6]) :- true.
domain(rf, bootstrap, [true, false]) :- true.
domain(rf, criterion, [gini, entropy]) :- true.
dataset(compass) :- true.
metric(balanced_accuracy) :- true.
fairness_metric(equalized_odds_ratio) :- true.
sensitive_feature(sex, [0, 1]) :- true.
sensitive_feature(race, [0, 1, 2, 3, 4, 5]) :- true.
pipeline([Step_1_0], ZZ_0) :- (step(Step_1_0), '\\='(Step_1_0, classification), operator(classification, ZZ_0)).
pipeline([Step_1_1, Step_2_0], ZZ_1) :- (step(Step_1_1), step(Step_2_0), '\\='(Step_1_1, classification), '\\='(Step_2_0, classification), '\\='(Step_1_1, Step_2_0), operator(classification, ZZ_1)).
pipeline([Step_1_2, Step_2_1, Step_3_0], ZZ_2) :- (step(Step_1_2), step(Step_2_1), step(Step_3_0), '\\='(Step_1_2, classification), '\\='(Step_2_1, classification), '\\='(Step_3_0, classification), '\\='(Step_1_2, Step_2_1), '\\='(Step_1_2, Step_3_0), '\\='(Step_2_1, Step_3_0), operator(classification, ZZ_2)).
pipeline([Step_1_3, Step_2_2, Step_3_1, Step_4_0], ZZ_3) :- (step(Step_1_3), step(Step_2_2), step(Step_3_1), step(Step_4_0), '\\='(Step_1_3, classification), '\\='(Step_2_2, classification), '\\='(Step_3_1, classification), '\\='(Step_4_0, classification), '\\='(Step_1_3, Step_2_2), '\\='(Step_1_3, Step_3_1), '\\='(Step_1_3, Step_4_0), '\\='(Step_2_2, Step_3_1), '\\='(Step_2_2, Step_4_0), '\\='(Step_3_1, Step_4_0), operator(classification, ZZ_3)).
':=>'(p560114, sensitive_group([0])) :- true.
':=>'(p757777, sensitive_group([1])) :- true.
':=>'(p478230, sensitive_group([0])) :- true.
':=>'(p701679, sensitive_group([1])) :- true.
':=>'(p290462, sensitive_group([2])) :- true.
':=>'(p982156, sensitive_group([3])) :- true.
':=>'(p962609, sensitive_group([4])) :- true.
':=>'(p515563, sensitive_group([5])) :- true.
':=>'(p710380, sensitive_group([0, 0])) :- true.
':=>'(p978015, sensitive_group([0, 1])) :- true.
':=>'(p640535, sensitive_group([0, 2])) :- true.
':=>'(p262009, sensitive_group([0, 3])) :- true.
':=>'(p235494, sensitive_group([0, 4])) :- true.
':=>'(p38402, sensitive_group([0, 5])) :- true.
':=>'(p687118, sensitive_group([1, 0])) :- true.
':=>'(p197623, sensitive_group([1, 1])) :- true.
':=>'(p428025, sensitive_group([1, 2])) :- true.
':=>'(p688731, sensitive_group([1, 3])) :- true.
':=>'(p881462, sensitive_group([1, 4])) :- true.
':=>'(p494251, sensitive_group([1, 5])) :- true.

Checking Config
Exporting Config
Saving Graph
Exporting AutoML input
Exporting Space
Exporting Constraints
Input created for iteration Config(iteration=2, dataset=compass, metric=balanced_accuracy, fairnessMetric=equalized_odds_ratio, sensitiveFeatures=[sex, race], mode=max, batchSize=999999, timeBudget=900, seed=42)
Here is the standard output/error of the command:

3074080003cc39bd8e1317987386472c6399a8510d5d3a3bcd69cf5c0a00c46e
Here is the standard output/error of the command:

Here is the standard output/error of the command:

WARNING:root:No module named 'rpy2': FairAdapt will be unavailable. To install, run:
pip install 'aif360[FairAdapt]'
INFO:flaml.tune.searcher.blendsearch:No low-cost partial config given to the search algorithm. For cost-frugal search, consider providing low-cost values for cost-related hps via 'low_cost_partial_config'. More info can be found at https://microsoft.github.io/FLAML/docs/FAQ#about-low_cost_partial_config-in-tune
AutoML: starting optimization.
35
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 4, 'n_estimators': np.int64(75)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.14982717216161318), 'balanced_accuracy': np.float64(0.6655914941665293), 'by_group': {'0_0': np.float64(0.67), '0_2': np.float64(0.41), '0_3': np.float64(0.15), '1_0': np.float64(1.0), '1_2': np.float64(0.46), '1_3': np.float64(0.46), '1_5': np.float64(0.33)}, 'status': 'success', 'total_time': 2.590383529663086, 'fit_time': np.float64(0.4419222831726074), 'score_time': np.float64(0.011825323104858398), 'absolute_time': 1746697340.116993, 'flatten_equalized_odds_ratio': '0.24_0.32_0.0_0.09_0.1', 'flatten_balanced_accuracy': '0.66_0.66_0.66_0.68_0.66'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

36
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification')}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'0_0': -inf, '0_2': -inf, '0_3': -inf, '1_0': -inf, '1_2': -inf, '1_3': -inf, '1_5': -inf}, 'status': 'fail', 'total_time': 0.0009500980377197266, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746697340.2208023}
37
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 14, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.23836622864280604), 'balanced_accuracy': np.float64(0.638775573539805), 'by_group': {'0_0': np.float64(0.57), '0_2': np.float64(0.47), '0_3': np.float64(0.31), '1_0': np.float64(1.0), '1_2': np.float64(0.5), '1_3': np.float64(0.51), '1_5': np.float64(0.45)}, 'status': 'success', 'total_time': 0.6747918128967285, 'fit_time': np.float64(0.03436312675476074), 'score_time': np.float64(0.021961355209350587), 'absolute_time': 1746697340.9804242, 'flatten_equalized_odds_ratio': '0.21_0.41_0.1_0.23_0.24', 'flatten_balanced_accuracy': '0.64_0.63_0.63_0.67_0.63'}
38
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(75)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(2.0)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.536251500745345), 'balanced_accuracy': np.float64(0.6229779749391406), 'by_group': {'0_0': np.float64(0.78), '0_2': np.float64(0.83), '0_3': np.float64(0.54), '1_0': np.float64(0.86), '1_2': np.float64(0.78), '1_3': np.float64(0.73), '1_5': np.float64(0.73)}, 'status': 'success', 'total_time': 31.52745246887207, 'fit_time': np.float64(6.214248991012573), 'score_time': np.float64(0.02194056510925293), 'absolute_time': 1746697372.5696197, 'flatten_equalized_odds_ratio': '0.56_0.69_0.61_0.28_0.54', 'flatten_balanced_accuracy': '0.65_0.63_0.61_0.61_0.61'}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
39
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 2, 'max_leaf_nodes': 2, 'min_samples_split': 3, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('SelectKBest'), 'k': 1}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.21641780120040988), 'balanced_accuracy': np.float64(0.6331615018254186), 'by_group': {'0_0': np.float64(0.72), '0_2': np.float64(0.68), '0_3': np.float64(0.22), '1_0': np.float64(0.92), '1_2': np.float64(0.6), '1_3': np.float64(0.6), '1_5': np.float64(0.52)}, 'status': 'success', 'total_time': 0.823718786239624, 'fit_time': np.float64(0.09536209106445312), 'score_time': np.float64(0.007448053359985352), 'absolute_time': 1746697373.4494848, 'flatten_equalized_odds_ratio': '0.3_0.2_0.0_0.2_0.38', 'flatten_balanced_accuracy': '0.63_0.65_0.64_0.63_0.62'}
40
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(50), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_rebalancing_features_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.13312965228839946), 'balanced_accuracy': np.float64(0.6827805945589827), 'by_group': {'0_0': np.float64(0.7), '0_2': np.float64(0.45), '0_3': np.float64(0.13), '1_0': np.float64(1.0), '1_2': np.float64(0.53), '1_3': np.float64(0.42), '1_5': np.float64(0.34)}, 'status': 'success', 'total_time': 143.43390250205994, 'fit_time': np.float64(28.603505659103394), 'score_time': np.float64(0.020465707778930663), 'absolute_time': 1746697516.9419253, 'flatten_equalized_odds_ratio': '0.09_0.18_0.0_0.2_0.19', 'flatten_balanced_accuracy': '0.69_0.67_0.68_0.69_0.67'}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
41
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 5, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.24060936429937171), 'balanced_accuracy': np.float64(0.6507582753416796), 'by_group': {'0_0': np.float64(0.46), '0_2': np.float64(0.47), '0_3': np.float64(0.25), '1_0': np.float64(1.0), '1_2': np.float64(0.61), '1_3': np.float64(0.48), '1_5': np.float64(0.52)}, 'status': 'success', 'total_time': 3.9332802295684814, 'fit_time': np.float64(0.023699855804443358), 'score_time': np.float64(0.3485104084014893), 'absolute_time': 1746697520.929348, 'flatten_equalized_odds_ratio': '0.19_0.13_0.2_0.38_0.3', 'flatten_balanced_accuracy': '0.65_0.65_0.63_0.67_0.65'}
42
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 4, 'max_leaf_nodes': 4, 'min_samples_split': 2, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification')}
{'equalized_odds_ratio': np.float64(0.3223752990783629), 'balanced_accuracy': np.float64(0.6230681274221583), 'by_group': {'0_0': np.float64(0.88), '0_2': np.float64(0.79), '0_3': np.float64(0.33), '1_0': np.float64(0.93), '1_2': np.float64(0.64), '1_3': np.float64(0.58), '1_5': np.float64(0.43)}, 'status': 'success', 'total_time': 9.65849757194519, 'fit_time': np.float64(1.8421998023986816), 'score_time': np.float64(0.017163562774658202), 'absolute_time': 1746697530.6556504, 'flatten_equalized_odds_ratio': '0.39_0.16_0.44_0.35_0.28', 'flatten_balanced_accuracy': '0.66_0.65_0.6_0.63_0.59'}
43
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 6, 'n_estimators': np.int64(100)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_features_mitigation_classification')}
{'equalized_odds_ratio': np.float64(0.4657797723842082), 'balanced_accuracy': np.float64(0.5824504913279444), 'by_group': {'0_0': np.float64(0.89), '0_2': np.float64(0.77), '0_3': np.float64(0.49), '1_0': np.float64(0.91), '1_2': np.float64(0.71), '1_3': np.float64(0.69), '1_5': np.float64(0.47)}, 'status': 'success', 'total_time': 8.51065707206726, 'fit_time': np.float64(1.6073830127716064), 'score_time': np.float64(0.02357025146484375), 'absolute_time': 1746697540.3852956, 'flatten_equalized_odds_ratio': '0.48_0.47_0.48_0.41_0.48', 'flatten_balanced_accuracy': '0.59_0.62_0.56_0.57_0.57'}
44
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.3067814370972195), 'balanced_accuracy': np.float64(0.6461604595717303), 'by_group': {'0_0': np.float64(0.7), '0_2': np.float64(0.72), '0_3': np.float64(0.37), '1_0': np.float64(0.82), '1_2': np.float64(0.73), '1_3': np.float64(0.72), '1_5': np.float64(0.52)}, 'status': 'success', 'total_time': 0.7897589206695557, 'fit_time': np.float64(0.09390263557434082), 'score_time': np.float64(0.006033182144165039), 'absolute_time': 1746697541.237919, 'flatten_equalized_odds_ratio': '0.41_0.4_0.0_0.2_0.53', 'flatten_balanced_accuracy': '0.65_0.65_0.64_0.64_0.64'}
45
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 3, 'max_leaf_nodes': 2, 'min_samples_split': 5, 'n_estimators': np.int64(100)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'equalized_odds_ratio': np.float64(0.2073379341680585), 'balanced_accuracy': np.float64(0.6808171764172408), 'by_group': {'0_0': np.float64(0.61), '0_2': np.float64(0.52), '0_3': np.float64(0.22), '1_0': np.float64(1.0), '1_2': np.float64(0.44), '1_3': np.float64(0.46), '1_5': np.float64(0.35)}, 'status': 'success', 'total_time': 2.920879602432251, 'fit_time': np.float64(0.5007757186889649), 'score_time': np.float64(0.01676807403564453), 'absolute_time': 1746697544.2159033, 'flatten_equalized_odds_ratio': '0.25_0.33_0.0_0.19_0.27', 'flatten_balanced_accuracy': '0.68_0.68_0.68_0.69_0.67'}
46
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 8, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'equalized_odds_ratio': np.float64(0.17420949758293633), 'balanced_accuracy': np.float64(0.525672933858278), 'by_group': {'0_0': np.float64(0.61), '0_2': np.float64(0.46), '0_3': np.float64(0.43), '1_0': np.float64(0.61), '1_2': np.float64(0.5), '1_3': np.float64(0.61), '1_5': np.float64(0.42)}, 'status': 'success', 'total_time': 23.759344339370728, 'fit_time': np.float64(4.147326707839966), 'score_time': np.float64(0.27950320243835447), 'absolute_time': 1746697568.036835, 'flatten_equalized_odds_ratio': '0.41_0.16_0.0_0.0_0.3', 'flatten_balanced_accuracy': '0.5_0.51_0.5_0.51_0.61'}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
47
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 13, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 3}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.3384416984454102), 'balanced_accuracy': np.float64(0.6345115031888545), 'by_group': {'0_0': np.float64(0.43), '0_2': np.float64(0.48), '0_3': np.float64(0.36), '1_0': np.float64(0.99), '1_2': np.float64(0.65), '1_3': np.float64(0.6), '1_5': np.float64(0.63)}, 'status': 'success', 'total_time': 0.7144083976745605, 'fit_time': np.float64(0.03373074531555176), 'score_time': np.float64(0.026551008224487305), 'absolute_time': 1746697568.8107624, 'flatten_equalized_odds_ratio': '0.46_0.44_0.1_0.27_0.43', 'flatten_balanced_accuracy': '0.64_0.63_0.63_0.64_0.63'}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
48
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 4, 'min_samples_split': 5, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 1}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'equalized_odds_ratio': np.float64(0.33195917489395754), 'balanced_accuracy': np.float64(0.6268996406467577), 'by_group': {'0_0': np.float64(0.84), '0_2': np.float64(0.84), '0_3': np.float64(0.35), '1_0': np.float64(0.96), '1_2': np.float64(0.5), '1_3': np.float64(0.44), '1_5': np.float64(0.45)}, 'status': 'success', 'total_time': 2.2308740615844727, 'fit_time': np.float64(0.30563721656799314), 'score_time': np.float64(0.017052078247070314), 'absolute_time': 1746697571.1066053, 'flatten_equalized_odds_ratio': '0.3_0.49_0.1_0.38_0.38', 'flatten_balanced_accuracy': '0.63_0.64_0.62_0.64_0.62'}
49
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.37158887166489024), 'balanced_accuracy': np.float64(0.6189766745425012), 'by_group': {'0_0': np.float64(0.78), '0_2': np.float64(0.66), '0_3': np.float64(0.4), '1_0': np.float64(0.95), '1_2': np.float64(0.63), '1_3': np.float64(0.63), '1_5': np.float64(0.51)}, 'status': 'success', 'total_time': 6.1747777462005615, 'fit_time': np.float64(0.8897260189056396), 'score_time': np.float64(0.15087342262268066), 'absolute_time': 1746697577.3463926, 'flatten_equalized_odds_ratio': '0.14_0.38_0.58_0.51_0.25', 'flatten_balanced_accuracy': '0.61_0.62_0.62_0.62_0.62'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

50
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'0_0': -inf, '0_2': -inf, '0_3': -inf, '1_0': -inf, '1_2': -inf, '1_3': -inf, '1_5': -inf}, 'status': 'fail', 'total_time': 0.0005564689636230469, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746697577.4123049}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
51
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.13930796084334265), 'balanced_accuracy': np.float64(0.6707448056106203), 'by_group': {'0_0': np.float64(0.72), '0_2': np.float64(0.4), '0_3': np.float64(0.14), '1_0': np.float64(1.0), '1_2': np.float64(0.43), '1_3': np.float64(0.39), '1_5': np.float64(0.28)}, 'status': 'success', 'total_time': 0.9878489971160889, 'fit_time': np.float64(0.10954122543334961), 'score_time': np.float64(0.006314373016357422), 'absolute_time': 1746697579.8718112, 'flatten_equalized_odds_ratio': '0.22_0.15_0.0_0.18_0.15', 'flatten_balanced_accuracy': '0.66_0.68_0.66_0.69_0.66'}
52
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 13, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.17039414591335034), 'balanced_accuracy': np.float64(0.6801880681642851), 'by_group': {'0_0': np.float64(0.51), '0_2': np.float64(0.47), '0_3': np.float64(0.17), '1_0': np.float64(0.99), '1_2': np.float64(0.52), '1_3': np.float64(0.43), '1_5': np.float64(0.45)}, 'status': 'success', 'total_time': 6.5958616733551025, 'fit_time': np.float64(0.2070690631866455), 'score_time': np.float64(0.5430879116058349), 'absolute_time': 1746697586.5367918, 'flatten_equalized_odds_ratio': '0.2_0.22_0.11_0.11_0.21', 'flatten_balanced_accuracy': '0.69_0.68_0.67_0.69_0.68'}
53
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 8, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')}
{'equalized_odds_ratio': np.float64(0.3650383269913582), 'balanced_accuracy': np.float64(0.6247633688585855), 'by_group': {'0_0': np.float64(0.8), '0_2': np.float64(0.64), '0_3': np.float64(0.38), '1_0': np.float64(0.91), '1_2': np.float64(0.71), '1_3': np.float64(0.63), '1_5': np.float64(0.52)}, 'status': 'success', 'total_time': 7.72210955619812, 'fit_time': np.float64(1.2161648750305176), 'score_time': np.float64(0.14391183853149414), 'absolute_time': 1746697594.3281925, 'flatten_equalized_odds_ratio': '0.44_0.3_0.1_0.45_0.54', 'flatten_balanced_accuracy': '0.63_0.61_0.62_0.62_0.64'}
54
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 5, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.05454545454545455), 'balanced_accuracy': np.float64(0.5084701822125937), 'by_group': {'0_0': np.float64(0.5), '0_2': np.float64(0.48), '0_3': np.float64(0.59), '1_0': np.float64(0.54), '1_2': np.float64(0.43), '1_3': np.float64(0.4), '1_5': np.float64(0.18)}, 'status': 'success', 'total_time': 25.5281240940094, 'fit_time': np.float64(4.414343738555909), 'score_time': np.float64(0.32881841659545896), 'absolute_time': 1746697619.932259, 'flatten_equalized_odds_ratio': '0.0_0.0_0.27_0.0_0.0', 'flatten_balanced_accuracy': '0.5_0.52_0.51_0.51_0.51'}
55
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.18687757719027798), 'balanced_accuracy': np.float64(0.6945418584568375), 'by_group': {'0_0': np.float64(0.68), '0_2': np.float64(0.51), '0_3': np.float64(0.2), '1_0': np.float64(1.0), '1_2': np.float64(0.54), '1_3': np.float64(0.55), '1_5': np.float64(0.47)}, 'status': 'success', 'total_time': 3.126555919647217, 'fit_time': np.float64(0.5583271980285645), 'score_time': np.float64(0.007338953018188476), 'absolute_time': 1746697623.135923, 'flatten_equalized_odds_ratio': '0.29_0.34_0.0_0.22_0.09', 'flatten_balanced_accuracy': '0.7_0.69_0.7_0.7_0.69'}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
56
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 7, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.3141774843668976), 'balanced_accuracy': np.float64(0.6387331342902326), 'by_group': {'0_0': np.float64(0.79), '0_2': np.float64(0.6), '0_3': np.float64(0.33), '1_0': np.float64(0.95), '1_2': np.float64(0.66), '1_3': np.float64(0.64), '1_5': np.float64(0.46)}, 'status': 'success', 'total_time': 8.17556619644165, 'fit_time': np.float64(1.3054277420043945), 'score_time': np.float64(0.1408966064453125), 'absolute_time': 1746697631.3930175, 'flatten_equalized_odds_ratio': '0.29_0.1_0.52_0.3_0.37', 'flatten_balanced_accuracy': '0.64_0.64_0.62_0.65_0.64'}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
57
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 7}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification')}
{'equalized_odds_ratio': np.float64(0.314571357288724), 'balanced_accuracy': np.float64(0.679773224769157), 'by_group': {'0_0': np.float64(0.62), '0_2': np.float64(0.63), '0_3': np.float64(0.31), '1_0': np.float64(0.96), '1_2': np.float64(0.62), '1_3': np.float64(0.68), '1_5': np.float64(0.68)}, 'status': 'success', 'total_time': 4.3850812911987305, 'fit_time': np.float64(0.8017604351043701), 'score_time': np.float64(0.0063076019287109375), 'absolute_time': 1746697635.884709, 'flatten_equalized_odds_ratio': '0.41_0.34_0.12_0.49_0.22', 'flatten_balanced_accuracy': '0.68_0.67_0.67_0.69_0.68'}
58
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': 4, 'min_samples_split': 2, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.3160588596839315), 'balanced_accuracy': np.float64(0.628756561206237), 'by_group': {'0_0': np.float64(0.67), '0_2': np.float64(0.67), '0_3': np.float64(0.35), '1_0': np.float64(0.76), '1_2': np.float64(0.73), '1_3': np.float64(0.64), '1_5': np.float64(0.53)}, 'status': 'success', 'total_time': 21.20333170890808, 'fit_time': np.float64(4.149016666412353), 'score_time': np.float64(0.02065887451171875), 'absolute_time': 1746697657.175726, 'flatten_equalized_odds_ratio': '0.36_0.41_0.0_0.62_0.19', 'flatten_balanced_accuracy': '0.63_0.62_0.63_0.62_0.64'}
59
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification')}
{'equalized_odds_ratio': np.float64(0.4018671758351246), 'balanced_accuracy': np.float64(0.6698845808746738), 'by_group': {'0_0': np.float64(0.86), '0_2': np.float64(0.83), '0_3': np.float64(0.41), '1_0': np.float64(0.93), '1_2': np.float64(0.63), '1_3': np.float64(0.67), '1_5': np.float64(0.76)}, 'status': 'success', 'total_time': 24.591323614120483, 'fit_time': np.float64(4.844841861724854), 'score_time': np.float64(0.010677146911621093), 'absolute_time': 1746697681.8898172, 'flatten_equalized_odds_ratio': '0.46_0.55_0.12_0.45_0.43', 'flatten_balanced_accuracy': '0.67_0.68_0.66_0.68_0.66'}
60
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.08398845791824257), 'balanced_accuracy': np.float64(0.6360623279506634), 'by_group': {'0_0': np.float64(0.27), '0_2': np.float64(0.31), '0_3': np.float64(0.08), '1_0': np.float64(1.0), '1_2': np.float64(0.79), '1_3': np.float64(0.65), '1_5': np.float64(0.49)}, 'status': 'success', 'total_time': 2.082129716873169, 'fit_time': np.float64(0.34747161865234377), 'score_time': np.float64(0.008982133865356446), 'absolute_time': 1746697684.0525784, 'flatten_equalized_odds_ratio': '0.21_0.1_0.0_0.11_0.0', 'flatten_balanced_accuracy': '0.65_0.63_0.62_0.64_0.64'}
61
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.2882200972068132), 'balanced_accuracy': np.float64(0.6856852524626101), 'by_group': {'0_0': np.float64(0.65), '0_2': np.float64(0.55), '0_3': np.float64(0.29), '1_0': np.float64(1.0), '1_2': np.float64(0.56), '1_3': np.float64(0.57), '1_5': np.float64(0.54)}, 'status': 'success', 'total_time': 11.721999406814575, 'fit_time': np.float64(2.279303455352783), 'score_time': np.float64(0.00794687271118164), 'absolute_time': 1746697697.195679, 'flatten_equalized_odds_ratio': '0.42_0.2_0.11_0.3_0.42', 'flatten_balanced_accuracy': '0.69_0.68_0.68_0.7_0.68'}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
62
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 6, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('SelectKBest'), 'k': 9}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.3780201198978991), 'balanced_accuracy': np.float64(0.630299248374563), 'by_group': {'0_0': np.float64(0.87), '0_2': np.float64(0.71), '0_3': np.float64(0.51), '1_0': np.float64(0.96), '1_2': np.float64(0.69), '1_3': np.float64(0.62), '1_5': np.float64(0.46)}, 'status': 'success', 'total_time': 11.491348028182983, 'fit_time': np.float64(2.190964365005493), 'score_time': np.float64(0.02075614929199219), 'absolute_time': 1746697708.7680032, 'flatten_equalized_odds_ratio': '0.43_0.44_0.08_0.41_0.52', 'flatten_balanced_accuracy': '0.63_0.6_0.63_0.62_0.67'}
63
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'equalized_odds_ratio': np.float64(0.19986285079965077), 'balanced_accuracy': np.float64(0.6816481329211308), 'by_group': {'0_0': np.float64(0.68), '0_2': np.float64(0.49), '0_3': np.float64(0.2), '1_0': np.float64(1.0), '1_2': np.float64(0.5), '1_3': np.float64(0.5), '1_5': np.float64(0.44)}, 'status': 'success', 'total_time': 14.239057540893555, 'fit_time': np.float64(2.786007261276245), 'score_time': np.float64(0.004196977615356446), 'absolute_time': 1746697723.0904162, 'flatten_equalized_odds_ratio': '0.18_0.25_0.1_0.21_0.27', 'flatten_balanced_accuracy': '0.68_0.67_0.68_0.7_0.68'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

64
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'0_0': -inf, '0_2': -inf, '0_3': -inf, '1_0': -inf, '1_2': -inf, '1_3': -inf, '1_5': -inf}, 'status': 'fail', 'total_time': 0.0004849433898925781, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746697723.174893}
65
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(25), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification')}
{'equalized_odds_ratio': np.float64(0.14152325308810668), 'balanced_accuracy': np.float64(0.6761404400706129), 'by_group': {'0_0': np.float64(0.74), '0_2': np.float64(0.58), '0_3': np.float64(0.2), '1_0': np.float64(1.0), '1_2': np.float64(0.5), '1_3': np.float64(0.47), '1_5': np.float64(0.29)}, 'status': 'success', 'total_time': 22.094343423843384, 'fit_time': np.float64(4.317598628997803), 'score_time': np.float64(0.013170194625854493), 'absolute_time': 1746697745.3543246, 'flatten_equalized_odds_ratio': '0.1_0.15_0.0_0.17_0.3', 'flatten_balanced_accuracy': '0.68_0.67_0.67_0.69_0.67'}
66
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 4, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.21270618573741557), 'balanced_accuracy': np.float64(0.6383783983345719), 'by_group': {'0_0': np.float64(0.82), '0_2': np.float64(0.51), '0_3': np.float64(0.24), '1_0': np.float64(0.99), '1_2': np.float64(0.5), '1_3': np.float64(0.5), '1_5': np.float64(0.33)}, 'status': 'success', 'total_time': 6.593684911727905, 'fit_time': np.float64(1.2380042552947998), 'score_time': np.float64(0.015370702743530274), 'absolute_time': 1746697752.0585732, 'flatten_equalized_odds_ratio': '0.23_0.37_0.16_0.1_0.21', 'flatten_balanced_accuracy': '0.64_0.65_0.62_0.66_0.63'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

67
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'0_0': -inf, '0_2': -inf, '0_3': -inf, '1_0': -inf, '1_2': -inf, '1_3': -inf, '1_5': -inf}, 'status': 'fail', 'total_time': 0.0005092620849609375, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746697753.6058216}
68
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification')}
{'equalized_odds_ratio': np.float64(0.2839996302207491), 'balanced_accuracy': np.float64(0.6093310588032207), 'by_group': {'0_0': np.float64(0.77), '0_2': np.float64(0.56), '0_3': np.float64(0.3), '1_0': np.float64(0.89), '1_2': np.float64(0.58), '1_3': np.float64(0.46), '1_5': np.float64(0.44)}, 'status': 'success', 'total_time': 10.383244752883911, 'fit_time': np.float64(2.0022170543670654), 'score_time': np.float64(0.013138580322265624), 'absolute_time': 1746697764.0769851, 'flatten_equalized_odds_ratio': '0.58_0.38_0.0_0.18_0.28', 'flatten_balanced_accuracy': '0.6_0.62_0.57_0.64_0.62'}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
69
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 9, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 2}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.2388624035258901), 'balanced_accuracy': np.float64(0.6217440665696412), 'by_group': {'0_0': np.float64(0.56), '0_2': np.float64(0.41), '0_3': np.float64(0.24), '1_0': np.float64(1.0), '1_2': np.float64(0.62), '1_3': np.float64(0.54), '1_5': np.float64(0.52)}, 'status': 'success', 'total_time': 1.5842370986938477, 'fit_time': np.float64(0.016925907135009764), 'score_time': np.float64(0.12417206764221192), 'absolute_time': 1746697765.7472532, 'flatten_equalized_odds_ratio': '0.25_0.22_0.1_0.22_0.41', 'flatten_balanced_accuracy': '0.65_0.59_0.63_0.59_0.64'}
70
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 14, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 3}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.47114277232402146), 'balanced_accuracy': np.float64(0.637729625658079), 'by_group': {'0_0': np.float64(0.73), '0_2': np.float64(0.76), '0_3': np.float64(0.54), '1_0': np.float64(0.86), '1_2': np.float64(0.79), '1_3': np.float64(0.67), '1_5': np.float64(0.71)}, 'status': 'success', 'total_time': 2.2409250736236572, 'fit_time': np.float64(0.10685157775878906), 'score_time': np.float64(0.14142422676086425), 'absolute_time': 1746697768.0770667, 'flatten_equalized_odds_ratio': '0.5_0.47_0.33_0.44_0.61', 'flatten_balanced_accuracy': '0.63_0.64_0.65_0.63_0.64'}
71
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification')}
{'equalized_odds_ratio': np.float64(0.2315983303974586), 'balanced_accuracy': np.float64(0.6181099453893124), 'by_group': {'0_0': np.float64(0.88), '0_2': np.float64(0.69), '0_3': np.float64(0.23), '1_0': np.float64(0.94), '1_2': np.float64(0.64), '1_3': np.float64(0.61), '1_5': np.float64(0.48)}, 'status': 'success', 'total_time': 14.889001369476318, 'fit_time': np.float64(2.892170524597168), 'score_time': np.float64(0.021068572998046875), 'absolute_time': 1746697783.0674365, 'flatten_equalized_odds_ratio': '0.28_0.35_0.07_0.0_0.45', 'flatten_balanced_accuracy': '0.63_0.59_0.62_0.6_0.65'}
72
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'equalized_odds_ratio': np.float64(0.1479544685625893), 'balanced_accuracy': np.float64(0.678993504928279), 'by_group': {'0_0': np.float64(0.46), '0_2': np.float64(0.55), '0_3': np.float64(0.15), '1_0': np.float64(0.99), '1_2': np.float64(0.56), '1_3': np.float64(0.5), '1_5': np.float64(0.54)}, 'status': 'success', 'total_time': 229.82083749771118, 'fit_time': np.float64(45.84729561805725), 'score_time': np.float64(0.024896621704101562), 'absolute_time': 1746698012.9859474, 'flatten_equalized_odds_ratio': '0.0_0.32_0.0_0.12_0.3', 'flatten_balanced_accuracy': '0.68_0.67_0.68_0.69_0.68'}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
73
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 11, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification')}
{'equalized_odds_ratio': np.float64(0.03162393162393162), 'balanced_accuracy': np.float64(0.5082117945448236), 'by_group': {'0_0': np.float64(0.57), '0_2': np.float64(0.36), '0_3': np.float64(0.11), '1_0': np.float64(0.45), '1_2': np.float64(0.4), '1_3': np.float64(0.31), '1_5': np.float64(0.49)}, 'status': 'success', 'total_time': 15.571712732315063, 'fit_time': np.float64(2.6296369552612306), 'score_time': np.float64(0.21696176528930664), 'absolute_time': 1746698028.6644552, 'flatten_equalized_odds_ratio': '0.0_0.16_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.51_0.51_0.51_0.51_0.5'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

74
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 17, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification')}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'0_0': -inf, '0_2': -inf, '0_3': -inf, '1_0': -inf, '1_2': -inf, '1_3': -inf, '1_5': -inf}, 'status': 'fail', 'total_time': 0.0006315708160400391, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746698028.7861168}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

75
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification')}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'0_0': -inf, '0_2': -inf, '0_3': -inf, '1_0': -inf, '1_2': -inf, '1_3': -inf, '1_5': -inf}, 'status': 'fail', 'total_time': 0.0003571510314941406, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746698030.647361}
76
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_features_normalization_mitigation_classification')}
{'equalized_odds_ratio': np.float64(0.4019771493287487), 'balanced_accuracy': np.float64(0.6697926277411538), 'by_group': {'0_0': np.float64(0.74), '0_2': np.float64(0.67), '0_3': np.float64(0.44), '1_0': np.float64(0.97), '1_2': np.float64(0.66), '1_3': np.float64(0.62), '1_5': np.float64(0.55)}, 'status': 'success', 'total_time': 1.1088802814483643, 'fit_time': np.float64(0.08925824165344239), 'score_time': np.float64(0.04219803810119629), 'absolute_time': 1746698031.8533874, 'flatten_equalized_odds_ratio': '0.44_0.44_0.5_0.42_0.21', 'flatten_balanced_accuracy': '0.67_0.66_0.68_0.67_0.67'}
77
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification')}
{'equalized_odds_ratio': np.float64(0.2585603778671368), 'balanced_accuracy': np.float64(0.6615005591089699), 'by_group': {'0_0': np.float64(0.51), '0_2': np.float64(0.51), '0_3': np.float64(0.26), '1_0': np.float64(0.98), '1_2': np.float64(0.57), '1_3': np.float64(0.57), '1_5': np.float64(0.51)}, 'status': 'success', 'total_time': 160.17471027374268, 'fit_time': np.float64(31.941859483718872), 'score_time': np.float64(0.019582748413085938), 'absolute_time': 1746698192.1361582, 'flatten_equalized_odds_ratio': '0.44_0.19_0.1_0.2_0.37', 'flatten_balanced_accuracy': '0.66_0.65_0.65_0.68_0.66'}
78
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.23706657443129533), 'balanced_accuracy': np.float64(0.6775032433274794), 'by_group': {'0_0': np.float64(0.56), '0_2': np.float64(0.61), '0_3': np.float64(0.25), '1_0': np.float64(0.95), '1_2': np.float64(0.62), '1_3': np.float64(0.66), '1_5': np.float64(0.64)}, 'status': 'success', 'total_time': 1.4414753913879395, 'fit_time': np.float64(0.21798596382141114), 'score_time': np.float64(0.008171796798706055), 'absolute_time': 1746698193.6904378, 'flatten_equalized_odds_ratio': '0.48_0.3_0.0_0.12_0.3', 'flatten_balanced_accuracy': '0.67_0.68_0.68_0.68_0.67'}
79
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'equalized_odds_ratio': np.float64(0.0), 'balanced_accuracy': np.float64(0.5992580932866162), 'by_group': {'0_0': np.float64(0.09), '0_2': np.float64(0.04), '0_3': np.float64(0.0), '1_0': np.float64(1.0), '1_2': np.float64(0.07), '1_3': np.float64(0.05), '1_5': np.float64(0.04)}, 'status': 'success', 'total_time': 0.9982044696807861, 'fit_time': np.float64(0.1323394298553467), 'score_time': np.float64(0.007232856750488281), 'absolute_time': 1746698194.8010879, 'flatten_equalized_odds_ratio': '0.0_0.0_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.6_0.6_0.59_0.61_0.59'}
80
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.24606986545275422), 'balanced_accuracy': np.float64(0.6348293406229091), 'by_group': {'0_0': np.float64(0.84), '0_2': np.float64(0.73), '0_3': np.float64(0.32), '1_0': np.float64(0.94), '1_2': np.float64(0.65), '1_3': np.float64(0.6), '1_5': np.float64(0.42)}, 'status': 'success', 'total_time': 11.74503755569458, 'fit_time': np.float64(1.8985331535339356), 'score_time': np.float64(0.20891318321228028), 'absolute_time': 1746698206.6572158, 'flatten_equalized_odds_ratio': '0.22_0.32_0.0_0.26_0.42', 'flatten_balanced_accuracy': '0.62_0.63_0.64_0.64_0.65'}
81
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'equalized_odds_ratio': np.float64(0.24335051971674063), 'balanced_accuracy': np.float64(0.6143664168228916), 'by_group': {'0_0': np.float64(0.62), '0_2': np.float64(0.72), '0_3': np.float64(0.28), '1_0': np.float64(0.8), '1_2': np.float64(0.72), '1_3': np.float64(0.67), '1_5': np.float64(0.49)}, 'status': 'success', 'total_time': 32.37761187553406, 'fit_time': np.float64(6.3988471031188965), 'score_time': np.float64(0.014368581771850585), 'absolute_time': 1746698239.1472433, 'flatten_equalized_odds_ratio': '0.36_0.31_0.0_0.54_0.0', 'flatten_balanced_accuracy': '0.64_0.6_0.62_0.63_0.59'}
AutoML: optimization done.
AutoML: miner done.
AutoML: export done.
Here is the standard output/error of the command:

Here is the standard output/error of the command:

Here is the standard output/error of the command:

hamlet_1217086605
AutoML execution ended
