Sensitive groups ready!
Theory ready!
Theory:
step(normalization) :- true.
step(features) :- true.
step(mitigation) :- true.
step(rebalancing) :- true.
step(classification) :- true.
operator(normalization, power_transformer) :- true.
operator(normalization, robust_scaler) :- true.
operator(normalization, standard) :- true.
operator(normalization, minmax) :- true.
operator(features, select_k_best) :- true.
operator(features, pca) :- true.
operator(mitigation, corr_remover) :- true.
operator(mitigation, lfr) :- true.
operator(rebalancing, near_miss) :- true.
operator(rebalancing, smote) :- true.
operator(classification, knn) :- true.
operator(classification, nn) :- true.
operator(classification, rf) :- true.
hyperparameter(robust_scaler, with_centering, choice) :- true.
hyperparameter(robust_scaler, with_scaling, choice) :- true.
hyperparameter(standard, with_mean, choice) :- true.
hyperparameter(standard, with_std, choice) :- true.
hyperparameter(select_k_best, k, randint) :- true.
hyperparameter(pca, n_components, randint) :- true.
hyperparameter(corr_remover, alpha, choice) :- true.
hyperparameter(lfr, n_prototypes, choice) :- true.
hyperparameter(lfr, reconstruct_weight, choice) :- true.
hyperparameter(lfr, fairness_weight, choice) :- true.
hyperparameter(near_miss, n_neighbors, randint) :- true.
hyperparameter(smote, k_neighbors, randint) :- true.
hyperparameter(knn, n_neighbors, randint) :- true.
hyperparameter(knn, weights, choice) :- true.
hyperparameter(knn, metric, choice) :- true.
hyperparameter(nn, n_hidden_layers, choice) :- true.
hyperparameter(nn, n_neurons, choice) :- true.
hyperparameter(nn, activation, choice) :- true.
hyperparameter(nn, solver, choice) :- true.
hyperparameter(nn, alpha, choice) :- true.
hyperparameter(nn, learning_rate, choice) :- true.
hyperparameter(rf, n_estimators, choice) :- true.
hyperparameter(rf, max_depth, randint) :- true.
hyperparameter(rf, max_features, randint) :- true.
hyperparameter(rf, min_samples_split, randint) :- true.
hyperparameter(rf, max_leaf_nodes, randint) :- true.
hyperparameter(rf, bootstrap, choice) :- true.
hyperparameter(rf, criterion, choice) :- true.
domain(robust_scaler, with_centering, [true, false]) :- true.
domain(robust_scaler, with_scaling, [true, false]) :- true.
domain(standard, with_mean, [true, false]) :- true.
domain(standard, with_std, [true, false]) :- true.
domain(select_k_best, k, [1, 10]) :- true.
domain(pca, n_components, [1, 8]) :- true.
domain(corr_remover, alpha, [0.25, 0.5, 0.75, 1.0]) :- true.
domain(lfr, n_prototypes, [10, 50, 100, 200]) :- true.
domain(lfr, reconstruct_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(lfr, fairness_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(near_miss, n_neighbors, [1, 4]) :- true.
domain(smote, k_neighbors, [5, 8]) :- true.
domain(knn, n_neighbors, [3, 20]) :- true.
domain(knn, weights, [uniform, distance]) :- true.
domain(knn, metric, [minkowski, euclidean, manhattan]) :- true.
domain(nn, n_hidden_layers, [1, 5, 10, 20]) :- true.
domain(nn, n_neurons, [5, 10, 25, 50]) :- true.
domain(nn, activation, [logistic, tanh, relu]) :- true.
domain(nn, solver, [lbfgs, sgd, adam]) :- true.
domain(nn, alpha, [0.0001, 0.001, 0.01, 0.00001]) :- true.
domain(nn, learning_rate, [constant, invscaling, adaptive]) :- true.
domain(rf, n_estimators, [10, 25, 50, 75, 100]) :- true.
domain(rf, max_depth, [1, 5]) :- true.
domain(rf, max_features, [1, 4]) :- true.
domain(rf, min_samples_split, [2, 6]) :- true.
domain(rf, max_leaf_nodes, [2, 6]) :- true.
domain(rf, bootstrap, [true, false]) :- true.
domain(rf, criterion, [gini, entropy]) :- true.
dataset(compass) :- true.
metric(balanced_accuracy) :- true.
fairness_metric(equalized_odds_ratio) :- true.
sensitive_feature(sex, [0, 1]) :- true.
sensitive_feature(race, [0, 1, 2, 3, 4, 5]) :- true.
pipeline([Step_1_0], ZZ_0) :- (step(Step_1_0), '\\='(Step_1_0, classification), operator(classification, ZZ_0)).
pipeline([Step_1_1, Step_2_0], ZZ_1) :- (step(Step_1_1), step(Step_2_0), '\\='(Step_1_1, classification), '\\='(Step_2_0, classification), '\\='(Step_1_1, Step_2_0), operator(classification, ZZ_1)).
pipeline([Step_1_2, Step_2_1, Step_3_0], ZZ_2) :- (step(Step_1_2), step(Step_2_1), step(Step_3_0), '\\='(Step_1_2, classification), '\\='(Step_2_1, classification), '\\='(Step_3_0, classification), '\\='(Step_1_2, Step_2_1), '\\='(Step_1_2, Step_3_0), '\\='(Step_2_1, Step_3_0), operator(classification, ZZ_2)).
pipeline([Step_1_3, Step_2_2, Step_3_1, Step_4_0], ZZ_3) :- (step(Step_1_3), step(Step_2_2), step(Step_3_1), step(Step_4_0), '\\='(Step_1_3, classification), '\\='(Step_2_2, classification), '\\='(Step_3_1, classification), '\\='(Step_4_0, classification), '\\='(Step_1_3, Step_2_2), '\\='(Step_1_3, Step_3_1), '\\='(Step_1_3, Step_4_0), '\\='(Step_2_2, Step_3_1), '\\='(Step_2_2, Step_4_0), '\\='(Step_3_1, Step_4_0), operator(classification, ZZ_3)).
':=>'(p688683, sensitive_group([0])) :- true.
':=>'(p380072, sensitive_group([1])) :- true.
':=>'(p262680, sensitive_group([0])) :- true.
':=>'(p853129, sensitive_group([1])) :- true.
':=>'(p21158, sensitive_group([2])) :- true.
':=>'(p80271, sensitive_group([3])) :- true.
':=>'(p233761, sensitive_group([4])) :- true.
':=>'(p728894, sensitive_group([5])) :- true.
':=>'(p634328, sensitive_group([0, 0])) :- true.
':=>'(p205330, sensitive_group([0, 1])) :- true.
':=>'(p512068, sensitive_group([0, 2])) :- true.
':=>'(p661269, sensitive_group([0, 3])) :- true.
':=>'(p325441, sensitive_group([0, 4])) :- true.
':=>'(p517533, sensitive_group([0, 5])) :- true.
':=>'(p261402, sensitive_group([1, 0])) :- true.
':=>'(p375992, sensitive_group([1, 1])) :- true.
':=>'(p989312, sensitive_group([1, 2])) :- true.
':=>'(p146724, sensitive_group([1, 3])) :- true.
':=>'(p77902, sensitive_group([1, 4])) :- true.
':=>'(p920124, sensitive_group([1, 5])) :- true.

Checking Config
Exporting Config
Saving Graph
Exporting AutoML input
Exporting Space
Exporting Constraints
Input created for iteration Config(iteration=1, dataset=compass, metric=balanced_accuracy, fairnessMetric=equalized_odds_ratio, sensitiveFeatures=[sex, race], mode=max, batchSize=999999, timeBudget=900, seed=42)
Here is the standard output/error of the command:

1963e55b0e92a9253b0107af41765c59f2e14066b9c1f28c63af90974f84401b
Here is the standard output/error of the command:

Here is the standard output/error of the command:

WARNING:root:No module named 'rpy2': FairAdapt will be unavailable. To install, run:
pip install 'aif360[FairAdapt]'
INFO:flaml.tune.searcher.blendsearch:No low-cost partial config given to the search algorithm. For cost-frugal search, consider providing low-cost values for cost-related hps via 'low_cost_partial_config'. More info can be found at https://microsoft.github.io/FLAML/docs/FAQ#about-low_cost_partial_config-in-tune
AutoML: starting optimization.
1
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 4, 'max_leaf_nodes': 4, 'min_samples_split': 5, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.3171277369604784), 'balanced_accuracy': np.float64(0.6092624202770525), 'by_group': {'0_0': np.float64(0.83), '0_2': np.float64(0.76), '0_3': np.float64(0.35), '1_0': np.float64(0.93), '1_2': np.float64(0.62), '1_3': np.float64(0.54), '1_5': np.float64(0.48)}, 'status': 'success', 'total_time': 12.270439386367798, 'fit_time': np.float64(2.3619102478027343), 'score_time': np.float64(0.022386646270751952), 'absolute_time': 1746696293.0786939, 'flatten_equalized_odds_ratio': '0.5_0.34_0.52_0.1_0.13', 'flatten_balanced_accuracy': '0.63_0.6_0.61_0.62_0.58'}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
2
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 8, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 3}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.24817844682739204), 'balanced_accuracy': np.float64(0.6367605447609744), 'by_group': {'0_0': np.float64(0.81), '0_2': np.float64(0.67), '0_3': np.float64(0.25), '1_0': np.float64(0.97), '1_2': np.float64(0.65), '1_3': np.float64(0.63), '1_5': np.float64(0.47)}, 'status': 'success', 'total_time': 1.6144897937774658, 'fit_time': np.float64(0.014171409606933593), 'score_time': np.float64(0.129761266708374), 'absolute_time': 1746696294.7185612, 'flatten_equalized_odds_ratio': '0.34_0.13_0.27_0.26_0.25', 'flatten_balanced_accuracy': '0.64_0.64_0.63_0.64_0.63'}
3
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 6, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')}
{'equalized_odds_ratio': np.float64(0.1439056869174725), 'balanced_accuracy': np.float64(0.641984233211511), 'by_group': {'0_0': np.float64(0.31), '0_2': np.float64(0.38), '0_3': np.float64(0.17), '1_0': np.float64(1.0), '1_2': np.float64(0.52), '1_3': np.float64(0.43), '1_5': np.float64(0.48)}, 'status': 'success', 'total_time': 3.205733299255371, 'fit_time': np.float64(0.2390137195587158), 'score_time': np.float64(0.17600150108337403), 'absolute_time': 1746696297.948654, 'flatten_equalized_odds_ratio': '0.29_0.11_0.0_0.32_0.0', 'flatten_balanced_accuracy': '0.65_0.64_0.64_0.65_0.63'}
4
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 3, 'max_leaf_nodes': 4, 'min_samples_split': 2, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.23911797852199515), 'balanced_accuracy': np.float64(0.6868281492474073), 'by_group': {'0_0': np.float64(0.67), '0_2': np.float64(0.6), '0_3': np.float64(0.25), '1_0': np.float64(0.99), '1_2': np.float64(0.58), '1_3': np.float64(0.6), '1_5': np.float64(0.51)}, 'status': 'success', 'total_time': 6.5874059200286865, 'fit_time': np.float64(1.237647294998169), 'score_time': np.float64(0.013747406005859376), 'absolute_time': 1746696304.5623767, 'flatten_equalized_odds_ratio': '0.26_0.39_0.0_0.3_0.25', 'flatten_balanced_accuracy': '0.68_0.7_0.69_0.69_0.67'}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
5
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.17304159854338086), 'balanced_accuracy': np.float64(0.6876059001588117), 'by_group': {'0_0': np.float64(0.65), '0_2': np.float64(0.53), '0_3': np.float64(0.17), '1_0': np.float64(1.0), '1_2': np.float64(0.55), '1_3': np.float64(0.57), '1_5': np.float64(0.4)}, 'status': 'success', 'total_time': 4.85665225982666, 'fit_time': np.float64(0.8956540584564209), 'score_time': np.float64(0.006171464920043945), 'absolute_time': 1746696309.447565, 'flatten_equalized_odds_ratio': '0.36_0.19_0.0_0.22_0.09', 'flatten_balanced_accuracy': '0.68_0.69_0.68_0.7_0.68'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

6
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'0_0': -inf, '0_2': -inf, '0_3': -inf, '1_0': -inf, '1_2': -inf, '1_3': -inf, '1_5': -inf}, 'status': 'fail', 'total_time': 0.0005152225494384766, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746696310.2898347}
7
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 5, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification')}
{'equalized_odds_ratio': np.float64(0.23111668963492807), 'balanced_accuracy': np.float64(0.6517642901875201), 'by_group': {'0_0': np.float64(0.61), '0_2': np.float64(0.71), '0_3': np.float64(0.29), '1_0': np.float64(0.91), '1_2': np.float64(0.67), '1_3': np.float64(0.69), '1_5': np.float64(0.5)}, 'status': 'success', 'total_time': 2.5812747478485107, 'fit_time': np.float64(0.44509363174438477), 'score_time': np.float64(0.010747146606445313), 'absolute_time': 1746696312.9085755, 'flatten_equalized_odds_ratio': '0.39_0.27_0.0_0.16_0.33', 'flatten_balanced_accuracy': '0.65_0.66_0.65_0.64_0.65'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

8
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification')}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'0_0': -inf, '0_2': -inf, '0_3': -inf, '1_0': -inf, '1_2': -inf, '1_3': -inf, '1_5': -inf}, 'status': 'fail', 'total_time': 0.0004036426544189453, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746696312.9393435}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

9
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification')}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'0_0': -inf, '0_2': -inf, '0_3': -inf, '1_0': -inf, '1_2': -inf, '1_3': -inf, '1_5': -inf}, 'status': 'fail', 'total_time': 0.00028514862060546875, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746696312.9697502}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
10
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 16, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.0915076846590038), 'balanced_accuracy': np.float64(0.663197901873324), 'by_group': {'0_0': np.float64(0.42), '0_2': np.float64(0.37), '0_3': np.float64(0.09), '1_0': np.float64(1.0), '1_2': np.float64(0.6), '1_3': np.float64(0.62), '1_5': np.float64(0.56)}, 'status': 'success', 'total_time': 0.7026956081390381, 'fit_time': np.float64(0.04206714630126953), 'score_time': np.float64(0.023143577575683593), 'absolute_time': 1746696313.7031984, 'flatten_equalized_odds_ratio': '0.28_0.09_0.0_0.0_0.09', 'flatten_balanced_accuracy': '0.67_0.65_0.67_0.67_0.66'}
11
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_split': 6, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.2595986937197316), 'balanced_accuracy': np.float64(0.6248008269492433), 'by_group': {'0_0': np.float64(0.63), '0_2': np.float64(0.69), '0_3': np.float64(0.28), '1_0': np.float64(0.78), '1_2': np.float64(0.75), '1_3': np.float64(0.67), '1_5': np.float64(0.57)}, 'status': 'success', 'total_time': 35.17083215713501, 'fit_time': np.float64(6.051250696182251), 'score_time': np.float64(0.02160053253173828), 'absolute_time': 1746696348.90812, 'flatten_equalized_odds_ratio': '0.38_0.32_0.0_0.6_0.0', 'flatten_balanced_accuracy': '0.63_0.61_0.63_0.62_0.64'}
12
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'equalized_odds_ratio': np.float64(0.2678521611876324), 'balanced_accuracy': np.float64(0.6264371308952121), 'by_group': {'0_0': np.float64(0.65), '0_2': np.float64(0.74), '0_3': np.float64(0.29), '1_0': np.float64(0.78), '1_2': np.float64(0.73), '1_3': np.float64(0.64), '1_5': np.float64(0.6)}, 'status': 'success', 'total_time': 42.91441583633423, 'fit_time': np.float64(4.859785556793213), 'score_time': np.float64(0.026703643798828124), 'absolute_time': 1746696391.8649487, 'flatten_equalized_odds_ratio': '0.38_0.66_0.0_0.3_0.0', 'flatten_balanced_accuracy': '0.63_0.63_0.63_0.61_0.64'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

13
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification')}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'0_0': -inf, '0_2': -inf, '0_3': -inf, '1_0': -inf, '1_2': -inf, '1_3': -inf, '1_5': -inf}, 'status': 'fail', 'total_time': 0.0006041526794433594, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746696391.9040353}
14
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('distance')}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.32029848452376497), 'balanced_accuracy': np.float64(0.6680514851696155), 'by_group': {'0_0': np.float64(0.73), '0_2': np.float64(0.68), '0_3': np.float64(0.36), '1_0': np.float64(0.97), '1_2': np.float64(0.66), '1_3': np.float64(0.66), '1_5': np.float64(0.53)}, 'status': 'success', 'total_time': 0.9081313610076904, 'fit_time': np.float64(0.03838920593261719), 'score_time': np.float64(0.05183873176574707), 'absolute_time': 1746696393.5572033, 'flatten_equalized_odds_ratio': '0.5_0.44_0.12_0.44_0.1', 'flatten_balanced_accuracy': '0.67_0.66_0.68_0.67_0.66'}
15
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 16, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.10040290088638193), 'balanced_accuracy': np.float64(0.5087820835326579), 'by_group': {'0_0': np.float64(0.49), '0_2': np.float64(0.34), '0_3': np.float64(0.14), '1_0': np.float64(0.44), '1_2': np.float64(0.42), '1_3': np.float64(0.45), '1_5': np.float64(0.23)}, 'status': 'success', 'total_time': 26.764225482940674, 'fit_time': np.float64(4.839916658401489), 'score_time': np.float64(0.23603410720825196), 'absolute_time': 1746696420.357861, 'flatten_equalized_odds_ratio': '0.5_0.0_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.52_0.5_0.51_0.51_0.51'}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
16
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 3}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.26603763699776223), 'balanced_accuracy': np.float64(0.6266476222106739), 'by_group': {'0_0': np.float64(0.69), '0_2': np.float64(0.68), '0_3': np.float64(0.3), '1_0': np.float64(0.82), '1_2': np.float64(0.67), '1_3': np.float64(0.59), '1_5': np.float64(0.46)}, 'status': 'success', 'total_time': 8.225337505340576, 'fit_time': np.float64(1.3946263790130615), 'score_time': np.float64(0.08420090675354004), 'absolute_time': 1746696428.6171489, 'flatten_equalized_odds_ratio': '0.32_0.25_0.0_0.31_0.45', 'flatten_balanced_accuracy': '0.62_0.63_0.63_0.6_0.65'}
17
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.16942725214398352), 'balanced_accuracy': np.float64(0.69030898866095), 'by_group': {'0_0': np.float64(0.64), '0_2': np.float64(0.56), '0_3': np.float64(0.17), '1_0': np.float64(1.0), '1_2': np.float64(0.56), '1_3': np.float64(0.55), '1_5': np.float64(0.4)}, 'status': 'success', 'total_time': 9.260682106018066, 'fit_time': np.float64(1.7789522647857665), 'score_time': np.float64(0.007524824142456055), 'absolute_time': 1746696437.9447422, 'flatten_equalized_odds_ratio': '0.18_0.27_0.0_0.22_0.18', 'flatten_balanced_accuracy': '0.69_0.69_0.68_0.7_0.68'}
18
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 4, 'max_leaf_nodes': 6, 'min_samples_split': 6, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.16939273630105345), 'balanced_accuracy': np.float64(0.678332173446869), 'by_group': {'0_0': np.float64(0.56), '0_2': np.float64(0.5), '0_3': np.float64(0.17), '1_0': np.float64(1.0), '1_2': np.float64(0.44), '1_3': np.float64(0.44), '1_5': np.float64(0.32)}, 'status': 'success', 'total_time': 2.3886804580688477, 'fit_time': np.float64(0.400048828125), 'score_time': np.float64(0.013619089126586914), 'absolute_time': 1746696440.3709955, 'flatten_equalized_odds_ratio': '0.16_0.26_0.09_0.19_0.16', 'flatten_balanced_accuracy': '0.68_0.68_0.68_0.69_0.67'}
19
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 14, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'equalized_odds_ratio': np.float64(0.2166361253033115), 'balanced_accuracy': np.float64(0.6346330878000138), 'by_group': {'0_0': np.float64(0.8), '0_2': np.float64(0.67), '0_3': np.float64(0.23), '1_0': np.float64(0.99), '1_2': np.float64(0.59), '1_3': np.float64(0.53), '1_5': np.float64(0.41)}, 'status': 'success', 'total_time': 11.040175914764404, 'fit_time': np.float64(1.8642995357513428), 'score_time': np.float64(0.1541304588317871), 'absolute_time': 1746696451.4475925, 'flatten_equalized_odds_ratio': '0.2_0.23_0.11_0.3_0.24', 'flatten_balanced_accuracy': '0.64_0.64_0.63_0.63_0.64'}
20
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 6, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'equalized_odds_ratio': np.float64(0.35909939182644807), 'balanced_accuracy': np.float64(0.6330090015490439), 'by_group': {'0_0': np.float64(0.72), '0_2': np.float64(0.77), '0_3': np.float64(0.41), '1_0': np.float64(0.8), '1_2': np.float64(0.79), '1_3': np.float64(0.69), '1_5': np.float64(0.66)}, 'status': 'success', 'total_time': 31.835020065307617, 'fit_time': np.float64(6.2787049293518065), 'score_time': np.float64(0.01852731704711914), 'absolute_time': 1746696483.3210416, 'flatten_equalized_odds_ratio': '0.67_0.33_0.0_0.61_0.18', 'flatten_balanced_accuracy': '0.63_0.64_0.63_0.62_0.64'}
21
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(25), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.16880875552353955), 'balanced_accuracy': np.float64(0.6952667879299819), 'by_group': {'0_0': np.float64(0.63), '0_2': np.float64(0.54), '0_3': np.float64(0.17), '1_0': np.float64(1.0), '1_2': np.float64(0.53), '1_3': np.float64(0.54), '1_5': np.float64(0.41)}, 'status': 'success', 'total_time': 56.53999137878418, 'fit_time': np.float64(10.98909068107605), 'score_time': np.float64(0.07718596458435059), 'absolute_time': 1746696539.9087505, 'flatten_equalized_odds_ratio': '0.24_0.21_0.0_0.22_0.17', 'flatten_balanced_accuracy': '0.7_0.7_0.69_0.71_0.68'}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 609, in objective
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_param_validation.py", line 216, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 431, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 517, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 5 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
5 fits failed with the following error:
Traceback (most recent call last):
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 866, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "/usr/local/lib/python3.12/site-packages/sklearn/base.py", line 1389, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 518, in fit
    Xt, yt = self._fit(X, y, routed_params, raw_params=params)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 430, in _fit
    X, fitted_transformer = fit_transform_one_cached(
                            ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/joblib/memory.py", line 312, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 1383, in _fit_transform_one
    res = transformer.fit_transform(X, y, **params.get("fit_transform", {}))
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_set_output.py", line 319, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 76, in fit_transform
    df_X, df_y = self._prepare_dataset(X, y, fit=True)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 37, in _prepare_dataset
    raise Exception("No sensitive features to mitigate")
Exception: No sensitive features to mitigate


22
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 14, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification')}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'0_0': -inf, '0_2': -inf, '0_3': -inf, '1_0': -inf, '1_2': -inf, '1_3': -inf, '1_5': -inf}, 'status': 'fail', 'total_time': 0.19170618057250977, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746696540.9459062}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

23
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'0_0': -inf, '0_2': -inf, '0_3': -inf, '1_0': -inf, '1_2': -inf, '1_3': -inf, '1_5': -inf}, 'status': 'fail', 'total_time': 0.00032782554626464844, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746696540.9922864}
24
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.0), 'balanced_accuracy': np.float64(0.5070985841564984), 'by_group': {'0_0': np.float64(0.31), '0_2': np.float64(0.35), '0_3': np.float64(0.0), '1_0': np.float64(0.42), '1_2': np.float64(0.31), '1_3': np.float64(0.34), '1_5': np.float64(0.18)}, 'status': 'success', 'total_time': 23.830249309539795, 'fit_time': np.float64(4.324156475067139), 'score_time': np.float64(0.2027820587158203), 'absolute_time': 1746696564.8697948, 'flatten_equalized_odds_ratio': '0.0_0.0_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.5_0.51_0.51_0.51_0.51'}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
25
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 3}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.2162078880458805), 'balanced_accuracy': np.float64(0.6480796344572045), 'by_group': {'0_0': np.float64(0.7), '0_2': np.float64(0.65), '0_3': np.float64(0.23), '1_0': np.float64(0.99), '1_2': np.float64(0.6), '1_3': np.float64(0.64), '1_5': np.float64(0.49)}, 'status': 'success', 'total_time': 1.8327898979187012, 'fit_time': np.float64(0.05464992523193359), 'score_time': np.float64(0.12502431869506836), 'absolute_time': 1746696566.7496202, 'flatten_equalized_odds_ratio': '0.48_0.0_0.12_0.37_0.11', 'flatten_balanced_accuracy': '0.66_0.65_0.64_0.65_0.64'}
26
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 8, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.0698051948051948), 'balanced_accuracy': np.float64(0.5068652219311975), 'by_group': {'0_0': np.float64(0.44), '0_2': np.float64(0.33), '0_3': np.float64(0.11), '1_0': np.float64(0.42), '1_2': np.float64(0.44), '1_3': np.float64(0.63), '1_5': np.float64(0.54)}, 'status': 'success', 'total_time': 19.333784341812134, 'fit_time': np.float64(3.0049241065979), 'score_time': np.float64(0.40708050727844236), 'absolute_time': 1746696586.145696, 'flatten_equalized_odds_ratio': '0.0_0.0_0.0_0.35_0.0', 'flatten_balanced_accuracy': '0.5_0.51_0.5_0.52_0.5'}
27
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 6, 'n_estimators': np.int64(100)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification')}
{'equalized_odds_ratio': np.float64(0.3924278498596467), 'balanced_accuracy': np.float64(0.6108210216217994), 'by_group': {'0_0': np.float64(0.74), '0_2': np.float64(0.77), '0_3': np.float64(0.4), '1_0': np.float64(0.82), '1_2': np.float64(0.77), '1_3': np.float64(0.7), '1_5': np.float64(0.65)}, 'status': 'success', 'total_time': 22.051022052764893, 'fit_time': np.float64(4.31620078086853), 'score_time': np.float64(0.02331991195678711), 'absolute_time': 1746696608.2454937, 'flatten_equalized_odds_ratio': '0.97_0.26_0.0_0.6_0.13', 'flatten_balanced_accuracy': '0.51_0.63_0.63_0.62_0.66'}
28
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 14, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.12920702179176755), 'balanced_accuracy': np.float64(0.512822975579976), 'by_group': {'0_0': np.float64(0.39), '0_2': np.float64(0.3), '0_3': np.float64(0.27), '1_0': np.float64(0.49), '1_2': np.float64(0.44), '1_3': np.float64(0.4), '1_5': np.float64(0.36)}, 'status': 'success', 'total_time': 23.447961807250977, 'fit_time': np.float64(4.146160650253296), 'score_time': np.float64(0.2523970127105713), 'absolute_time': 1746696631.7486522, 'flatten_equalized_odds_ratio': '0.0_0.21_0.0_0.44_0.0', 'flatten_balanced_accuracy': '0.51_0.51_0.51_0.53_0.51'}
29
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(50), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.21334788516800854), 'balanced_accuracy': np.float64(0.6618743880573179), 'by_group': {'0_0': np.float64(0.72), '0_2': np.float64(0.57), '0_3': np.float64(0.22), '1_0': np.float64(1.0), '1_2': np.float64(0.6), '1_3': np.float64(0.59), '1_5': np.float64(0.45)}, 'status': 'success', 'total_time': 153.69546723365784, 'fit_time': np.float64(30.66116671562195), 'score_time': np.float64(0.019037675857543946), 'absolute_time': 1746696785.4973469, 'flatten_equalized_odds_ratio': '0.32_0.09_0.1_0.37_0.2', 'flatten_balanced_accuracy': '0.67_0.66_0.65_0.67_0.66'}
30
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_split': 3, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification')}
{'equalized_odds_ratio': np.float64(0.2243445167379024), 'balanced_accuracy': np.float64(0.6802971734330377), 'by_group': {'0_0': np.float64(0.37), '0_2': np.float64(0.4), '0_3': np.float64(0.22), '1_0': np.float64(0.99), '1_2': np.float64(0.36), '1_3': np.float64(0.42), '1_5': np.float64(0.38)}, 'status': 'success', 'total_time': 0.7590670585632324, 'fit_time': np.float64(0.08656096458435059), 'score_time': np.float64(0.008387088775634766), 'absolute_time': 1746696787.4706733, 'flatten_equalized_odds_ratio': '0.29_0.19_0.24_0.1_0.29', 'flatten_balanced_accuracy': '0.68_0.68_0.69_0.68_0.66'}
31
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(50), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'equalized_odds_ratio': np.float64(0.24638043011254068), 'balanced_accuracy': np.float64(0.694246534260253), 'by_group': {'0_0': np.float64(0.56), '0_2': np.float64(0.52), '0_3': np.float64(0.25), '1_0': np.float64(1.0), '1_2': np.float64(0.55), '1_3': np.float64(0.57), '1_5': np.float64(0.56)}, 'status': 'success', 'total_time': 322.9578549861908, 'fit_time': np.float64(64.31597571372986), 'score_time': np.float64(0.09499454498291016), 'absolute_time': 1746697110.4837565, 'flatten_equalized_odds_ratio': '0.3_0.4_0.0_0.34_0.2', 'flatten_balanced_accuracy': '0.7_0.69_0.7_0.7_0.68'}
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(10), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(10), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')} was NaN

32
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(10), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': np.float64(0.5535752899792772), 'by_group': {'0_0': np.float64(0.71), '0_2': np.float64(0.49), '0_3': np.float64(0.19), '1_0': np.float64(0.86), '1_2': np.float64(0.48), '1_3': np.float64(0.63), '1_5': np.float64(0.33)}, 'status': 'fail', 'total_time': 34.59310460090637, 'fit_time': np.float64(6.801108455657959), 'score_time': np.float64(0.02354717254638672), 'absolute_time': 1746697145.1410189, 'flatten_equalized_odds_ratio': '0.6_0.0_0.0_nan_0.11', 'flatten_balanced_accuracy': '0.59_0.58_0.48_0.5_0.62'}
33
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.34084226454978567), 'balanced_accuracy': np.float64(0.6148699197555508), 'by_group': {'0_0': np.float64(0.86), '0_2': np.float64(0.82), '0_3': np.float64(0.43), '1_0': np.float64(0.94), '1_2': np.float64(0.7), '1_3': np.float64(0.63), '1_5': np.float64(0.49)}, 'status': 'success', 'total_time': 8.425741195678711, 'fit_time': np.float64(1.5952293395996093), 'score_time': np.float64(0.01927294731140137), 'absolute_time': 1746697153.6251204, 'flatten_equalized_odds_ratio': '0.25_0.24_0.24_0.62_0.35', 'flatten_balanced_accuracy': '0.58_0.65_0.62_0.63_0.61'}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
34
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.1455242947140727), 'balanced_accuracy': np.float64(0.6774508787487754), 'by_group': {'0_0': np.float64(0.6), '0_2': np.float64(0.51), '0_3': np.float64(0.15), '1_0': np.float64(1.0), '1_2': np.float64(0.52), '1_3': np.float64(0.5), '1_5': np.float64(0.33)}, 'status': 'success', 'total_time': 152.2453010082245, 'fit_time': np.float64(30.368779516220094), 'score_time': np.float64(0.014697027206420899), 'absolute_time': 1746697305.9216752, 'flatten_equalized_odds_ratio': '0.27_0.09_0.0_0.2_0.17', 'flatten_balanced_accuracy': '0.67_0.68_0.67_0.69_0.67'}
AutoML: optimization done.
AutoML: miner done.
AutoML: export done.
Here is the standard output/error of the command:

Here is the standard output/error of the command:

Here is the standard output/error of the command:

hamlet_19137882
AutoML execution ended
