Sensitive groups ready!
Theory ready!
Theory:
step(normalization) :- true.
step(features) :- true.
step(mitigation) :- true.
step(rebalancing) :- true.
step(classification) :- true.
operator(normalization, power_transformer) :- true.
operator(normalization, robust_scaler) :- true.
operator(normalization, standard) :- true.
operator(normalization, minmax) :- true.
operator(features, select_k_best) :- true.
operator(features, pca) :- true.
operator(mitigation, corr_remover) :- true.
operator(mitigation, lfr) :- true.
operator(rebalancing, near_miss) :- true.
operator(rebalancing, smote) :- true.
operator(classification, knn) :- true.
operator(classification, nn) :- true.
operator(classification, rf) :- true.
hyperparameter(robust_scaler, with_centering, choice) :- true.
hyperparameter(robust_scaler, with_scaling, choice) :- true.
hyperparameter(standard, with_mean, choice) :- true.
hyperparameter(standard, with_std, choice) :- true.
hyperparameter(select_k_best, k, randint) :- true.
hyperparameter(pca, n_components, randint) :- true.
hyperparameter(corr_remover, alpha, choice) :- true.
hyperparameter(lfr, n_prototypes, choice) :- true.
hyperparameter(lfr, reconstruct_weight, choice) :- true.
hyperparameter(lfr, fairness_weight, choice) :- true.
hyperparameter(near_miss, n_neighbors, randint) :- true.
hyperparameter(smote, k_neighbors, randint) :- true.
hyperparameter(knn, n_neighbors, randint) :- true.
hyperparameter(knn, weights, choice) :- true.
hyperparameter(knn, metric, choice) :- true.
hyperparameter(nn, n_hidden_layers, choice) :- true.
hyperparameter(nn, n_neurons, choice) :- true.
hyperparameter(nn, activation, choice) :- true.
hyperparameter(nn, solver, choice) :- true.
hyperparameter(nn, alpha, choice) :- true.
hyperparameter(nn, learning_rate, choice) :- true.
hyperparameter(rf, n_estimators, choice) :- true.
hyperparameter(rf, max_depth, randint) :- true.
hyperparameter(rf, max_features, randint) :- true.
hyperparameter(rf, min_samples_split, randint) :- true.
hyperparameter(rf, max_leaf_nodes, randint) :- true.
hyperparameter(rf, bootstrap, choice) :- true.
hyperparameter(rf, criterion, choice) :- true.
domain(robust_scaler, with_centering, [true, false]) :- true.
domain(robust_scaler, with_scaling, [true, false]) :- true.
domain(standard, with_mean, [true, false]) :- true.
domain(standard, with_std, [true, false]) :- true.
domain(select_k_best, k, [1, 10]) :- true.
domain(pca, n_components, [1, 8]) :- true.
domain(corr_remover, alpha, [0.25, 0.5, 0.75, 1.0]) :- true.
domain(lfr, n_prototypes, [10, 50, 100, 200]) :- true.
domain(lfr, reconstruct_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(lfr, fairness_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(near_miss, n_neighbors, [1, 4]) :- true.
domain(smote, k_neighbors, [5, 8]) :- true.
domain(knn, n_neighbors, [3, 20]) :- true.
domain(knn, weights, [uniform, distance]) :- true.
domain(knn, metric, [minkowski, euclidean, manhattan]) :- true.
domain(nn, n_hidden_layers, [1, 5, 10, 20]) :- true.
domain(nn, n_neurons, [5, 10, 25, 50]) :- true.
domain(nn, activation, [logistic, tanh, relu]) :- true.
domain(nn, solver, [lbfgs, sgd, adam]) :- true.
domain(nn, alpha, [0.0001, 0.001, 0.01, 0.00001]) :- true.
domain(nn, learning_rate, [constant, invscaling, adaptive]) :- true.
domain(rf, n_estimators, [10, 25, 50, 75, 100]) :- true.
domain(rf, max_depth, [1, 5]) :- true.
domain(rf, max_features, [1, 4]) :- true.
domain(rf, min_samples_split, [2, 6]) :- true.
domain(rf, max_leaf_nodes, [2, 6]) :- true.
domain(rf, bootstrap, [true, false]) :- true.
domain(rf, criterion, [gini, entropy]) :- true.
dataset(compass) :- true.
metric(balanced_accuracy) :- true.
fairness_metric(equalized_odds_ratio) :- true.
sensitive_feature(sex, [0, 1]) :- true.
sensitive_feature(race, [0, 1, 2, 3, 4, 5]) :- true.
pipeline([Step_1_0], ZZ_0) :- (step(Step_1_0), '\\='(Step_1_0, classification), operator(classification, ZZ_0)).
pipeline([Step_1_1, Step_2_0], ZZ_1) :- (step(Step_1_1), step(Step_2_0), '\\='(Step_1_1, classification), '\\='(Step_2_0, classification), '\\='(Step_1_1, Step_2_0), operator(classification, ZZ_1)).
pipeline([Step_1_2, Step_2_1, Step_3_0], ZZ_2) :- (step(Step_1_2), step(Step_2_1), step(Step_3_0), '\\='(Step_1_2, classification), '\\='(Step_2_1, classification), '\\='(Step_3_0, classification), '\\='(Step_1_2, Step_2_1), '\\='(Step_1_2, Step_3_0), '\\='(Step_2_1, Step_3_0), operator(classification, ZZ_2)).
pipeline([Step_1_3, Step_2_2, Step_3_1, Step_4_0], ZZ_3) :- (step(Step_1_3), step(Step_2_2), step(Step_3_1), step(Step_4_0), '\\='(Step_1_3, classification), '\\='(Step_2_2, classification), '\\='(Step_3_1, classification), '\\='(Step_4_0, classification), '\\='(Step_1_3, Step_2_2), '\\='(Step_1_3, Step_3_1), '\\='(Step_1_3, Step_4_0), '\\='(Step_2_2, Step_3_1), '\\='(Step_2_2, Step_4_0), '\\='(Step_3_1, Step_4_0), operator(classification, ZZ_3)).
':=>'(p164661, sensitive_group([0])) :- true.
':=>'(p72462, sensitive_group([1])) :- true.
':=>'(p36361, sensitive_group([0])) :- true.
':=>'(p286452, sensitive_group([1])) :- true.
':=>'(p862110, sensitive_group([2])) :- true.
':=>'(p359518, sensitive_group([3])) :- true.
':=>'(p59635, sensitive_group([4])) :- true.
':=>'(p522263, sensitive_group([5])) :- true.
':=>'(p874013, sensitive_group([0, 0])) :- true.
':=>'(p813527, sensitive_group([0, 1])) :- true.
':=>'(p556938, sensitive_group([0, 2])) :- true.
':=>'(p141953, sensitive_group([0, 3])) :- true.
':=>'(p447724, sensitive_group([0, 4])) :- true.
':=>'(p954460, sensitive_group([0, 5])) :- true.
':=>'(p400880, sensitive_group([1, 0])) :- true.
':=>'(p354438, sensitive_group([1, 1])) :- true.
':=>'(p713760, sensitive_group([1, 2])) :- true.
':=>'(p418431, sensitive_group([1, 3])) :- true.
':=>'(p536967, sensitive_group([1, 4])) :- true.
':=>'(p974046, sensitive_group([1, 5])) :- true.

Checking Config
Exporting Config
Saving Graph
Exporting AutoML input
Exporting Space
Exporting Constraints
Input created for iteration Config(iteration=4, dataset=compass, metric=balanced_accuracy, fairnessMetric=equalized_odds_ratio, sensitiveFeatures=[sex, race], mode=max, batchSize=999999, timeBudget=900, seed=42)
Here is the standard output/error of the command:

bac8aca882fc1bd627296e08ae2b934b1942366dd99899eaec5012f5a5631271
Here is the standard output/error of the command:

Here is the standard output/error of the command:

WARNING:root:No module named 'rpy2': FairAdapt will be unavailable. To install, run:
pip install 'aif360[FairAdapt]'
INFO:flaml.tune.searcher.blendsearch:No low-cost partial config given to the search algorithm. For cost-frugal search, consider providing low-cost values for cost-related hps via 'low_cost_partial_config'. More info can be found at https://microsoft.github.io/FLAML/docs/FAQ#about-low_cost_partial_config-in-tune
AutoML: starting optimization.
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
86
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 3}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.43982602178108443), 'balanced_accuracy': np.float64(0.677010791899316), 'by_group': {'0_0': np.float64(0.76), '0_2': np.float64(0.86), '0_3': np.float64(0.44), '1_0': np.float64(0.85), '1_2': np.float64(0.66), '1_3': np.float64(0.75), '1_5': np.float64(0.75)}, 'status': 'success', 'total_time': 2.5130534172058105, 'fit_time': np.float64(0.4175288677215576), 'score_time': np.float64(0.009394311904907226), 'absolute_time': 1746699267.6173398, 'flatten_equalized_odds_ratio': '0.45_0.39_0.23_0.4_0.72', 'flatten_balanced_accuracy': '0.67_0.68_0.68_0.68_0.68'}
87
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.1719873800619396), 'balanced_accuracy': np.float64(0.6871284531663798), 'by_group': {'0_0': np.float64(0.65), '0_2': np.float64(0.47), '0_3': np.float64(0.22), '1_0': np.float64(1.0), '1_2': np.float64(0.51), '1_3': np.float64(0.5), '1_5': np.float64(0.3)}, 'status': 'success', 'total_time': 4.008919715881348, 'fit_time': np.float64(0.7255243301391602), 'score_time': np.float64(0.010222578048706054), 'absolute_time': 1746699271.7408512, 'flatten_equalized_odds_ratio': '0.17_0.21_0.0_0.19_0.29', 'flatten_balanced_accuracy': '0.69_0.67_0.69_0.71_0.68'}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
88
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')}
{'equalized_odds_ratio': np.float64(0.3988566636657133), 'balanced_accuracy': np.float64(0.6200219324729999), 'by_group': {'0_0': np.float64(0.84), '0_2': np.float64(0.91), '0_3': np.float64(0.4), '1_0': np.float64(0.9), '1_2': np.float64(0.81), '1_3': np.float64(0.71), '1_5': np.float64(0.6)}, 'status': 'success', 'total_time': 125.5060670375824, 'fit_time': np.float64(25.01218686103821), 'score_time': np.float64(0.01363978385925293), 'absolute_time': 1746699397.377366, 'flatten_equalized_odds_ratio': '0.51_0.3_0.49_0.34_0.35', 'flatten_balanced_accuracy': '0.62_0.62_0.61_0.63_0.62'}
89
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_split': 3, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'equalized_odds_ratio': np.float64(0.4626697775448932), 'balanced_accuracy': np.float64(0.6306966078751035), 'by_group': {'0_0': np.float64(0.74), '0_2': np.float64(0.84), '0_3': np.float64(0.46), '1_0': np.float64(0.81), '1_2': np.float64(0.77), '1_3': np.float64(0.7), '1_5': np.float64(0.71)}, 'status': 'success', 'total_time': 452.27496004104614, 'fit_time': np.float64(90.35502724647522), 'score_time': np.float64(0.022458648681640624), 'absolute_time': 1746699849.7836146, 'flatten_equalized_odds_ratio': '0.56_0.64_0.0_0.62_0.49', 'flatten_balanced_accuracy': '0.65_0.62_0.62_0.62_0.63'}
90
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.1843894271059386), 'balanced_accuracy': np.float64(0.6618089557948901), 'by_group': {'0_0': np.float64(0.64), '0_2': np.float64(0.48), '0_3': np.float64(0.18), '1_0': np.float64(0.99), '1_2': np.float64(0.59), '1_3': np.float64(0.61), '1_5': np.float64(0.49)}, 'status': 'success', 'total_time': 6.926571846008301, 'fit_time': np.float64(0.36684293746948243), 'score_time': np.float64(0.49479284286499026), 'absolute_time': 1746699856.8829389, 'flatten_equalized_odds_ratio': '0.11_0.24_0.0_0.35_0.22', 'flatten_balanced_accuracy': '0.66_0.66_0.66_0.68_0.65'}
91
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.0626752827684838), 'balanced_accuracy': np.float64(0.6626473133867343), 'by_group': {'0_0': np.float64(0.4), '0_2': np.float64(0.47), '0_3': np.float64(0.06), '1_0': np.float64(1.0), '1_2': np.float64(0.49), '1_3': np.float64(0.38), '1_5': np.float64(0.43)}, 'status': 'success', 'total_time': 7.294331073760986, 'fit_time': np.float64(0.16643357276916504), 'score_time': np.float64(0.6029835224151612), 'absolute_time': 1746699864.338631, 'flatten_equalized_odds_ratio': '0.0_0.11_0.0_0.11_0.1', 'flatten_balanced_accuracy': '0.67_0.66_0.66_0.67_0.65'}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
92
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.10821378905172682), 'balanced_accuracy': np.float64(0.6901469483530555), 'by_group': {'0_0': np.float64(0.64), '0_2': np.float64(0.51), '0_3': np.float64(0.11), '1_0': np.float64(0.99), '1_2': np.float64(0.53), '1_3': np.float64(0.52), '1_5': np.float64(0.36)}, 'status': 'success', 'total_time': 4.173396825790405, 'fit_time': np.float64(0.7610607147216797), 'score_time': np.float64(0.0101531982421875), 'absolute_time': 1746699868.6480541, 'flatten_equalized_odds_ratio': '0.26_0.09_0.0_0.1_0.09', 'flatten_balanced_accuracy': '0.69_0.69_0.68_0.7_0.69'}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
93
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 9, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 2}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.24861860665634147), 'balanced_accuracy': np.float64(0.6447541563966758), 'by_group': {'0_0': np.float64(0.87), '0_2': np.float64(0.68), '0_3': np.float64(0.33), '1_0': np.float64(0.98), '1_2': np.float64(0.63), '1_3': np.float64(0.59), '1_5': np.float64(0.4)}, 'status': 'success', 'total_time': 1.8898377418518066, 'fit_time': np.float64(0.017341804504394532), 'score_time': np.float64(0.14297614097595215), 'absolute_time': 1746699870.6582382, 'flatten_equalized_odds_ratio': '0.39_0.1_0.1_0.32_0.33', 'flatten_balanced_accuracy': '0.65_0.65_0.64_0.65_0.64'}
94
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(50), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.0), 'balanced_accuracy': np.float64(0.5011465823021055), 'by_group': {'0_0': np.float64(0.0), '0_2': np.float64(0.0), '0_3': np.float64(0.0), '1_0': np.float64(0.42), '1_2': np.float64(0.16), '1_3': np.float64(0.0), '1_5': np.float64(0.0)}, 'status': 'success', 'total_time': 16.73226499557495, 'fit_time': np.float64(2.5819516658782957), 'score_time': np.float64(0.43016901016235354), 'absolute_time': 1746699889.4852884, 'flatten_equalized_odds_ratio': '0.0_0.0_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
95
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_features_normalization_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.39192204631726324), 'balanced_accuracy': np.float64(0.6235073706049482), 'by_group': {'0_0': np.float64(0.86), '0_2': np.float64(0.78), '0_3': np.float64(0.47), '1_0': np.float64(0.93), '1_2': np.float64(0.73), '1_3': np.float64(0.7), '1_5': np.float64(0.52)}, 'status': 'success', 'total_time': 104.6413209438324, 'fit_time': np.float64(20.68613467216492), 'score_time': np.float64(0.09913530349731445), 'absolute_time': 1746699994.2470262, 'flatten_equalized_odds_ratio': '0.37_0.26_0.4_0.38_0.56', 'flatten_balanced_accuracy': '0.62_0.62_0.62_0.62_0.63'}
96
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(50), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.09090464401357266), 'balanced_accuracy': np.float64(0.6456146524884435), 'by_group': {'0_0': np.float64(0.25), '0_2': np.float64(0.28), '0_3': np.float64(0.1), '1_0': np.float64(1.0), '1_2': np.float64(0.6), '1_3': np.float64(0.42), '1_5': np.float64(0.31)}, 'status': 'success', 'total_time': 56.525551080703735, 'fit_time': np.float64(10.921387910842896), 'score_time': np.float64(0.17187252044677734), 'absolute_time': 1746700050.948893, 'flatten_equalized_odds_ratio': '0.26_0.08_0.0_0.12_0.0', 'flatten_balanced_accuracy': '0.66_0.65_0.63_0.64_0.64'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

97
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 18, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'0_0': -inf, '0_2': -inf, '0_3': -inf, '1_0': -inf, '1_2': -inf, '1_3': -inf, '1_5': -inf}, 'status': 'fail', 'total_time': 0.0006301403045654297, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746700051.104248}
98
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')}
{'equalized_odds_ratio': np.float64(0.1079711462382896), 'balanced_accuracy': np.float64(0.656407254551211), 'by_group': {'0_0': np.float64(0.6), '0_2': np.float64(0.41), '0_3': np.float64(0.11), '1_0': np.float64(1.0), '1_2': np.float64(0.53), '1_3': np.float64(0.44), '1_5': np.float64(0.28)}, 'status': 'success', 'total_time': 4.201614141464233, 'fit_time': np.float64(0.7584190845489502), 'score_time': np.float64(0.010453176498413087), 'absolute_time': 1746700055.4593995, 'flatten_equalized_odds_ratio': '0.13_0.1_0.0_0.1_0.21', 'flatten_balanced_accuracy': '0.65_0.65_0.66_0.67_0.65'}
99
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 6, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification')}
{'equalized_odds_ratio': np.float64(0.25075558609268844), 'balanced_accuracy': np.float64(0.6491221414983975), 'by_group': {'0_0': np.float64(0.67), '0_2': np.float64(0.72), '0_3': np.float64(0.3), '1_0': np.float64(0.81), '1_2': np.float64(0.73), '1_3': np.float64(0.7), '1_5': np.float64(0.56)}, 'status': 'success', 'total_time': 1.2978620529174805, 'fit_time': np.float64(0.18756537437438964), 'score_time': np.float64(0.008275508880615234), 'absolute_time': 1746700056.8806195, 'flatten_equalized_odds_ratio': '0.43_0.22_0.0_0.21_0.39', 'flatten_balanced_accuracy': '0.65_0.66_0.64_0.64_0.64'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

100
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'0_0': -inf, '0_2': -inf, '0_3': -inf, '1_0': -inf, '1_2': -inf, '1_3': -inf, '1_5': -inf}, 'status': 'fail', 'total_time': 0.00047278404235839844, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746700057.0030506}
101
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 13, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.13393733854934214), 'balanced_accuracy': np.float64(0.6353014466596807), 'by_group': {'0_0': np.float64(0.74), '0_2': np.float64(0.62), '0_3': np.float64(0.26), '1_0': np.float64(0.99), '1_2': np.float64(0.57), '1_3': np.float64(0.56), '1_5': np.float64(0.25)}, 'status': 'success', 'total_time': 2.287670612335205, 'fit_time': np.float64(0.10221023559570312), 'score_time': np.float64(0.14232378005981444), 'absolute_time': 1746700059.4154627, 'flatten_equalized_odds_ratio': '0.09_0.11_0.1_0.15_0.21', 'flatten_balanced_accuracy': '0.63_0.63_0.63_0.65_0.63'}
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
/usr/local/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:112: RuntimeWarning: invalid value encountered in divide
  f = msb / msw
102
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.172894833848931), 'balanced_accuracy': np.float64(0.6785579682608611), 'by_group': {'0_0': np.float64(0.68), '0_2': np.float64(0.59), '0_3': np.float64(0.21), '1_0': np.float64(1.0), '1_2': np.float64(0.61), '1_3': np.float64(0.53), '1_5': np.float64(0.37)}, 'status': 'success', 'total_time': 4.915726661682129, 'fit_time': np.float64(0.7292069435119629), 'score_time': np.float64(0.008438968658447265), 'absolute_time': 1746700066.8374298, 'flatten_equalized_odds_ratio': '0.24_0.31_0.0_0.23_0.09', 'flatten_balanced_accuracy': '0.68_0.68_0.68_0.68_0.68'}
103
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.1686385507906778), 'balanced_accuracy': np.float64(0.6877099323817808), 'by_group': {'0_0': np.float64(0.44), '0_2': np.float64(0.47), '0_3': np.float64(0.17), '1_0': np.float64(0.98), '1_2': np.float64(0.6), '1_3': np.float64(0.64), '1_5': np.float64(0.71)}, 'status': 'success', 'total_time': 3.541837215423584, 'fit_time': np.float64(0.6344992160797119), 'score_time': np.float64(0.007537651062011719), 'absolute_time': 1746700070.524516, 'flatten_equalized_odds_ratio': '0.29_0.0_0.0_0.34_0.21', 'flatten_balanced_accuracy': '0.7_0.68_0.68_0.71_0.68'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

104
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 6, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification')}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'0_0': -inf, '0_2': -inf, '0_3': -inf, '1_0': -inf, '1_2': -inf, '1_3': -inf, '1_5': -inf}, 'status': 'fail', 'total_time': 0.0004878044128417969, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746700070.6519816}
105
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'equalized_odds_ratio': np.float64(0.12937551095543826), 'balanced_accuracy': np.float64(0.6718119581477364), 'by_group': {'0_0': np.float64(0.7), '0_2': np.float64(0.56), '0_3': np.float64(0.16), '1_0': np.float64(0.98), '1_2': np.float64(0.54), '1_3': np.float64(0.54), '1_5': np.float64(0.34)}, 'status': 'success', 'total_time': 4.390531301498413, 'fit_time': np.float64(0.8063870429992676), 'score_time': np.float64(0.007086801528930664), 'absolute_time': 1746700075.1720352, 'flatten_equalized_odds_ratio': '0.21_0.1_0.0_0.23_0.11', 'flatten_balanced_accuracy': '0.67_0.68_0.67_0.68_0.66'}
106
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(50), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'equalized_odds_ratio': np.float64(0.15474000500531726), 'balanced_accuracy': np.float64(0.6800298181811246), 'by_group': {'0_0': np.float64(0.63), '0_2': np.float64(0.5), '0_3': np.float64(0.16), '1_0': np.float64(1.0), '1_2': np.float64(0.52), '1_3': np.float64(0.51), '1_5': np.float64(0.31)}, 'status': 'success', 'total_time': 192.6142933368683, 'fit_time': np.float64(38.4144109249115), 'score_time': np.float64(0.016574668884277343), 'absolute_time': 1746700267.956596, 'flatten_equalized_odds_ratio': '0.2_0.19_0.0_0.1_0.28', 'flatten_balanced_accuracy': '0.68_0.68_0.67_0.7_0.67'}
AutoML: optimization done.
AutoML: miner done.
AutoML: export done.
Here is the standard output/error of the command:

Here is the standard output/error of the command:

Here is the standard output/error of the command:

hamlet_1666248116
AutoML execution ended
