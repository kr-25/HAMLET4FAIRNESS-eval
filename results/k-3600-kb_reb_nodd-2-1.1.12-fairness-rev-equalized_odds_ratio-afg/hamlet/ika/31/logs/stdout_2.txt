Sensitive groups ready!
Theory ready!
Theory:
step(normalization) :- true.
step(features) :- true.
step(mitigation) :- true.
step(rebalancing) :- true.
step(classification) :- true.
operator(normalization, power_transformer) :- true.
operator(normalization, robust_scaler) :- true.
operator(normalization, standard) :- true.
operator(normalization, minmax) :- true.
operator(features, select_k_best) :- true.
operator(features, pca) :- true.
operator(mitigation, corr_remover) :- true.
operator(mitigation, lfr) :- true.
operator(rebalancing, near_miss) :- true.
operator(rebalancing, smote) :- true.
operator(classification, knn) :- true.
operator(classification, nn) :- true.
operator(classification, rf) :- true.
hyperparameter(robust_scaler, with_centering, choice) :- true.
hyperparameter(robust_scaler, with_scaling, choice) :- true.
hyperparameter(standard, with_mean, choice) :- true.
hyperparameter(standard, with_std, choice) :- true.
hyperparameter(select_k_best, k, randint) :- true.
hyperparameter(pca, n_components, randint) :- true.
hyperparameter(corr_remover, alpha, choice) :- true.
hyperparameter(lfr, n_prototypes, choice) :- true.
hyperparameter(lfr, reconstruct_weight, choice) :- true.
hyperparameter(lfr, fairness_weight, choice) :- true.
hyperparameter(near_miss, n_neighbors, randint) :- true.
hyperparameter(smote, k_neighbors, randint) :- true.
hyperparameter(knn, n_neighbors, randint) :- true.
hyperparameter(knn, weights, choice) :- true.
hyperparameter(knn, metric, choice) :- true.
hyperparameter(nn, n_hidden_layers, choice) :- true.
hyperparameter(nn, n_neurons, choice) :- true.
hyperparameter(nn, activation, choice) :- true.
hyperparameter(nn, solver, choice) :- true.
hyperparameter(nn, alpha, choice) :- true.
hyperparameter(nn, learning_rate, choice) :- true.
hyperparameter(rf, n_estimators, choice) :- true.
hyperparameter(rf, max_depth, randint) :- true.
hyperparameter(rf, max_features, randint) :- true.
hyperparameter(rf, min_samples_split, randint) :- true.
hyperparameter(rf, max_leaf_nodes, randint) :- true.
hyperparameter(rf, bootstrap, choice) :- true.
hyperparameter(rf, criterion, choice) :- true.
domain(robust_scaler, with_centering, [true, false]) :- true.
domain(robust_scaler, with_scaling, [true, false]) :- true.
domain(standard, with_mean, [true, false]) :- true.
domain(standard, with_std, [true, false]) :- true.
domain(select_k_best, k, [1, 10]) :- true.
domain(pca, n_components, [1, 8]) :- true.
domain(corr_remover, alpha, [0.25, 0.5, 0.75, 1.0]) :- true.
domain(lfr, n_prototypes, [10, 50, 100, 200]) :- true.
domain(lfr, reconstruct_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(lfr, fairness_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(near_miss, n_neighbors, [1, 4]) :- true.
domain(smote, k_neighbors, [5, 8]) :- true.
domain(knn, n_neighbors, [3, 20]) :- true.
domain(knn, weights, [uniform, distance]) :- true.
domain(knn, metric, [minkowski, euclidean, manhattan]) :- true.
domain(nn, n_hidden_layers, [1, 5, 10, 20]) :- true.
domain(nn, n_neurons, [5, 10, 25, 50]) :- true.
domain(nn, activation, [logistic, tanh, relu]) :- true.
domain(nn, solver, [lbfgs, sgd, adam]) :- true.
domain(nn, alpha, [0.0001, 0.001, 0.01, 0.00001]) :- true.
domain(nn, learning_rate, [constant, invscaling, adaptive]) :- true.
domain(rf, n_estimators, [10, 25, 50, 75, 100]) :- true.
domain(rf, max_depth, [1, 5]) :- true.
domain(rf, max_features, [1, 4]) :- true.
domain(rf, min_samples_split, [2, 6]) :- true.
domain(rf, max_leaf_nodes, [2, 6]) :- true.
domain(rf, bootstrap, [true, false]) :- true.
domain(rf, criterion, [gini, entropy]) :- true.
dataset('credit-g') :- true.
metric(balanced_accuracy) :- true.
fairness_metric(equalized_odds_ratio) :- true.
sensitive_feature(personal_status, [single, 'div/dep/mar', 'mar/wid']) :- true.
sensitive_feature(sex, [male, female]) :- true.
':=>'(mc0, unbalanced_dataset) :- true.
':=>'(cc2176598619324919269, forbidden([features, rebalancing, normalization], nn)) :- true.
':=>'(cc8902563500948610302, forbidden([features, normalization, rebalancing], rf)) :- true.
pipeline([Step_1_0], ZZ_0) :- (step(Step_1_0), '\\='(Step_1_0, classification), operator(classification, ZZ_0)).
pipeline([Step_1_1, Step_2_0], ZZ_1) :- (step(Step_1_1), step(Step_2_0), '\\='(Step_1_1, classification), '\\='(Step_2_0, classification), '\\='(Step_1_1, Step_2_0), operator(classification, ZZ_1)).
pipeline([Step_1_2, Step_2_1, Step_3_0], ZZ_2) :- (step(Step_1_2), step(Step_2_1), step(Step_3_0), '\\='(Step_1_2, classification), '\\='(Step_2_1, classification), '\\='(Step_3_0, classification), '\\='(Step_1_2, Step_2_1), '\\='(Step_1_2, Step_3_0), '\\='(Step_2_1, Step_3_0), operator(classification, ZZ_2)).
pipeline([Step_1_3, Step_2_2, Step_3_1, Step_4_0], ZZ_3) :- (step(Step_1_3), step(Step_2_2), step(Step_3_1), step(Step_4_0), '\\='(Step_1_3, classification), '\\='(Step_2_2, classification), '\\='(Step_3_1, classification), '\\='(Step_4_0, classification), '\\='(Step_1_3, Step_2_2), '\\='(Step_1_3, Step_3_1), '\\='(Step_1_3, Step_4_0), '\\='(Step_2_2, Step_3_1), '\\='(Step_2_2, Step_4_0), '\\='(Step_3_1, Step_4_0), operator(classification, ZZ_3)).
':=>'(p287656, sensitive_group([single])) :- true.
':=>'(p15132, sensitive_group(['div/dep/mar'])) :- true.
':=>'(p883922, sensitive_group(['mar/wid'])) :- true.
':=>'(p836907, sensitive_group([male])) :- true.
':=>'(p561340, sensitive_group([female])) :- true.
':=>'(p936782, sensitive_group([single, male])) :- true.
':=>'(p426389, sensitive_group([single, female])) :- true.
':=>'(p436116, sensitive_group(['div/dep/mar', male])) :- true.
':=>'(p988358, sensitive_group(['div/dep/mar', female])) :- true.
':=>'(p156193, sensitive_group(['mar/wid', male])) :- true.
':=>'(p384819, sensitive_group(['mar/wid', female])) :- true.
':=>'(p801739, pipeline([normalization, features, rebalancing], nn)) :- true.
':=>'(p916914, pipeline([normalization, features, rebalancing], rf)) :- true.
':=>'(p530546, pipeline([normalization, rebalancing, features], nn)) :- true.
':=>'(p648115, pipeline([normalization, rebalancing, features], rf)) :- true.
':=>'(p464324, pipeline([features, normalization, rebalancing], nn)) :- true.
':=>'(p100244, pipeline([features, normalization, rebalancing], rf)) :- true.
':=>'(p598120, pipeline([features, rebalancing, normalization], nn)) :- true.
':=>'(p897129, pipeline([features, rebalancing, normalization], rf)) :- true.
':=>'(p628740, pipeline([rebalancing, normalization, features], nn)) :- true.
':=>'(p161652, pipeline([rebalancing, normalization, features], rf)) :- true.
':=>'(p647018, pipeline([rebalancing, features, normalization], nn)) :- true.
':=>'(p569749, pipeline([rebalancing, features, normalization], rf)) :- true.
':=>'(p485095, pipeline([normalization, features, mitigation, rebalancing], nn)) :- true.
':=>'(p896798, pipeline([normalization, features, mitigation, rebalancing], rf)) :- true.
':=>'(p289453, pipeline([normalization, features, rebalancing, mitigation], nn)) :- true.
':=>'(p696731, pipeline([normalization, features, rebalancing, mitigation], rf)) :- true.
':=>'(p747203, pipeline([normalization, mitigation, features, rebalancing], nn)) :- true.
':=>'(p427882, pipeline([normalization, mitigation, features, rebalancing], rf)) :- true.
':=>'(p111466, pipeline([normalization, mitigation, rebalancing, features], nn)) :- true.
':=>'(p212377, pipeline([normalization, mitigation, rebalancing, features], rf)) :- true.
':=>'(p766066, pipeline([normalization, rebalancing, features, mitigation], nn)) :- true.
':=>'(p128797, pipeline([normalization, rebalancing, features, mitigation], rf)) :- true.
':=>'(p259624, pipeline([normalization, rebalancing, mitigation, features], nn)) :- true.
':=>'(p572127, pipeline([normalization, rebalancing, mitigation, features], rf)) :- true.
':=>'(p323985, pipeline([features, normalization, mitigation, rebalancing], nn)) :- true.
':=>'(p359725, pipeline([features, normalization, mitigation, rebalancing], rf)) :- true.
':=>'(p730350, pipeline([features, normalization, rebalancing, mitigation], nn)) :- true.
':=>'(p124299, pipeline([features, normalization, rebalancing, mitigation], rf)) :- true.
':=>'(p323811, pipeline([features, mitigation, normalization, rebalancing], nn)) :- true.
':=>'(p313981, pipeline([features, mitigation, normalization, rebalancing], rf)) :- true.
':=>'(p859407, pipeline([features, mitigation, rebalancing, normalization], nn)) :- true.
':=>'(p655686, pipeline([features, mitigation, rebalancing, normalization], rf)) :- true.
':=>'(p586185, pipeline([features, rebalancing, normalization, mitigation], nn)) :- true.
':=>'(p275290, pipeline([features, rebalancing, normalization, mitigation], rf)) :- true.
':=>'(p172073, pipeline([features, rebalancing, mitigation, normalization], nn)) :- true.
':=>'(p408745, pipeline([features, rebalancing, mitigation, normalization], rf)) :- true.
':=>'(p464853, pipeline([mitigation, normalization, features, rebalancing], nn)) :- true.
':=>'(p824999, pipeline([mitigation, normalization, features, rebalancing], rf)) :- true.
':=>'(p592235, pipeline([mitigation, normalization, rebalancing, features], nn)) :- true.
':=>'(p730955, pipeline([mitigation, normalization, rebalancing, features], rf)) :- true.
':=>'(p454582, pipeline([mitigation, features, normalization, rebalancing], nn)) :- true.
':=>'(p356272, pipeline([mitigation, features, normalization, rebalancing], rf)) :- true.
':=>'(p347296, pipeline([mitigation, features, rebalancing, normalization], nn)) :- true.
':=>'(p966933, pipeline([mitigation, features, rebalancing, normalization], rf)) :- true.
':=>'(p153027, pipeline([mitigation, rebalancing, normalization, features], nn)) :- true.
':=>'(p124054, pipeline([mitigation, rebalancing, normalization, features], rf)) :- true.
':=>'(p852838, pipeline([mitigation, rebalancing, features, normalization], nn)) :- true.
':=>'(p309456, pipeline([mitigation, rebalancing, features, normalization], rf)) :- true.
':=>'(p337932, pipeline([rebalancing, normalization, features, mitigation], nn)) :- true.
':=>'(p579632, pipeline([rebalancing, normalization, features, mitigation], rf)) :- true.
':=>'(p537844, pipeline([rebalancing, normalization, mitigation, features], nn)) :- true.
':=>'(p477552, pipeline([rebalancing, normalization, mitigation, features], rf)) :- true.
':=>'(p784208, pipeline([rebalancing, features, normalization, mitigation], nn)) :- true.
':=>'(p340588, pipeline([rebalancing, features, normalization, mitigation], rf)) :- true.
':=>'(p247872, pipeline([rebalancing, features, mitigation, normalization], nn)) :- true.
':=>'(p77236, pipeline([rebalancing, features, mitigation, normalization], rf)) :- true.
':=>'(p277385, pipeline([rebalancing, mitigation, normalization, features], nn)) :- true.
':=>'(p23592, pipeline([rebalancing, mitigation, normalization, features], rf)) :- true.
':=>'(p753924, pipeline([rebalancing, mitigation, features, normalization], nn)) :- true.
':=>'(p159086, pipeline([rebalancing, mitigation, features, normalization], rf)) :- true.

Checking Config
Exporting Config
Saving Graph
Exporting AutoML input
Exporting Space
Exporting Constraints
Input created for iteration Config(iteration=2, dataset=credit-g, metric=balanced_accuracy, fairnessMetric=equalized_odds_ratio, sensitiveFeatures=[personal_status, sex], mode=max, batchSize=999999, timeBudget=900, seed=42)
Here is the standard output/error of the command:

0fccb6ef17f581de9f375aec0f5c7e534b444d41d4a5e64e8b33c1ae0a6f03ca
Here is the standard output/error of the command:

Here is the standard output/error of the command:

WARNING:root:No module named 'rpy2': FairAdapt will be unavailable. To install, run:
pip install 'aif360[FairAdapt]'
INFO:flaml.tune.searcher.blendsearch:No low-cost partial config given to the search algorithm. For cost-frugal search, consider providing low-cost values for cost-related hps via 'low_cost_partial_config'. More info can be found at https://microsoft.github.io/FLAML/docs/FAQ#about-low_cost_partial_config-in-tune
Trying to add: (Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: rebalancing in {'NearMiss', 'SMOTE'} && Forbidden: classification == 'RandomForestClassifier')
Added successfully: (Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: rebalancing in {'NearMiss', 'SMOTE'} && Forbidden: classification == 'RandomForestClassifier')
Trying to add: (Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: rebalancing in {'NearMiss', 'SMOTE'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'MLPClassifier')
Added successfully: (Forbidden: features in {'SelectKBest', 'PCA'} && Forbidden: rebalancing in {'NearMiss', 'SMOTE'} && Forbidden: normalization in {'PowerTransformer', 'RobustScaler', 'StandardScaler', 'MinMaxScaler'} && Forbidden: classification == 'MLPClassifier')
AutoML: starting optimization.
207
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.17333333333333334), 'balanced_accuracy': np.float64(0.5499999999999999), 'by_group': {'female_div/dep/mar': np.float64(0.69), 'male_div/sep': np.float64(0.18), 'male_mar/wid': np.float64(0.64), 'male_single': np.float64(0.61)}, 'status': 'success', 'total_time': 3.1643481254577637, 'fit_time': np.float64(0.590848970413208), 'score_time': np.float64(0.009613323211669921), 'absolute_time': 1746692685.2053404, 'flatten_equalized_odds_ratio': '0.0_0.2_0.37_0.3_0.0', 'flatten_balanced_accuracy': '0.55_0.59_0.5_0.58_0.54'}
208
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 4, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 3, 'n_estimators': np.int64(50)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.4634273772204806), 'balanced_accuracy': np.float64(0.6438095238095238), 'by_group': {'female_div/dep/mar': np.float64(0.64), 'male_div/sep': np.float64(0.62), 'male_mar/wid': np.float64(0.95), 'male_single': np.float64(0.61)}, 'status': 'success', 'total_time': 0.7377665042877197, 'fit_time': np.float64(0.10860395431518555), 'score_time': np.float64(0.0073527336120605465), 'absolute_time': 1746692686.1876018, 'flatten_equalized_odds_ratio': '0.62_0.0_0.51_0.57_0.61', 'flatten_balanced_accuracy': '0.68_0.67_0.64_0.61_0.62'}
209
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(50), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.3935529030356616), 'balanced_accuracy': np.float64(0.5257142857142857), 'by_group': {'female_div/dep/mar': np.float64(0.7), 'male_div/sep': np.float64(0.46), 'male_mar/wid': np.float64(0.84), 'male_single': np.float64(0.44)}, 'status': 'success', 'total_time': 8.629416704177856, 'fit_time': np.float64(1.1157128810882568), 'score_time': np.float64(0.006099271774291992), 'absolute_time': 1746692695.060056, 'flatten_equalized_odds_ratio': '0.42_0.54_0.46_0.55_0.0', 'flatten_balanced_accuracy': '0.54_0.54_0.52_0.51_0.51'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

210
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(50), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0006654262542724609, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692695.323266}
211
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_split': 2, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('SelectKBest'), 'k': 7}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.8252873563218392), 'balanced_accuracy': np.float64(0.5235714285714286), 'by_group': {'female_div/dep/mar': np.float64(0.93), 'male_div/sep': np.float64(0.83), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.9)}, 'status': 'success', 'total_time': 7.021798610687256, 'fit_time': np.float64(0.8619546890258789), 'score_time': np.float64(0.009028244018554687), 'absolute_time': 1746692702.5922995, 'flatten_equalized_odds_ratio': '1.0_0.5_0.97_0.83_0.83', 'flatten_balanced_accuracy': '0.5_0.58_0.5_0.51_0.53'}
212
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 5, 'n_estimators': np.int64(10)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.9839367816091954), 'balanced_accuracy': np.float64(0.5026190476190476), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.98)}, 'status': 'success', 'total_time': 0.2614455223083496, 'fit_time': np.float64(0.018261480331420898), 'score_time': np.float64(0.004847049713134766), 'absolute_time': 1746692703.1058824, 'flatten_equalized_odds_ratio': '1.0_0.97_0.97_0.99_1.0', 'flatten_balanced_accuracy': '0.5_0.51_0.51_0.5_0.5'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 609, in objective
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_param_validation.py", line 216, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 431, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 517, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 5 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
5 fits failed with the following error:
Traceback (most recent call last):
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 866, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "/usr/local/lib/python3.12/site-packages/sklearn/base.py", line 1389, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 518, in fit
    Xt, yt = self._fit(X, y, routed_params, raw_params=params)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 430, in _fit
    X, fitted_transformer = fit_transform_one_cached(
                            ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/joblib/memory.py", line 312, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 1383, in _fit_transform_one
    res = transformer.fit_transform(X, y, **params.get("fit_transform", {}))
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_set_output.py", line 319, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 76, in fit_transform
    df_X, df_y = self._prepare_dataset(X, y, fit=True)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 37, in _prepare_dataset
    raise Exception("No sensitive features to mitigate")
Exception: No sensitive features to mitigate


213
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.022855043411254883, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692703.396124}
214
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_rebalancing_features_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.3246574401855469, 'fit_time': np.float64(0.029608488082885742), 'score_time': np.float64(0.005469369888305664), 'absolute_time': 1746692703.9734974, 'flatten_equalized_odds_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
215
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 11, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.45018112156043183), 'balanced_accuracy': np.float64(0.6240476190476191), 'by_group': {'female_div/dep/mar': np.float64(0.67), 'male_div/sep': np.float64(0.6), 'male_mar/wid': np.float64(0.78), 'male_single': np.float64(0.59)}, 'status': 'success', 'total_time': 0.34211039543151855, 'fit_time': np.float64(0.02363271713256836), 'score_time': np.float64(0.005610418319702148), 'absolute_time': 1746692708.1634858, 'flatten_equalized_odds_ratio': '0.49_0.43_0.45_0.4_0.47', 'flatten_balanced_accuracy': '0.68_0.6_0.69_0.66_0.5'}
216
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.8150000000000001), 'balanced_accuracy': np.float64(0.5126190476190475), 'by_group': {'female_div/dep/mar': np.float64(0.91), 'male_div/sep': np.float64(0.82), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.85)}, 'status': 'success', 'total_time': 7.816799640655518, 'fit_time': np.float64(0.8528663635253906), 'score_time': np.float64(0.017140531539916994), 'absolute_time': 1746692716.2658703, 'flatten_equalized_odds_ratio': '0.75_1.0_0.82_1.0_0.5', 'flatten_balanced_accuracy': '0.54_0.5_0.5_0.5_0.52'}
217
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 11, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.7167147532846262), 'balanced_accuracy': np.float64(0.5352380952380953), 'by_group': {'female_div/dep/mar': np.float64(0.92), 'male_div/sep': np.float64(0.73), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.88)}, 'status': 'success', 'total_time': 0.17718982696533203, 'fit_time': np.float64(0.0036764144897460938), 'score_time': np.float64(0.0036925315856933595), 'absolute_time': 1746692716.7136443, 'flatten_equalized_odds_ratio': '0.71_0.87_0.5_0.61_0.9', 'flatten_balanced_accuracy': '0.59_0.55_0.52_0.58_0.44'}
218
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 8, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.2015873015873016), 'balanced_accuracy': np.float64(0.5664285714285715), 'by_group': {'female_div/dep/mar': np.float64(0.7), 'male_div/sep': np.float64(0.35), 'male_mar/wid': np.float64(0.56), 'male_single': np.float64(0.62)}, 'status': 'success', 'total_time': 0.2736358642578125, 'fit_time': np.float64(0.006993007659912109), 'score_time': np.float64(0.011597108840942384), 'absolute_time': 1746692717.24212, 'flatten_equalized_odds_ratio': '0.62_0.0_0.0_0.0_0.39', 'flatten_balanced_accuracy': '0.6_0.55_0.69_0.51_0.48'}
219
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 17, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.533629961587708), 'balanced_accuracy': np.float64(0.6502380952380953), 'by_group': {'female_div/dep/mar': np.float64(0.68), 'male_div/sep': np.float64(0.77), 'male_mar/wid': np.float64(0.68), 'male_single': np.float64(0.72)}, 'status': 'success', 'total_time': 0.2374868392944336, 'fit_time': np.float64(0.006202030181884766), 'score_time': np.float64(0.006650543212890625), 'absolute_time': 1746692717.734565, 'flatten_equalized_odds_ratio': '0.54_0.57_0.57_0.2_0.79', 'flatten_balanced_accuracy': '0.69_0.63_0.65_0.67_0.61'}
220
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.9242424242424242), 'balanced_accuracy': np.float64(0.5061904761904762), 'by_group': {'female_div/dep/mar': np.float64(0.97), 'male_div/sep': np.float64(0.93), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.99)}, 'status': 'success', 'total_time': 0.24026012420654297, 'fit_time': np.float64(0.01613616943359375), 'score_time': np.float64(0.0031383991241455077), 'absolute_time': 1746692718.2415981, 'flatten_equalized_odds_ratio': '0.83_1.0_1.0_0.95_0.83', 'flatten_balanced_accuracy': '0.51_0.5_0.5_0.51_0.51'}
221
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 3}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification')}
{'equalized_odds_ratio': np.float64(0.8448275862068965), 'balanced_accuracy': np.float64(0.5188095238095238), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.9), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.86)}, 'status': 'success', 'total_time': 9.591014862060547, 'fit_time': np.float64(1.8772265434265136), 'score_time': np.float64(0.006998729705810547), 'absolute_time': 1746692728.0985208, 'flatten_equalized_odds_ratio': '1.0_1.0_0.72_1.0_0.5', 'flatten_balanced_accuracy': '0.5_0.5_0.54_0.5_0.55'}
222
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 13, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 2}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.5284326018808777), 'balanced_accuracy': np.float64(0.6238095238095238), 'by_group': {'female_div/dep/mar': np.float64(0.71), 'male_div/sep': np.float64(0.83), 'male_mar/wid': np.float64(0.67), 'male_single': np.float64(0.65)}, 'status': 'success', 'total_time': 0.22326946258544922, 'fit_time': np.float64(0.007719182968139648), 'score_time': np.float64(0.004970932006835937), 'absolute_time': 1746692728.585681, 'flatten_equalized_odds_ratio': '0.27_0.6_0.68_0.53_0.56', 'flatten_balanced_accuracy': '0.65_0.59_0.59_0.63_0.65'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

223
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0006020069122314453, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692732.947045}
224
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 1.0638439655303955, 'fit_time': np.float64(0.17864594459533692), 'score_time': np.float64(0.004483270645141602), 'absolute_time': 1746692734.2728598, 'flatten_equalized_odds_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
225
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.5791126039493999), 'balanced_accuracy': np.float64(0.5940476190476192), 'by_group': {'female_div/dep/mar': np.float64(0.86), 'male_div/sep': np.float64(0.71), 'male_mar/wid': np.float64(0.78), 'male_single': np.float64(0.81)}, 'status': 'success', 'total_time': 1.1297779083251953, 'fit_time': np.float64(0.19269175529479982), 'score_time': np.float64(0.004060888290405273), 'absolute_time': 1746692735.685947, 'flatten_equalized_odds_ratio': '0.83_0.32_0.73_0.42_0.6', 'flatten_balanced_accuracy': '0.6_0.63_0.56_0.63_0.55'}
226
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 15, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification')}
{'equalized_odds_ratio': np.float64(0.43461738261738264), 'balanced_accuracy': np.float64(0.5788095238095238), 'by_group': {'female_div/dep/mar': np.float64(0.58), 'male_div/sep': np.float64(0.63), 'male_mar/wid': np.float64(0.57), 'male_single': np.float64(0.79)}, 'status': 'success', 'total_time': 5.453024864196777, 'fit_time': np.float64(0.8830307960510254), 'score_time': np.float64(0.009242820739746093), 'absolute_time': 1746692741.407192, 'flatten_equalized_odds_ratio': '0.0_0.5_0.69_0.51_0.47', 'flatten_balanced_accuracy': '0.62_0.64_0.54_0.48_0.61'}
227
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.9022727272727273), 'balanced_accuracy': np.float64(0.5369047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.9), 'male_div/sep': np.float64(0.92), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.94)}, 'status': 'success', 'total_time': 0.2986760139465332, 'fit_time': np.float64(0.026731204986572266), 'score_time': np.float64(0.00408787727355957), 'absolute_time': 1746692741.9769385, 'flatten_equalized_odds_ratio': '1.0_1.0_0.51_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.68_0.5_0.5'}
228
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 6, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.5018535353535354), 'balanced_accuracy': np.float64(0.6264285714285714), 'by_group': {'female_div/dep/mar': np.float64(0.61), 'male_div/sep': np.float64(0.52), 'male_mar/wid': np.float64(0.86), 'male_single': np.float64(0.77)}, 'status': 'success', 'total_time': 0.5801668167114258, 'fit_time': np.float64(0.005865573883056641), 'score_time': np.float64(0.046722030639648436), 'absolute_time': 1746692742.832057, 'flatten_equalized_odds_ratio': '0.5_0.31_0.47_0.67_0.56', 'flatten_balanced_accuracy': '0.61_0.66_0.63_0.62_0.61'}
229
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 20, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.32025974025974024), 'balanced_accuracy': np.float64(0.6114285714285714), 'by_group': {'female_div/dep/mar': np.float64(0.45), 'male_div/sep': np.float64(0.45), 'male_mar/wid': np.float64(0.86), 'male_single': np.float64(0.69)}, 'status': 'success', 'total_time': 0.33774638175964355, 'fit_time': np.float64(0.015814447402954103), 'score_time': np.float64(0.013518619537353515), 'absolute_time': 1746692743.449147, 'flatten_equalized_odds_ratio': '0.23_0.6_0.38_0.4_0.0', 'flatten_balanced_accuracy': '0.64_0.62_0.62_0.6_0.57'}
230
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 8, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification')}
{'equalized_odds_ratio': np.float64(0.15689655172413794), 'balanced_accuracy': np.float64(0.6078571428571429), 'by_group': {'female_div/dep/mar': np.float64(0.54), 'male_div/sep': np.float64(0.24), 'male_mar/wid': np.float64(0.7), 'male_single': np.float64(0.62)}, 'status': 'success', 'total_time': 0.3112168312072754, 'fit_time': np.float64(0.008133792877197265), 'score_time': np.float64(0.012176990509033203), 'absolute_time': 1746692744.0596843, 'flatten_equalized_odds_ratio': '0.0_0.0_0.42_0.37_0.0', 'flatten_balanced_accuracy': '0.64_0.67_0.59_0.51_0.63'}
231
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification')}
{'equalized_odds_ratio': np.float64(0.34), 'balanced_accuracy': np.float64(0.5788095238095239), 'by_group': {'female_div/dep/mar': np.float64(0.74), 'male_div/sep': np.float64(0.54), 'male_mar/wid': np.float64(0.53), 'male_single': np.float64(0.72)}, 'status': 'success', 'total_time': 7.323825836181641, 'fit_time': np.float64(1.0480218410491944), 'score_time': np.float64(0.00969996452331543), 'absolute_time': 1746692755.6259356, 'flatten_equalized_odds_ratio': '0.48_0.0_0.41_0.39_0.42', 'flatten_balanced_accuracy': '0.54_0.55_0.61_0.58_0.61'}
232
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.4538314176245211), 'balanced_accuracy': np.float64(0.544047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.77), 'male_div/sep': np.float64(0.59), 'male_mar/wid': np.float64(0.9), 'male_single': np.float64(0.59)}, 'status': 'success', 'total_time': 4.653292417526245, 'fit_time': np.float64(0.8908854484558105), 'score_time': np.float64(0.007325172424316406), 'absolute_time': 1746692760.556291, 'flatten_equalized_odds_ratio': '0.78_0.0_0.76_0.48_0.25', 'flatten_balanced_accuracy': '0.56_0.55_0.54_0.55_0.53'}
233
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 6, 'min_samples_split': 2, 'n_estimators': np.int64(25)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_normalization_rebalancing_features_classification')}
{'equalized_odds_ratio': np.float64(0.5493295019157088), 'balanced_accuracy': np.float64(0.5276190476190477), 'by_group': {'female_div/dep/mar': np.float64(0.77), 'male_div/sep': np.float64(0.59), 'male_mar/wid': np.float64(0.95), 'male_single': np.float64(0.63)}, 'status': 'success', 'total_time': 5.984465837478638, 'fit_time': np.float64(1.1584277153015137), 'score_time': np.float64(0.007044315338134766), 'absolute_time': 1746692766.8176441, 'flatten_equalized_odds_ratio': '0.86_0.62_0.62_0.39_0.25', 'flatten_balanced_accuracy': '0.54_0.6_0.51_0.5_0.5'}
234
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 2}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_rebalancing_features_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.7491461412151067), 'balanced_accuracy': np.float64(0.5526190476190477), 'by_group': {'female_div/dep/mar': np.float64(0.88), 'male_div/sep': np.float64(0.95), 'male_mar/wid': np.float64(0.9), 'male_single': np.float64(0.83)}, 'status': 'success', 'total_time': 0.9870822429656982, 'fit_time': np.float64(0.14709672927856446), 'score_time': np.float64(0.011708879470825195), 'absolute_time': 1746692768.0824652, 'flatten_equalized_odds_ratio': '0.86_0.81_0.75_0.6_0.72', 'flatten_balanced_accuracy': '0.55_0.54_0.54_0.57_0.57'}
235
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.3056079265562024), 'balanced_accuracy': np.float64(0.5654761904761905), 'by_group': {'female_div/dep/mar': np.float64(0.56), 'male_div/sep': np.float64(0.44), 'male_mar/wid': np.float64(0.75), 'male_single': np.float64(0.54)}, 'status': 'success', 'total_time': 3.024163007736206, 'fit_time': np.float64(0.5628711223602295), 'score_time': np.float64(0.00919809341430664), 'absolute_time': 1746692771.4036477, 'flatten_equalized_odds_ratio': '0.0_0.31_0.56_0.34_0.31', 'flatten_balanced_accuracy': '0.61_0.55_0.57_0.57_0.53'}
236
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 4, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 3, 'n_estimators': np.int64(100)}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification')}
{'equalized_odds_ratio': np.float64(0.0), 'balanced_accuracy': np.float64(0.6859523809523809), 'by_group': {'female_div/dep/mar': np.float64(0.6), 'male_div/sep': np.float64(0.29), 'male_mar/wid': np.float64(0.18), 'male_single': np.float64(0.86)}, 'status': 'success', 'total_time': 1.1206748485565186, 'fit_time': np.float64(0.18235087394714355), 'score_time': np.float64(0.008422565460205079), 'absolute_time': 1746692772.8028398, 'flatten_equalized_odds_ratio': '0.0_0.0_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.68_0.7_0.69_0.66_0.7'}
237
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'equalized_odds_ratio': np.float64(0.11170323928944619), 'balanced_accuracy': np.float64(0.6823809523809524), 'by_group': {'female_div/dep/mar': np.float64(0.43), 'male_div/sep': np.float64(0.21), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.55)}, 'status': 'success', 'total_time': 0.45135498046875, 'fit_time': np.float64(0.05125861167907715), 'score_time': np.float64(0.0038753032684326174), 'absolute_time': 1746692773.5428452, 'flatten_equalized_odds_ratio': '0.0_0.0_0.08_0.48_0.0', 'flatten_balanced_accuracy': '0.71_0.69_0.7_0.62_0.68'}
238
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 3, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.32623154623154627), 'balanced_accuracy': np.float64(0.5421428571428571), 'by_group': {'female_div/dep/mar': np.float64(0.72), 'male_div/sep': np.float64(0.47), 'male_mar/wid': np.float64(0.61), 'male_single': np.float64(0.7)}, 'status': 'success', 'total_time': 3.828587055206299, 'fit_time': np.float64(0.6479881286621094), 'score_time': np.float64(0.059029340744018555), 'absolute_time': 1746692777.6519995, 'flatten_equalized_odds_ratio': '0.28_0.47_0.2_0.27_0.42', 'flatten_balanced_accuracy': '0.55_0.57_0.46_0.59_0.53'}
239
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 3, 'max_leaf_nodes': 3, 'min_samples_split': 5, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.8766666666666667), 'balanced_accuracy': np.float64(0.5238095238095238), 'by_group': {'female_div/dep/mar': np.float64(0.93), 'male_div/sep': np.float64(0.97), 'male_mar/wid': np.float64(0.92), 'male_single': np.float64(0.91)}, 'status': 'success', 'total_time': 3.530442476272583, 'fit_time': np.float64(0.6619503498077393), 'score_time': np.float64(0.01040191650390625), 'absolute_time': 1746692781.582151, 'flatten_equalized_odds_ratio': '1.0_0.6_1.0_0.83_0.95', 'flatten_balanced_accuracy': '0.5_0.6_0.5_0.51_0.5'}
240
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 11, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.3685547785547786), 'balanced_accuracy': np.float64(0.5809523809523809), 'by_group': {'female_div/dep/mar': np.float64(0.57), 'male_div/sep': np.float64(0.64), 'male_mar/wid': np.float64(0.65), 'male_single': np.float64(0.7)}, 'status': 'success', 'total_time': 0.2825436592102051, 'fit_time': np.float64(0.007131147384643555), 'score_time': np.float64(0.011963987350463867), 'absolute_time': 1746692786.2790186, 'flatten_equalized_odds_ratio': '0.34_0.62_0.45_0.0_0.42', 'flatten_balanced_accuracy': '0.55_0.57_0.55_0.64_0.59'}
241
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 5, 'min_samples_split': 6, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.7950738916256157), 'balanced_accuracy': np.float64(0.5273809523809524), 'by_group': {'female_div/dep/mar': np.float64(0.93), 'male_div/sep': np.float64(0.82), 'male_mar/wid': np.float64(0.93), 'male_single': np.float64(0.86)}, 'status': 'success', 'total_time': 5.920486927032471, 'fit_time': np.float64(1.1431329250335693), 'score_time': np.float64(0.008201980590820312), 'absolute_time': 1746692792.4840071, 'flatten_equalized_odds_ratio': '0.79_0.75_0.97_0.72_0.75', 'flatten_balanced_accuracy': '0.54_0.53_0.5_0.54_0.52'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 609, in objective
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_param_validation.py", line 216, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 431, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 517, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 5 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
5 fits failed with the following error:
Traceback (most recent call last):
  File "/usr/local/lib/python3.12/site-packages/sklearn/model_selection/_validation.py", line 866, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "/usr/local/lib/python3.12/site-packages/sklearn/base.py", line 1389, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 518, in fit
    Xt, yt = self._fit(X, y, routed_params, raw_params=params)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 430, in _fit
    X, fitted_transformer = fit_transform_one_cached(
                            ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/joblib/memory.py", line 312, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 1383, in _fit_transform_one
    res = transformer.fit_transform(X, y, **params.get("fit_transform", {}))
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/utils/_set_output.py", line 319, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 76, in fit_transform
    df_X, df_y = self._prepare_dataset(X, y, fit=True)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/transformers/lfr_wrapper.py", line 37, in _prepare_dataset
    raise Exception("No sensitive features to mitigate")
Exception: No sensitive features to mitigate


242
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_rebalancing_features_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.11134910583496094, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692792.894864}
243
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 3, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.9097701149425287), 'balanced_accuracy': np.float64(0.5038095238095238), 'by_group': {'female_div/dep/mar': np.float64(0.98), 'male_div/sep': np.float64(0.92), 'male_mar/wid': np.float64(0.96), 'male_single': np.float64(0.98)}, 'status': 'success', 'total_time': 5.549499988555908, 'fit_time': np.float64(0.6237722873687744), 'score_time': np.float64(0.008213329315185546), 'absolute_time': 1746692798.7533388, 'flatten_equalized_odds_ratio': '0.83_0.75_1.0_0.97_1.0', 'flatten_balanced_accuracy': '0.51_0.51_0.5_0.5_0.5'}
244
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 11, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.3752873563218391), 'balanced_accuracy': np.float64(0.6714285714285715), 'by_group': {'female_div/dep/mar': np.float64(0.67), 'male_div/sep': np.float64(0.73), 'male_mar/wid': np.float64(0.63), 'male_single': np.float64(0.58)}, 'status': 'success', 'total_time': 0.3781607151031494, 'fit_time': np.float64(0.025133657455444335), 'score_time': np.float64(0.007188224792480468), 'absolute_time': 1746692799.4158065, 'flatten_equalized_odds_ratio': '0.4_0.4_0.25_0.37_0.46', 'flatten_balanced_accuracy': '0.69_0.67_0.65_0.68_0.67'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

245
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 12, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0005087852478027344, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692799.7012112}
246
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(50), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'equalized_odds_ratio': np.float64(0.26), 'balanced_accuracy': np.float64(0.5599999999999999), 'by_group': {'female_div/dep/mar': np.float64(0.69), 'male_div/sep': np.float64(0.27), 'male_mar/wid': np.float64(0.94), 'male_single': np.float64(0.45)}, 'status': 'success', 'total_time': 3.780698537826538, 'fit_time': np.float64(0.7246665477752685), 'score_time': np.float64(0.0034442424774169924), 'absolute_time': 1746692803.7706656, 'flatten_equalized_odds_ratio': '0.0_0.42_0.65_0.23_0.0', 'flatten_balanced_accuracy': '0.62_0.59_0.56_0.5_0.53'}
247
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 13, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 7}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.5571396993810787), 'balanced_accuracy': np.float64(0.5288095238095238), 'by_group': {'female_div/dep/mar': np.float64(0.76), 'male_div/sep': np.float64(0.72), 'male_mar/wid': np.float64(0.84), 'male_single': np.float64(0.6)}, 'status': 'success', 'total_time': 0.4886913299560547, 'fit_time': np.float64(0.03620257377624512), 'score_time': np.float64(0.011972570419311523), 'absolute_time': 1746692804.6518445, 'flatten_equalized_odds_ratio': '0.69_0.56_0.53_0.55_0.47', 'flatten_balanced_accuracy': '0.51_0.55_0.52_0.53_0.52'}
248
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.511546499477534), 'balanced_accuracy': np.float64(0.5778571428571428), 'by_group': {'female_div/dep/mar': np.float64(0.63), 'male_div/sep': np.float64(0.71), 'male_mar/wid': np.float64(0.91), 'male_single': np.float64(0.59)}, 'status': 'success', 'total_time': 1.1138267517089844, 'fit_time': np.float64(0.1921861171722412), 'score_time': np.float64(0.0026902198791503907), 'absolute_time': 1746692810.1686227, 'flatten_equalized_odds_ratio': '0.75_0.58_0.23_0.48_0.52', 'flatten_balanced_accuracy': '0.61_0.57_0.63_0.55_0.52'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

249
fail
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 4, 'max_features': 4, 'max_leaf_nodes': 2, 'min_samples_split': 5, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0005028247833251953, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692810.4689333}
250
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.9655172413793103), 'balanced_accuracy': np.float64(0.5042857142857142), 'by_group': {'female_div/dep/mar': np.float64(0.99), 'male_div/sep': np.float64(0.97), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.97)}, 'status': 'success', 'total_time': 8.799661636352539, 'fit_time': np.float64(1.72086763381958), 'score_time': np.float64(0.007436370849609375), 'absolute_time': 1746692819.5637586, 'flatten_equalized_odds_ratio': '1.0_1.0_1.0_0.83_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.52_0.5'}
251
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 6, 'min_samples_split': 5, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.3403735632183908), 'balanced_accuracy': np.float64(0.5380952380952382), 'by_group': {'female_div/dep/mar': np.float64(0.68), 'male_div/sep': np.float64(0.42), 'male_mar/wid': np.float64(0.83), 'male_single': np.float64(0.66)}, 'status': 'success', 'total_time': 3.85221004486084, 'fit_time': np.float64(0.7200788021087646), 'score_time': np.float64(0.009543085098266601), 'absolute_time': 1746692823.7142797, 'flatten_equalized_odds_ratio': '0.25_0.54_0.6_0.31_0.0', 'flatten_balanced_accuracy': '0.52_0.52_0.57_0.5_0.57'}
252
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.0), 'balanced_accuracy': np.float64(0.562857142857143), 'by_group': {'female_div/dep/mar': np.float64(0.79), 'male_div/sep': np.float64(0.0), 'male_mar/wid': np.float64(0.88), 'male_single': np.float64(0.64)}, 'status': 'success', 'total_time': 1.211982011795044, 'fit_time': np.float64(0.07713985443115234), 'score_time': np.float64(0.06434860229492187), 'absolute_time': 1746692825.2207885, 'flatten_equalized_odds_ratio': '0.0_0.0_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.6_0.54_0.56_0.56_0.55'}
253
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_split': 2, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_features_normalization_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.9628978205702344), 'balanced_accuracy': np.float64(0.5069047619047619), 'by_group': {'female_div/dep/mar': np.float64(0.97), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.98)}, 'status': 'success', 'total_time': 1.1318440437316895, 'fit_time': np.float64(0.18071427345275878), 'score_time': np.float64(0.010037851333618165), 'absolute_time': 1746692826.648838, 'flatten_equalized_odds_ratio': '0.91_0.95_0.99_0.97_1.0', 'flatten_balanced_accuracy': '0.52_0.5_0.5_0.51_0.5'}
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')} was NaN

254
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': np.float64(0.5047619047619047), 'by_group': {'female_div/dep/mar': np.float64(0.59), 'male_div/sep': np.float64(0.48), 'male_mar/wid': np.float64(0.7), 'male_single': np.float64(0.45)}, 'status': 'fail', 'total_time': 8.54840350151062, 'fit_time': np.float64(1.6721120834350587), 'score_time': np.float64(0.005877208709716797), 'absolute_time': 1746692835.495272, 'flatten_equalized_odds_ratio': 'nan_1.0_0.56_0.0_0.0', 'flatten_balanced_accuracy': '0.5_0.5_0.53_0.48_0.51'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

255
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 3, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification')}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0005900859832763672, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692840.0320659}
256
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'equalized_odds_ratio': np.float64(0.3418146987112504), 'balanced_accuracy': np.float64(0.6552380952380952), 'by_group': {'female_div/dep/mar': np.float64(0.54), 'male_div/sep': np.float64(0.47), 'male_mar/wid': np.float64(0.74), 'male_single': np.float64(0.68)}, 'status': 'success', 'total_time': 3.060413122177124, 'fit_time': np.float64(0.5687082290649415), 'score_time': np.float64(0.004659175872802734), 'absolute_time': 1746692843.3916903, 'flatten_equalized_odds_ratio': '0.0_0.44_0.23_0.62_0.42', 'flatten_balanced_accuracy': '0.68_0.65_0.65_0.64_0.66'}
257
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.5273762410429077), 'balanced_accuracy': np.float64(0.4147619047619047), 'by_group': {'female_div/dep/mar': np.float64(0.68), 'male_div/sep': np.float64(0.89), 'male_mar/wid': np.float64(0.6), 'male_single': np.float64(0.72)}, 'status': 'success', 'total_time': 1.125838041305542, 'fit_time': np.float64(0.18650970458984376), 'score_time': np.float64(0.005148887634277344), 'absolute_time': 1746692844.8235004, 'flatten_equalized_odds_ratio': '0.85_0.45_0.53_0.2_0.61', 'flatten_balanced_accuracy': '0.42_0.42_0.48_0.4_0.36'}
/usr/local/lib/python3.12/site-packages/numpy/_core/_methods.py:194: RuntimeWarning: overflow encountered in multiply
  x = um.multiply(x, x, out=x)
/usr/local/lib/python3.12/site-packages/numpy/_core/_methods.py:205: RuntimeWarning: overflow encountered in reduce
  ret = umr_sum(x, axis, dtype, out, keepdims=keepdims, where=where)
/usr/local/lib/python3.12/site-packages/numpy/_core/_methods.py:194: RuntimeWarning: overflow encountered in multiply
  x = um.multiply(x, x, out=x)
258
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 3}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.9650000000000001), 'balanced_accuracy': np.float64(0.5054761904761904), 'by_group': {'female_div/dep/mar': np.float64(0.97), 'male_div/sep': np.float64(0.97), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.99)}, 'status': 'success', 'total_time': 14.790503740310669, 'fit_time': np.float64(0.8519624710083008), 'score_time': np.float64(0.008797645568847656), 'absolute_time': 1746692859.9157722, 'flatten_equalized_odds_ratio': '0.83_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.53_0.5_0.5_0.5_0.5'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

259
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0005459785461425781, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692860.2264936}
260
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 3, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.4909420289855072), 'balanced_accuracy': np.float64(0.5078571428571429), 'by_group': {'female_div/dep/mar': np.float64(0.74), 'male_div/sep': np.float64(0.62), 'male_mar/wid': np.float64(0.85), 'male_single': np.float64(0.7)}, 'status': 'success', 'total_time': 0.28716182708740234, 'fit_time': np.float64(0.006425189971923828), 'score_time': np.float64(0.01186232566833496), 'absolute_time': 1746692860.816132, 'flatten_equalized_odds_ratio': '0.51_0.0_0.57_0.58_0.8', 'flatten_balanced_accuracy': '0.53_0.52_0.51_0.52_0.45'}
261
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.44696969696969696), 'balanced_accuracy': np.float64(0.590952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.65), 'male_div/sep': np.float64(0.57), 'male_mar/wid': np.float64(0.77), 'male_single': np.float64(0.76)}, 'status': 'success', 'total_time': 0.9865305423736572, 'fit_time': np.float64(0.16292695999145507), 'score_time': np.float64(0.004608297348022461), 'absolute_time': 1746692862.1106467, 'flatten_equalized_odds_ratio': '0.59_0.38_0.23_0.62_0.42', 'flatten_balanced_accuracy': '0.58_0.58_0.63_0.57_0.58'}
262
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('sgd')}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'equalized_odds_ratio': np.float64(0.6448853615520282), 'balanced_accuracy': np.float64(0.49738095238095237), 'by_group': {'female_div/dep/mar': np.float64(0.78), 'male_div/sep': np.float64(0.94), 'male_mar/wid': np.float64(0.66), 'male_single': np.float64(0.91)}, 'status': 'success', 'total_time': 0.5600934028625488, 'fit_time': np.float64(0.07781796455383301), 'score_time': np.float64(0.0038299560546875), 'absolute_time': 1746692862.9991708, 'flatten_equalized_odds_ratio': '0.95_0.95_1.0_0.32_0.0', 'flatten_balanced_accuracy': '0.48_0.5_0.5_0.5_0.5'}
263
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 7, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.14393939393939392), 'balanced_accuracy': np.float64(0.6495238095238095), 'by_group': {'female_div/dep/mar': np.float64(0.48), 'male_div/sep': np.float64(0.43), 'male_mar/wid': np.float64(0.61), 'male_single': np.float64(0.59)}, 'status': 'success', 'total_time': 0.8059141635894775, 'fit_time': np.float64(0.06381440162658691), 'score_time': np.float64(0.048270368576049806), 'absolute_time': 1746692864.2470298, 'flatten_equalized_odds_ratio': '0.0_0.0_0.0_0.57_0.15', 'flatten_balanced_accuracy': '0.62_0.61_0.72_0.63_0.67'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 622, in objective
    fair_scores, fair_scores_by_group = _compute_fair_metric(
                                        ^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 381, in _compute_fair_metric
    y_pred = np.array(scores["estimator"][fold].predict(x_original))
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/imblearn/pipeline.py", line 659, in predict
    return self.steps[-1][1].predict(Xt, **params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/neighbors/_classification.py", line 262, in predict
    probabilities = self.predict_proba(X)
                    ^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/neighbors/_classification.py", line 348, in predict_proba
    probabilities = ArgKminClassMode.compute(
                    ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/sklearn/metrics/_pairwise_distances_reduction/_dispatcher.py", line 587, in compute
    return ArgKminClassMode64.compute(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Argument 'metric' has incorrect type (expected str, got numpy.str_)

264
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 13, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification')}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.09470939636230469, 'fit_time': np.float64(0.01469717025756836), 'score_time': np.float64(0.002507591247558594), 'absolute_time': 1746692864.7051315}
265
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 4, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_features_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.41495297805642634), 'balanced_accuracy': np.float64(0.6476190476190476), 'by_group': {'female_div/dep/mar': np.float64(0.49), 'male_div/sep': np.float64(0.63), 'male_mar/wid': np.float64(0.7), 'male_single': np.float64(0.6)}, 'status': 'success', 'total_time': 0.30498242378234863, 'fit_time': np.float64(0.00591888427734375), 'score_time': np.float64(0.014711141586303711), 'absolute_time': 1746692865.3243098, 'flatten_equalized_odds_ratio': '0.38_0.42_0.27_0.61_0.4', 'flatten_balanced_accuracy': '0.64_0.67_0.66_0.63_0.64'}
266
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.4576628352490421), 'balanced_accuracy': np.float64(0.6214285714285714), 'by_group': {'female_div/dep/mar': np.float64(0.73), 'male_div/sep': np.float64(0.61), 'male_mar/wid': np.float64(0.67), 'male_single': np.float64(0.68)}, 'status': 'success', 'total_time': 1.2393474578857422, 'fit_time': np.float64(0.21310620307922362), 'score_time': np.float64(0.004639387130737305), 'absolute_time': 1746692871.3020678, 'flatten_equalized_odds_ratio': '0.2_0.72_0.48_0.4_0.48', 'flatten_balanced_accuracy': '0.57_0.65_0.6_0.64_0.64'}
267
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.2706896551724138), 'balanced_accuracy': np.float64(0.5542857142857142), 'by_group': {'female_div/dep/mar': np.float64(0.71), 'male_div/sep': np.float64(0.47), 'male_mar/wid': np.float64(0.6), 'male_single': np.float64(0.55)}, 'status': 'success', 'total_time': 5.410076856613159, 'fit_time': np.float64(1.045227575302124), 'score_time': np.float64(0.005879068374633789), 'absolute_time': 1746692877.0414689, 'flatten_equalized_odds_ratio': '0.0_0.0_0.62_0.48_0.25', 'flatten_balanced_accuracy': '0.64_0.53_0.52_0.55_0.53'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

268
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 10, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.75)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0005519390106201172, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692877.3656638}
269
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 7, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'equalized_odds_ratio': np.float64(0.33545222338325786), 'balanced_accuracy': np.float64(0.5542857142857143), 'by_group': {'female_div/dep/mar': np.float64(0.61), 'male_div/sep': np.float64(0.67), 'male_mar/wid': np.float64(0.7), 'male_single': np.float64(0.59)}, 'status': 'success', 'total_time': 0.25279808044433594, 'fit_time': np.float64(0.009963750839233398), 'score_time': np.float64(0.005107259750366211), 'absolute_time': 1746692877.9488416, 'flatten_equalized_odds_ratio': '0.45_0.0_0.24_0.41_0.57', 'flatten_balanced_accuracy': '0.62_0.55_0.53_0.55_0.52'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

270
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0009438991546630859, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746692878.2738552}
271
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.4741055878986914), 'balanced_accuracy': np.float64(0.6009523809523809), 'by_group': {'female_div/dep/mar': np.float64(0.64), 'male_div/sep': np.float64(0.58), 'male_mar/wid': np.float64(0.82), 'male_single': np.float64(0.64)}, 'status': 'success', 'total_time': 215.42901229858398, 'fit_time': np.float64(43.047241640090945), 'score_time': np.float64(0.007625722885131836), 'absolute_time': 1746693098.6423216, 'flatten_equalized_odds_ratio': '0.42_0.51_0.45_0.42_0.57', 'flatten_balanced_accuracy': '0.62_0.62_0.59_0.6_0.58'}
272
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 6, 'min_samples_split': 2, 'n_estimators': np.int64(50)}, 'features': {'type': np.str_('SelectKBest'), 'k': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.8456974215594905), 'balanced_accuracy': np.float64(0.5449999999999999), 'by_group': {'female_div/dep/mar': np.float64(0.93), 'male_div/sep': np.float64(0.93), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.86)}, 'status': 'success', 'total_time': 8.126448631286621, 'fit_time': np.float64(0.7511419773101806), 'score_time': np.float64(0.014286231994628907), 'absolute_time': 1746693107.0849159, 'flatten_equalized_odds_ratio': '0.9_1.0_0.76_0.78_0.79', 'flatten_balanced_accuracy': '0.55_0.5_0.53_0.61_0.54'}
273
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(50), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.08215488215488216), 'balanced_accuracy': np.float64(0.6064285714285714), 'by_group': {'female_div/dep/mar': np.float64(0.67), 'male_div/sep': np.float64(0.22), 'male_mar/wid': np.float64(0.71), 'male_single': np.float64(0.53)}, 'status': 'success', 'total_time': 0.8279590606689453, 'fit_time': np.float64(0.13490400314331055), 'score_time': np.float64(0.0030359745025634764), 'absolute_time': 1746693108.2361972, 'flatten_equalized_odds_ratio': '0.0_0.0_0.15_0.26_0.0', 'flatten_balanced_accuracy': '0.65_0.6_0.63_0.56_0.6'}
274
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_mitigation_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.13951933124346919), 'balanced_accuracy': np.float64(0.5954761904761904), 'by_group': {'female_div/dep/mar': np.float64(0.63), 'male_div/sep': np.float64(0.31), 'male_mar/wid': np.float64(0.64), 'male_single': np.float64(0.61)}, 'status': 'success', 'total_time': 0.3095982074737549, 'fit_time': np.float64(0.008216524124145507), 'score_time': np.float64(0.014409589767456054), 'absolute_time': 1746693108.868029, 'flatten_equalized_odds_ratio': '0.46_0.0_0.24_0.0_0.0', 'flatten_balanced_accuracy': '0.6_0.58_0.61_0.6_0.58'}
275
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_split': 4, 'n_estimators': np.int64(25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.3301236629486084, 'fit_time': np.float64(0.029921436309814455), 'score_time': np.float64(0.005653524398803711), 'absolute_time': 1746693109.5546186, 'flatten_equalized_odds_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
276
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 5, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.7390060851926978), 'balanced_accuracy': np.float64(0.6054761904761905), 'by_group': {'female_div/dep/mar': np.float64(0.92), 'male_div/sep': np.float64(0.84), 'male_mar/wid': np.float64(0.9), 'male_single': np.float64(0.75)}, 'status': 'success', 'total_time': 0.9176506996154785, 'fit_time': np.float64(0.1384432315826416), 'score_time': np.float64(0.008688974380493163), 'absolute_time': 1746693110.8265612, 'flatten_equalized_odds_ratio': '0.71_0.83_0.75_0.71_0.69', 'flatten_balanced_accuracy': '0.67_0.62_0.56_0.62_0.56'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before LFR_wrapper

277
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 5}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0005276203155517578, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693111.1557999}
278
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 9, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.6225164203612479), 'balanced_accuracy': np.float64(0.5173809523809523), 'by_group': {'female_div/dep/mar': np.float64(0.73), 'male_div/sep': np.float64(0.68), 'male_mar/wid': np.float64(0.91), 'male_single': np.float64(0.71)}, 'status': 'success', 'total_time': 6.124634027481079, 'fit_time': np.float64(1.1022615909576416), 'score_time': np.float64(0.04974069595336914), 'absolute_time': 1746693117.6016016, 'flatten_equalized_odds_ratio': '0.79_0.0_0.66_0.73_0.93', 'flatten_balanced_accuracy': '0.54_0.49_0.55_0.48_0.52'}
279
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_split': 2, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('SelectKBest'), 'k': 3}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'equalized_odds_ratio': np.float64(0.07333333333333333), 'balanced_accuracy': np.float64(0.6364285714285715), 'by_group': {'female_div/dep/mar': np.float64(0.81), 'male_div/sep': np.float64(0.07), 'male_mar/wid': np.float64(0.58), 'male_single': np.float64(0.74)}, 'status': 'success', 'total_time': 0.5771539211273193, 'fit_time': np.float64(0.07215681076049804), 'score_time': np.float64(0.004928445816040039), 'absolute_time': 1746693118.6417725, 'flatten_equalized_odds_ratio': '0.0_0.0_0.0_0.37_0.0', 'flatten_balanced_accuracy': '0.68_0.65_0.69_0.55_0.62'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

280
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 13, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0005879402160644531, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693123.5929422}
281
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 2, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 7}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.7217241379310344), 'balanced_accuracy': np.float64(0.5695238095238094), 'by_group': {'female_div/dep/mar': np.float64(0.9), 'male_div/sep': np.float64(0.9), 'male_mar/wid': np.float64(0.81), 'male_single': np.float64(0.83)}, 'status': 'success', 'total_time': 0.2898592948913574, 'fit_time': np.float64(0.01744246482849121), 'score_time': np.float64(0.005392217636108398), 'absolute_time': 1746693124.2124903, 'flatten_equalized_odds_ratio': '0.73_0.77_0.75_0.6_0.76', 'flatten_balanced_accuracy': '0.59_0.58_0.56_0.56_0.56'}
282
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 13, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.2135930735930736), 'balanced_accuracy': np.float64(0.6802380952380952), 'by_group': {'female_div/dep/mar': np.float64(0.77), 'male_div/sep': np.float64(0.36), 'male_mar/wid': np.float64(0.55), 'male_single': np.float64(0.78)}, 'status': 'success', 'total_time': 0.626312255859375, 'fit_time': np.float64(0.01818375587463379), 'score_time': np.float64(0.030522775650024415), 'absolute_time': 1746693125.1781435, 'flatten_equalized_odds_ratio': '0.0_0.0_0.44_0.63_0.0', 'flatten_balanced_accuracy': '0.66_0.69_0.68_0.68_0.69'}
283
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 13, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification')}
{'equalized_odds_ratio': np.float64(0.8491379310344828), 'balanced_accuracy': np.float64(0.5283333333333333), 'by_group': {'female_div/dep/mar': np.float64(0.95), 'male_div/sep': np.float64(0.88), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.87)}, 'status': 'success', 'total_time': 5.633910655975342, 'fit_time': np.float64(0.9623324394226074), 'score_time': np.float64(0.05144453048706055), 'absolute_time': 1746693131.1832836, 'flatten_equalized_odds_ratio': '0.86_0.62_1.0_0.76_1.0', 'flatten_balanced_accuracy': '0.54_0.6_0.5_0.51_0.5'}
284
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 4, 'max_features': 4, 'max_leaf_nodes': 2, 'min_samples_split': 3, 'n_estimators': np.int64(75)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_normalization_mitigation_rebalancing_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.742011308670044, 'fit_time': np.float64(0.10592494010925294), 'score_time': np.float64(0.008934736251831055), 'absolute_time': 1746693132.2523255, 'flatten_equalized_odds_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

285
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 10, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0005292892456054688, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693132.5835803}
286
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 20, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.5), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('normalization_mitigation_rebalancing_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.7366161616161616), 'balanced_accuracy': np.float64(0.535), 'by_group': {'female_div/dep/mar': np.float64(0.93), 'male_div/sep': np.float64(0.88), 'male_mar/wid': np.float64(0.8), 'male_single': np.float64(0.89)}, 'status': 'success', 'total_time': 2.968482255935669, 'fit_time': np.float64(0.5492321968078613), 'score_time': np.float64(0.011274623870849609), 'absolute_time': 1746693135.9750068, 'flatten_equalized_odds_ratio': '0.86_0.6_0.83_0.64_0.75', 'flatten_balanced_accuracy': '0.53_0.56_0.55_0.53_0.51'}
287
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 10, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'prototype': np.str_('mitigation_rebalancing_normalization_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.6596477640718059), 'balanced_accuracy': np.float64(0.6390476190476191), 'by_group': {'female_div/dep/mar': np.float64(0.85), 'male_div/sep': np.float64(0.83), 'male_mar/wid': np.float64(0.8), 'male_single': np.float64(0.76)}, 'status': 'success', 'total_time': 0.22148609161376953, 'fit_time': np.float64(0.0074727535247802734), 'score_time': np.float64(0.004819011688232422), 'absolute_time': 1746693141.2111514, 'flatten_equalized_odds_ratio': '0.55_0.79_0.61_0.52_0.83', 'flatten_balanced_accuracy': '0.65_0.61_0.65_0.62_0.67'}
288
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 4, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 6, 'n_estimators': np.int64(50)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification')}
{'equalized_odds_ratio': np.float64(0.3470021645021645), 'balanced_accuracy': np.float64(0.6345238095238096), 'by_group': {'female_div/dep/mar': np.float64(0.6), 'male_div/sep': np.float64(0.42), 'male_mar/wid': np.float64(0.95), 'male_single': np.float64(0.73)}, 'status': 'success', 'total_time': 0.642573356628418, 'fit_time': np.float64(0.09314656257629395), 'score_time': np.float64(0.005744075775146485), 'absolute_time': 1746693142.1880207, 'flatten_equalized_odds_ratio': '0.43_0.76_0.23_0.31_0.0', 'flatten_balanced_accuracy': '0.62_0.57_0.64_0.62_0.72'}
289
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 3, 'max_leaf_nodes': 5, 'min_samples_split': 5, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('rebalancing_features_normalization_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.8953873712494402), 'balanced_accuracy': np.float64(0.5185714285714285), 'by_group': {'female_div/dep/mar': np.float64(0.95), 'male_div/sep': np.float64(0.97), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.93)}, 'status': 'success', 'total_time': 1.3095753192901611, 'fit_time': np.float64(0.21155991554260253), 'score_time': np.float64(0.012410211563110351), 'absolute_time': 1746693143.8308823, 'flatten_equalized_odds_ratio': '0.86_0.95_0.97_0.83_0.86', 'flatten_balanced_accuracy': '0.53_0.5_0.5_0.52_0.53'}
290
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('invscaling'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(50), 'solver': np.str_('adam')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.5)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_features_normalization_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.7325922565033272), 'balanced_accuracy': np.float64(0.5692857142857142), 'by_group': {'female_div/dep/mar': np.float64(0.85), 'male_div/sep': np.float64(0.88), 'male_mar/wid': np.float64(0.98), 'male_single': np.float64(0.84)}, 'status': 'success', 'total_time': 6.4256932735443115, 'fit_time': np.float64(1.2458482742309571), 'score_time': np.float64(0.008061408996582031), 'absolute_time': 1746693150.5912995, 'flatten_equalized_odds_ratio': '0.72_0.7_0.62_0.75_0.86', 'flatten_balanced_accuracy': '0.55_0.6_0.62_0.55_0.52'}
291
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.01), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(10), 'solver': np.str_('adam')}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.21857553366174054), 'balanced_accuracy': np.float64(0.6516666666666666), 'by_group': {'female_div/dep/mar': np.float64(0.41), 'male_div/sep': np.float64(0.3), 'male_mar/wid': np.float64(0.89), 'male_single': np.float64(0.62)}, 'status': 'success', 'total_time': 2.1976354122161865, 'fit_time': np.float64(0.4045408725738525), 'score_time': np.float64(0.005586767196655273), 'absolute_time': 1746693153.1241295, 'flatten_equalized_odds_ratio': '0.0_0.3_0.31_0.48_0.0', 'flatten_balanced_accuracy': '0.7_0.65_0.62_0.65_0.64'}
292
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.5764367816091954), 'balanced_accuracy': np.float64(0.545952380952381), 'by_group': {'female_div/dep/mar': np.float64(0.76), 'male_div/sep': np.float64(0.67), 'male_mar/wid': np.float64(0.92), 'male_single': np.float64(0.64)}, 'status': 'success', 'total_time': 8.924139738082886, 'fit_time': np.float64(1.0101168155670166), 'score_time': np.float64(0.006381988525390625), 'absolute_time': 1746693162.5003624, 'flatten_equalized_odds_ratio': '0.42_0.5_0.76_0.59_0.62', 'flatten_balanced_accuracy': '0.54_0.58_0.55_0.56_0.5'}
The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 14, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification')} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 14, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification')} was NaN

293
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 14, 'weights': np.str_('distance')}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(2.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification')}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 15.791537761688232, 'fit_time': np.float64(3.0628171443939207), 'score_time': np.float64(0.030916500091552734), 'absolute_time': 1746693178.642875, 'flatten_equalized_odds_ratio': 'nan_nan_nan_nan_nan', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
294
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.4727380952380952), 'balanced_accuracy': np.float64(0.6078571428571429), 'by_group': {'female_div/dep/mar': np.float64(0.86), 'male_div/sep': np.float64(0.58), 'male_mar/wid': np.float64(0.67), 'male_single': np.float64(0.75)}, 'status': 'success', 'total_time': 0.6298222541809082, 'fit_time': np.float64(0.0913621425628662), 'score_time': np.float64(0.00501399040222168), 'absolute_time': 1746693179.6282628, 'flatten_equalized_odds_ratio': '0.0_0.8_0.73_0.52_0.31', 'flatten_balanced_accuracy': '0.6_0.6_0.59_0.68_0.57'}

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 585, in objective
    pipeline = self._instantiate_pipeline(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/automl/hamlet/objective.py", line 485, in _instantiate_pipeline
    _check_coherence(prototype, config)
  File "/home/automl/hamlet/objective.py", line 96, in _check_coherence
    raise Exception(f"""PCA before {config["mitigation"]["type"]}""")
Exception: PCA before CorrelationRemover

295
fail
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 5, 'weights': np.str_('distance')}, 'features': {'type': np.str_('PCA'), 'n_components': 3}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 4}, 'prototype': np.str_('features_mitigation_rebalancing_normalization_classification')}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 0.0004036426544189453, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746693184.9479}
296
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('euclidean'), 'n_neighbors': 10, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.29290271132376394), 'balanced_accuracy': np.float64(0.5088095238095238), 'by_group': {'female_div/dep/mar': np.float64(0.7), 'male_div/sep': np.float64(0.38), 'male_mar/wid': np.float64(0.79), 'male_single': np.float64(0.52)}, 'status': 'success', 'total_time': 0.2801628112792969, 'fit_time': np.float64(0.00743708610534668), 'score_time': np.float64(0.01125020980834961), 'absolute_time': 1746693185.56645, 'flatten_equalized_odds_ratio': '0.42_0.0_0.36_0.35_0.33', 'flatten_balanced_accuracy': '0.51_0.57_0.48_0.51_0.48'}
297
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 2, 'max_leaf_nodes': 3, 'min_samples_split': 6, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.6549067497253418, 'fit_time': np.float64(0.09293966293334961), 'score_time': np.float64(0.0066678524017333984), 'absolute_time': 1746693186.5649242, 'flatten_equalized_odds_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
298
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': 2, 'min_samples_split': 3, 'n_estimators': np.int64(50)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(1.0), 'balanced_accuracy': np.float64(0.5), 'by_group': {'female_div/dep/mar': np.float64(1.0), 'male_div/sep': np.float64(1.0), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(1.0)}, 'status': 'success', 'total_time': 0.4771084785461426, 'fit_time': np.float64(0.05536375045776367), 'score_time': np.float64(0.008347129821777344), 'absolute_time': 1746693187.380658, 'flatten_equalized_odds_ratio': '1.0_1.0_1.0_1.0_1.0', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
299
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 2, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(2.0), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.5481004489337823), 'balanced_accuracy': np.float64(0.5376190476190476), 'by_group': {'female_div/dep/mar': np.float64(0.69), 'male_div/sep': np.float64(0.62), 'male_mar/wid': np.float64(0.94), 'male_single': np.float64(0.6)}, 'status': 'success', 'total_time': 5.6401519775390625, 'fit_time': np.float64(1.0888191223144532), 'score_time': np.float64(0.007471323013305664), 'absolute_time': 1746693193.3723164, 'flatten_equalized_odds_ratio': '0.79_0.5_0.61_0.41_0.42', 'flatten_balanced_accuracy': '0.56_0.58_0.54_0.48_0.53'}
300
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 4, 'max_leaf_nodes': 6, 'min_samples_split': 2, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.7095479571138801), 'balanced_accuracy': np.float64(0.608095238095238), 'by_group': {'female_div/dep/mar': np.float64(0.89), 'male_div/sep': np.float64(0.85), 'male_mar/wid': np.float64(0.81), 'male_single': np.float64(0.76)}, 'status': 'success', 'total_time': 0.7997698783874512, 'fit_time': np.float64(0.11829314231872559), 'score_time': np.float64(0.007072019577026367), 'absolute_time': 1746693194.5191894, 'flatten_equalized_odds_ratio': '0.63_0.8_0.75_0.71_0.66', 'flatten_balanced_accuracy': '0.67_0.62_0.55_0.62_0.57'}
301
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_mitigation_normalization_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.14927899686520377), 'balanced_accuracy': np.float64(0.7014285714285715), 'by_group': {'female_div/dep/mar': np.float64(0.57), 'male_div/sep': np.float64(0.44), 'male_mar/wid': np.float64(0.54), 'male_single': np.float64(0.68)}, 'status': 'success', 'total_time': 0.3263981342315674, 'fit_time': np.float64(0.02872333526611328), 'score_time': np.float64(0.005385875701904297), 'absolute_time': 1746693195.2004116, 'flatten_equalized_odds_ratio': '0.0_0.0_0.26_0.48_0.0', 'flatten_balanced_accuracy': '0.69_0.69_0.71_0.68_0.74'}
302
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 12, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.125), 'balanced_accuracy': np.float64(0.6895238095238095), 'by_group': {'female_div/dep/mar': np.float64(0.65), 'male_div/sep': np.float64(0.27), 'male_mar/wid': np.float64(0.77), 'male_single': np.float64(0.7)}, 'status': 'success', 'total_time': 0.28077006340026855, 'fit_time': np.float64(0.006927871704101562), 'score_time': np.float64(0.011685657501220702), 'absolute_time': 1746693195.8766582, 'flatten_equalized_odds_ratio': '0.0_0.0_0.0_0.62_0.0', 'flatten_balanced_accuracy': '0.69_0.67_0.76_0.65_0.67'}
303
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 3, 'max_features': 2, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_mitigation_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.8625839677563816), 'balanced_accuracy': np.float64(0.5173809523809523), 'by_group': {'female_div/dep/mar': np.float64(0.92), 'male_div/sep': np.float64(0.92), 'male_mar/wid': np.float64(1.0), 'male_single': np.float64(0.97)}, 'status': 'success', 'total_time': 0.27137136459350586, 'fit_time': np.float64(0.01978473663330078), 'score_time': np.float64(0.004628562927246093), 'absolute_time': 1746693201.6054072, 'flatten_equalized_odds_ratio': '0.97_0.81_0.75_0.83_0.95', 'flatten_balanced_accuracy': '0.5_0.53_0.52_0.51_0.52'}
Timeout
304
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(50), 'solver': np.str_('lbfgs')}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('features_rebalancing_normalization_mitigation_classification')}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': -inf, 'by_group': {'female_div/dep/mar': -inf, 'male_div/sep': -inf, 'male_mar/wid': -inf, 'male_single': -inf}, 'status': 'fail', 'total_time': 900.2583746910095, 'fit_time': 0, 'score_time': 0, 'absolute_time': 1746694102.2129724}
AutoML: optimization done.
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
/usr/local/lib/python3.12/multiprocessing/popen_fork.py:66: DeprecationWarning: This process (pid=1) is multi-threaded, use of fork() may lead to deadlocks in the child.
  self.pid = os.fork()
AutoML: miner done.
AutoML: export done.
Here is the standard output/error of the command:

Here is the standard output/error of the command:

Here is the standard output/error of the command:

hamlet_1609187440
AutoML execution ended
