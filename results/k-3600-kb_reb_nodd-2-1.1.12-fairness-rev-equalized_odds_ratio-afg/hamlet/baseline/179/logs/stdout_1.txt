Sensitive groups ready!
Theory ready!
Theory:
step(normalization) :- true.
step(features) :- true.
step(mitigation) :- true.
step(rebalancing) :- true.
step(classification) :- true.
operator(normalization, power_transformer) :- true.
operator(normalization, robust_scaler) :- true.
operator(normalization, standard) :- true.
operator(normalization, minmax) :- true.
operator(features, select_k_best) :- true.
operator(features, pca) :- true.
operator(mitigation, corr_remover) :- true.
operator(mitigation, lfr) :- true.
operator(rebalancing, near_miss) :- true.
operator(rebalancing, smote) :- true.
operator(classification, knn) :- true.
operator(classification, nn) :- true.
operator(classification, rf) :- true.
hyperparameter(robust_scaler, with_centering, choice) :- true.
hyperparameter(robust_scaler, with_scaling, choice) :- true.
hyperparameter(standard, with_mean, choice) :- true.
hyperparameter(standard, with_std, choice) :- true.
hyperparameter(select_k_best, k, randint) :- true.
hyperparameter(pca, n_components, randint) :- true.
hyperparameter(corr_remover, alpha, choice) :- true.
hyperparameter(lfr, n_prototypes, choice) :- true.
hyperparameter(lfr, reconstruct_weight, choice) :- true.
hyperparameter(lfr, fairness_weight, choice) :- true.
hyperparameter(near_miss, n_neighbors, randint) :- true.
hyperparameter(smote, k_neighbors, randint) :- true.
hyperparameter(knn, n_neighbors, randint) :- true.
hyperparameter(knn, weights, choice) :- true.
hyperparameter(knn, metric, choice) :- true.
hyperparameter(nn, n_hidden_layers, choice) :- true.
hyperparameter(nn, n_neurons, choice) :- true.
hyperparameter(nn, activation, choice) :- true.
hyperparameter(nn, solver, choice) :- true.
hyperparameter(nn, alpha, choice) :- true.
hyperparameter(nn, learning_rate, choice) :- true.
hyperparameter(rf, n_estimators, choice) :- true.
hyperparameter(rf, max_depth, randint) :- true.
hyperparameter(rf, max_features, randint) :- true.
hyperparameter(rf, min_samples_split, randint) :- true.
hyperparameter(rf, max_leaf_nodes, randint) :- true.
hyperparameter(rf, bootstrap, choice) :- true.
hyperparameter(rf, criterion, choice) :- true.
domain(robust_scaler, with_centering, [true, false]) :- true.
domain(robust_scaler, with_scaling, [true, false]) :- true.
domain(standard, with_mean, [true, false]) :- true.
domain(standard, with_std, [true, false]) :- true.
domain(select_k_best, k, [1, 10]) :- true.
domain(pca, n_components, [1, 8]) :- true.
domain(corr_remover, alpha, [0.25, 0.5, 0.75, 1.0]) :- true.
domain(lfr, n_prototypes, [10, 50, 100, 200]) :- true.
domain(lfr, reconstruct_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(lfr, fairness_weight, [0.1, 0.5, 1.0, 2.0]) :- true.
domain(near_miss, n_neighbors, [1, 4]) :- true.
domain(smote, k_neighbors, [5, 8]) :- true.
domain(knn, n_neighbors, [3, 20]) :- true.
domain(knn, weights, [uniform, distance]) :- true.
domain(knn, metric, [minkowski, euclidean, manhattan]) :- true.
domain(nn, n_hidden_layers, [1, 5, 10, 20]) :- true.
domain(nn, n_neurons, [5, 10, 25, 50]) :- true.
domain(nn, activation, [logistic, tanh, relu]) :- true.
domain(nn, solver, [lbfgs, sgd, adam]) :- true.
domain(nn, alpha, [0.0001, 0.001, 0.01, 0.00001]) :- true.
domain(nn, learning_rate, [constant, invscaling, adaptive]) :- true.
domain(rf, n_estimators, [10, 25, 50, 75, 100]) :- true.
domain(rf, max_depth, [1, 5]) :- true.
domain(rf, max_features, [1, 4]) :- true.
domain(rf, min_samples_split, [2, 6]) :- true.
domain(rf, max_leaf_nodes, [2, 6]) :- true.
domain(rf, bootstrap, [true, false]) :- true.
domain(rf, criterion, [gini, entropy]) :- true.
dataset(adult) :- true.
metric(balanced_accuracy) :- true.
fairness_metric(equalized_odds_ratio) :- true.
sensitive_feature(sex, ['Male', 'Female']) :- true.
sensitive_feature(race, ['Amer-Indian-Eskimo', 'Asian-Pac-Islander', 'Black', 'Other', 'White']) :- true.
':=>'(mc0, unbalanced_dataset) :- true.
pipeline([Step_1_0], ZZ_0) :- (step(Step_1_0), '\\='(Step_1_0, classification), operator(classification, ZZ_0)).
pipeline([Step_1_1, Step_2_0], ZZ_1) :- (step(Step_1_1), step(Step_2_0), '\\='(Step_1_1, classification), '\\='(Step_2_0, classification), '\\='(Step_1_1, Step_2_0), operator(classification, ZZ_1)).
pipeline([Step_1_2, Step_2_1, Step_3_0], ZZ_2) :- (step(Step_1_2), step(Step_2_1), step(Step_3_0), '\\='(Step_1_2, classification), '\\='(Step_2_1, classification), '\\='(Step_3_0, classification), '\\='(Step_1_2, Step_2_1), '\\='(Step_1_2, Step_3_0), '\\='(Step_2_1, Step_3_0), operator(classification, ZZ_2)).
pipeline([Step_1_3, Step_2_2, Step_3_1, Step_4_0], ZZ_3) :- (step(Step_1_3), step(Step_2_2), step(Step_3_1), step(Step_4_0), '\\='(Step_1_3, classification), '\\='(Step_2_2, classification), '\\='(Step_3_1, classification), '\\='(Step_4_0, classification), '\\='(Step_1_3, Step_2_2), '\\='(Step_1_3, Step_3_1), '\\='(Step_1_3, Step_4_0), '\\='(Step_2_2, Step_3_1), '\\='(Step_2_2, Step_4_0), '\\='(Step_3_1, Step_4_0), operator(classification, ZZ_3)).
':=>'(p78239, sensitive_group(['Male'])) :- true.
':=>'(p719683, sensitive_group(['Female'])) :- true.
':=>'(p366262, sensitive_group(['Amer-Indian-Eskimo'])) :- true.
':=>'(p97113, sensitive_group(['Asian-Pac-Islander'])) :- true.
':=>'(p717769, sensitive_group(['Black'])) :- true.
':=>'(p124295, sensitive_group(['Other'])) :- true.
':=>'(p710565, sensitive_group(['White'])) :- true.
':=>'(p860622, sensitive_group(['Male', 'Amer-Indian-Eskimo'])) :- true.
':=>'(p683844, sensitive_group(['Male', 'Asian-Pac-Islander'])) :- true.
':=>'(p711146, sensitive_group(['Male', 'Black'])) :- true.
':=>'(p748895, sensitive_group(['Male', 'Other'])) :- true.
':=>'(p60632, sensitive_group(['Male', 'White'])) :- true.
':=>'(p28095, sensitive_group(['Female', 'Amer-Indian-Eskimo'])) :- true.
':=>'(p164708, sensitive_group(['Female', 'Asian-Pac-Islander'])) :- true.
':=>'(p329414, sensitive_group(['Female', 'Black'])) :- true.
':=>'(p303909, sensitive_group(['Female', 'Other'])) :- true.
':=>'(p457815, sensitive_group(['Female', 'White'])) :- true.

Checking Config
Exporting Config
Saving Graph
Exporting AutoML input
Exporting Space
Exporting Constraints
Input created for iteration Config(iteration=1, dataset=adult, metric=balanced_accuracy, fairnessMetric=equalized_odds_ratio, sensitiveFeatures=[sex, race], mode=max, batchSize=999999, timeBudget=3600, seed=42)
Here is the standard output/error of the command:

b70ed39bdbdfc32b1c928aea81bc76945e5fd5674198c39864fc828d1797aa10
Here is the standard output/error of the command:

Here is the standard output/error of the command:

WARNING:root:No module named 'rpy2': FairAdapt will be unavailable. To install, run:
pip install 'aif360[FairAdapt]'
INFO:flaml.tune.searcher.blendsearch:No low-cost partial config given to the search algorithm. For cost-frugal search, consider providing low-cost values for cost-related hps via 'low_cost_partial_config'. More info can be found at https://microsoft.github.io/FLAML/docs/FAQ#about-low_cost_partial_config-in-tune
AutoML: starting optimization.
1
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 4, 'max_leaf_nodes': 4, 'min_samples_split': 5, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(200), 'reconstruct_weight': np.float64(0.1)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.2574981282193981), 'balanced_accuracy': np.float64(0.6870577813477474), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.3), 'Asian-Pac-Islander_Male': np.float64(0.64), 'Black_Female': np.float64(0.47), 'Black_Male': np.float64(0.79), 'White_Female': np.float64(0.49), 'White_Male': np.float64(0.92)}, 'status': 'success', 'total_time': 360.21151185035706, 'fit_time': np.float64(71.88177151679993), 'score_time': np.float64(0.03726811408996582), 'absolute_time': 1746727498.1044867, 'flatten_equalized_odds_ratio': '0.42_0.61_0.0_0.27_0.0', 'flatten_balanced_accuracy': '0.67_0.6_0.7_0.73_0.73'}
2
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('manhattan'), 'n_neighbors': 8, 'weights': np.str_('uniform')}, 'features': {'type': np.str_('SelectKBest'), 'k': 3}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_normalization_mitigation_features_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.08565889732312823), 'balanced_accuracy': np.float64(0.6852705800677538), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.34), 'Asian-Pac-Islander_Male': np.float64(0.99), 'Black_Female': np.float64(0.09), 'Black_Male': np.float64(0.4), 'White_Female': np.float64(0.17), 'White_Male': np.float64(0.64)}, 'status': 'success', 'total_time': 6.567730903625488, 'fit_time': np.float64(0.0308866024017334), 'score_time': np.float64(0.5949022769927979), 'absolute_time': 1746727504.7247615, 'flatten_equalized_odds_ratio': '0.0_0.01_0.07_0.06_0.29', 'flatten_balanced_accuracy': '0.61_0.74_0.75_0.69_0.63'}
3
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 6, 'weights': np.str_('uniform')}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 3}, 'features': {'type': np.str_('FunctionTransformer')}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_features_rebalancing_mitigation_classification')}
{'equalized_odds_ratio': np.float64(0.3421872440446195), 'balanced_accuracy': np.float64(0.520965370664285), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.71), 'Asian-Pac-Islander_Male': np.float64(0.95), 'Black_Female': np.float64(0.63), 'Black_Male': np.float64(0.97), 'White_Female': np.float64(0.34), 'White_Male': np.float64(0.54)}, 'status': 'success', 'total_time': 5.321122169494629, 'fit_time': np.float64(0.1960881233215332), 'score_time': np.float64(0.4153388023376465), 'absolute_time': 1746727510.1466398, 'flatten_equalized_odds_ratio': '0.35_0.31_0.33_0.38_0.34', 'flatten_balanced_accuracy': '0.52_0.53_0.52_0.52_0.53'}
4
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 3, 'max_leaf_nodes': 4, 'min_samples_split': 2, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('PCA'), 'n_components': 5}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.23868518855540244), 'balanced_accuracy': np.float64(0.6658849204631444), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.79), 'Asian-Pac-Islander_Male': np.float64(0.95), 'Black_Female': np.float64(0.32), 'Black_Male': np.float64(0.45), 'White_Female': np.float64(0.24), 'White_Male': np.float64(0.37)}, 'status': 'success', 'total_time': 10.009501218795776, 'fit_time': np.float64(1.8696741104125976), 'score_time': np.float64(0.024173927307128907), 'absolute_time': 1746727520.208055, 'flatten_equalized_odds_ratio': '0.23_0.24_0.23_0.29_0.2', 'flatten_balanced_accuracy': '0.66_0.68_0.67_0.66_0.66'}
5
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(10), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.18136654523652293), 'balanced_accuracy': np.float64(0.7880539368087296), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.46), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.2), 'Black_Male': np.float64(0.48), 'White_Female': np.float64(0.22), 'White_Male': np.float64(0.82)}, 'status': 'success', 'total_time': 216.57371830940247, 'fit_time': np.float64(43.14511785507202), 'score_time': np.float64(0.01880016326904297), 'absolute_time': 1746727736.836168, 'flatten_equalized_odds_ratio': '0.17_0.15_0.2_0.22_0.16', 'flatten_balanced_accuracy': '0.79_0.78_0.78_0.8_0.79'}
6
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'equalized_odds_ratio': np.float64(0.002745383867832847), 'balanced_accuracy': np.float64(0.7668272410578367), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.01), 'Asian-Pac-Islander_Male': np.float64(0.98), 'Black_Female': np.float64(0.02), 'Black_Male': np.float64(0.61), 'White_Female': np.float64(0.03), 'White_Male': np.float64(0.91)}, 'status': 'success', 'total_time': 6.136147737503052, 'fit_time': np.float64(1.0539226055145263), 'score_time': np.float64(0.030224943161010744), 'absolute_time': 1746727743.9485223, 'flatten_equalized_odds_ratio': '0.0_0.01_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.75_0.77_0.77_0.77_0.77'}
7
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 3, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_split': 5, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.True_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'mitigation': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'equalized_odds_ratio': np.float64(0.0055900621118012426), 'balanced_accuracy': np.float64(0.7526046719790612), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.01), 'Asian-Pac-Islander_Male': np.float64(0.89), 'Black_Female': np.float64(0.04), 'Black_Male': np.float64(0.68), 'White_Female': np.float64(0.05), 'White_Male': np.float64(0.96)}, 'status': 'success', 'total_time': 5.418607711791992, 'fit_time': np.float64(0.9083987712860108), 'score_time': np.float64(0.027205944061279297), 'absolute_time': 1746727749.4413338, 'flatten_equalized_odds_ratio': '0.0_0.03_0.0_0.0_0.0', 'flatten_balanced_accuracy': '0.75_0.75_0.75_0.76_0.75'}
8
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 6, 'min_samples_split': 6, 'n_estimators': np.int64(10)}, 'features': {'type': np.str_('SelectKBest'), 'k': 7}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.25)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.True_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'prototype': np.str_('rebalancing_features_mitigation_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.22241505978680554), 'balanced_accuracy': np.float64(0.7512267702090979), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.48), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.22), 'Black_Male': np.float64(0.41), 'White_Female': np.float64(0.36), 'White_Male': np.float64(0.82)}, 'status': 'success', 'total_time': 1.2786200046539307, 'fit_time': np.float64(0.13066630363464354), 'score_time': np.float64(0.009416484832763672), 'absolute_time': 1746727750.7831125, 'flatten_equalized_odds_ratio': '0.22_0.17_0.26_0.26_0.2', 'flatten_balanced_accuracy': '0.75_0.75_0.75_0.76_0.75'}
9
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('gini'), 'max_depth': 5, 'max_features': 1, 'max_leaf_nodes': 4, 'min_samples_split': 2, 'n_estimators': np.int64(75)}, 'features': {'type': np.str_('SelectKBest'), 'k': 9}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 7}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_features_rebalancing_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.47444975535663064), 'balanced_accuracy': np.float64(0.5180325833306757), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.92), 'Asian-Pac-Islander_Male': np.float64(0.73), 'Black_Female': np.float64(0.65), 'Black_Male': np.float64(0.51), 'White_Female': np.float64(0.69), 'White_Male': np.float64(0.62)}, 'status': 'success', 'total_time': 213.7750654220581, 'fit_time': np.float64(41.24923529624939), 'score_time': np.float64(0.04686250686645508), 'absolute_time': 1746727964.6187975, 'flatten_equalized_odds_ratio': '0.65_0.36_0.73_0.35_0.28', 'flatten_balanced_accuracy': '0.53_0.54_0.52_0.51_0.5'}
10
success
{'classification': {'type': np.str_('KNeighborsClassifier'), 'metric': np.str_('minkowski'), 'n_neighbors': 16, 'weights': np.str_('distance')}, 'features': {'type': np.str_('SelectKBest'), 'k': 6}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'normalization': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('normalization_mitigation_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.09982312091238661), 'balanced_accuracy': np.float64(0.656348551170668), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.87), 'Asian-Pac-Islander_Male': np.float64(0.95), 'Black_Female': np.float64(0.31), 'Black_Male': np.float64(0.5), 'White_Female': np.float64(0.1), 'White_Male': np.float64(0.13)}, 'status': 'success', 'total_time': 4.21085786819458, 'fit_time': np.float64(0.2885936737060547), 'score_time': np.float64(0.22075085639953612), 'absolute_time': 1746727968.9368029, 'flatten_equalized_odds_ratio': '0.08_0.09_0.13_0.11_0.09', 'flatten_balanced_accuracy': '0.65_0.66_0.65_0.67_0.66'}
11
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('entropy'), 'max_depth': 1, 'max_features': 1, 'max_leaf_nodes': 5, 'min_samples_split': 6, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 5}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 1}, 'prototype': np.str_('mitigation_features_normalization_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.5348416456810813), 'balanced_accuracy': np.float64(0.5098679490850418), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.7), 'Asian-Pac-Islander_Male': np.float64(0.77), 'Black_Female': np.float64(0.85), 'Black_Male': np.float64(0.65), 'White_Female': np.float64(0.83), 'White_Male': np.float64(0.8)}, 'status': 'success', 'total_time': 512.8056609630585, 'fit_time': np.float64(78.68109312057496), 'score_time': np.float64(0.04201173782348633), 'absolute_time': 1746728481.8100197, 'flatten_equalized_odds_ratio': '0.59_0.42_0.74_0.29_0.64', 'flatten_balanced_accuracy': '0.52_0.51_0.51_0.51_0.5'}
12
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.False_, 'criterion': np.str_('gini'), 'max_depth': 4, 'max_features': 1, 'max_leaf_nodes': 4, 'min_samples_split': 4, 'n_estimators': np.int64(100)}, 'features': {'type': np.str_('SelectKBest'), 'k': 8}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(100), 'reconstruct_weight': np.float64(2.0)}, 'normalization': {'type': np.str_('RobustScaler'), 'with_centering': np.False_, 'with_scaling': np.False_}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'prototype': np.str_('normalization_rebalancing_mitigation_features_classification')}
{'equalized_odds_ratio': np.float64(0.5762166059542871), 'balanced_accuracy': np.float64(0.5116103903014559), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.81), 'Asian-Pac-Islander_Male': np.float64(0.89), 'Black_Female': np.float64(0.82), 'Black_Male': np.float64(0.59), 'White_Female': np.float64(0.86), 'White_Male': np.float64(0.81)}, 'status': 'success', 'total_time': 719.7581253051758, 'fit_time': np.float64(109.77547450065613), 'score_time': np.float64(0.060457801818847655), 'absolute_time': 1746729201.6374156, 'flatten_equalized_odds_ratio': '0.38_0.47_0.74_0.76_0.53', 'flatten_balanced_accuracy': '0.52_0.51_0.51_0.5_0.51'}
13
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 2, 'max_features': 1, 'max_leaf_nodes': 3, 'min_samples_split': 4, 'n_estimators': np.int64(25)}, 'features': {'type': np.str_('SelectKBest'), 'k': 10}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(0.1), 'n_prototypes': np.int64(50), 'reconstruct_weight': np.float64(0.1)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'normalization': {'type': np.str_('PowerTransformer')}, 'prototype': np.str_('mitigation_normalization_features_rebalancing_classification')}
{'equalized_odds_ratio': np.float64(0.46628211582424905), 'balanced_accuracy': np.float64(0.5093995653517882), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.69), 'Asian-Pac-Islander_Male': np.float64(0.67), 'Black_Female': np.float64(0.89), 'Black_Male': np.float64(0.64), 'White_Female': np.float64(0.84), 'White_Male': np.float64(0.81)}, 'status': 'success', 'total_time': 495.32588148117065, 'fit_time': np.float64(62.10748391151428), 'score_time': np.float64(0.03571333885192871), 'absolute_time': 1746729697.0331502, 'flatten_equalized_odds_ratio': '0.38_0.46_0.63_0.25_0.61', 'flatten_balanced_accuracy': '0.52_0.51_0.5_0.51_0.5'}
14
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 1}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.2371836587939749), 'balanced_accuracy': np.float64(0.5222043245658103), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.65), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.67), 'Black_Male': np.float64(0.91), 'White_Female': np.float64(0.24), 'White_Male': np.float64(0.57)}, 'status': 'success', 'total_time': 17.473658323287964, 'fit_time': np.float64(3.150828409194946), 'score_time': np.float64(0.11408228874206543), 'absolute_time': 1746729715.3481758, 'flatten_equalized_odds_ratio': '0.2_0.27_0.24_0.21_0.26', 'flatten_balanced_accuracy': '0.52_0.52_0.52_0.52_0.53'}
15
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(1), 'n_neurons': np.int64(25), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 4}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 6}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.041186693207285976), 'balanced_accuracy': np.float64(0.638194507017389), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.57), 'Asian-Pac-Islander_Male': np.float64(0.65), 'Black_Female': np.float64(0.63), 'Black_Male': np.float64(0.3), 'White_Female': np.float64(0.04), 'White_Male': np.float64(1.0)}, 'status': 'success', 'total_time': 199.50813055038452, 'fit_time': np.float64(39.77765288352966), 'score_time': np.float64(0.02342085838317871), 'absolute_time': 1746729914.9265058, 'flatten_equalized_odds_ratio': '0.01_0.03_0.04_0.1_0.04', 'flatten_balanced_accuracy': '0.64_0.64_0.65_0.63_0.63'}
16
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('logistic'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('constant'), 'n_hidden_layers': np.int64(20), 'n_neurons': np.int64(10), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('SelectKBest'), 'k': 3}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.False_}, 'prototype': np.str_('features_normalization_rebalancing_mitigation_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.0504201680672269), 'balanced_accuracy': np.float64(0.7010402978055661), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.12), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.05), 'Black_Male': np.float64(0.25), 'White_Female': np.float64(0.11), 'White_Male': np.float64(0.52)}, 'status': 'success', 'total_time': 159.8946533203125, 'fit_time': np.float64(31.503723239898683), 'score_time': np.float64(0.1871201515197754), 'absolute_time': 1746730074.8938036, 'flatten_equalized_odds_ratio': '0.0_0.0_0.0_0.0_0.25', 'flatten_balanced_accuracy': '0.72_0.71_0.72_0.71_0.65'}
17
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.0001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(10), 'n_neurons': np.int64(5), 'solver': np.str_('lbfgs')}, 'features': {'type': np.str_('PCA'), 'n_components': 8}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': np.float64(0.040428630246688385), 'balanced_accuracy': np.float64(0.7196747927248947), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.43), 'Asian-Pac-Islander_Male': np.float64(1.0), 'Black_Female': np.float64(0.04), 'Black_Male': np.float64(0.27), 'White_Female': np.float64(0.07), 'White_Male': np.float64(0.48)}, 'status': 'success', 'total_time': 273.86693501472473, 'fit_time': np.float64(54.6048641204834), 'score_time': np.float64(0.016147804260253907), 'absolute_time': 1746730348.90082, 'flatten_equalized_odds_ratio': '0.06_0.01_0.03_0.07_0.03', 'flatten_balanced_accuracy': '0.72_0.72_0.73_0.71_0.72'}
The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(25), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

Something went wrong
Traceback (most recent call last):
  File "/home/automl/hamlet/objective.py", line 649, in objective
    raise Exception(f"The result for {config} was NaN")
Exception: The result for {'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(25), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}} was NaN

18
fail
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('tanh'), 'alpha': np.float64(1e-05), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(25), 'solver': np.str_('sgd')}, 'features': {'type': np.str_('PCA'), 'n_components': 2}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(1.0)}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification'), 'rebalancing': {'type': np.str_('FunctionTransformer')}}
{'equalized_odds_ratio': -inf, 'balanced_accuracy': np.float64(0.5), 'by_group': {'Asian-Pac-Islander_Female': -inf, 'Asian-Pac-Islander_Male': -inf, 'Black_Female': -inf, 'Black_Male': -inf, 'White_Female': -inf, 'White_Male': -inf}, 'status': 'fail', 'total_time': 51.396199464797974, 'fit_time': np.float64(9.91747989654541), 'score_time': np.float64(0.09323816299438477), 'absolute_time': 1746730400.392846, 'flatten_equalized_odds_ratio': 'nan_nan_nan_nan_nan', 'flatten_balanced_accuracy': '0.5_0.5_0.5_0.5_0.5'}
19
success
{'classification': {'type': np.str_('MLPClassifier'), 'activation': np.str_('relu'), 'alpha': np.float64(0.001), 'learning_rate': np.str_('adaptive'), 'n_hidden_layers': np.int64(5), 'n_neurons': np.int64(5), 'solver': np.str_('adam')}, 'features': {'type': np.str_('PCA'), 'n_components': 7}, 'mitigation': {'type': np.str_('CorrelationRemover'), 'alpha': np.float64(0.5)}, 'rebalancing': {'type': np.str_('SMOTE'), 'k_neighbors': 8}, 'normalization': {'type': np.str_('MinMaxScaler')}, 'prototype': np.str_('mitigation_rebalancing_features_normalization_classification')}
{'equalized_odds_ratio': np.float64(0.1261640312153157), 'balanced_accuracy': np.float64(0.7716715172923585), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.57), 'Asian-Pac-Islander_Male': np.float64(0.98), 'Black_Female': np.float64(0.13), 'Black_Male': np.float64(0.38), 'White_Female': np.float64(0.18), 'White_Male': np.float64(0.86)}, 'status': 'success', 'total_time': 160.90048551559448, 'fit_time': np.float64(32.04748096466064), 'score_time': np.float64(0.015021753311157227), 'absolute_time': 1746730561.362422, 'flatten_equalized_odds_ratio': '0.15_0.06_0.11_0.18_0.12', 'flatten_balanced_accuracy': '0.78_0.76_0.77_0.78_0.77'}
20
success
{'classification': {'type': np.str_('RandomForestClassifier'), 'bootstrap': np.True_, 'criterion': np.str_('entropy'), 'max_depth': 5, 'max_features': 4, 'max_leaf_nodes': 5, 'min_samples_split': 6, 'n_estimators': np.int64(50)}, 'mitigation': {'type': np.str_('LFR_wrapper'), 'fairness_weight': np.float64(1.0), 'n_prototypes': np.int64(10), 'reconstruct_weight': np.float64(1.0)}, 'normalization': {'type': np.str_('StandardScaler'), 'with_mean': np.False_, 'with_std': np.True_}, 'rebalancing': {'type': np.str_('NearMiss'), 'n_neighbors': 2}, 'features': {'type': np.str_('FunctionTransformer')}, 'prototype': np.str_('rebalancing_mitigation_normalization_features_classification')}
{'equalized_odds_ratio': np.float64(0.5356949362013037), 'balanced_accuracy': np.float64(0.489165282172881), 'by_group': {'Asian-Pac-Islander_Female': np.float64(0.66), 'Asian-Pac-Islander_Male': np.float64(0.71), 'Black_Female': np.float64(0.64), 'Black_Male': np.float64(0.86), 'White_Female': np.float64(0.62), 'White_Male': np.float64(0.66)}, 'status': 'success', 'total_time': 235.92629289627075, 'fit_time': np.float64(47.01320219039917), 'score_time': np.float64(0.03925514221191406), 'absolute_time': 1746730797.362138, 'flatten_equalized_odds_ratio': '0.49_0.48_0.24_0.99_0.49', 'flatten_balanced_accuracy': '0.47_0.49_0.49_0.5_0.49'}
AutoML: optimization done.
AutoML: miner done.
AutoML: export done.
Here is the standard output/error of the command:

Here is the standard output/error of the command:

Here is the standard output/error of the command:

hamlet_967928935
AutoML execution ended
